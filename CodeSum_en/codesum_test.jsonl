{"in":"view.substr(view.line(view.sel()[0]))","out":"Get current line in Sublime Text 3 plugin"}
{"in":"def compat5(L1, L2):<nl><tab>z = zip(L1, L2)<nl><tab>return not any(j1<k1 and j2>k2 for j1,j2 in z for k1,k2 in z)","out":"Checking compatible total orders given by a Python list"}
{"in":"BlogPost.objects.filter(q1 | q2).annotate(blog_times=Count('id')).order_by('blog_times')","out":"Sort Django query result by number of matches"}
{"in":"import feedparser<nl>d = feedparser.parse('http:\/\/www.reddit.com\/r\/Python\/.rss')<nl>for entry in d.entries:<nl>  date = entry.published_parsed<nl>  if date.tm_year == 2015 and date.tm_mon == 4 and date.tm_mday >= 15 and date.tm_mday <= 16:<nl><tab>print entry.title","out":"Parse entries that is within specified date using feedparser"}
{"in":"placeholders = []<nl>for plugin in project.projectplugin_set.all():<nl><tab>placeholders.append(plugin.placeholder_id)<nl>NewsEntry.objects.filter(content__in=placeholders).distinct()","out":"django-cms placeholder outside cms - how to get related model using the placeholder from the one model that is connected?"}
{"in":"from pygithub3 import Github<nl><nl>username = raw_input(\"Please enter a Github username: \")<nl>password = raw_input(\"Please enter the account password: \")<nl><nl>gh = Github(login=username, password = password)<nl><nl>get_user = gh.users.get()<nl><nl>user_repos = gh.repos.list().all()<nl><nl>for repo in user_repos:<nl><tab>print repo.language","out":"Getting repository information using pygithub3 for Python"}
{"in":"from random import sample<nl><nl>set_a = set(sample(range(0, 50), 10))<nl>set_b = set(sample(range(0, 50), 10))<nl><nl>print set_a.intersection(set_b) # [3, 4]<nl>print set_a & set_b # sugar for the same thing","out":"Creating two lists and compare the matching"}
{"in":"import turtle as t<nl>polygon = [(0,0), (0,100), (100,0), (100,100)]<nl>t.goto(0,0)<nl>fp = None<nl>for p in polygon:<nl>  t.goto(p)<nl>  if not fp: fp=p<nl>t.goto(fp)<nl>t.up()<nl>t.goto(90,90)<nl>t.write(\"90,90\")<nl>t.dot(10)<nl>t.goto(50,80)<nl>t.write(\"50,80\")<nl>t.dot(10)<nl>t.done()","out":"Point in convex polygon"}
{"in":"import matplotlib.pyplot as plt<nl>d=[2,5,10,20,30,40,50,70,100,200]<nl>t0=[0.04,0.08,0.15,0.4,0.6,0.8,1.0,1.4,2.1,5.5]<nl>fig, ax = plt.subplots()<nl>plt.plot(d,t0,marker='o')<nl>ax.set_xticks(d)<nl>ax.set_yticks(t0)<nl>plt.show()","out":"Python Matplotlib - Show Tick Marks associated to Plotted Points"}
{"in":"gen = (x for x in xyz if x not in a)<nl><nl>for x in gen:<nl><tab>print x","out":"Pythonic way to combine FOR loop and IF statement"}
{"in":"class Obj1(object):<nl><tab>def __init__(self):<nl><tab><tab>self.list_of_obj2 = []","out":"Trouble With Lists of Lists in Python"}
{"in":"sys.stdout.flush()","out":"Showing bits of a string in python with a timer"}
{"in":"a = np.array([1,2,3])<nl>b = np.array([4])<nl>c = np.hstack([a,b])","out":"How to extend a numpy.ndarray"}
{"in":"def make_form(exclude_user=True):<nl><tab>class Form(forms.ModelForm):<nl><tab><tab>class Meta:<nl><tab><tab><tab>model = Folder<tab><tab> <nl><tab><tab><tab>exclude = ['user'] if exclude_user else None<nl><tab>return Form<nl><nl>form_cls = make_form(request.user != folder.owner)","out":"Modifying a Django ModelForms fields"}
{"in":"PySys_SetPath(\".\"); <nl>mymod = PyImport_ImportModule(\"your_DLL_name or Py_module_name\");","out":"Loading c dll in python"}
{"in":"import subprocess<nl>subprocess.Popen(['C:\\\\Users\\\\Me\\Desktop\\\\externalfileIwanttorun.exe'])","out":"How to execute a path in Windows from Python program?"}
{"in":"coll = Elasticsearch()<nl>coll.update(index='stories-test',doc_type='news',id=hit.meta.id,<nl><tab><tab><tab><tab>body={\"doc\": {\"stanford\": 1, \"parsed_sents\": parsed }})","out":"How to update a document using elasticsearch-py?"}
{"in":"import re, ahocorasick,random,time<nl><nl># search N words from dict<nl>N=3<nl><nl>#file from http:\/\/norvig.com\/big.txt<nl>with open(\"big.txt\",\"r\") as f:<nl><tab>text = f.read()<nl><nl>words = set(re.findall('[a-z]+', text.lower())) <nl>search_words = random.sample([w for w in words],N)<nl><nl>A = ahocorasick.Automaton()<nl>for i,w in enumerate(search_words):<nl><tab>A.add_word(w, (i, w))<nl><nl>A.make_automaton()<nl>#test time for ahocorasic<nl>start = time.time()<nl>print(\"ah matches\",sum(1 for i in A.iter(text))) <nl>print(\"aho done in \", time.time() - start)<nl><nl><nl>exp = re.compile('|'.join(search_words))<nl>#test time for re<nl>start = time.time()<nl>m = exp.findall(text)<nl>print(\"re matches\",sum(1 for _ in m))<nl>print(\"re done in \",time.time()-start)","out":"Extract emoticons from a text"}
{"in":"INSTALLED_APPS = (<nl><tab>'django.contrib.auth',<nl><tab>'django.contrib.contenttypes',<nl><tab>'django.contrib.sessions',<nl><tab># 'django.contrib.sites',<nl><tab>'django.contrib.messages',<nl><tab>'django.contrib.staticfiles',<nl><tab>'purchaseapp', #this is my app<nl><tab># Uncomment the next line to enable the admin:<nl><tab>'django.contrib.admin',<nl><tab># Uncomment the next line to enable admin documentation:<nl><tab>'django.contrib.admindocs',<nl><tab># Use email as username https:\/\/github.com\/dabapps\/django-email-as-username<nl><tab> 'emailusernames',<nl>)","out":"Automatic loading of templates in django is not working for my app"}
{"in":"import csv<nl><nl>def append_record_to_csv(dic, csvfile):<nl><tab>with open(csvfile, 'rb') as f:<nl><tab><tab># discover order of field names in header row<nl><tab><tab>fieldnames = next(csv.reader(f))   <nl><tab>with open(csvfile, 'ab') as f:<nl><tab><tab># assumes that dic contains only fieldnames in csv file<nl><tab><tab>dwriter = csv.DictWriter(f, fieldnames=fieldnames) <nl><tab><tab>dwriter.writerow(dic)","out":"Add rows to a csvfile without creating an intermediate copy"}
{"in":"os.rename(os.path.join(mypath, f), os.path.join(mypath, frenamed))","out":"How do I rename a filename in python"}
{"in":"def reorder(s, word, delta):<nl>  words = s.split()<nl>  oldpos = words.index(word)<nl>  words.insert(oldpos+delta, words.pop(oldpos))<nl>  return ' '.join(words)<nl><nl>print reorder('The quick brown fox jumps over the lazy dog', 'quick', 2)","out":"How can I move a word within a string?"}
{"in":"from Tkinter import Tk, Button, RAISED<nl>from functools import partial<nl>root = Tk()<nl>buttons = [['1','2','3'],<nl><tab><tab>  ['4','5','6'],<nl><tab><tab>  ['7','8','9'],<nl><tab><tab>  ['*','0','#']]<nl><nl>def buttonClicked(buttonVal):<nl><tab>print(buttonVal)<nl><nl>for r in range(4):<nl><tab>for c in range(3):<nl><tab><tab>button = Button(root,<nl><tab><tab><tab><tab><tab><tab>relief = RAISED,<nl><tab><tab><tab><tab><tab><tab>padx = 10,<nl><tab><tab><tab><tab><tab><tab>text = buttons[r][c],<nl><tab><tab><tab><tab><tab><tab>command = partial(buttonClicked, buttons[r][c]))<nl><tab><tab>button.grid(row = r, column = c)<nl><nl>root.mainloop()","out":"Creating a Dialpad Using Tkinter"}
{"in":"# You might need to do this to get X as an ndarray (for example if X is a list)<nl>X = numpy.asarray(X)<nl><nl># Then you can simply do<nl>X[s, [0, 1, 2]]<nl><nl># Or more generally<nl>X_argmax = X[s, numpy.arange(X.shape[1])]","out":"Extracting numpy array slice from numpy.argmax results"}
{"in":"windowicon = window.render_icon(gtk.STOCK_DIALOG_AUTHENTICATION, gtk.ICON_SIZE_MENU)<nl>window.set_icon(windowicon)","out":"PyGTK set icon of window with stock image"}
{"in":"def get_int_input(prompt):<nl><tab>while True:<nl><tab><tab>s = raw_input(prompt)<nl><tab><tab>try:<nl><tab><tab><tab>i = int(s)<nl><tab><tab>except ValueError:<nl><tab><tab><tab>print \"Please enter an integer.\"<nl><tab><tab>else:<nl><tab><tab><tab>return i<nl><nl>def get_non_int_input(prompt):<nl><tab>while True:<nl><tab><tab>s = raw_input(prompt)<nl><tab><tab>try:<nl><tab><tab><tab>i = int(s)<nl><tab><tab>except ValueError:<nl><tab><tab><tab>return s<nl><tab><tab>else:<nl><tab><tab><tab>print \"Please don't enter an integer.\"","out":"Checking user input via raw_input method"}
{"in":"import boto<nl>access_key = boto.config.get_value('Credentials', 'aws_access_key_id')<nl>secret_key = boto.config.get_value('Credentials', 'aws_secret_access_key')","out":"Boto: Dynamically get aws_access_key_id and aws_secret_access_key in Python code from config?"}
{"in":"def print_table(table):<nl><tab>col_width = [max(len(x) for x in col) for col in zip(*table)]<nl><tab>for line in table:<nl><tab><tab>print \"| \" + \" | \".join(\"{:{}}\".format(x, col_width[i])<nl><tab><tab><tab><tab><tab><tab><tab><tab>for i, x in enumerate(line)) + \" |\"<nl><nl>table = [(str(x), str(f(x))) for x in mylist]<nl>print_table(table)","out":"Python format tabular output"}
{"in":"new_key.publickey().exportKey(\"DER\")","out":"python convert RSA key (in PEM format) to hex string"}
{"in":"def splitAppId(self, url):<nl><tab><tab>idMatch = re.search(r'\/id([^\/]+)\\?[^\/]*$', url)<nl><tab><tab>return idMatch.group(1)","out":"Python regex to match string"}
{"in":"xs = [p[0] for p in pp]<nl>ys = [p[1] for p in pp]","out":"Extract x and y values from a list"}
{"in":"import ConfigParser<nl><nl>class acc(ConfigParser.RawConfigParser, object):<nl><tab>def __init__(self, acc_file):<nl><tab><tab>super(acc, self).__init__()<nl><tab><tab>self.lol = 1<nl><tab><tab>print self.has_section(self.lol)<nl><nl>a=acc(1)","out":"Subclass of ConfigParser has no attribute _sections"}
{"in":"import imp<nl>hest  = imp.load_source(\"Name\", Path)","out":"Python compile a script within a GUI"}
{"in":"from haystack.management.commands import update_index<nl>update_index.Command().handle()","out":"Updating a Haystack search index with Django + Celery"}
{"in":"b = a.reshape(10,48)<nl>a = b.reshape(10,4,4,3)","out":"How to merge and split numpy array along the axis?"}
{"in":"def f():<nl><tab>s = ('123'<nl><tab><tab> '456')<nl><tab>return s","out":"Connector\/python slow insertion with tripled quotes"}
{"in":"if elem1.tag == 'Components':<nl><tab>temp = 0<nl><tab>for elem2 in list(elem1):<nl><tab><tab>if elem2.tag == 'Component':<nl><tab><tab><tab>for elem3 in list(elem2):<nl><tab><tab><tab><tab>if elem3.tag == 'ComponentID':<nl><tab><tab><tab><tab><tab>asset['CompID'+str(temp)] = elem3.text<nl><tab><tab><tab><tab>if elem3.tag == 'ComponentName':<nl><tab><tab><tab><tab><tab>asset['CompName'+str(temp)] = elem3.text<nl><tab><tab><tab><tab>if elem3.tag == 'Description':<nl><tab><tab><tab><tab><tab>asset['Description'+str(temp)] = elem3.text<nl><tab><tab><tab>temp+=1","out":"How to grab text from each xml tag when the tags have multiple duplications"}
{"in":"result = df[df.pct_change < -0.015].reindex(filtered_dates, method='bfill')","out":"pandas efficient way to get first filtered row for each DatetimeIndex entry"}
{"in":"lookup = 'the dog barked'<nl><nl>with open(filename) as myFile:<nl><tab>for num, line in enumerate(myFile, 1):<nl><tab><tab>if lookup in line:<nl><tab><tab><tab>print 'found at line:', num","out":"Get Line Number of certain phrase in file Python"}
{"in":"theModel.objects.filter(theString__in=[1,4,7])","out":"django filter : can filter with tuple?"}
{"in":"pen.isdown()","out":"Python -Switch state of turtle pen using single keypress"}
{"in":"positions = [<nl>  tcu.position_set.order_by('-id').values('latitude','longitude')[0]   <nl>  for tcu in request.user.tcu_set.prefetch_related('position_set')<nl>  ]","out":"filter json data from Django model"}
{"in":"lxml.html","out":"Generate a table of contents from HTML with Python"}
{"in":"all_events = [<nl><tab>200.0, 420.0, 560.0, 1100.0, 1900.0, 2700.0, 3400.0, 3900.0, 4234.2, 4800.0]<nl><nl>def get_events_by_hour(all_events):<nl><tab>return [<nl><tab><tab>len([x for x in all_events if int(x\/3600.0) == hour]) <nl><tab><tab>for hour in xrange(24)<nl><tab>]<nl><nl>print get_events_by_hour(all_events)","out":"How to resample \/ downsample an irregular timestamp list?"}
{"in":"ax2 = ax1.twinx()<nl>p1 = ax2.plot(ind, total_facilities, '--bo')<nl>p2 = ax1.bar(ind, pdb_facilities, width, color='gray',edgecolor = \"none\")<nl>plt.xlim([-1,len(total_facilities)])<nl>ax2.set_yscale('symlog')<nl>ax1.yaxis.tick_right()<nl>ax2.yaxis.tick_left()<nl>plt.show()","out":"Arrange line in front of bars in Matplotlib plot with double y axes"}
{"in":"d = { k:None for k in  ('a:b','c:d','e:f','d:c','b:a','f:e') }<nl>for k in d.keys():<nl><tab>if '{}:{}'.format(k[2],k[0]) in d:<nl><tab><tab>d.pop(k)","out":"python check for duplicates by reversing strings"}
{"in":"cand = [[0, 0] for _ in range(4)]","out":"Does generating a list with multiplication produce references"}
{"in":"num_evens = {} <nl>for combination in itertools.product(*li):<nl><tab>even_counter = len([ y for y in combination if y & 1 == 0 ])<nl><tab>num_evens.setdefault(even_counter,[]).append(combination)<nl><nl>import pprint<nl>pprint.pprint(num_evens)","out":"Create x lists in python dynamically"}
{"in":"def checkuser(request):<nl><tab>if request.method == \"POST\":<nl><tab><tab>conn = Connection('localhost', 27017)<nl><tab><tab>db = conn['user-data']<nl><tab><tab>userTable = db[\"logins\"]<nl><nl><tab><tab>userToCheck = request.form['usertocheck']<nl><nl><tab><tab>#search for user to check if it already exists<nl><tab><tab>doesExist = str(userTable.find_one({\"username\": userToCheck}))<nl><tab><tab>conn.close()<nl><nl><tab><tab>if doesExist == \"None\":<nl><tab><tab><tab>return \"Username is available\"<nl><tab><tab>elif doesExist.find(\"ObjectId\") != -1:<nl><tab><tab><tab>return \"Username already taken.\"<nl><tab><tab>else:<nl><tab><tab><tab>return \"Error\"<nl><nl><nl>@app.route('\/register\/checkuser', methods=['POST'])<nl>def func():<nl><tab>return checkUser(request)","out":"Exposing reusable functions to deal with HTTP POST methods"}
{"in":"world.browser.find_by_id(field).fill(value)","out":"Django with lettuce and splinter, opens the browser but doesn't show anything"}
{"in":"with open(\"c:\/achip.txt\", \"rU\") as f:<nl>  columns = f.readline().strip().split()<nl>  sums = [0.0] * len(columns)<nl>  row_counts = [0] * len(columns)<nl><nl>  for line in f:<nl><tab>line = line.strip()<nl><tab>if not line:<nl><tab>  continue<nl><nl><tab>for col, v in enumerate(line.split()):<nl><tab>  if v != \"NA\":<nl><tab><tab>sums[col] += int(v)<nl><tab><tab>row_counts[col] += 1<nl><nl>with open(\"c:\/chipdone.txt\", \"w\") as out:<nl>  for name, sum, rows in zip(columns, sums, row_counts):<nl><tab>print >>out, name,<nl><tab>if rows == 0:<nl><tab>  print >>out, \"NA\"<nl><tab>else:<nl><tab>  print >>out, sum \/ rows","out":"Help with an if else loop in python"}
{"in":"AllocationSet(<nl><tab>Alloc( name=\"some name\", value=1.23 ),<nl><tab>Alloc( name=\"another name\", value=2.34 ),<nl><tab>Alloc( name=\"yet another name\", value=4.56 ),<nl>)","out":"Python method arguments with spaces"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl>delta_Array = np.array([0.01,0.02,0.03, 0.04, 0.05,<nl><tab><tab><tab><tab><tab><tab>0.06,0.07, 0.08, 0.09, 0.10])<nl>#Initialized to 0s. Actual values will be appended to matrix by function<nl>theta_Matrix = np.random.random() * np.random.rand(delta_Array.size, 8) <nl><nl>fig = plt.figure()<nl>p1 = plt.plot(delta_Array, theta_Matrix)<nl># make a legend for both plots<nl>leg = plt.legend(p1, '', loc=1)<nl><nl>plt.show()","out":"Plotting values in matrix corresponding to the index in an array with Matplotlib in Python"}
{"in":"class Gif(ndb.Model):<nl><tab>author = ndb.UserProperty()<nl><tab>link = ndb.StringProperty(indexed=False)<nl><tab># you store array of tag keys here you can also just make this<nl><tab># StringProperty(repeated=True)<nl><tab>tag = ndb.KeyProperty(repeated=True)<nl><nl><tab>@classmethod<nl><tab>def get_by_tag(cls, tag_name):<nl><tab><tab># a query to a repeated property works the same as if it was a single value<nl><tab><tab>return cls.query(cls.tag == ndb.Key(Tag, tag_name)).fetch()<nl><nl># we will put the tag_name as its key.id()<nl># you only really need this if you wanna keep records of your tags<nl># you can simply keep the tags as string too<nl>class Tag(ndb.Model):<nl><tab>gif_count = ndb.IntegerProperty(indexed=False)","out":"Searching a many to many database using google datastore"}
{"in":"def main():<nl><tab>intro()<nl><nl><tab>my_board = placeMyShips(emptyBoard())<nl><tab>my_hit_board = emptyBoard()<nl><tab>comp_board = placeCompShips(emptyBoard())<nl><tab>comp_hit_board = emptyBoard()<nl><nl><tab>myMoves(comp_board, my_hit_board)","out":"Making simple game of Battleship"}
{"in":"import sys, os<nl><nl>sys.path.append('\/Path\/To\/Django\/Projects\/')<nl>os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'<nl><nl>from django.core.serializers import serialize<nl>from myproject.myapp import models<nl><nl>model_names = [] # a list of the names of the models you want to export<nl><nl>for model_name in model_names:<nl><tab>cls = getattr(models, model_name)<nl><tab>filename = model_name.lower() + \".json\"<nl><tab>file = open(filename, \"w\")<nl><tab>file.write(serialize(\"json\", cls.objects.all()))","out":"saving data in Bulk using Django"}
{"in":"query = \"\"\"<nl><tab>INSERT INTO user_profiles <nl><tab><tab>(user_id, json_source, user_timestamp) <nl><tab>VALUES <nl><tab><tab>(%s, %s, %s)<nl>\"\"\"<nl>cur.execute(query, (data[0], data[1].encode('utf-8'), data[2]))","out":"Using split by tab in Python adds a character to text which raises error in MySQL"}
{"in":"# beginner<nl><nl>def fac(n):<nl><tab>f = 1<nl><tab>i = 1<nl><tab>while i <= n:<nl><tab><tab>f *= i<nl><tab><tab>i += 1<nl><tab>return f<nl><nl># advanced beginner<nl><nl>def fac(n):<nl><tab>return n * fac(n - 1) if n > 1 else 1<nl><nl># intermediate<nl><nl>def fac(n):<nl><tab>return reduce(lambda x, y: x * y, range(1, n + 1))<nl><nl># advanced intermediate<nl><nl>import operator<nl>def fac(n):<nl><tab>return reduce(operator.mul, xrange(1, n + 1))<nl><nl># professional<nl><nl>import math<nl>print math.factorial(5)<nl><nl># guru<nl><nl>import scipy.misc as sc<nl>print sc.factorial(5, exact=True)","out":"Factorial function in Python"}
{"in":"m = gurobipy.model()<nl>m.setParam('TimeLimit', 5*60)","out":"How to set a timeout for gurobi using python"}
{"in":"from legacy_module import *","out":"In python, how do you import all classes from another module without keeping the imported module's namespace?"}
{"in":"f = open('filename.ext', 'rb')<nl>f.seek(255) # skip the first 255 bytes<nl>rest = f.read() # read rest","out":"Remove number of bytes from beginning of file"}
{"in":"(moviesRDD<nl><tab>.join(ratingsRDD) # Join by key<nl><tab>.values() # Extract values<nl><tab>.map(lambda x: (x[1][0], x[0], x[1][1]))) # Reshape","out":"Spark two RDD join issue"}
{"in":"alldata = impdat.root.data<nl>datastruct = {}<nl>for names in impdat.rood.data.__members___:<nl><tab>datastruct[names] = eval('alldata.' + names + '[0][:]')","out":"Accessing Data from .mat (version 8.1) structure in Python"}
{"in":"import threading<nl>import subprocess<nl><nl>class RepeatingTimer(threading._Timer):<nl><tab>def run(self):<nl><tab><tab>while True:<nl><tab><tab><tab>self.finished.wait(self.interval)<nl><tab><tab><tab>if self.finished.is_set():<nl><tab><tab><tab><tab>return<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>self.function(*self.args, **self.kwargs)<nl><nl><nl>def status():<nl><tab>print \"I'm alive\"<nl>timer = RepeatingTimer(1.0, status)<nl>timer.daemon = True # Allows program to exit if only the thread is alive<nl>timer.start()<nl><nl>proc = subprocess.Popen([ '\/bin\/sleep', \"5\" ])<nl>proc.wait()<nl><nl>timer.cancel()","out":"showing progress while spawning and running subprocess"}
{"in":"import urllib, re<nl><nl>source = urllib.urlopen('http:\/\/www.cbssports.com\/nba\/draft\/mock-draft').read()<nl><nl>## every image name is an abbreviation composed by capital letters, so...<nl>for link in re.findall('http:\/\/sports.cbsimg.net\/images\/nba\/logos\/30x30\/[A-Z]*.png', source):<nl><tab>print link<nl><nl><nl><tab>## the code above just prints the link;<nl><tab>## if you want to actually download, set the flag below to True<nl><nl><tab>actually_download = False<nl><tab>if actually_download:<nl><tab><tab>filename = link.split('\/')[-1]<nl><tab><tab>urllib.urlretrieve(link, filename)","out":"Extract image links from the webpage using Python"}
{"in":"notify-osd","out":"can I make X-server to notify me only when cursor exactly where I need?"}
{"in":"for file, n in num.iteritems():<nl><tab>print file, n","out":"Python: counting specific words in file of corpus"}
{"in":"now  = time.strftime(\"%X\")<nl>peer = socket.getpeername()<nl>print(\"{} - {}\".format(now, peer))","out":"Python several variables\/functions resutl same line"}
{"in":"sendPacket('\\x5f\\x00\\x00\\x00\\x01\\x00\\x07\\x01\\xcc\\x00\\x00\\x00\\x1f\\x8b')","out":"Sending bytes via UDP packets without further conversion"}
{"in":"django.template.loader.get_template(template_name)","out":"How to check if a template exists in Django?"}
{"in":"#!\/usr\/bin\/env python<nl>from contextlib import closing<nl>from selenium.webdriver import Firefox # pip install selenium<nl><nl>url = \"http:\/\/example.com\"<nl><nl># use firefox to get page with javascript generated content<nl>with closing(Firefox()) as browser:<nl><tab>n = 1<nl><tab>while n < 10:<nl><tab><tab>browser.get(url) # load page<nl><tab><tab>link = browser.find_element_by_link_text(str(n))<nl><tab><tab>while link:<nl><tab><tab>   browser.get(link.get_attribute(\"href\")) # get individual 1,2,3,4 pages<nl><tab><tab>   #### save(browser.page_source)<nl><tab><tab>   browser.back() # return to page that has 1,2,3,next -like links<nl><tab><tab>   n += 1<nl><tab><tab>   link = browser.find_element_by_link_text(str(n))<nl><nl><tab><tab>link = browser.find_element_by_link_text(\"next\")<nl><tab><tab>if not link: break<nl><tab><tab>url = link.get_attribute(\"href\")","out":"Using python with selenium to scrape dynamic web pages"}
{"in":"data = [<nl><tab>{'name':'John', 'color':'red'},<nl><tab>{'name':'Bob', 'color':'green'},<nl><tab>{'name':'Tom', 'color':'blue'}<nl>]<nl>colors = ['blue', 'red', 'green']<nl>result = []<nl><nl>for c in colors:<nl><tab>result.extend([d for d in data if d['color'] == c])<nl><nl>print result","out":"Return a list of dictionaries that match the corresponding list of values in python"}
{"in":"self.showMaximized()","out":"How to make PyQt window state to maximised in pyqt"}
{"in":"if self.ammo and player_rect.colliderect(self.ammo.rect):<nl><tab><tab>self.ammo_amount += 50<nl><tab><tab>self.all_sprites_list.remove(self.ammo)<nl><tab><tab>self.ammo = None","out":"How to delete rects\/sprites with python and pygame"}
{"in":"bigrams = [word_list[i] + \" \" + wordlist[i+1] for i in range(len(wordlist)-1)]","out":"Count frequence, how to take two word each time?"}
{"in":"from pprint import pformat<nl><nl>def application(environ, start_response):<nl><tab># show the environment:<nl><tab>output = ['<pre>']<nl><tab>output.append(pformat(environ))<nl><tab>output.append('<\/pre>')<nl><nl><tab>#create a simple form:<nl><tab>output.append('<form method=\"post\">')<nl><tab>output.append('<input type=\"text\" name=\"test\">')<nl><tab>output.append('<input type=\"submit\">')<nl><tab>output.append('<\/form>')<nl><nl><tab>if environ['REQUEST_METHOD'] == 'POST':<nl><tab><tab># show form data as received by POST:<nl><tab><tab>output.append('<h1>FORM DATA<\/h1>')<nl><tab><tab>output.append(pformat(environ['wsgi.input'].read()))<nl><nl><tab># send results<nl><tab>output_len = sum(len(line) for line in output)<nl><tab>start_response('200 OK', [('Content-type', 'text\/html'),<nl><tab><tab><tab><tab><tab><tab><tab>  ('Content-Length', str(output_len))])<nl><tab>return output","out":"Python POST data using mod_wsgi"}
{"in":"ld = {} # basic dictionary<nl># now open & read file<nl>with open('linked_id.txt') as fin:<nl><tab>for ln in fin: # process each line in the file<nl><tab><tab>k, v = ln.split() # split each line eg. k = 'ID1', v = 'ID2'<nl><tab><tab># make a dictionary entry - setdefault puts the k(ey) in and<nl><tab><tab># in this case set the value to a list, append then adds to <nl><tab><tab># the list by k(ey)<nl><tab><tab>ld.setdefault(k, []).append(v) <nl><nl>unq = [] # start an empty list<nl>for k, v in ld.items(): # process the dictionary elements<nl><tab>v.append(k)  # make the value list include the key<nl><tab>ll = sorted(v)  # sort the new list<nl><tab>if not ll in unq: # see if its in the unq (unique) list<nl><tab><tab>unq.append(ll) # if not add it<nl><nl>print(unq)  # show the unique sets","out":"find all the linked IDs in a text file with each row has two IDs that are linked"}
{"in":"from operator import itemgetter<nl>from string import ascii_uppercase<nl><nl>data = [19, 14, 36]<nl><nl>labelled = zip(data, ascii_uppercase) # [(19, 'A'), (14, 'B'), (36, 'C')]<nl><nl>sorted_data = sorted(labelled, <nl><tab><tab><tab><tab><tab> key=itemgetter(0)) # [(14, 'B'), (19, 'A'), (36, 'C')]<nl><nl>labels = [pair[1] for pair in sorted_data] # ['B', 'A', 'C']","out":"assign names to elements of unknown size list in python"}
{"in":"import sqlite3<nl><nl>def dict_factory(cursor, row):<nl><tab>d = {}<nl><tab>for idx, col in enumerate(cursor.description):<nl><tab><tab>d[col[0]] = row[idx]<nl><tab>return d<nl><nl>con = sqlite3.connect(\":memory:\")<nl>con.row_factory = dict_factory<nl>cur = con.cursor()<nl>cur.execute(\"select 1 as a\")<nl>print cur.fetchone()[\"a\"]","out":"How can I get dict from sqlite query?"}
{"in":"count = input(\"How many numbers do you want to input?\")<nl>numbers = [float(num) for num in raw_input(\"Input numbers, please...\").split()]<nl>if count != len(numbers):<nl>  raise SystemExit(\"You lied to me!\")","out":"i want to open n number of integer in one row in Python"}
{"in":"for pm in root.Document.Placemark:<nl><tab>point = [p for p in pm.getchildren() if p.tag.endswith('Point')]<nl><tab>if point:<nl><tab><tab>coords = point[0].coordinates.text<nl><tab>else:<nl><tab><tab>poly = [p for p in pm.getchildren() if p.tag.endswith('Polygon')]<nl><tab><tab>if poly:<nl><tab><tab><tab>coords = poly[0].outerBoundaryIs.LinearRing.coordinates.text<nl><tab>print pm.name, coords","out":"KML parsing child elements using django"}
{"in":"import matplotlib.pyplot as plt<nl>a = '\\\\frac{a}{b}'  #notice escaped slash<nl>plt.plot()<nl>plt.text(0.5, 0.5,'$%s$'%a)<nl>plt.show()","out":"Print latex-formula with python"}
{"in":"import os<nl>os.environ[\"DJANGO_SETTINGS_MODULE\"] = \"mysite.settings\"<nl><nl>from mysite.polls.models import Poll, Choice","out":"What do I need to import to gain access to my models?"}
{"in":"urlFile = open(\"mailList.txt\", \"r+\")<nl>mailList = [i.strip() for i in urlFile.readlines()]","out":"Send Email to multiple recipients from .txt file with Python smtplib"}
{"in":"def custom_sort(population):<nl><tab>pop_dict = { ind.ID: ind for ind in population }<nl><nl><tab>start = []<nl><tab>nones = []<nl><tab>end = []<nl><tab>for ind in population:<nl><tab><tab>if ind.mate is None:<nl><tab><tab><tab>nones.append(ind)<nl><tab><tab>elif pop_dict[ind.mate] not in start:<nl><tab><tab><tab>start.insert(0, ind)<nl><tab><tab><tab>end.append(pop_dict[ind.mate])<nl><tab>return start + nones + end","out":"Python: Sort a list according to two attributes"}
{"in":"import math<nl>from decimal import Decimal<nl><nl>def s(x):<nl><tab>return (Decimal(0.298**k))\/ Decimal(math.factorial(k))<nl><nl>prevSK = 0<nl>sum=0<nl>valueList = {}<nl>for k in (range(0,501)):<nl><nl><tab>try:<nl><tab><tab>a = (round(s(k),5))<nl><tab><tab>r = (round(s(k)\/prevSK,5))<nl><tab><tab>print \"a{n}: {a}\".format(n=k, a=a)<nl><tab><tab>print \"r{n}: {r}\".format(n=k, r=r)<nl><tab><tab>valueList[k] = {\"a{n}\".format(n=k) : a, \"r{n}\".format(n=k) : r}<nl><tab><tab>prevSK = s(k)<nl><tab><tab>summa = sum=sum+a<nl><tab>except Exception, e:<nl><tab><tab>print e<nl><tab><tab>prevSK = (Decimal(s(k),))<nl><nl><tab>continue<nl><nl>print \"The sum is:\", summa","out":"labeling, numbering loop elements + summing them up"}
{"in":"s = \"534349511\"<nl>print ' '.join([s[i:i+2] for i in range(0,len(s),2)])","out":"Format a string with a space between every two digits"}
{"in":"DAB_FIELD_RENDERER = 'django_admin_bootstrapped.renderers.BootstrapFieldRenderer'","out":"django-admin-bootstrapped messing with DateField, TimeField and PointField"}
{"in":"sortedfreqlist = sorted(freqlist, key=lambda item: int(item[1]), reverse=True)","out":"Python sorting a file by frequency"}
{"in":"python-docx","out":"add content to existing docx with python-docx"}
{"in":"tests=(<nl><tab>('fck','fc kopenhavn',True),<nl><tab>('fco','fc kopenhavn',False),<nl><tab>('irl','in real life',True),<nl><tab>('irnl','in real life',False),<tab><nl><tab>('ifk','ifk gotebork',True),   <nl><tab>('ifko','ifk gotebork',False),<tab><nl><tab>('aik','allmanna idrottskluben',True),<nl><tab>('aid','allmanna idrottskluben',True),<nl><tab>('manu','manchester united',True), <nl><tab>('fz','faz zoo',True), <nl><tab>('fzz','faz zoo',True),<nl><tab>('fzzz','faz zoo',False),<tab><nl><tab>)<nl><nl>def is_abbrev(abbrev, text):<nl><tab>abbrev=abbrev.lower()<nl><tab>text=text.lower()<nl><tab>words=text.split()<nl><tab>if not abbrev:<nl><tab><tab>return True<nl><tab>if abbrev and not text:<nl><tab><tab>return False<nl><tab>if abbrev[0]!=text[0]:<nl><tab><tab>return False<nl><tab>else:<nl><tab><tab>return (is_abbrev(abbrev[1:],' '.join(words[1:])) or<nl><tab><tab><tab><tab>any(is_abbrev(abbrev[1:],text[i+1:])<nl><tab><tab><tab><tab><tab>for i in range(len(words[0]))))<nl><nl>for abbrev,text,answer in tests:<nl><tab>result=is_abbrev(abbrev,text)<nl><tab>print(abbrev,text,result,answer)<nl><tab>assert result==answer","out":"Check if a string is a possible abbrevation for a name"}
{"in":"print '<a href=\"%(url)s\">%(url)s<\/a>' % {'url': my_url}","out":"String formatting named parameters?"}
{"in":"mapper.connect('st','\/st\/submit_data',controller=storm, action='submit_data')","out":"Routing Cherrypy web apps(fail to road resource)"}
{"in":"class NonscientificDecimalField(DecimalField):<nl><tab>\"\"\" Prevents values from being displayed with E notation, with trailing 0's<nl><tab><tab>after the decimal place  truncated. (This causes precision to be lost in<nl><tab><tab>many cases, but is more user friendly and consistent for non-scientist<nl><tab><tab>users)<nl><tab>\"\"\"<nl><tab>def value_from_object(self, obj):<nl><tab><tab>def remove_exponent(val):<nl><tab><tab><tab>\"\"\"Remove exponent and trailing zeros.<nl><tab><tab><tab>   >>> remove_exponent(Decimal('5E+3'))<nl><tab><tab><tab>   Decimal('5000')<nl><tab><tab><tab>\"\"\"<nl><tab><tab><tab>context = decimal.Context(prec=self.max_digits)<nl><tab><tab><tab>return val.quantize(decimal.Decimal(1), context=context) if val == val.to_integral() else val.normalize(context)<nl><nl><tab><tab>val = super(NonscientificDecimalField, self).value_from_object(obj)<nl><tab><tab>if isinstance(val, decimal.Decimal):<nl><tab><tab><tab>return remove_exponent(val)","out":"A trailing zero appears inconsistently on my DecimalField"}
{"in":"import os<nl><nl>def upload(file_name_number,files_dict): <nl><nl><tab>filename = int(raw_input(file_name_number))<nl><tab>#as the key to dictionary is integer<nl><tab>if filename in files_dict:<nl><tab><tab># upload code here<nl><tab><tab>print \"dummy\"<nl><tab>else:<nl><tab><tab>print \"The selected number does not exist in current directory.\"<nl><tab><tab>upload(file_name_number,files_dict)#why are you calling this again<nl><tab>return filename<nl><nl>def create():<nl><tab>files_dict = showListAndSaveDict()<nl><tab>firstFile  = upload(\"Select the number of first file:\",files_dict)<nl><tab>secondFile = upload(\"Select the number of second file:\",files_dict)<nl><tab>thirdFile  = upload(\"Select the number of third file:\",files_dict)<nl><nl>def showListAndSaveDict():<nl><tab>files = [f for f in os.listdir('.') if os.path.isfile(f)]<nl><tab>files_dict = {}<nl><tab>i=0<nl><tab>for f in files:<nl><tab><tab>i = i+1<nl><tab><tab>print (str(i) + \" - \" + f)  <nl><tab><tab>files_dict[i] = f<nl><tab>return files_dict<nl><nl>create()","out":"upload files using a number associated with each file instead of the name of the file"}
{"in":"year=['51-52', '53', '55' , '56' , '58', '59', '60', '61']<nl>photo=[[70,72,73], [64,65,68],[79,80,81,82],[74,77,78],[60,61,62],[84,85,87],[57,58,59],[53,54,55,56]]<nl><nl>for i in range(len(year)):<nl>   for j in range(len(photo[i])):<nl><tab>   print '<img src=\\\"http:\/\/files.getdropbox.com\/u\/100000\/Akuja\/%s\/P10104%s.JPG>' % (year[i], photo[i][j])","out":"Unable to put a variable in Python's print"}
{"in":"pyaudio.paInt16","out":"Get amplitude range from input device using PortAudio \/ PyAudio"}
{"in":"import logging<nl>class RequestsConnectionFilter(logging.Filter):<nl><tab>def filter(self, record):<nl><tab><tab>return False<nl>logging.getLogger('newrelic.lib.requests.packages.urllib3.connectionpool').addFilter(RequestsConnectionFilter())","out":"Stop New Relic \/ Celery From Polluting Logs on Heroku"}
{"in":"import warnings<nl>from sqlalchemy import exc as sa_exc<nl><nl>with warnings.catch_warnings():<nl><tab>warnings.simplefilter(\"ignore\", category=sa_exc.SAWarning)<nl><tab># code here...","out":"Turn off a warning in sqlalchemy"}
{"in":"import cx_Oracle<nl><nl>dsn_tns = cx_Oracle.makedsn('my_ip_address_server_next_port', 0000, 'sid')<nl>db = cx_Oracle.connect('user', 'password', dsn_tns)<nl>curs = db.cursor()<nl>curs.callproc(\"dbms_output.enable\")<nl><nl>curs.callproc('where.my_package.ger_result', ['something',])<nl><nl>statusVar = curs.var(cx_Oracle.NUMBER)<nl>lineVar = curs.var(cx_Oracle.STRING)<nl>while True:<nl>  curs.callproc(\"dbms_output.get_line\", (lineVar, statusVar))<nl>  if statusVar.getvalue() != 0:<nl><tab>break<nl>  print lineVar.getvalue()","out":"How I can make same results on cx_Oracle and Sql * Plus?"}
{"in":"#!\/usr\/bin\/python<nl># -*- coding: utf-8 -*-<nl><nl><nl>from ctypes import windll, Structure, c_long, byref #windows only<nl><nl><nl>class RECT(Structure):<nl><tab>_fields_ = [<nl><tab>('left',<tab>c_long),<nl><tab>('top',<tab> c_long),<nl><tab>('right',   c_long),<nl><tab>('bottom',  c_long),<nl><tab>]<nl><tab>def width(self):  return self.right  - self.left<nl><tab>def height(self): return self.bottom - self.top<nl><nl><nl>def onTop(window):<nl><tab>SetWindowPos = windll.user32.SetWindowPos<nl><tab>GetWindowRect = windll.user32.GetWindowRect<nl><tab>rc = RECT()<nl><tab>GetWindowRect(window, byref(rc))<nl><tab>SetWindowPos(window, -1, rc.left, rc.top, 0, 0, 0x0001)","out":"Pygame set window on top without changing it's position"}
{"in":"def export(modeladmin, request, queryset):<nl><tab>\"\"\"<nl><tab>not sure if this will work<nl><tab>\"\"\"<nl><tab>request.session['export_querset'] = queryset<nl><nl><tab>\"\"\"<nl><tab>if above does not work then just set this and check for it in view and u can make the queryset again if this is set <nl><tab>\"\"\"<nl><tab>request.session['export_querset'] = 1<nl><tab>return HttpResponseRedirect(\"\/export\/\")","out":"Django: Passing a queryset to another view with HttpResponseRedirect"}
{"in":"chargeTypeName = models.CharField(max_length=6, blank=True)","out":"Python Django rest framework Post Get Serializer"}
{"in":"logger = logging.getLogger('my-logger')<nl>logger.propagate = False<nl># now if you use logger it will not log to console.","out":"How to I disable and re-enable console logging in Python?"}
{"in":"subprocess.Popen(['ping www.google.com > \/dev\/null &'], shell=True, preexec_fn=os.setsid)","out":"create background process with Python's Popen"}
{"in":"re_str = r\"\\?engine=(?P<eng>[\\w-]*?)&query=(?P<query>[=\\d\\+\\w-]*?)&subegine=(?P<sub>\\w*)\\s\"<nl>reg = re.compile(re_str)<nl>for line in file:<nl>  m = reg.search(line)<nl>  print \"Engine\", m.group(\"eng\")<nl>  print \"Query\", m.group(\"query\")<nl>  print \"Sub\", m.group(\"sub\")","out":"Parse GET requests in Apache log by arguments"}
{"in":"items = ['Item'] * 6<nl>for i, item in enumerate(items, start=1):<nl><tab>number = (i + 1) \/ 2<nl><tab>print('{} {}'.format(number, item))","out":"Print Successive Numbers That Appear Twice?"}
{"in":"service.start()<nl>worker_1.start()<nl>worker_1.join()<nl>service.terminate()","out":"Run server and client in the same file - python"}
{"in":"from django.db.models import Count<nl>Article.objects.annotate(num_comments=Count('comment')).filter(num_comments__gt=10)","out":"How can I filter objects by how many objects reference them?"}
{"in":"ms.listSubscribe(<nl><tab>id=settings.MAILCHIMP_NEWSLETTER_LIST_ID,<nl><tab>email_address=self.user.email,<nl><tab>merge_vars={'FNAME': self.user.first_name,<nl><tab><tab>'LNAME': self.user.last_name,<nl><tab><tab>'GROUPINGS': [<nl><tab><tab><tab>{'id': 9917,<nl><tab><tab><tab>'groups': 'food service operator',},]},<nl><tab>double_optin=False,<nl><tab>update_existing=True,<nl>)","out":"Getting error from mailsnake when trying to set groupings"}
{"in":"contour(im, levels=[245], colors='black', origin='image')","out":"Extract external contour or silhouette of image in Python"}
{"in":"import sys<nl>import selenium<nl>from selenium import webdriver<nl>from selenium.webdriver.common.keys import Keys   <nl><nl>driver = webdriver.Firefox()<nl>driver.get(\"http:\/\/website.aspx\")<tab><nl><nl>elem = driver.find_element_by_id(\"ctl00_ctl00\")<nl>elem.send_keys( '15' )<nl>elem.send_keys( Keys.RETURN )","out":"How to scrape a web-site filling out forms and 'clicking' on links with R?"}
{"in":"cygpath -w","out":"how to switch from posix to windows with cygwin"}
{"in":"class StringError(Exception):<nl><tab>NO_E = 0<nl><tab>HAS_Z = 1<nl><nl>def string_checker(string):<nl><tab>if 'e' not in string:<nl><tab><tab>raise StringError('e not found in string', StringError.NO_E)<nl><tab>if 'z' in string:<nl><tab><tab>raise StringError('z not allowed in string', StringError.HAS_Z)<nl><tab>return string.upper()<nl><nl>s = 'testing'<nl>try:<nl><tab>ret = string_checker(s)<nl><tab>print 'String was okay:', ret<nl>except StringError as e:<nl><tab>print 'String not okay with an error code of', e.args[1]","out":"Tuple with missing value"}
{"in":"#Important assumption here... wordlist is sorted<nl><nl>base=wordlist[0]<tab><tab><tab><tab><tab>  #consider the first word in the list<nl>for word in wordlist:<tab><tab><tab><tab> #loop through the entire list checking if<nl><tab>if not word.startswith(base):<tab> # the word we're considering starts with the base<nl><tab><tab>print base<tab><tab><tab><tab><tab>#If not... we have a new base, print the current<nl><tab><tab>base=word<tab><tab><tab><tab><tab> #  one and move to this new one<nl><tab>#else word starts with base<nl><tab><tab>#don't output word, and go on to the next item in the list<nl>print base<tab><tab><tab><tab><tab><tab><tab>#finish by printing the last base","out":"Python- Remove all words that contain other words in a list"}
{"in":"with open('text.txt') as text:<nl><tab>with open('unique.txt', 'w') as output:<nl><tab><tab>seen = set()<nl><tab><tab>for line in text:<nl><tab><tab><tab>line_hash = hash(line)<nl><tab><tab><tab>if line_hash not in seen:<nl><tab><tab><tab><tab>output.write(line)<nl><tab><tab><tab><tab>seen.add(line_hash)","out":"how to unique large text file content"}
{"in":"import numpy as np<nl>import ImageGrab<nl>import cv2<nl><nl>while(True):<nl><tab>printscreen_pil =  ImageGrab.grab()<nl><tab>printscreen_numpy =   np.array(printscreen_pil.getdata(),dtype=uint8)\\<nl><tab>.reshape((printscreen_pil.size[1],printscreen_pil.size[0],3)) <nl><tab>cv2.imshow('window',printscreen_numpy)<nl><tab>if cv2.waitKey(25) & 0xFF == ord('q'):<nl><tab><tab>cv2.destroyAllWindows()<nl><tab><tab>break","out":"Screen Capture with OpenCV and Python-2.7"}
{"in":"import webapp2<nl>from google.appengine.ext import ndb<nl><nl>def parent_key():<nl><tab>return ndb.Key('My','Entities')<nl><nl>class SmallModel(ndb.Model):<nl><tab>n = ndb.IntegerProperty(required=True)<nl><tab>stamp = ndb.DateTimeProperty(auto_now_add=True)<nl><nl>class MainHandler(webapp2.RequestHandler):<nl><tab>def get(self):<nl><tab><tab>self.response.write('Hello world. Simple form. <form method=\"post\"><input name=\"n\" type=\"number\"><input type=\"submit\"><\/form>')<nl><tab>def post(self):<nl><tab><tab>entity = SmallModel(parent=parent_key(),n=int(self.request.get('n')))<nl><tab><tab>entity.put()<nl><tab><tab>self.redirect('\/list')<nl><nl>class List(webapp2.RequestHandler):<nl><tab>def get(self):<nl><tab><tab>self.response.out.write(\"here's a list:\")<nl><tab><tab>entities = SmallModel.query(ancestor=parent_key())<nl><tab><tab>for entity in entities.iter():<nl><tab><tab><tab>self.response.out.write(\" %s \" % entity.n)<nl><tab><tab>self.response.out.write(\"...end list.\")<nl><nl>app = webapp2.WSGIApplication([<nl><tab>('\/', MainHandler),<nl><tab>('\/list',List)<nl>], debug=True)","out":"App Engine Dev Server datastore not updating fast enough?"}
{"in":"import subprocess<nl>p = subprocess.Popen(\"some_long_command\",stdout=subprocess.PIPE)<nl>for line in iter(p.stdout.readline, \"\"):<nl><tab>print line","out":"Need to read from long running os command with Python 2.4"}
{"in":"shell=True","out":"Python subprocess issue on Windows"}
{"in":"import sys<nl><nl>for line in fileinput.input(file_full_path, inplace=True):<nl><tab>newline, count = re.subn(search_str, replace_str, line.rstrip())<nl><tab>sys.stderr.write(\"your message here\")<nl><tab>print newline","out":"Using fileinput (Python) for a search-and-replace while also sending messages to console"}
{"in":"time_waited = 0<nl>then = time.time()<nl>for p in processes:<nl><tab>if time_waited >= DURATION:<nl><tab><tab>p.join(0)<nl><tab><tab>p.terminate()<nl><tab>p.join(DURATION - time_waited)<nl><tab>time_waited = time.time() - then","out":"Join a group of python processes with a timeout"}
{"in":"import tkFileDialog<nl><nl>old_file = tkFileDialog.askopenfilename(filetypes=[('.csvfiles', '.csv')],<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>title='Old file selected first')","out":"Python tkinter change 'open' in the title bar"}
{"in":"import networkx as nx<nl><nl>G = nx.Graph()<nl>G.add_node(1,color='red')<nl>G.add_node(2,color='red')<nl>G.add_node(3,color='blue')<nl>G.add_node(4,color='blue')<nl><nl>G.add_edges_from([(1,2),(1,3),(3,4)])<nl><nl>for (u,v) in G.edges_iter():<nl><tab>if G.node[u]['color'] != G.node[v]['color']:<nl><tab><tab>print u,v","out":"finding edges in networkx that meet a certain criteria"}
{"in":"for k, i in enumerate(row):<nl><tab>print(str(k+1) + \".\" + \"\".join(i))","out":"Creating a numbered menu list from a database fetch - Python"}
{"in":"app.register_blueprint(imported_plugin.plugin_handler, url_prefix=imported_config.FOO)","out":"Add new \"plugin\" to Flask app in runtime"}
{"in":"os.walk(\"path\").next()[1]","out":"how to get the list of dirs from a path that is provided as input, in Python using os.walk"}
{"in":"url(r'^guideline\/(?P<id>\\d+)\/(?P<slug>[-\\w]+)\/$', perma_post, name=\"cv_perma\")","out":"How to add a string (title) at the end of the url with Django?"}
{"in":"list(the_iterator)","out":"Standard method for returning all elements generated by a generator or iterator"}
{"in":"import BeautifulSoup<nl>from BeautifulSoup import BeautifulSoup<nl><nl>soup = BeautifulSoup(totstring)<nl><nl>body = soup.find(\"body\")<nl><nl>bodytext = body.text","out":"xml parsing in python using ElementTree"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl>from mpl_toolkits.mplot3d import Axes3D<nl><nl><nl>data = np.array(data)<nl>length = data.shape[0]<nl>width = data.shape[1]<nl>x, y = np.meshgrid(np.arange(length), np.arange(width))<nl><nl>fig = plt.figure()<nl>ax = fig.add_subplot(1,1,1, projection='3d')<nl>ax.plot_surface(x, y, data)<nl>plt.show()","out":"Plot a 3d surface from a 'list of lists' using matplotlib"}
{"in":"team_member = Team.objects.get(id=team_member_id)<nl>if team_member.site.id == request.user.site_set.all().first().id:<nl>   print \"same site\"<nl>else:<nl>   print \"different site\"","out":"How to authenticate if a user \"owns\" a model instance"}
{"in":"import maya.cmds as mc<nl><nl>Xsl = (mc.ls (sl=1, sn=1))[0]<nl><nl>def toastFUNC (arg=0):<nl><tab>mc.animCurveEditor (curveEditor, e=1, lck=1)<nl><nl>mc.window(w=500)<nl>mc.paneLayout( configuration='vertical2', swp=1, ps=[2, 70, 0] )<tab><nl>mc.frameLayout(w=150, h=100, lv=0)<nl><nl>mc.outlinerEditor(mlc='modelList', slc='modelList', showReferenceNodes=0, showReferenceMembers=0,<tab>showAttributes=1, showSelected=0, highlightActive=1, showAnimCurvesOnly=0, autoExpand=1,<nl>showConnected=1, showDagOnly=0, ignoreDagHierarchy=1, expandConnections=0, showCompounds=0,   showNumericAttrsOnly=0,<nl>autoSelectNewObjects=0, doNotSelectNewObjects=1, transmitFilters=0, showSetMembers=1,<tab>setFilter='defaultSetFilter', lck=1, sec=toastFUNC)<nl><nl>mc.setParent('..')<nl><nl>mc.frameLayout(w=1, h=100, lv=0)<nl>curveEditor = mc.animCurveEditor(mlc='modelList', slc='modelList', dak=1, di=0, dat='off', lck=1)<nl>mc.setParent('..')<nl>mc.showWindow()","out":"How can I keep an object selected in the outliner after physically deselecting it in the 3d view?"}
{"in":"d = {<nl><tab>\"data\": {<nl><tab><tab>\"id\": 2,<nl><tab><tab>\"name\": \"My TEST\",<nl><tab><tab>\"image\": \"1.jpg\",<nl><tab><tab>\"article\": [<nl><tab><tab><tab>{<nl><tab><tab><tab><tab>\"id\": 1,<nl><tab><tab><tab><tab>\"name\": \"TEST\"<nl><tab><tab><tab>}<nl><tab><tab>]<nl><tab>}<nl>}<nl><nl><nl>myitems=[{<nl><tab>'title': d[\"data\"]['name'],<nl><tab>'image': d[\"data\"]['image'],<nl><tab>'article_id': d[\"data\"]['article'][0]['id']<nl>}]<nl>print myitems<nl>[{'image': '1.jpg', 'article_id': 1, 'title': 'My TEST'}]","out":"How to Parsing JSON With Python in relationship"}
{"in":"import urllib.parse, urllib.request<nl><nl>params = { \"SendXML\": \"<company><User><Username>username<\/Username><Password>passweord<\/Password><\/User><Content Type=sms>..\" }<nl>url_string = \"http:\/\/api.company.com\/SendMessageXml.ashx?%s\" % (urllib.parse.urlencode(params))<nl>s = \"\"<nl>with urllib.request.urlopen(url_string) as url:<nl><tab>s = url.read()<nl><nl>print s","out":"white spaces in url"}
{"in":"from datetime import datetime, timedelta<nl>Example.objects.filter(date_created__lte=datetime.utcnow() - <nl><tab><tab><tab><tab><tab><tab>  timedelta(days=6*30)).delete()","out":"Django Queryset for date"}
{"in":"import os, shutil<nl><nl>#Get the list of all folders present within the particular directory<nl>folder_list = os.walk('.').next()[1]<nl><nl>#Start zipping the folders<nl>for each_folder in folder_list:<nl><tab>shutil.make_archive(each_folder, 'zip', os.getcwd() + \"\\\\\" + each_folder)","out":"How to create zip of a specific folder using shutil"}
{"in":"def f(s):<nl><tab>for x in range(len(s)):<nl><tab><tab>if s[x] == 'o':<nl><tab><tab><tab>s = s[:x]+'e'+s[x+1:]<nl><tab>return s","out":"Python 3.4 help - using slicing to replace characters in a string"}
{"in":"__import__('cmds.' + command_name)","out":"How do I dynamically import a module in App Engine?"}
{"in":"root.geometry('200x200')<nl>root.mainloop()","out":"tkinter: How do I fix my window so that the window doesn't resize when my content resizes?"}
{"in":"def using_split2(line, _len=len):<nl><tab>words = line.split()<nl><tab>index = line.index<nl><tab>offsets = []<nl><tab>append = offsets.append<nl><tab>running_offset = 0<nl><tab>for word in words:<nl><tab><tab>word_offset = index(word, running_offset)<nl><tab><tab>word_len = _len(word)<nl><tab><tab>running_offset = word_offset + word_len<nl><tab><tab>append((word, word_offset, running_offset - 1))<nl><tab>return offsets","out":"How to split a string on whitespace and retain offsets and lengths of words"}
{"in":"req = google.appengine.ext.webapp.Request(dict(os.environ))","out":"Get request object in a db model?"}
{"in":"#!\/usr\/bin\/env python<nl>query = [\"football\", \"basketball\", \"martial arts\", \"baseball\"]<nl>lists = [[\"apple\", \"football\", \"basketball court\"], [\"ball\"], [\"martial-arts\", \"baseball\", \"banana\", \"food\", \"doctor\"]]<nl>from random import random<nl><nl>def fake_levenshtein(word1, word2):<nl><tab>return random()<nl><nl>def avg_list(l):<nl><tab><tab>return reduce(lambda x, y: x + y, l) \/ len(l)<nl><nl>for l in lists:<nl><tab>score = []<nl><tab>for w1 in l:<nl><tab><tab>for w2 in query:<nl><tab><tab><tab>score.append(fake_levenshtein(w1, w2))<nl><tab>print avg_list(score)","out":"Similarity score of two lists with strings"}
{"in":"import itertools<nl><nl>bin1 = [1,2]<nl>bin2 = [3,4]<nl>bin3 = [5,6]<nl><nl>print [[bin1[0],y] for y in bin3] + [[bin1[1],y] for y in bin2]","out":"Return all possible combinations when selecting a single item from multiple bins, with an IF condition"}
{"in":"import glob<nl>import os<nl><nl>filelog_ext=\".log\" #log extension<nl>array = []<nl><nl>for filename in glob.iglob(os.path.join(path, filelog_ext)):<nl><tab>with open(filename) as f:<nl><tab><tab>array.extend(f)","out":"Storing a list of data from multiple files in array"}
{"in":"QOUT=[1.0, 3.0, 1.0, 2.0]<nl>QIN=[2.0, 3.0, 5.0, 2.0]<nl>TIN=[10.0,12.0,13.0, 12.0]<nl><nl>V=[2.0, 4.0, 5.0]<nl><nl>T=[10.0, 11.0, 12.0]<nl><nl>for q_in, q_out in zip(QIN, QOUT):<nl><tab>C = [v + q_in - q_out for v in V]<tab><nl><tab>print C<nl><nl><tab>lineNum=0<tab><tab> <nl><tab>for t1 in range(len(TIN)):<nl><tab><tab>Tx=[]<nl><tab><tab>for c in range(len(C)): <nl><tab><tab><tab>for i in range(len(T)):   <nl><tab><tab><tab><tab>Tx.append((T[i]*C[c]+TIN[t1]*QIN[lineNum])\/(C[c]+QIN[lineNum]))<nl><tab><tab>lineNum +=1<nl><tab><tab>print Tx","out":"How can I loop and change the elements of a list with the elements of another list that has a diferent range?"}
{"in":"n[n[:,0] > 0, :]","out":"Numpy advanced indexing on a matrix given a condition"}
{"in":"import re<nl><nl>a_pattern = re.compile(\"query\\:(.+?)\\,\")<nl>re.findall(a_pattern, 'query:text_you_want_to_extract,')","out":"How To Deal With Un-Format Json Data In Python?"}
{"in":"with open(filename) as f:<nl>   lines=f.readlines()<nl><nl>d=dict()<nl>for line in lines:<nl>  line=line.strip()<nl>  if line:<nl><tab> (k,v)=line.split(\":\", 1)<nl><tab> d[k]=v<nl><nl>print(\"%s: %s\" % (d['Package'], d['Version']))","out":"Is there a way to concatenate separated string values in a .txt file using Python?"}
{"in":"import numpy as np<nl>import pandas as pd<nl><nl>### create sample data<nl>date = pd.date_range(\"2010-01-01\", periods=365*3)<nl>date = pd.Index(np.random.choice(date, 30000))<nl>order_id = np.random.randint(10, 1000, size=30000)<nl><nl>df = pd.DataFrame({\"date\":date, \"order_id\":order_id})<nl><nl>### group by year and date<nl>date = pd.Index(df[\"date\"])<nl>df2 = df[\"order_id\"].groupby([date.year, date]).count()<nl><nl>### shift all year to 2000<nl>date = df2.index.get_level_values(1)<nl>new_date = pd.Index(pd.io.date_converters.parse_date_fields(np.ones(len(date))*2000, date.month, date.day))<nl>year = df2.index.get_level_values(0)<nl>df2.index = pd.MultiIndex.from_arrays([year, new_date])<nl><nl>### plot<nl>p = df2.unstack(0).plot()<nl>p.xaxis.set_ticklabels(range(1, 13));","out":"Plotting date in Pandas independent of year"}
{"in":"date = \"2010-11-22\"<nl>timestamps = set(['2011-02-22', '2011-02-05', '2011-02-04', '2010-12-14', '2010-12-13', '2010-12-12', '2010-12-11', '2010-12-07', '2010-12-02', '2010-11-30', '2010-11-26', '2010-11-23', '2010-11-22', '2010-11-16'])<nl>#then you can just update it like so<nl>timestamps.update(['2010-11-16']) #if its in there it does nothing<nl>timestamps.update(['2010-12-30']) # it does add it","out":"Unique items in python list"}
{"in":"with open('topon.txt') as infile:<nl>  for line in infile:<nl><tab>print line.split('.', 1)[0]","out":"Sentence processing in Python"}
{"in":"for r in result:<nl>  for d in dict:<nl><tab>if d['value'] == r:<nl><tab>   print \"ok\"","out":"Python - value in list of dictionaries"}
{"in":"import os<nl>import glob<nl><nl>files = list(glob.glob(os.path.join(directory,'*.*')))","out":"How to create a list from filenames in a user specified directory in python"}
{"in":"from copy import deepcopy<nl>list1.append(deepcopy(list2))","out":"Append list to list, overwrite values"}
{"in":"from multiprocessing import Process<nl>p = Process(target=myfunc1)<nl>p.start()<nl>p2 = Process(target=myfunc2)<nl>p2.start()<nl># and so on<nl>p.join()<nl>p2.join()<nl># the join means wait untill it finished","out":"how to run multiple functions at same time"}
{"in":"import os<nl>import shutil<nl><nl>os.nice(9)<nl>shutil.copy('\/var\/tmp\/1', '\/var\/tmp\/2')","out":"How to use nice command in python?"}
{"in":"from scipy.optimize import fsolve<nl>import math<nl><nl>def equations(p):<nl><tab>x, y = p<nl><tab>return (x+y**2-4, math.exp(x) + x*y - 3)<nl><nl>x, y =  fsolve(equations, (1, 1))<nl><nl>print equations((x, y))","out":"How to solve a pair of nonlinear equations using Python?"}
{"in":"from time import time<nl>prevState = (False,time())<nl>while not self.done():<nl><tab>current = time()<nl><tab>if self._io_left_nav.button0 and (current-prevState[1])*1000>2: #For example, 2 ms<nl><tab><tab>if self._io_left_nav.button0 != prevState[0]:<nl><tab><tab><tab>print(\"repeats\")<nl><tab><tab>prevState = (self._io_left_nav.button0,time())","out":"How to check the state of a robot button using python?"}
{"in":"print datetime.datetime.strptime(fecha2, '%m\/%d\/%y %H:%M')","out":"Python time data does not match format"}
{"in":"for student, student_data in student_quiz_scores.iteritems():<nl><tab>for i, average in enumerate(the_averages):<nl><tab><tab>print \"<nl>The average for quiz\",i+1,\"is:\",average<nl><tab><tab>if student_data[i]>average:<nl><tab><tab><tab>print student, \"got a\",student_data[i],\"which is\",(str(student_data[i]-average))+\"%\", \"higher than the average. :)\"<nl><tab><tab>else:<nl><tab><tab><tab>print student, \"got a\", student_data[i], \"which is\", (str(-student_data[i]+average))+\"%\", \"lower than the average. :(\"","out":"Applying a function to various keys in a dictionary at a time"}
{"in":"last_host = None<nl>hosts = []<tab><tab><tab><tab># the list of hosts<nl>host_responses = []<tab>   # the list of responses for each host<nl>responses = []<nl>for output in expandresults:<nl><tab>if output.val is not None:<nl><tab><tab>if output.hostname != last_host:<tab># new host<nl><tab><tab><tab>if last_host:<tab># only append host_responses after a new host<nl><tab><tab><tab><tab>host_responses.append(responses)<nl><tab><tab><tab>hosts.append(output.hostname)<nl><tab><tab><tab>responses = [output.val]<tab><tab># start the new list of responses<nl><tab><tab><tab>last_host = output.hostname<nl><tab><tab>else:<tab><tab><tab><tab><tab><tab><tab>   # same host, append the response<nl><tab><tab><tab>responses.append(output.val)<nl>host_responses.append(responses)<nl><nl>for host, responses in zip(hosts, host_responses):<nl><tab>self.WriteOut(host, ','.join(responses))","out":"Combing through several large data structures of different classes in Python; How can I combine and store data I need while reducing memory usage?"}
{"in":"from IPython.nbformat import current as nbf<nl><nl>nb = nbf.new_notebook()<nl><nl>cells = []<nl><nl>for var in my_list:<nl><tab># Assume make_image() saves an image to file and returns the filename<nl><tab>image_file = make_image(var)<nl><tab>text = \"Variable: %s<nl>![image](%s)\" % (var, image_file)<nl><tab>cell = nbf.new_text_cell('markdown', text)<nl><tab>cells.append(cell)<nl><nl>nb['worksheets'].append(nbf.new_worksheet(cells=cells))<nl><nl>with open('my_notebook.ipynb', 'w') as f:<nl><tab><tab>nbf.write(nb, f, 'ipynb')","out":"programatically add cells to an ipython notebook for report generation"}
{"in":"from subprocess import Popen, PIPE<nl><nl>scpt = '''<nl><tab>on run {x, y}<nl><tab><tab>return x + y<nl><tab>end run'''<nl>args = ['2', '2']<nl><nl>p = Popen(['osascript', '-'] + args, stdin=PIPE, stdout=PIPE, stderr=PIPE)<nl>stdout, stderr = p.communicate(scpt)<nl>print (p.returncode, stdout, stderr)","out":"How do I embed an AppleScript in in a Python script?"}
{"in":"info = XXX.objects.filter(a = 111) #return the list of QuerySet (objects)<nl>for item in info:<nl><tab>item.b = 111   # Object<nl><tab>item.save()","out":"append item in for loop"}
{"in":"import csv<nl>reader = csv.reader(open('output.csv', 'rb'))<nl>reader1 = csv.reader(open('output1.csv', 'rb'))<nl>writer = csv.writer(open('appended_output.csv', 'wb'))<nl>for row in reader:<nl><tab>row1 = reader1.next()<nl><tab>writer.writerow(row + row1)","out":"append content of one csv file to another using python"}
{"in":"h = lambda x: f(x)+g(x)","out":"Python : addition of lambda defined functions"}
{"in":"self.CreateStatusBar(2)<nl>self.SetStatusText(\"A Custom StatusBar...\", 1)<nl>wx.CallLater(10000, self.SetStatusText, \"\", 1)","out":"How to manage wx.StatusBar text in interactions with menus"}
{"in":"import numpy as np<nl>from collections import Counter<nl><nl>a=['John', 'John', 'John', 'Mark', 'Mark', 'Mark', 'Joe']<nl>b= ['John', 'Mark', 'Joe', 'Joe', 'Joe', 'Jack']<nl>c= ['Mark', 'Joe', 'Jack', 'Jack', 'Tony']<nl><nl>ac = Counter(a)<nl>bc = Counter(b)<nl>cc = Counter(c)<nl><nl><nl>allLists = [list(), list(), list()]<nl><nl>allNames = set(ac.keys() + bc.keys() + cc.keys());<nl><nl>for name in allNames:<nl><nl><tab>aCount = ac[name];<nl><tab>bCount = bc[name];<nl><tab>cCount = cc[name];<nl><nl><tab>allCounts = np.array([aCount, bCount, cCount]);<nl><nl><tab>maxIndex = allCounts.argsort()[::-1][0];<nl><nl><tab>allLists[maxIndex] += [name];<nl><nl><nl>alist, blist, clist = allLists[:]<nl><nl>print alist, blist, clist","out":"How to get the dictionary name for each key with the highest value across multiple dictionaries"}
{"in":"re.sub('<a[^>]+>(.*?)<\/a>', '\\\\1', text)","out":"Use Python re to get rid of links"}
{"in":"import os<nl>print os.environ['BUILD_NUMBER']","out":"How to use jenkins plugin in python script?"}
{"in":"import matplotlib<nl>import numpy as np<nl>import matplotlib.cm as cm<nl>import matplotlib.pyplot as plt<nl>from scipy.interpolate import interp2d<nl><nl># http:\/\/en.wikipedia.org\/wiki\/File:Bilininterp.png<nl>xi = np.array([0.0, 1.0])<nl>yi = np.array([0.0, 1.0])<nl>zi = np.array([[0.0, 1.0], [1.0, 0.5]])<nl><nl># Another example<nl>xi = np.array([0.0, 0.25, 1.0])<nl>yi = np.array([0.0, 0.75, 1.0])<nl>zi = np.array([[0.0, 0.5, 1.0], [0.5, 0.7, 0.5], [1.0, 1.0, 1.0]])<nl><nl># I want 20 \"levels\" to be shown<nl>contour_breaks = 20<nl>ticks = np.linspace(zi.min(), zi.max(), contour_breaks, endpoint=True)<nl><nl># Attempt 4 (interp2d does to correct bilinear interpolation)<nl>fig = plt.figure()<nl>axes = fig.add_subplot(111, aspect='equal')<nl>f = interp2d(xi, yi, zi, kind='linear')<nl>xi2 = np.linspace(0., 1., 100)<nl>yi2 = np.linspace(0., 1., 100)<nl>zi2 = f(xi2, yi2)<nl>axes.contour(xi2, yi2, zi2, ticks[1:-1], colors='k')<nl>fill = axes.contourf(xi2, yi2, zi2, ticks, cmap=cm.jet)<nl>fig.colorbar(fill, ticks=ticks)<nl><nl># Show the plots<nl>plt.show()","out":"Python\/Matplotlib - Contour Plot with Bilinear Interpolation"}
{"in":"ssh = paramiko.SSHClient()<nl>ssh.set_missing_host_key_policy(<nl><tab><tab><tab>paramiko.AutoAddPolicy())<nl><nl>ftp = ssh.open_sftp() <nl>ftp.get('remotefile', 'localfile')","out":"Paramiko SFTPClient - Setting missing host key policy?"}
{"in":"users = Table('users', metadata, autoload=True)","out":"Using two databases with Pyramid SqlAlchemy"}
{"in":"RoleFormSet = inlineformset_factory(UserRole, User.role.though)","out":"pendant to inline formsets for many-to-many relations"}
{"in":"cursor.execute(\"DELETE FROM test WHERE name=%s\", (Value,));","out":"Update and delete, with value typed, in MySQL using Python"}
{"in":"page_key = ndb.Key(Book, bookId, Chapter, chapterId, Page, pageId)<nl>page = page_key.get()","out":"Working with ancestors in GAE"}
{"in":"#!\/usr\/bin\/env python2.7<nl># -*- coding: utf-8 -*-<nl>\"\"\"Example of Flask and qrcode.<nl><nl>NOTE: by requirements image in memory!<nl>\"\"\"<nl><nl>__author__ = 'Daniel Leybovich <setarckos@gmail.com>'<nl>__version__ = (0, 0, 1)<nl><nl><nl>import os<nl>import sys<nl>import flask<nl>import qrcode<nl>import cStringIO<nl><nl><nl>app = flask.Flask(__name__)<nl><nl><nl>def random_qr(url='www.google.com'):<nl><tab>qr = qrcode.QRCode(version=1,<nl><tab><tab><tab><tab><tab>   error_correction=qrcode.constants.ERROR_CORRECT_L,<nl><tab><tab><tab><tab><tab>   box_size=10,<nl><tab><tab><tab><tab><tab>   border=4)<nl><nl><tab>qr.add_data(url)<nl><tab>qr.make(fit=True)<nl><tab>img = qr.make_image()<nl><tab>return img<nl><nl><nl>@app.route('\/get_qrimg')<nl>def get_qrimg():<nl><tab>img_buf = cStringIO.StringIO()<nl><tab>img = random_qr(url='www.python.org')<nl><tab>img.save(img_buf)<nl><tab>img_buf.seek(0)<nl><tab>return flask.send_file(img_buf, mimetype='image\/png')<nl><nl><nl>if __name__ == '__main__':<nl><tab>app.run(host='0.0.0.0', debug=True)","out":"How to serve a generated QR Image using python's qrcode on Flask"}
{"in":"value = my_list[0]<nl>if isinstance(value, list):<nl><tab>value = value[0]<nl><nl># use the value","out":"Reading first non-list value from the arbitrary nested list"}
{"in":"blar = re.search(\"Blar=(-?\\d+\\.\\d+)((?:,-?\\d+\\.\\d+)+)\", x)<nl>blar.groups()","out":"Regex to find N numbers after some token in python"}
{"in":"cursor = r.table('timetests').filter(<nl><tab>lambda t: t['time'].during(r.now() - 3600, r.now())<nl><tab>).run(conn)","out":"Filter items newer than 1 hour with RethinkDB and Python"}
{"in":"import traceback<nl><nl>class MyClass(object):<nl>   def __init__(self):<nl><tab>   self.traceback = traceback.extract_stack()[-2]<nl><nl>obj = MyClass()<nl><nl>print 'Instantiated in {0}:{1}'.format(*obj.traceback)","out":"How can I find out where an object has been instantiated?"}
{"in":"import HTMLParser<nl>parser = HTMLParser.HTMLParser()<nl>unescaped_string = parser.unescape(html_escaped_string)","out":"Trouble Converting Apostrophes in JSON response"}
{"in":"from PIL import Image<nl>import StringIO<nl>tempBuff = StringIO.StringIO()<nl>tempBuff.write(curimg)<nl>tempBuff.seek(0) #need to jump back to the beginning before handing it off to PIL<nl>Image.open(tempBuff)","out":"Converting jpeg string to PIL image object"}
{"in":"value = func_returning_a_tuple()[0]","out":"Tuple unpacking: dummy variable vs index"}
{"in":"import matplotlib.pyplot as plt<nl><nl>fig = plt.figure()<nl><nl># Add subplots<nl>nRows = 4<nl>nCols = 2<nl>nPlots = 7<nl>ax1 = fig.add_subplot(nRows,nCols,1)<nl>ax1.set_yscale('log')<nl>ax1.set_xscale('log')<nl><nl>for n in range(1, nPlots+1):<nl><tab>plt.subplot(nRows,nCols,n, sharex=ax1, sharey=ax1)<nl><nl># Turn off tick lables where needed. <nl>index = 0<nl>for r in range(1, nRows +1):<nl><tab> for c in range(1, nCols + 1):<nl><tab><tab> index += 1<nl><tab><tab> # Turn off y tick labels for all but the first column.<nl><tab><tab> if ((c != 1) and (index <= nPlots)):  <nl><tab><tab><tab> ax = plt.subplot(nRows, nCols, index, sharex=ax1, sharey=ax1)<nl><tab><tab><tab> plt.setp(ax.get_yticklabels(), visible=False)<nl><tab><tab>  # Turn off x tick lables for all but the bottom plot in each <nl><tab><tab>  # column. <nl><tab><tab> if ((nPlots - index) >= nCols):<nl><tab><tab><tab> ax = plt.subplot(nRows, nCols, index, sharex=ax1, sharey=ax1) <nl><tab><tab><tab> plt.setp(ax.get_xticklabels(), visible=False)<nl><nl>plt.subplots_adjust(wspace=0, hspace=0)<nl><nl>plt.show()","out":"Matplotlib\/Pyplot shared axis for odd number of subplots"}
{"in":"import pickle  <nl><nl>d = {'key1':'value1'}<nl>dd = {frozenset(d.items()):'my_value'}<nl><nl># Save to dumpfile<nl>pickle.dump(dd, open('dumpfile', 'wb'))<nl><nl># Load again from dumpfile<nl>dd = pickle.load(open('dumpfile', 'rb'))","out":"How do I convert a string back to frozenset?"}
{"in":"from apscheduler.scheduler import Scheduler<nl><nl>schedule = Scheduler()<nl>jobs = schedule.get_jobs() #jobs is a list of apscheduler jobs<nl>jobs_kwargs = map(lambda k: k.kwargs, jobs)","out":"Get a list of object properties from list of objects in python"}
{"in":"from Tkinter import *<nl><nl>def getpwd():<nl><tab>password = ''<nl><tab>root = Tk()<nl><tab>pwdbox = Entry(root, show = '*')<nl><tab>def onpwdentry(evt):<nl><tab><tab> password = pwdbox.get()<nl><tab><tab> root.destroy()<nl><tab>def onokclick():<nl><tab><tab> password = pwdbox.get()<nl><tab><tab> root.destroy()<nl><tab>Label(root, text = 'Password').pack(side = 'top')<nl><nl><tab>pwdbox.pack(side = 'top')<nl><tab>pwdbox.bind('<Return>', onpwdentry)<nl><tab>Button(root, command=onokclick, text = 'OK').pack(side = 'top')<nl><nl><tab>root.mainloop()<nl><tab>return password","out":"Simplest method of asking user for password using graphical dialog in Python?"}
{"in":"import gc<nl>gc.collect()","out":"What is the proper way to write to the Google App Engine blobstore as a file in Python 2.5"}
{"in":"backtonormal = urllib.unquote(thestring)","out":"How to unquote URL quoted UTF-8 strings in Python"}
{"in":"request.args.get('variable')","out":"Getting HTTP GET variables using Tipfy"}
{"in":"import pprint<nl>import subprocess<nl><nl>df = subprocess.check_output('lsusb', shell=True)<nl>device_ids = []<nl>for line in filter(lambda s: s.startswith('Bus'), df.split('<nl>')):<nl><tab>businfo, id, _ = line.split(':')<nl><tab>id = id.split()[1]<nl><tab>device_ids.append(id)<nl><nl>pprint.pprint(device_ids)","out":"How to get usb serial number python"}
{"in":"os.mkdir","out":"Creating a directory based on function parameters, Python"}
{"in":"data = file.readlines()","out":"reading data from a file and storing them in a list of lists Python"}
{"in":"# Success<nl>def is_element_present(self, id_type, id_locator):<nl><tab>driver = self.driver<nl><tab>element_found = True<nl><tab>driver.implicitly_wait(1)<nl><tab>try:<nl><tab><tab>element = WebDriverWait(driver, 0).until(<nl><tab><tab><tab>EC.presence_of_element_located((id_type, id_locator))<nl><tab><tab>)<nl><tab>except:<nl><tab><tab>element_found = False<nl><tab>driver.implicitly_wait(30)<nl><tab>return element_found","out":"How to test for absence of an element without waiting for a 30 second timeout"}
{"in":"import re<nl><nl>string = \"\"\"736.199070736:  LOG_MOD_L0_RECEIVE_TXBRP_CONTROL(0, <nl> 0x0075007f, <nl> 0x005500dd,  <nl> 0x000a00f5)\"\"\"<nl><nl>result = re.search(r'\\(.*\\)', string) # matches anything between parenthesis<nl><nl>result.group()<nl><nl>'(0, 0x0075007f, 0x005500dd,  0x000a00f5)'","out":"How to print specific strings in python?"}
{"in":"figure(self.figures[fig].number)","out":"How to Iterate a dictionary of references to matplotlib figures"}
{"in":"print main1.__file__","out":"Python module changes aren't being imported"}
{"in":"datetime.strptime(x,\"%Y%m%d%H%M%S%f\")","out":"Python string of numbers to date"}
{"in":"marmot = Animal.objects(genus='Marmota').first()<nl>photo = marmot.photo.read()<nl>content_type = marmot.photo.content_type","out":"Retrieving an image from mongoengine and display it on a page as http reponse in python"}
{"in":"print DoGood._DoGood__prv # access a private attribute.","out":"Why does a private attribute of python class allow me to assign a value?"}
{"in":"for line in lines:<nl><tab>x, y = line.split()<nl><tab>if int(x) > int(y): return True<nl>return False","out":"Comparison operator in a for-loop"}
{"in":"three_letters = [word for word in words if len(word) == 3]","out":"Use a list comprehension to select all three letter words from a list"}
{"in":"tuple([10*x for x in img.size])","out":"Multiplying a tuple by a scalar"}
{"in":"for i in range(1, 4):<nl><tab>type_dict['type_%d' % i] = myTree.cssselect('element_type_%d' % i)","out":"More pythonic way to pick multiple element types from tagged data"}
{"in":"from win32com.client import constants<nl>import win32com.client<nl>speaker = win32com.client.Dispatch(\"SAPI.SpVoice\")<nl><nl>d = {'a':'alfa', 'b':'bravo', 'c':'charlie', 'd':'delta', 'e':'echo', 'f':'foxtrot',<nl> 'g':'golf', 'h':'hotel', 'i':'india', 'j':'juliett', 'k':'kilo', 'l':'lima',<nl> 'm':'mike', 'n':'november', 'o':'oscar', 'p':'papa', 'q':'quebec', 'r':'romeo',<nl> 's':'sierra', 't':'tango', 'u':'uniform', 'v':'victor', 'w':'whiskey', <nl> 'x':'x-ray', 'y':'yankee', 'z':'zulu'}<nl>speaker.speak(\"Hello.. Please write a line you want me to say\")<nl>print (\"Type your text now:\")<nl>inp = input()<nl>print (\"Outputting...\")<nl>result = ' '.join(d[c.lower()] for c in inp)<nl>speaker.speak(result)","out":"Working with words, and need to translate ABC to Alpha, Bravo, Charlie"}
{"in":"tempfile.mkdtemp()","out":"using a \"temporary files\" folder in python"}
{"in":"def naming(instance, file_name):<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> <nl><tab>model_name = instance.__class__.__name__<nl><tab>return os.path.join(model_name, file_name)","out":"how to specify a directory and a function with upload_to in django"}
{"in":"def start_requests(self):<nl><tab>for i in range(1000):<nl><tab><tab>yield Request(\"http:\/\/www.example.com\/bla-bla-bla\/\" + str(i), self.parse_tv)","out":"Crawling a site recursively using scrapy"}
{"in":"link_string = '<a href=\"\/search\/?q=%%23%s\"> %s <\/a>'","out":"escape % character in Python"}
{"in":"class CategoryForm(forms.ModelForm):<nl><tab>class Meta:<nl><tab><tab>model = models.Category<nl><tab><tab>exclude = ()<nl><tab><tab>form = CategoryForm<nl><nl>class CategoryAdmin(admin.ModelAdmin):<nl><tab>list_display = ['department','name']<nl><tab>list_filter = ['department','name']<nl><nl><tab>def get_form(self, request, obj=None, **kwargs):<nl><tab><tab>form = super(CategoryAdmin, self).get_form(request, obj=None, **kwargs)<nl><tab><tab>form.base_fields['department'].queryset = Department.objects.filter(<nl><tab><tab><tab>name = request.user.customuser.department.name)<nl><tab><tab>return form","out":"how to access request.user in django modelform in admin"}
{"in":"import numpy as np<nl><nl>def some_function(x):<nl><tab>return 3*x<nl><nl>input = np.ones([10,26])<nl>input = np.hstack([input,np.empty([input.shape[0],1])])<nl>for row in input:<nl><tab>row[-1] = some_function(row[0])<nl><nl>output = input","out":"How to get figure for web traffic + how to append column to numpy array?"}
{"in":"Group.objects.exclude(id__in=request.user.groups.all().values_list('id', flat=True))","out":"How to list all the groups that a user does not belong to in django?"}
{"in":"arr = np.loadtxt('test.txt', ndmin=2)","out":"How to make np.loadtxt return multidimensional arrays even the file has only one dimensional?"}
{"in":"class ClassDict(object):<nl>  def __init__(self):<nl><tab>self.classes = {}<nl><nl>  def add(self, cls):<nl><tab>self.classes[cls.__name__] = cls<nl><nl>  def remove(self, cls):<nl><tab>if self.classes[cls.__name__] == cls:<nl><tab>  del self.classes[cls.__name__]<nl><tab>else:<nl><tab>  raise KeyError('%r' % cls)<nl><nl>  def __getitem__(self, key):<nl><tab>return self.classes[key]<nl><nl>  def __repr__(self):<nl><tab>return 'ClassDict(%s)' % (', '.join(self.classes),)<nl><nl>class C(object):<nl>  pass<nl><nl>class D(object):<nl>  pass<nl><nl>cd = ClassDict()<nl>cd.add(C)<nl>cd.add(D)<nl><nl>print cd<nl><nl>print cd['C']","out":"Python - Access a class from a list using a key"}
{"in":"ws1 = wb.active<nl>ws2 = wb.create_sheet()","out":"How to write two sheets in a single workbook at the same time using openpyxl"}
{"in":"# copied directly from the docs<nl>from jinja2 import Environment, PackageLoader<nl><nl>env = Environment(loader=PackageLoader('yourapplication', 'templates'))<nl>template = env.get_template('mytemplate.html')<nl>print template.render(the='variables', go='here')","out":"How can i use Jinja2 template inside python program"}
{"in":"from django.contrib import admin<nl>from django.contrib.admin import widgets<nl>from django.contrib.admin.sites import site<nl>from django import forms<nl><nl>class BlogRawIdWidget(widgets.ForeignKeyRawIdWidget):<nl><tab>def url_parameters(self):<nl><tab><tab>res = super().url_parameters()<nl><tab><tab>res['type__exact'] = 'PROJ'<nl><tab><tab>return res<nl><nl>class ProjectAdminForm(forms.ModelForm):<nl><tab>def __init__(self, *args, **kwargs):<nl><tab><tab>super().__init__(*args, **kwargs)<nl><tab><tab>self.fields['blog'].queryset = Blog.objects.filter(type='PROJ')<nl><tab><tab>self.fields['blog'].widget = BlogRawIdWidget(rel=Project._meta.get_field('blog').rel, admin_site=site)<nl><nl><tab>class Meta:<nl><tab><tab># Django 1.8 convenience:<nl><tab><tab>fields = '__all__'<nl><tab><tab>model = Project<nl><nl>class ProjectAdmin(admin.ModelAdmin):<nl><tab>form = ProjectAdminForm<nl><tab>raw_id_fields = ('blog',)","out":"How to limit choices of ForeignKey choices for Django raw_id_field"}
{"in":"with open(\"filename_here\") as f:<nl><tab>content = f.readlines()<nl>print content","out":"read the http links from a file and append it to a list"}
{"in":"class ScheduledPayment(Base):<nl><tab>id = Column(Integer, primary_key=True)<nl><tab>invoice_id = Column(Integer)<nl><tab>is_canceled = Column(Boolean, default=False)<nl><nl><tab>__table_args__ = (<nl><tab><tab>Index('only_one_active_invoice', invoice_id, is_canceled,<nl><tab><tab><tab>  unique=True,<nl><tab><tab><tab>  postgresql_where=(~is_canceled)),<nl><tab>)","out":"Creating partial unique index with sqlalchemy on Postgres"}
{"in":"my_plot = pg.PlotWidget()<nl>my_layout.addWidget(my_plot)<nl>my_plot.plot(x, y)","out":"Embedding PyQtGraph in Qt without generating new Window"}
{"in":"import pandas<nl>import numpy<nl>my_series = pandas.Series([0,0,1,2,0,3,4,0,0])<nl>numpy.trim_zeros(my_series)","out":"Pandas: remove trailing zeros from series"}
{"in":"password = \"pass\"<nl>username = \"user\"<nl>transport.connect(username = username, password = password)","out":"Copying files from Remote machine using sftp in python"}
{"in":"import re<nl><nl>with open(\"Tyger.txt\") as f:<nl><tab>words = re.findall(\"\\w+\", f.read())","out":"Taking punctuation out of a a python list"}
{"in":"[(i,j) for i,j in ((a-1,b), (a+1,b), (a,b-1), (a,b+1)) if 0<=i<MAXX and 0<=j<MAXy and X[i][j] is not None ]","out":"Creating a list comprehension to find orthogonal neighbours in 2D list"}
{"in":"import json<nl>for l in xrange(100):<nl><tab>try:<nl><tab><tab>with open('C:\/Twitter\/json\/user_%d.json' % l, 'r') as f:<nl><tab><tab><tab>data = json.load(f)<nl><tab><tab><tab>#do stuff with obj<nl><tab>except IOError:<nl><tab><tab>pass","out":"Python: Handle Missing Files from a Sequence"}
{"in":"def transform_date(date_string, tzinfo):<nl><tab>fmt = '%Y-%m-%d'<nl><tab>date = datetime.strptime(date_string, fmt).replace(tzinfo=tzinfo)<nl><tab>return date","out":"Insert a tzinfo into datetime"}
{"in":"q = taskqueue.Queue('slowQueue') <nl>task = taskqueue.Task(url='\/worker\/slow', params={'name': name})<nl>q.add(task)","out":"adding task to non-default queue in google app engine"}
{"in":"tuples = [(2,5),(8,9),(11,19),(22,43),(47,50)]<nl>#tuples = [(2,7),(9,14),(17,20)]<nl><nl>def result(tuple, value):<nl><tab>start = tuples[0][0] - 1<nl><tab>for idx in range(len(tuples) - 1):<nl><tab><tab>if tuples[idx][1] >= value + start:<nl><tab><tab><tab>break<nl><tab><tab>start = start + (tuples[idx+1][0] - tuples[idx][1] - 1)  <nl><tab>return value + start  <nl><nl>for i in range(1, 16):<nl><tab>print str(i) + ' ' + str(result(tuples, i))","out":"sum of elements from different tuples"}
{"in":"from . import abc","out":"How to import __init__'s method in inner module?"}
{"in":"set([a, b, c, a])","out":"Fastest way to uniqify a list in Python"}
{"in":"import subprocess<nl>params = ['convert', 'pdf_file', 'jpg:-']<nl>image_data = subprocess.check_output(params)","out":"Capture jpgs produced in subprocess in main script"}
{"in":"for k,g in df.groupby(df['A'] - np.arange(df.shape[0])):<nl><tab>print g","out":"Slice pandas dataframe in groups of consecutive values"}
{"in":"def in_ipython():<nl><tab>try:<nl><tab><tab>__IPYTHON__<nl><tab>except NameError:<nl><tab><tab>return False<nl><tab>else:<nl><tab><tab>return True","out":"Detecting when a python script is being run interactively in ipython"}
{"in":"while 1:<nl><tab>print \"hello from stdout\"<nl><tab>sys.stdout.flush()<nl><tab>print >> sys.stderr, \"Hello from stderr\"<nl><tab>sleep(1)","out":"capturing stdout from python in an upstart job"}
{"in":"import os, time<nl><nl>allfiles = []<nl>now = time.time()<nl><nl># walk will return triples (current dir, list of subdirs, list of regular files)<nl># file names are relative to dir at first<nl>for dir, subdirs, files in os.walk(\"\/storage\/disk-1\/Media\/Video\/TV\"):<nl><tab>for f in files:<nl><tab><tab>if not f.endswith(\".avi\"):<nl><tab><tab><tab>continue<nl><tab><tab># compute full path name<nl><tab><tab>f = os.path.join(dir, f)<nl><tab><tab>st = os.stat(f)<nl><tab><tab>if st.st_mtime < now - 3600*24*7:<nl><tab><tab><tab># too old<nl><tab><tab><tab>continue<nl><tab><tab>allfiles.append((f, st))","out":"Using Python, how do I get an array of file info objects, based on a search of a file system?"}
{"in":"#! \/usr\/bin\/python2<nl><nl>import sys<nl>from lxml import etree<nl><nl>result = etree.Element('root')<nl>parser = etree.XMLParser(remove_blank_text=True)<nl><nl># Add each file to the tree<nl>for xmlfile in sys.argv[1:]:<nl>  with open(xmlfile) as xmlfile:<nl><tab>btree = etree.parse(xmlfile, parser)<nl>  # Ensure that the resulting tree has the right root<nl>  result.tag = btree.getroot().tag<nl>  # Consider each 2nd-level item<nl>  for bchild in btree.xpath(\"\/*\/*\"):<nl><tab>tags = result.xpath(\".\/%s\"%bchild.tag)<nl><tab>if len(tags) == 0:<nl><tab>  # Add <dog-list>, for example<nl><tab>  #print \"adding %s to %s\"%(bchild.tag, result.tag)<nl><tab>  result.append(bchild)<nl><tab>else:<nl><tab>  for bgrandchild in bchild:<nl><tab><tab># add <dog>, for example<nl><tab><tab>#print \"adding %s to %s\"%(bgrandchild.tag, tags[0].tag)<nl><tab><tab>tags[0].append(bgrandchild)<nl><nl>with open(\"output.xml\", \"w\") as output:<nl>  output.write(etree.tostring(result, pretty_print = True))","out":"Adding XML data from a XML file to an existing XML file"}
{"in":"many=True","out":"Serializing NotificationQuerySet from django-notifications-hq not working"}
{"in":"import re<nl>s = r'''<html><nl> <head><nl>  <script type=\"text\/javascript\"><nl>  function redirecttoauth(sessionid, test) {<nl>   function body ...<nl>  }<nl>  <\/script><nl> <\/head><nl> <body><nl> <\/body><nl><\/html><nl>'''<nl><nl>start = r'function redirecttoauth\\(sessionid'<nl>end = r'}'<nl>result = re.search(r'%s(.*)%s' % (start, end), s, re.DOTALL).group(1)<nl>print(result)","out":"How to get function attributes inside a html?"}
{"in":"hexstrings = [\"DE\", \"AD\", \"BE\", \"EF\"]   # big-endian 0xDEADBEEF<nl><nl>bytes = bytearray(int(x, 16) for x in hexstrings)<nl>bytes = bytearray.fromhex(\"\".join(hexstrings))<tab> # Python 2.6 may need u\"\"","out":"Convert list of byte strings to bytearray (byte stream)"}
{"in":"# -*- Mode: Python -*-<nl># vi:si:et:sw=4:sts=4:ts=4<nl><nl>import subprocess<nl>import sys<nl>import select<nl><nl>p = subprocess.Popen([\"find\", \"\/proc\"],<nl><tab>stdout=subprocess.PIPE, stderr=subprocess.PIPE)<nl><nl>stdout = []<nl>stderr = []<nl><nl>while True:<nl><tab>reads = [p.stdout.fileno(), p.stderr.fileno()]<nl><tab>ret = select.select(reads, [], [])<nl><nl><tab>for fd in ret[0]:<nl><tab><tab>if fd == p.stdout.fileno():<nl><tab><tab><tab>read = p.stdout.readline()<nl><tab><tab><tab>sys.stdout.write('stdout: ' + read)<nl><tab><tab><tab>stdout.append(read)<nl><tab><tab>if fd == p.stderr.fileno():<nl><tab><tab><tab>read = p.stderr.readline()<nl><tab><tab><tab>sys.stderr.write('stderr: ' + read)<nl><tab><tab><tab>stderr.append(read)<nl><nl><tab>if p.poll() != None:<nl><tab><tab>break<nl><nl>print 'program ended'<nl><nl>print 'stdout:', \"\".join(stdout)<nl>print 'stderr:', \"\".join(stderr)","out":"Can you make a python subprocess output stdout and stderr as usual, but also capture the output as a string?"}
{"in":"averages = {}<tab># Create a new empty dictionary to hold the averages<nl>for key, values in scores.items(): <nl>  averages[key] = float(sum([int(i) for i in values])) \/ len(values)  <nl>  # Rather than store the averages in a local variable, store them in under the appropriate key in your new dictionary.","out":"Storing averages of values in a dictionary in a separate dictionary - Python"}
{"in":"from Tkinter import *<nl>from OpenGL.Tk import *<nl><nl>b=Opengl(height=100,width=100)<nl>root = b.master<nl>f = Frame(root, width=100, bg='blue')<nl>f.pack(side='left', fill='y')<nl>b.pack(side='right', expand=1, fill='both')<nl><nl>root.mainloop()","out":"Non top-level opengl widget in tkinter"}
{"in":"data_file = raw_input(\"Please type name of input data! \")<nl>data = open(data_file)<nl><nl>new_list = list()<nl><nl>for line in data:<nl><tab>line = line.rstrip()<nl><tab>first_empty = line.find(\" \")<nl><tab>items_whole = line[first_empty + 1:]<nl><tab>items_list = items_whole.split()<nl><tab># Use a 'list comprehension' to convert the items list into a list of floats<nl><tab>floats_list = [float(i) for i in items_list]<nl><nl><tab># Use the built in 'sorted' method to sort the floats<nl><tab># If the sorted float list is the same as the original float list, then all the items are ascending<nl><tab>if floats_list == sorted(floats_list):<nl><tab><tab>print items_list<nl><tab><tab># Add the list of floats into the 'new_list' for any post processing<nl><tab><tab>new_list += [floats_list]","out":"Python: Only extract lines in a file where values are continuously getting bigger"}
{"in":"def cartprod(x,y):<nl><tab>nx = len(x)<nl><tab>ny = len(y)<nl><tab>for i in range(nx+ny):<nl><tab><tab>for j in range(max(0,i-ny+1), min(i+1,nx)):<nl><tab><tab><tab>yield (x[j],y[i-j])","out":"How to iterate the cartesian product so top items combine first?"}
{"in":"bools = [True, True, False, True, True, False, True]<nl><nl>print ''.join(chr(ord('A') + i) if b else ' ' for i, b in enumerate(bools))","out":"convert a list of booleans to string"}
{"in":"data = \"\"\"<nl>1 A 3 B 2 C 0 <nl><tab><tab>D 0<nl><tab>E 1 F 0<nl><tab>G 2 H 0<nl><tab>  I 0\"\"\"<nl><nl>def construct_nodes(data):<nl><tab>return dict((next(data), construct_nodes(data))<nl><tab><tab><tab><tab>for _ in xrange(int(next(data))))<nl><nl>print construct_nodes(iter(data.split()))","out":"Python: Read tree like data from text file and store in dictionary"}
{"in":"with open(\"file.txt\", \"r\") as in_file:<nl><tab>buf = in_file.readlines()<nl><nl>with open(\"file.txt\", \"w\") as out_file:<nl><tab>for line in buf:<nl><tab><tab>if line == \"; Include this text<nl>\":<nl><tab><tab><tab>line = line + \"Include below<nl>\"<nl><tab><tab>out_file.write(line)","out":"Adding lines after specific line"}
{"in":"class MyXMLRPCServer(SimpleXMLRPCServer.SimpleXMLRPCServer):<nl><tab>def process_request(self, request, client_address):<nl><tab><tab>self.client_address = client_address<nl><tab><tab>return SimpleXMLRPCServer.SimpleXMLRPCServer.process_request(<nl><tab><tab><tab>self, request, client_address)<nl><nl>server=SimpleXMLRPCServer.MyXMLRPCServer((host, port))","out":"how can I get the ip address of the request in a regested function of python xmlrpc server"}
{"in":"import sys;   # Why use ';'? It's so non-pythonic.<nl><nl>inp = sys.stdin.read().split()<tab># Take whitespaces as delimiter<nl>t = int(inp[0])<nl>readAt = 1<nl>for i in range (0,t):<nl><tab>x,y,z = map(int,inp[readAt:readAt+3])<tab># Read the next three elements<nl><tab>n = (2*z)\/(x+y)<nl><tab>d = (y-x)\/(n-5)<nl><tab>a = x-(2*d)<nl><tab>print n<nl><tab>#for j in range(0,n):<nl><tab>#<tab>sys.stdout.write(a+j*d)<nl><tab>#<tab>sys.stdout.write(' ')<nl><tab>#print ' '<nl><tab>print ' '.join([str(a+ti*d) for ti in xrange(n)]) # More compact and faster<nl><tab>readAt += 3   # Increment the index from which to start the next read","out":"NZEC in python on spoj for AP2"}
{"in":"cgs = cg.sum()<nl>cgs.columns = ['number2']<nl>d = pd.concat([bg.sum(), cgs], axis=1)<nl>d.plot(kind='bar', stacked=True)","out":"Plot a stacked bar graph from two pandas groupby objects?"}
{"in":"import ctypes as cs<nl>import numpy as np<nl><nl>#import dll library handle:<nl>tdll = cs.WinDLL(pathToDLL)<nl>#specify result and argument types<nl>tdll.TST.restype = None<nl>tdll.TST.argtypes = [cs.POINTER(cs.POINTER(cs.c_double*3)), cs.POINTER(cs.c_long)]<nl><nl>#call the dll function 'TST':<nl>Ar = (cs.c_double*3)()<nl>_A = cs.pointer(Ar)<nl>tdll.TST(cs.byref(_A), cs.byref(cs.c_long(3)))<nl>result = Ar[:]","out":"Return double array through FORTRAN (DLL) to process further in python"}
{"in":"import datetime, calendar<nl>date1 = datetime.date(year1, month1, day1) # month and day are 1-base<nl>date2 = datetime.date(year2, month2, day2)<nl>days_in_first_year = (datetime.date(year1,12,31)-date1).days<nl>days_in_last_year = (date2 - datetime.date(year2, 1, 1)).days<nl>if year1 != year2:<nl><tab>n_days_list = [days_in_first_year]<nl><tab>for year in range(year1+1, year2): n_days_list.append(365 + (1*calendar.isleap(year)))<nl><tab>n_days_list.append(days_in_last_year)<nl>else: n_days_list = [days_in_first_year + days_in_last_year]","out":"How to Calculate the number of days in the year(s) between 2 dates in python"}
{"in":"QObject.sender","out":"How to reimplement triggered() signal in pyqt for a QAction?"}
{"in":"self.font = pygame.font.SysFont('Arial', 25)<nl><nl>def addText(self):<nl><tab>self.screen.blit(self.font.render('Hello!', True, (255,0,0)), (200, 100))<nl><tab>pygame.display.update()","out":"how can I add text to these rectangles?"}
{"in":"if isinstance(MyNodeModel.your_property, StringProperty):<nl><tab>print(\"a string\")","out":"Check the type of a property in neomodel"}
{"in":"m = np.array([x[:5] for x in d], dtype=object)","out":"How to include the first few items of a numpy array with python"}
{"in":"matplotlib.pyplot.switch_backend('Agg')","out":"How to prevent images from appearing on the screen in Matplolib? Python"}
{"in":"from scipy.cluster import hierarchy<nl>def getNewick(node, newick, parentdist, leaf_names):<nl><tab>if node.is_leaf():<nl><tab><tab>return \"%s:%.2f%s\" % (leaf_names[node.id], parentdist - node.dist, newick)<nl><tab>else:<nl><tab><tab>if len(newick) > 0:<nl><tab><tab><tab>newick = \"):%.2f%s\" % (parentdist - node.dist, newick)<nl><tab><tab>else:<nl><tab><tab><tab>newick = \");\"<nl><tab><tab>newick = getNewick(node.get_left(), newick, node.dist, leaf_names)<nl><tab><tab>newick = getNewick(node.get_right(), \",%s\" % (newick), node.dist, leaf_names)<nl><tab><tab>newick = \"(%s\" % (newick)<nl><tab><tab>return newick<nl><nl>tree = hierarchy.to_tree(Z,False)<nl>getNewick(tree, \"\", tree.dist, leaf_names)","out":"Save dendrogram to newick format"}
{"in":"with open('filename.pickle', 'rb') as infile:<nl><tab>loaded_people = pickle.load(infile)<nl><tab>loaded_user = pickle.load(infile)<nl>#have them input their username<nl>#have them input their password<nl>if username_password.get(username) == password:<nl><tab>print 'OK, loaded'<nl><tab>like_people = loaded_data<nl><tab>username_password = loaded_user<nl>else:<nl><tab>raise Exception('nice try but no cigar')","out":"How to Dump, Load and Read info from pickle"}
{"in":"from Tkinter import * # Python 3.x: from tkinter import *<nl><nl>def hello(e=None):<nl><tab>print('Hello')<nl><nl>root = Tk()<nl>Button(root, text='say hello', command=hello).pack()<nl>root.bind('<Escape>', lambda e: root.quit())<nl>root.bind('h', hello)<nl>root.mainloop()","out":"Tracing keypresses in python"}
{"in":"from selenium import webdriver<nl>browser = webdriver.Firefox()<nl>browser.get('http:\/\/subscene.com\/english\/How-I-Met-Your-Mother-Seventh-Season\/subtitle-482407.aspx')<tab><tab><nl>browser.execute_script('WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions(\"s$lc$bcr$downloadLink\", \"\", true, \"\", \"\/english\/How-I-Met-Your-Mother-Seventh-Season\/subtitle-482407-dlpath-90698\/zip.zipx\", false, true))')<nl>raw_input()","out":"Python: Get download link from javascript button"}
{"in":"def location(x,y,dim_x,dim_y):<nl><tab>index = 1*(y==0) + 2*(y==dim_y-1) + 3*(x==0) + 6*(x==dim_x-1)<nl><tab>return [\"interior\",\"top\",\"bottom\",\"left\",\"top-left\",<nl><tab><tab><tab>\"bottom-left\",\"right\",\"top-right\",\"bottom-right\"][index]","out":"Efficient method to determine location on a grid(array)"}
{"in":"with mock.patch.object(Parent, 'test_method') as mock_method:<nl><tab>child = Child()<nl><tab>mock_param = mock.Mock()<nl><tab>child.test_method(mock_param)<nl><tab>mock_method.assert_called_with(mock_param)","out":"How to mock a base class's method when it was overridden?"}
{"in":"array = [('item1',90),('item2',76),('item3',83),('item4',90)]<nl>srt = sorted(array,key=lambda x: x[1], reverse=True)<nl>rankings = []<nl>rank = 0<nl>from itertools import groupby<nl>for k,v in groupby(srt,lambda x: x[1]): # group by score<nl><tab>grp = [(rank,tup[0]) for tup in v] # get item tup[0] and put it in a tuple with the rank<nl><tab>rankings += grp<nl><tab>rank += len(grp) # increase rank for next grouping<nl>print(rankings)<nl>[(0, 'item1'), (0, 'item4'), (2, 'item3'), (3, 'item2')]","out":"Rank an array of tuples"}
{"in":"def sortOD(od):<nl><tab>res = OrderedDict()<nl><tab>for k, v in sorted(od.items()):<nl><tab><tab>if isinstance(v, dict):<nl><tab><tab><tab>res[k] = sortOD(v)<nl><tab><tab>else:<nl><tab><tab><tab>res[k] = v<nl><tab>return res","out":"Sorting a nested OrderedDict by key, recursively"}
{"in":"a + b + c","out":"Using 2 sets of brackets to slice"}
{"in":"AWS_S3_SECURE_URLS = True","out":"Using Django-Storages with amazon S3 and https"}
{"in":"__lt__()","out":"Ordering of Django models"}
{"in":"nargs='+'","out":"Python: argparse taking a list of variable size"}
{"in":"def test(a):<nl><tab>return a<nl><nl>def invoker(*args):<nl><tab>print sum(args) # Prints 25<nl><tab>print args # Prints (10, 15)<nl><nl>invoker(test(10), test(15))","out":"Function with arguments from other function"}
{"in":"data[0]['f'] = var","out":"Add element to a json in python"}
{"in":"def palindrome(s):<nl><tab>i = 0<nl><tab>while i <= len(s) \/ 2:<nl><tab><tab>if s[i] != s[-i - 1]:<nl><tab><tab><tab>return False<nl><tab><tab>i += 1<nl><tab>return True","out":"How to check for palindrome using while loop python"}
{"in":"class NamedFunction:<nl><tab>def __init__(self, name, f):<nl><tab><tab>self.f = f<nl><tab><tab>self.name = name<nl><nl><tab>def __call__(self, *args, **kwargs):<nl><tab><tab>return self.f(*args, **kwargs)<nl><nl><tab>def __str__(self):<nl><tab><tab>return self.name<nl><nl><nl>f = NamedFunction(\"lambda: 'blah'\", lambda: 'blah')<nl>print(f())<nl>print(f)","out":"How to replace __str__ for a function"}
{"in":"import socks, urllib2<nl>from sockshandler import SocksiPyHandler<nl>proxy_opener = urllib2.build_opener(SocksiPyHandler(socks.PROXY_TYPE_SOCKS5, \"IP\", 9050))<nl>print proxy_opener.open(\"http:\/\/whatismyip.org\/\").read()","out":"How can I unwrap a module with SocksiPy?"}
{"in":"import pyperclip<nl>pyperclip.copy('The text to be copied to the clipboard.')","out":"Change string to lowercase except for first character and copy to clipboard"}
{"in":"class B():<nl><tab>def hello(self):<nl><tab><tab>print \"hello\"<nl><nl>class A():<nl>   @staticmethod<nl>   def newHello(self):<nl><tab>   A.oldHello(self) # Here the error<nl><tab>   print ' world'<nl><nl>   def inject(self):<nl><tab>   A.oldHello = B.hello<nl><tab>   B.hello = A.newHello<nl><nl>A().inject()<nl>B().hello()","out":"how bounding static method in python?"}
{"in":"import matplotlib.pyplot as plt<nl><nl>a= [1,2,3,4,5,6,7,8,9]<nl>b= [5,3,4,5,3,2,1,2,3]<nl>plt.hist(a,9, weights=b)<nl>plt.show()","out":"Histogram from data which is already binned, I have bins and frequency values"}
{"in":"from selenium import webdriver<nl>from bs4 import BeautifulSoup<nl><nl>driver = webdriver.Firefox()<nl>driver.get(url)<nl>driver.set_window_position(0, 0)<nl>driver.set_window_size(100000, 200000)<nl>driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")<nl>time.sleep(5) # wait to load<nl><nl># at this point, if you see the Firefox window that opened you will see the message<nl><nl># Anyway, if you manage to get pass trough that blocking, you could load BeautifulSoup this way: <nl>soup = BeautifulSoup(driver.page_source)","out":"Href extraction by Web crawler using Python"}
{"in":"import matplotlib.pyplot as plt<nl>from mpl_toolkits.mplot3d import Axes3D<nl>import numpy as np<nl>import itertools<nl><nl>#read in data from csv organised in columns labelled 'lat','lon','elevation'<nl>data = np.recfromcsv('elevation-sample.csv', delimiter=',')<nl><nl># create a 3d axis on a figure<nl>fig = plt.figure()<nl>ax = fig.add_subplot(111, projection='3d')<nl><nl># Find unique (i.e. constant) latitude points<nl>id_list = np.unique(data['lat'])<nl><nl># stride is how many lines to miss.  set to 1 to get every line<nl># higher to miss more<nl>stride = 5<nl><nl># Extract each line from the dataset and plot it on the axes<nl>for id in id_list[::stride]:<nl><tab>this_line_data = data[np.where(data['lat'] == id)]<nl><tab>lat,lon,ele = zip(*this_line_data)<nl><tab>ax.plot(lon,lat,ele, color='black')<nl><nl># set the viewpoint so we're looking straight at the longitude (x) axis<nl>ax.view_init(elev=45., azim=90)<nl><nl>ax.set_xlabel('Longitude')<nl>ax.set_ylabel('Latitude')<nl>ax.set_zlabel('Elevation')<nl>ax.set_zlim([0,1500])<nl><nl>plt.show()","out":"Geographical data plot\/map with lines in python and matplotlib"}
{"in":"from xml.dom.minidom import parseString<nl>import json<tab><tab><nl>def bar(somejson, key):<nl><tab>def val(node):<nl><tab><tab># Searches for the next Element Node containing Value<nl><tab><tab>e = node.nextSibling<nl><tab><tab>while e and e.nodeType != e.ELEMENT_NODE:<nl><tab><tab><tab>e = e.nextSibling<nl><tab><tab>return (e.getElementsByTagName('string')[0].firstChild.nodeValue if e <nl><tab><tab><tab><tab>else None)<nl><tab># parse the JSON as XML<nl><tab>foo_dom = parseString(xmlrpclib.dumps((json.loads(somejson),)))<nl><tab># and then search all the name tags which are P1's<nl><tab># and use the val user function to get the value<nl><tab>return [val(node) for node in foo_dom.getElementsByTagName('name') <nl><tab><tab><tab>if node.firstChild.nodeValue in key]<nl><nl>bar(foo, 'P1')<nl>[u'cccc', u'aaa', u'ss']<nl>bar(foo, ('P1','P2'))<nl>[u'cccc', u'cccc', u'aaa', u'ss']","out":"How can I use python finding particular json value by key?"}
{"in":"class OneFruit(object):<nl><tab>def add_color(self, color):<nl><tab><tab>self.color = color<nl><tab>def add_taste(self, taste):<nl><tab><tab>self.taste = taste<nl><nl>class Fruit(object):<nl><tab>def add_item(self, name):<nl><tab><tab>setattr(self, name, OneFruit())","out":"Create a Subclass from a String"}
{"in":"cursor.execute(\"create table \" + config.table + \" (\" + \", \".join(config.cols) + \")\")","out":"how to add column name present in the list object into table"}
{"in":"X-CSRFToken","out":"403 FORBIDDEN use ajax to send post DJANGO"}
{"in":"__init__.py","out":"templategs \"not a valid tag library\", fails to load models"}
{"in":"#!\/usr\/bin\/env python<nl>from contextlib import closing<nl>from selenium.webdriver import Firefox # pip install selenium<nl>from selenium.webdriver.support.ui import WebDriverWait<nl><nl># use firefox to get page with javascript generated content<nl>with closing(Firefox()) as browser:<nl><tab> browser.get(url)<nl><tab> button = browser.find_element_by_name('button')<nl><tab> button.click()<nl><tab> # wait for the page to load<nl><tab> WebDriverWait(browser, timeout=10).until(<nl><tab><tab> lambda x: x.find_element_by_id('someId_that_must_be_on_new_page'))<nl><tab> # store it to string variable<nl><tab> page_source = browser.page_source<nl>print(page_source)","out":"Get page generated with Javascript in Python"}
{"in":"sorted(set(itertools.chain.from_iterable(sequences)))","out":"Best \/ most pythonic way to get an ordered list of unique items"}
{"in":"class StrippedCharField(CharField):<nl><tab> \"\"\"Newforms CharField that strips trailing and leading spaces.\"\"\"<nl><tab> def clean(self, value):<nl><tab><tab> if value is not None:<nl><tab><tab><tab> value = value.strip()<nl><tab><tab> return super(StrippedCharField, self).clean(value)","out":"Strip spaces from Django form"}
{"in":"trie = {\"a\": {\"b\": {\"e\": {},<nl><tab><tab><tab><tab><tab>\"f\": {},<nl><tab><tab><tab><tab><tab>\"g\": {\"l\": {},<nl><tab><tab><tab><tab><tab><tab>  \"m\": {},<nl><tab><tab><tab><tab><tab><tab>  \"n\": {}}},<nl><tab><tab><tab>  \"c\": {\"h\": {},<nl><tab><tab><tab><tab><tab>\"i\": {}},<nl><tab><tab><tab>  \"d\": {\"j\": {},<nl><tab><tab><tab><tab><tab>\"k\": {}}}}<nl><nl>target = 'achqr'<nl>sub_trie = trie<nl>longest_sequence = []<nl>for c in target:<nl><tab>sub_trie = sub_trie.get(c)<nl><tab>if sub_trie is None:  # the letter being looked for doesn't exist after this sequence<nl><tab><tab>break<nl><tab>longest_sequence.append(c)  # track the sequence since the trie is not reverse linked<nl>print(longest_sequence)","out":"How to search for a word in a tree represented as a dictionary of dictionaries in python?"}
{"in":"wtype=np.dtype([('x',x.dtype),('y',y.dtype),('z',z.dtype)])<nl>w=np.empty(len(x),dtype=wtype)<nl>w['x']=x<nl>w['y']=y<nl>w['z']=z","out":"numpy Stacking 1D arrays into structured array"}
{"in":"def md5(fname):<nl><tab>hash = hashlib.md5()<nl><tab>with open(fname, \"rb\") as f:<nl><tab><tab>for chunk in iter(lambda: f.read(4096), b\"\"):<nl><tab><tab><tab>hash.update(chunk)<nl><tab>return hash.hexdigest()","out":"Generating a MD5 checksum of a file?"}
{"in":"import MySQLdb<nl>import os<nl>import time<nl>from stat import ST_MTIME<nl><nl>TIME_TO_SLEEP = 1<tab><tab>  # to avoid CPU burning<nl><nl>mydb = MySQLdb.connect(host=\"IP_add\", user=\"uname\", passwd=\"pass\", db=\"DB_name\")<nl>cursor = mydb.cursor()<nl>last_date = 0<nl>while True:<tab><tab><tab><tab><tab><tab># or what you want as stop condition<nl><tab>time.sleep(TIME_TO_SLEEP)<nl><tab>stat = os.stat(filename)<nl><tab>if stat[ST_MTIME] > last_date: # check the last modification date<nl><tab><tab>last_date = stat[ST_MTIME] # if more recent, store the last date<nl><tab><tab>with open(filename) as f:   # open the file<nl><tab><tab><tab>sql = f.read()<tab><tab> # put the content in the sql data base<nl><tab><tab><tab>if sql:<nl><tab><tab><tab><tab>cursor.execute(sql)<nl><tab><tab><tab><tab>mydb.commit()<nl><nl>mydb.close()","out":"Running a Python Script to read info. from a new .txt file being generated at a known location every 1 sec"}
{"in":"data = {<nl><tab>'name'<tab>   : 'thomas',<nl><tab>'id'<tab><tab> : 'bonjour',<nl><tab>'city'<tab>   : 'cerfontaine',<nl><tab>'auth_token' : YOUR_AUTH_TOKEN_HERE<nl>}","out":"Api key for dashing dashboard"}
{"in":"with open('file_a','r') as fa:  # open file a --> read the files into lists<nl><tab>list_a = fa.read().splitlines()<nl>with open('file_b','r') as fb:  # open file b --> read the files into lists<nl><tab>list_b = fb.read().splitlines()<nl><nl># get element in list_b if list_a contain the element(only first 24 characters)<nl>match_list = [n for n in list_b if n[:24] in list_a]<nl><nl>with open('file_c','w+') as fc:  # write the matching list to the new file<nl><tab>fc.write('<nl>'.join(match_list))","out":"How to match two text files, find matches and replace with original content?"}
{"in":"import numpy as np<nl>import theano<nl>import theano.tensor as tt<nl><nl><nl>def numpy_v1(a, b):<nl><tab>ainvb = np.zeros((3, 2, 4))<nl><tab>for i in range(4):<nl><tab><tab>ainvb[:, :, i] = a \/ b[:, i].T<nl><tab>return ainvb<nl><nl><nl>def numpy_v2(a, b):<nl><tab>return a[:, :, None] \/ b<nl><nl><nl>def compile_theano_v1():<nl><tab>a, b = tt.matrices('a', 'b')<nl><tab>return theano.function([a, b], a[:, :, None] \/ b)<nl><nl><nl>def main():<nl><tab>dt = np.dtype(np.float32)<nl><nl><tab>a = [[12, 3],<nl><tab><tab> [2, 4],<nl><tab><tab> [2, 4], ]<nl><nl><tab>b = [[12, 3, 2, 3],<nl><tab><tab> [2, 4, 4, 5]]<nl><nl><tab>a = np.asarray(a, dtype=dt)<nl><tab>b = np.asarray(b, dtype=dt)<nl><tab>print(a.shape)<nl><tab>print(b.shape)<nl><nl><tab>theano_v1 = compile_theano_v1()<nl><nl><tab>numpy_v1_ainvb = numpy_v1(a, b)<nl><tab>numpy_v2_ainvb = numpy_v2(a, b)<nl><tab>theano_v1_ainvb = theano_v1(a, b)<nl><nl><tab>assert np.allclose(numpy_v1_ainvb, numpy_v2_ainvb)<nl><tab>assert np.allclose(numpy_v2_ainvb, theano_v1_ainvb)<nl><nl><nl>main()","out":"matrix divided by rows of another matrix, without a loop in theano"}
{"in":"connect(checkbox, SIGNAL(stateChanged(int)), button, SLOT(buttonStateChanged(int)));","out":"How to disable button until check box is checked in pyqt?"}
{"in":"if name in exons:<nl><tab>y = exons[name]<nl><tab>minDist = 99999 # large number<nl><tab>minIdx = None<nl><tab>minNum = None<nl><tab>for i, (low,high) in enumerate(y):<nl><tab><tab>dlow = abs(low - ppos1)<nl><tab><tab>dhigh = abs(high - ppos1)<nl><tab><tab>dist = min(dlow, dhigh)<nl><tab><tab>if dist < minDist:<nl><tab><tab><tab>minDist = dist<nl><tab><tab><tab>minIdx = i<nl><tab><tab><tab>minNum = 0 if dlow < dhigh else 1<nl><tab>print(y[minIdx])<nl><tab>print(y[minIdx][minNum])","out":"Finding nearest set of numbers given a position"}
{"in":"if stateid in states:<nl><tab>print(states[stateid])","out":"Having trouble matching dict key with value"}
{"in":"import re<nl>scores = [\"Bob Foo - 10 \/ 10<nl>\",<nl><tab><tab>  \"John Smith - 5 \/ 10<nl>\",<nl><tab><tab>  \"Bob Foo - 7 \/ 10<nl>\",<nl><tab><tab>  \"Jack T - 6 \/ 10<nl>\",<nl><tab><tab>  \"Jack T - 4 \/ 10<nl>\",<nl><tab><tab>  \"Bob Foo - 9 \/ 10<nl>\"]<nl><nl># First, split the names and scores up<nl>scores = [re.match('(\\S+ \\S+) - (\\d+)', score).groups() for score in scores]<nl>#print (scores)<nl><nl># Convert the number string into an integer<nl>scores = [[score[0], int(score[1])] for score in scores]<nl>#print (scores)<nl><nl># Create a dictionary, keyed by the name<nl>names = set(score[0] for score in scores)<nl>scores = {<nl><tab>name: [score[1] for score in scores if name == score[0]]<nl><tab>for name in names<nl>}<nl># print (scores)<nl><nl># Compute the average for each name<nl>scores = {<nl><tab>name: sum(score)\/len(score)<nl><tab>for name, score in scores.items()<nl>}<nl>print (scores)","out":"Finding averages from strings in a list in Python 3"}
{"in":"import json<tab><nl><nl>j = \"\"\"[<nl>  {\"Event\":\"start\",\"EventDateTime\":\"2015-09-15T03:45:16.681428Z\"},<nl>  {\"Event\":\"process\",\"EventDateTime\":\"2015-09-15T03:45:16.681428Z\"},<nl>  {\"Event\":\"end\",\"EventDateTime\":\"2015-09-15T03:45:16.681428Z\"}<nl>]\"\"\"<nl><nl>j = json.loads(j)<nl>for item in j:<nl><tab>print '%s\\t%s' % (item['Event'], item['EventDateTime'])","out":"Parsing JSON array in Python to create a delimited string"}
{"in":"ax2.patch.set_visible(True)","out":"How to set background of matplotlib with two rearranged axes?"}
{"in":"from itertools import izip_longest<nl>with open(\"filea.csv\") as source1,open(\"fileb.csv\")as source2,open(\"filec.csv\",\"a\") as dest2:<nl><tab>zipped = izip_longest(source1,source2) # use izip_longest which will add None as a fillvalue where we have uneven length files<nl><tab>for line in zipped:<nl><tab><tab>if line[1]: # if we have two lines to join<nl><tab><tab><tab>dest2.write(\"{},{}<nl>\".format(line[0][:-1],line[1][:-1]))<nl><tab><tab>else: # else we are into the longest file, just treat line as a single item tuple<nl><tab><tab><tab> dest2.write(\"{}\".format(line[0]))","out":"How to append one csv file to another with python"}
{"in":"for word in commonWords :<nl><tab>text = text.replace(' '+word+' ', ' ')","out":"Replacing all occurrences of words from a given set, but only if the word is not contained within another word"}
{"in":"[main_list[x] for x in indexes]","out":"Picking out items from a python list which have specific indexes"}
{"in":"import urllib<nl>import string<nl>import random<nl>import os<nl><nl>filename_charset = string.ascii_letters + string.digits<nl>filename_length = 10<nl>file_save_dir = '\/home\/user\/download\/'<nl><nl>filename = ''.join(random.choice(filename_charset)<nl><tab><tab><tab><tab>   for s in range(filename_length))<nl><nl>urllib.urlretrieve (\"http:\/\/www.example.com\/image.png\", <nl><tab><tab><tab><tab><tab>os.path.join(file_save_dir, filename + '.png'))","out":"How to save an Image using URL in python\/django"}
{"in":"def save(self, **kwargs):<nl><tab>from django.utils.text import slugify<nl><nl><tab>self.slug = slugify(self.user.username)<nl><tab>super(UserProfile, self).save()","out":"generating slugfield from User"}
{"in":"import json<nl>import re<nl><nl>def parse(v):<nl><tab># Remove newlines and replace \"=\" with \":\"<nl><tab>v1 =  v.replace('=', ':').replace(\"<nl>\", \"\")<nl><tab># Enclose strings in double quotes<nl><tab>v2 = re.sub(r'(\\d*[a-zA-Z][a-zA-Z0-9]*)', r'\"\\g<1>\"', v1)<nl><tab># If you want booleans<nl><tab>v3 = re.sub(r'\"(true|false)\"', r'\\g<1>', v2)<nl><tab># Create lists<nl><tab>return json.loads(re.sub(r\"{([^:]+)}\", r'[\\g<1>]', v3))","out":"Convert pseudo Json string into a Python object"}
{"in":"values = [None]*1000","out":"how to define a list with predefined length in Python"}
{"in":"def application(env, start_response):<nl><tab>start_response('200 OK', [('Content-Type','text\/html')])<nl><tab>return \"Hello World\"","out":"nginx and uWSGI obtain authentication data in Python"}
{"in":"from django.db.models import CharField<nl>from django.db.models import  Q<nl><nl>fields = [f for f in table._meta.fields if isinstance(f, CharField)]<nl>queries = [Q(**{f.name: SEARCH_TERM}) for f in fields]<nl><nl>qs = Q()<nl>for query in queries:<nl><tab>qs = qs | query<nl><nl>table.objects.filter(qs)","out":"searching all fields in a table in django"}
{"in":"instancemodelname = ContentType.objects.get(app_label=\"myappname\", model=\"mymodelname\")<nl>b = instancemodelname.model_class()(account_username='testtestest')<nl>b.save()","out":"Django \/ Python, Make database save function re-usable (so that it takes modelname and appname from strings), using contenttypes or some other method?"}
{"in":"count = 0<nl>for item in items:<nl><tab>if item == 'Boston Americans':<nl><tab><tab>count += 1<nl>print count","out":"Another way to count occurrence in a list"}
{"in":"from django.db.models import Q<nl>from django.db.models.query import QuerySet<nl>import operator<nl><nl>def django_admin_keyword_search(model, keywords, search_fields):<nl><tab>\"\"\"Search according to fields defined in Admin's search_fields\"\"\"<nl><tab>all_queries = None<nl><nl><tab>for keyword in keywords.split(' '):  #breaks query_string into 'Foo' and 'Bar'<nl><tab><tab>keyword_query = None<nl><nl><tab><tab>for field in search_fields:<nl><tab><tab><tab>each_query = Q(**{field+'__icontains':keyword})<nl><nl><tab><tab><tab>if not keyword_query:<nl><tab><tab><tab><tab>keyword_query = each_query<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>keyword_query = keyword_query | each_query<nl><nl><tab><tab>if not all_queries:<nl><tab><tab><tab>all_queries = keyword_query<nl><tab><tab>else:<nl><tab><tab><tab>all_queries = all_queries & keyword_query<nl><nl><tab>result_set = model.objects.filter(all_queries).distinct()<nl><nl><tab>return result_set","out":"Using Django Admin search engine in my own views"}
{"in":"dir = 'C:\\Users\\Shankar\\Documents\\Other'<nl>if os.path.exists(dir):<nl><tab>shutil.rmtree(dir)<nl>os.makedirs(dir)","out":"Python - Overwriting Folder If It Already Exists"}
{"in":"f = open('workfile', 'r')<nl>for num,line in enumerate(f):<nl><tab>print(num+\" \"+line)","out":"Prepend line number to string in python"}
{"in":"nreceive = True#nreceive = Not Received<nl>ticks = 0<nl>f = None<nl>while nreceive and ticks < 101:#try to get the info 100 times or until it's received<nl><tab>ticks+=1<nl><tab>try:<nl><tab><tab>f = mysocket.makefile('rb')<nl><tab><tab>if not f == None:<nl><tab><tab><tab>nreceive = False<nl><tab>except:<nl><tab><tab>pass<nl>data = f.read(1024)","out":"Client Not Receiving Data in Python"}
{"in":"session['user_id']","out":"Pyramid login user"}
{"in":"from sqlalchemy.sql.expression import bindparam<nl>stmt = addresses.update().\\<nl><tab>where(addresses.c.id == bindparam('_id')).\\<nl><tab>values({<nl><tab><tab>'user_id': bindparam('user_id'),<nl><tab><tab>'email_address': bindparam('email_address'),<nl><tab>})<nl><nl>conn.execute(stmt, [<nl><tab>{'user_id': 1, 'email_address' : 'jack@yahoo.com', '_id':1},<nl><tab>{'user_id': 1, 'email_address' : 'jack@msn.com', '_id':2},<nl><tab>{'user_id': 2, 'email_address' : 'www@www.org', '_id':3},<nl><tab>{'user_id': 2, 'email_address' : 'wendy@aol.com', '_id':4},<nl>])","out":"Bulk update in SQLAlchemy Core using WHERE"}
{"in":"keys_list = map(str, keys_list)<nl># or keys_list = [str(key) for key in keys_list]","out":"Python: Get rid of u's from the keys list generated from json"}
{"in":"import pygame, sys<nl>from pygame.locals import *<nl><nl>SCREEN_X=400<nl>SCREEN_Y=400<nl>#Screen size<nl><nl>SPRT_RECT_X=0  <nl>SPRT_RECT_Y=0<nl>#This is where the sprite is found on the sheet<nl><nl>LEN_SPRT_X=100<nl>LEN_SPRT_Y=100<nl>#This is the length of the sprite<nl><nl>screen = pygame.display.set_mode((SCREEN_X, SCREEN_Y)) #Create the screen<nl>sheet = pygame.image.load('C:\\YOURFILE') #Load the sheet<nl><nl>sheet.set_clip(pygame.Rect(SPRT_RECT_X, SPRT_RECT_Y, LEN_SPRT_X, LEN_SPRT_Y)) #Locate the sprite you want<nl>draw_me = sheet.subsurface(sheet.get_clip()) #Extract the sprite you want<nl><nl>backdrop = pygame.Rect(0, 0, SCREEN_X, SCREEN_Y) #Create the whole screen so you can draw on it<nl><nl>screen.blit(draw_me,backdrop) #'Blit' on the backdrop<nl>pygame.display.flip()<nl>#Draw the sprite on the screen","out":"How do you select a sprite image from a sprite sheet in python?"}
{"in":"def pairwise(iterable):<nl><tab>it = iter(iterable)<nl><tab>last = next(it)+next(it)<nl><tab>for curr in it:<nl><tab><tab>yield last, curr<nl><tab><tab>last = last[1]+curr<nl><nl><nl>def valid_pair((last, curr)):<nl><tab>return last[0] in valid and last[1] in valid and curr in valid","out":"Create counter for triples of subsequent letters"}
{"in":"# -*- coding: utf-8 -*-<nl>\"\"\"<nl>Description of example<nl>\"\"\"<nl><nl>import pyqtgraph as pg<nl>from pyqtgraph.Qt import QtCore, QtGui<nl>import numpy as np<nl><nl>pg.mkQApp()<nl><nl>axis = pg.DateAxisItem(orientation='bottom')<nl>pw = pg.PlotWidget(axisItems={'bottom': axis})<nl>pw.setWindowTitle('pyqtgraph example: DateTimeAxis')<nl>pw.show()<nl>pw.setXRange(1383960000, 1384020000) <nl><nl>## Start Qt event loop unless running in interactive mode or using pyside.<nl>if __name__ == '__main__':<nl><tab>import sys<nl><tab>if (sys.flags.interactive != 1) or not hasattr(QtCore, 'PYQT_VERSION'):<nl><tab><tab>QtGui.QApplication.instance().exe","out":"How to access DateAxisItem from a branch"}
{"in":"def gen_alphaLabels(donotInclude):<nl><tab>for i in range(65,91):<nl><tab><tab>char = chr(i)<nl><tab><tab>if char not in donotInclude:<nl><tab><tab><tab>yield char","out":"Skipping over values in a generator function"}
{"in":"text = 'abcdefa'<nl>pattern = re.compile('a|c')<nl>[(m.group(), m.start()) for m in pattern.finditer(text)]","out":"How to get a list of character positions in Python?"}
{"in":"file = str(QFileDialog.getExistingDirectory(self, \"Select Directory\"))","out":"how to have a directory dialog in Pyqt"}
{"in":"re.sub(\"\\((\\w*) (\\w*)\\)\", r\"\\1\", t)","out":"Delete leaves in a tree with regex (Python)"}
{"in":"values, vectors = scipy.sparse.linalg.eigs(P, k=1, sigma=1)","out":"How do I find out eigenvectors corresponding to a particular eigenvalue of a matrix?"}
{"in":"from collections import defaultdict<nl><nl>words = \"apple banana apple strawberry banana lemon\"<nl><nl>d = defaultdict(int)<nl>for word in words.split():<nl><tab>d[word] += 1","out":"item frequency count in python"}
{"in":"from netCDF4 import Dataset<nl><nl># a dictionary of lists that hold all the datasets from a given day<nl>grouped_datasets = {}<nl><nl>for f in listdir(path):<nl><tab>if isfile(join(path,f)):<nl><tab><tab>full_path = join(path,f)<nl><tab><tab>f = Dataset(full_path, 'r')<nl><tab><tab>basetime = f.variables['base_time'][:]<nl><tab><tab>altitude = f.variables['alt'][:]<nl><tab><tab>temp = f.variables['tdry'][:]<nl><tab><tab>actual_date =  strftime(\"%Y-%m-%d %H:%M:%S\", gmtime(basetime))<nl><tab><tab>measurement_day =  strftime(\"%Y-%m-%d\", gmtime(basetime))<nl><nl><tab><tab># if we haven't encountered any datasets from this day yet...<nl><tab><tab>if measurement_day not in grouped_datasets:<nl><tab><tab><tab># add that day to our dict<nl><tab><tab><tab>grouped_datasets[measurement_day] = []<nl><nl><tab><tab># now append our dataset to the correct day (list)<nl><tab><tab>grouped_datasets[measurement_day].append(f)","out":"group a bunch of files by day"}
{"in":"def limitSizeDay(*args):<nl><tab>value = dayValue.get();<nl><tab>if len(value) > 2: dayValue.set(value[:2]);<nl><nl>dayValue = StringVar();<nl>dayValue.trace('w', limitSizeDay);<nl><nl>day_entry1=Entry(List1, bg=\"#282B2B\", fg=\"white\", width=2, textvariable=dayValue);<nl>day_entry1.place(x=77, y=58);","out":"(Python) How to limit an entry box to 2 characters max"}
{"in":"__import__(attackerControlledString)","out":"Is it possible to inject shell\/python commands from a configuration file?"}
{"in":"g = Github(token)<nl>user = g.get_user()<nl>repo = user.create_repo(full_name)","out":"How to create a new repository with PyGithub"}
{"in":"for i in range(len(table_data)):<nl>  for j in range(len(table_data[i])):<nl><tab>table_data[i][j] = len(table_data[i][j])","out":"Turning a list of string values into a list of integers for the length of those strings"}
{"in":"import os<nl>from os.path import join, isdir, islink, isfile<nl><nl>def mywalk(top, topdown=True, onerror=None, ignore_list=('.ignore',)):<nl><tab>try:<nl><tab><tab># Note that listdir and error are globals in this module due<nl><tab><tab># to earlier import-*.<nl><tab><tab>names = os.listdir(top)<nl><tab>except Exception, err:<nl><tab><tab>if onerror is not None:<nl><tab><tab><tab>onerror(err)<nl><tab><tab>return<nl><tab>if len([1 for x in names if x in ignore_list]):<nl><tab><tab>return <nl><tab>dirs, nondirs = [], []<nl><tab>for name in names:<nl><tab><tab>if isdir(join(top, name)):<nl><tab><tab><tab>dirs.append(name)<nl><tab><tab>else:<nl><tab><tab><tab>nondirs.append(name)<nl><nl><tab>if topdown:<nl><tab><tab>yield top, dirs, nondirs<nl><tab>for name in dirs:<nl><tab><tab>path = join(top, name)<nl><tab><tab>if not islink(path): <nl><tab><tab><tab>for x in mywalk(path, topdown, onerror, ignore_list):<nl><tab><tab><tab><tab>yield x<nl><tab>if not topdown:<nl><tab><tab>yield top, dirs, nondirs","out":"A Python walker that can ignore directories"}
{"in":"g = df.groupby(\"ID\")<nl>s = g[\"Based on\"].apply(lambda group: group.values)<nl>s.to_frame()","out":"Python Pandas groupby assignment of object dtypes"}
{"in":"class Track:<nl><tab>def __init__(self, artist, title, album=None):<nl><tab><tab>self._artist = str(artist)<nl><tab><tab>self._title = str(title)<nl><tab><tab>self._album = album<nl><nl><tab>def __str__(self):<nl><tab><tab>return self.artist + \" \" + self.title + \" \" + self.album<nl><tab>#example for artist<nl><tab>@property<nl><tab>def artist(self):<nl><tab><tab>return self._artist<nl><tab>@artist.setter<nl><tab>def artist(self, artist):<nl><tab><tab>if artist != type(\"string\"):#ensure that value is of string type.<nl><tab><tab><tab>raise ValueError<nl><tab><tab>else:<nl><tab><tab><tab>self._artist = artist<nl><tab>#this way you could properly make setters and getter for your attributes<nl><tab>#same ofr the other stuff<nl><nl>Track = Track(\"Andy\", \"Me\", \"Self named\")","out":"Defining a class using objects and strings with python"}
{"in":"n=int(raw_input('n='))<nl>for i in range(1,n+1):<nl><tab>for j in range(1,n+1):<nl><tab><tab>if j==1 or j==n or j==i:<nl><tab><tab><tab>print'#',<nl><tab><tab>else:<nl><tab><tab><tab>print' ',<nl><nl><tab>print","out":"Print the following pattern in Python language"}
{"in":"small_list_set = set(small_list)<nl>for line in big_list:<nl><tab>for item in line:<nl><tab><tab>if item in small_list_set:<nl><tab><tab><tab>bucket.append(line)","out":"Fastest algorithm for finding overlap between two very large lists?"}
{"in":"string = 'strings'<nl><nl>new_D = {'r': 1, 's': 1, 't': 1, 'r' : 3, 'i' : 4 }<nl><nl>sum_of_chars = 0<nl>for character in string:<nl><tab>if character in new_D:<nl><tab><tab>sum_of_chars += new_D[character]<nl><tab>else:<nl><tab><tab>sum_of_chars += 1 # Default?<nl><nl>print(sum_of_chars)","out":"How to get value for each string index matching key in dictionary in Python"}
{"in":"pylab.get_backend()","out":"Interactively Display graphs in matplotlib in python"}
{"in":"def test_overlap(dt1_st, dt1_end, dt2_st, dt2_end):<nl><tab>return not (dt1_st < dt2_end and dt1_end >dt2_st)","out":"Find if dates are overlapping in a list of N pairs"}
{"in":"xlrd.xldate.xldate_from_date_tuple","out":"How to convert from Python date to Excel date using xlrd (attribute xlrd.xldate_from_date_tuple does not exist)"}
{"in":"x['C'] = x['B'].replace(to_replace=r'\\b'+x['A']+r'\\b', value='',regex=True)","out":"Remove words that appear in other column, Pandas"}
{"in":"import urllib3<nl>c = urllib3.HTTPSConnectionPool('10.0.3.168', port=9001, cert_reqs='CERT_NONE',<nl><tab><tab><tab><tab><tab><tab><tab><tab>assert_hostname=False)<nl>c.request('GET', '\/')","out":"Ignore certificate validation with urllib3"}
{"in":"Content-Type","out":"Bottle mishandling JSON data in Python3, but not Python2"}
{"in":"def puzzle(s,a,b):<nl><tab>if a*b != len(s):<nl><tab>   print \"Not possible\"<nl><tab>   return<nl><tab>start =0<nl><tab>end = b+1<nl><tab>output =\"\"<nl><tab>for i in range(0,a):<nl><tab><tab>output= output+s[start: end]+\"<nl>\"<nl><tab><tab>start = end+1<nl><tab><tab>end = end+b<nl><tab>print output","out":"How to split string at regular intervals in Python 3"}
{"in":"return render_to_response('base_index.html', locals(), csrfContext)","out":"Help with passing variables w\/ csrfContext"}
{"in":"name = input(\"Insert the name you want to delete: \")<nl># let's strip excessive whitespace and change to lower case:<nl>name = name.strip().lower()<nl>book = \"data.txt\"<nl><nl># use 'with' construct to ensure that file is closed after use:<nl>with open(book, 'r') as f: <nl><tab>lines = f.read().splitlines()<nl><nl>filtered = []<nl>for line in lines:<nl><tab>try: # guard against incorrect record, e.g. 'Guido, 1956'<nl><tab><tab>name_, sex, year = line.split(',')<nl><tab>except ValueError:<nl><tab><tab>print(\"cannot unpack this line:\", line)<nl><tab><tab>continue<nl><tab>if name == name_.strip().lower():<nl><tab><tab>continue # we don't want this line, so we skip it<nl><tab>filtered.append(line) # line is ok, we keep it<nl><nl># join list of lines into one string and write to the file:<nl>with open(book, 'w') as f:<nl><tab>f.write('<nl>'.join(filtered))","out":"Delete a specific string from a list of strings in a file python"}
{"in":"re.sub(r'<p>(?=[A-Z]{2,})','<i>',MyText)","out":"re.sub (python) substitute part of the matched string"}
{"in":"if self.isCellEditControlShown:<nl><tab># _active_row and _active_col are set in the event handler...<nl><tab>cellEditor = self.GetCellEditor(self._active_row, self._active_col)<nl><tab>textControl = cellEditor.GetControl()<nl><tab>textControl.Paste()","out":"wxPython: how to implement paste in a grid cell?"}
{"in":"import time, Image<nl><nl>import cv2<nl>from livestreamer import Livestreamer<nl><nl># change to a stream that is actually online<nl>livestreamer = Livestreamer()<nl>plugin = livestreamer.resolve_url(\"http:\/\/twitch.tv\/flosd\")<nl>streams = plugin.get_streams()<nl>stream = streams['mobile_High']<nl><nl># download enough data to make sure the first frame is there<nl>fd = stream.open()<nl>data = ''<nl>while len(data) < 3e5:<nl><tab>data += fd.read()<nl><tab>time.sleep(0.1)<nl>fd.close()<nl><nl>fname = 'stream.bin'<nl>open(fname, 'wb').write(data)<nl>capture = cv2.VideoCapture(fname)<nl>imgdata = capture.read()[1]<nl>imgdata = imgdata[...,::-1] # BGR -> RGB<nl>img = Image.fromarray(imgdata)<nl>img.save('frame.png')<nl># img.show()","out":"Downloading the first frame of a twitch.tv stream"}
{"in":"cipher = {}<nl>for f in open('mapping.txt'):<nl>  org, cip = f.split()<nl>  cipher[ord(org)] = cip<nl><nl><nl>inpt = input('Enter string: ')<nl><nl>inpt = inpt.translate(cipher)<nl>print('Message: ' + inpt)","out":"How to cipher a string with info from a txt file?"}
{"in":"if condition:<nl><tab>return redirect('\/dashboard\/')<nl>else:<nl><tab>return super(UserFormView, self).get(request)","out":"Django: FormView: How to add initial logic?"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl><nl>shifts = np.linspace(1, 50, 25)[:, np.newaxis]<nl>x = np.arange(50)[np.newaxis, :]<nl>data = np.exp(-(x - shifts)**2 \/ 50) * shifts<nl><nl>fig, (ax1, ax2) = plt.subplots(2, 1)<nl><nl>im1 = ax1.imshow(data, interpolation='none', cmap='viridis')<nl>fig.colorbar(im1, ax=ax1, label='raw values')<nl><nl>norm_data = (data - np.min(data, axis=1)[:, np.newaxis]) \/ np.ptp(data, axis=1)[:, np.newaxis]<nl>im2 = ax2.imshow(norm_data, interpolation='none', cmap='viridis')<nl>fig.colorbar(im2, ax=ax2, label='normalized by row')","out":"How to scale values in the heamap in row direction using Matplotlib's \"imshow\"?"}
{"in":"#!\/usr\/bin\/env python<nl>import wx<nl>class MyFrame(wx.Frame):<nl><tab>def __init__(self, parent, ID, title):<nl><tab><tab>wx.Frame.__init__(self, parent, ID, title, wx.DefaultPosition)<nl><tab><tab>Buttons = []<nl><tab><tab>Buttons.append(wx.Button(self,-1, \"Approve Location\"))<nl><tab><tab>Buttons.append(wx.Button(self,-1, \"Approve Item\"))<nl><tab><tab>Buttons.append(wx.Button(self,-1, \"Change Qty\"))<nl><tab><tab>Buttons.append(wx.Button(self,-1, \"Approve\"))<nl><tab><tab>sizer = wx.GridBagSizer(5,3)<nl><tab><tab>sizer.Add(Buttons[0], (0, 5), (1,1), wx.EXPAND)<nl><tab><tab>sizer.Add(Buttons[1], (1, 4), (1,1), wx.EXPAND)<nl><tab><tab>sizer.Add(Buttons[2], (1, 5), (1,1), wx.EXPAND)<nl><tab><tab>sizer.Add(Buttons[3], (2, 5), (1,1), wx.EXPAND)<nl><tab><tab>self.SetSizerAndFit(sizer)<nl><tab><tab>self.Centre()<nl>class MyApp(wx.App):<nl><tab>def OnInit(self):<nl><tab><tab>frame = MyFrame(None, -1, \"Gridbagsizer\")<nl><tab><tab>frame.Show(True)<nl><tab><tab>self.SetTopWindow(frame)<nl><tab><tab>return True<nl>if __name__ == \"__main__\":<nl><tab>app = MyApp(0)<nl><tab>app.MainLoop()","out":"alligment of objects in wxpython"}
{"in":"import sys<nl>from PyQt5.QtGui import *<nl>from PyQt5.QtWidgets import *<nl>from PyQt5.QtCore import *<nl><nl>class Window(QWidget):<nl><tab>def __init__(self, *args, **kwargs):<nl><tab><tab>QWidget.__init__(self, *args, **kwargs)<nl><nl><tab><tab>self.label = QLabel(\"Test\", self)<nl><tab><tab>self.label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)<nl><tab><tab>self.label.setAlignment(Qt.AlignCenter)<nl><tab><tab>self.label.setStyleSheet(\"QLabel {background-color: red;}\")<nl><nl><tab><tab>self.button = QPushButton(\"Test\", self)<nl><nl><tab><tab>self.layout = QGridLayout()<nl><tab><tab>self.layout.addWidget(self.label, 0, 0)<nl><tab><tab>self.layout.addWidget(self.button, 0, 1)<nl><nl><tab><tab>self.setLayout(self.layout)<nl><tab><tab>self.show()<nl><nl>app = QApplication(sys.argv)<nl>win = Window()<nl>sys.exit(app.exec_())","out":"PyQt5: Center align a label"}
{"in":"input_file=\"input_{0}.in\".format(case)<nl><nl>os.system=(\".\/a.out {0}\".format(input_file))","out":"running a script with an input file in python"}
{"in":"input = open(\"sparse.csv\").read().split() # split by newlines and spaces<nl>i = iter(input)<nl>for date in i:<nl><tab>if date != \"nan\":<nl><tab><tab>value = i.next()<nl><tab><tab># process pairs","out":"reading sparse csv file into pandas"}
{"in":"import cv<nl>resim = cv.LoadImage('image.jpg')<nl>capture = cv.CaptureFromFile('video.avi')<nl>while(1):<nl><tab>frame = cv.QueryFrame(capture)<nl><tab>cv.SetImageROI(frame,(100,100,resim.width,resim.height))<nl><tab>cv.Add(frame,resim,frame)<nl><tab>cv.ResetImageROI(frame)<nl><tab>cv.ShowImage('frame',frame)<nl><tab>if cv.WaitKey(33)==27:<nl><tab><tab>break","out":"Merge picture with video"}
{"in":"en-ner-person.bin","out":"How to find a name Entity in a text in java"}
{"in":"import cPickle<nl># save the classifier<nl>with open('my_dumped_classifier.pkl', 'wb') as fid:<nl><tab>cPickle.dump(gnb, fid)<tab><nl><nl># load it again<nl>with open('my_dumped_classifier.pkl', 'rb') as fid:<nl><tab>gnb_loaded = cPickle.load(fid)","out":"Save classifier to disk in scikit-learn"}
{"in":"class MARGINS(ctypes.Structure):<nl>  _fields_ = [(\"cxLeftWidth\", c_int),<nl><tab><tab><tab>  (\"cxRightWidth\", c_int),<nl><tab><tab><tab>  (\"cyTopHeight\", c_int),<nl><tab><tab><tab>  (\"cyBottomHeight\", c_int)<nl><tab><tab><tab> ]<nl>margins = MARGINS(1, 2, 1, 1)<nl><nl>dwm.DwmExtendFrameIntoClientArea(handel, ctypes.byref(margins))","out":"Windows 7 MARGINS structure in Python"}
{"in":"find_elements_by_xpath('\/\/div[@class=\"myclass\"]\/a').get_attribute(\"content\")","out":"How to find a custom tag within another tag using Selenium"}
{"in":"pygame.draw.polygon(screen, black, [[300,400],[150,100],[450,300]],6)","out":"How do I draw a polygon in python?"}
{"in":"re.sub(\"(?<=[^a-zA-Z])pi(?=[^a-zA-Z])\", \"(math.pi)\", \"2pi3 + supirse\")","out":"Python replace only part of a re.sub match"}
{"in":"intlist = range(1,10)<nl>randomeven = random.choice([i for i in intlist if i % 2 == 0])","out":"pythonic way of selecing a random value that satisfies a certain predicate"}
{"in":"toolzip = zipfile.ZipFile(myzipfile,  'r')<nl>names = toolzip.namelist()<nl>for n in names:<nl><tab>data = toolzip.read(n)<nl><tab># do something with data","out":"How can I extract a zip archive that contains a forbidden file name on Windows using Python?"}
{"in":"class Test(object):<nl><tab>def __new__(*args):<nl><tab><tab>return False","out":"Set python object to variable"}
{"in":"BMesh.calc_volume","out":"Python: Create a polyhedron and get its section"}
{"in":"import networkx as nx<nl># weighted MultiGraph<nl>M = nx.MultiGraph()<nl>M.add_edge(1,2,weight=7)<nl>M.add_edge(1,2,weight=19)<nl>M.add_edge(2,3,weight=42)<nl><nl># create weighted graph from M<nl>G = nx.Graph()<nl>for u,v,data in M.edges_iter(data=True):<nl><tab>w = data['weight']<nl><tab>if G.has_edge(u,v):<nl><tab><tab>G[u][v]['weight'] += w<nl><tab>else:<nl><tab><tab>G.add_edge(u, v, weight=w)<nl><nl>print G.edges(data=True)<nl># [(1, 2, {'weight': 26}), (2, 3, {'weight': 42})]","out":"Networkx : Convert multigraph into simple graph with weighted edges"}
{"in":"jpeg.read(2)<nl>b = jpeg.read(1)<nl>try:<nl><tab>while (b and ord(b) != 0xDA):<nl><tab><tab>while (ord(b) != 0xFF): b = jpeg.read(1)<nl><tab><tab>while (ord(b) == 0xFF): b = jpeg.read(1)<nl><tab><tab>if (ord(b) >= 0xC0 and ord(b) <= 0xC3):<nl><tab><tab><tab>jpeg.read(3)<nl><tab><tab><tab>h, w = struct.unpack(\">HH\", jpeg.read(4))<nl><tab><tab><tab>break<nl><tab><tab>else:<nl><tab><tab><tab>jpeg.read(int(struct.unpack(\">H\", jpeg.read(2))[0])-2)<nl><tab><tab>b = jpeg.read(1)<nl><tab>width = int(w)<nl><tab>height = int(h)<nl>except struct.error:<nl><tab>pass<nl>except ValueError:<nl><tab>pass","out":"Python3 - parsing jpeg dimension info"}
{"in":"# calcuate normalization factor<nl>factor = 1.0 \/ sum(in_degree_dist.itervalues())<nl><nl># sort the dictionary<nl>sorted_in_degree_dist = OrderedDict((key, in_degree_dist[key] * factor)<nl><tab>for key in sorted(in_degree_dist))<nl><nl># or <nl>sorted_in_degree_dist = OrderedDict((key, value * factor)<nl><tab>for key, value in sorted(in_degree_dist.iteritems()))","out":"sorting and summing up a dictionary in python"}
{"in":"l.set_option(ldap.OPT_HOST_NAME, settings.AD_DNS_NAME)","out":"Does UWSGI influence LDAPS Requests from an underlying Django app?"}
{"in":"names = []<nl>values = []<nl>data = []<nl>with open('yourfile') as lines:<nl><tab>for line in lines:<nl><tab><tab>first, rest = line.split(' ', 1)<nl><nl><tab><tab>if first == 'name':<nl><tab><tab><tab>names.append(rest)<nl><nl><tab><tab>elif first == 'values':<nl><tab><tab><tab>floats = map(float, rest.split())<nl><tab><tab><tab>values.append(tuple(floats))<nl><nl><tab><tab>elif first == 'data':<nl><tab><tab><tab>int_str, floats_str = rest.split(' ', 1)<nl><tab><tab><tab>floats = map(float, floats_str.split())<nl><tab><tab><tab>data.append( (int(int_str),) + tuple(floats) )","out":"Read data from file into different arrays in python"}
{"in":"# List files in directory and upload them to bucket<nl>for filename in all_files:<nl><tab>#skip all directory entries which are not a file<nl><tab>if not os.path.isfile(filename):<nl><tab><tab>  continue<tab><nl><tab>k = Key(bucket)<nl><tab>k.key = os.path.basename(filename)<nl><tab>k.set_contents_from_filename(filename, cb=percent_cb, num_cb=10)","out":"Strip path from filename"}
{"in":"x = [[a, b, c], [d, e, f], [g, h, i]]<nl>itertools.product(*x)","out":"Passing list of arguments of varying length"}
{"in":"for x in doclist:<nl><tab>if x == '[':<nl><tab><tab>count=count+1<nl><tab>elif count == 1:<nl><tab><tab>response=raw_input(\"Please enter %s\" % x)<nl><tab><tab>count=count-1<nl><tab>else:<nl><tab><tab>pass","out":"Raw Input on for loops"}
{"in":"def listfiles(directory):<nl><tab>return [f for f in os.listdir(directory) <nl><tab><tab><tab>  if os.path.isdir(os.path.join(directory, f))]","out":"Is there a way to get all the directories but not files in a directory in Python?"}
{"in":"d1 = mysql.connect(database1)<nl>d2 = mysql.connect(database2)<nl><nl>with d2 as c2: # new transaction<nl><tab>c2.execute(\"SELECT f1, f2, f3 FROM table\")<nl><tab>with d1 as c1:<nl><tab><tab>c1.executemany(\"INSERT INTO table (f1, f2, f3) VALUES (%s, %s, %s)\", c2)","out":"How to append data to an existing database, without affecting the data already present?"}
{"in":"before = ['JACKIE:34', 'MATT:444', 'CEN:12', 'PETE:12', 'RANDY:92', 'MITCH:2', 'JAN:2']<nl>after = [(name, int(value)) for name, value in (x.split(':') for x in before)]<nl>print after","out":"Python conversion from list to tuple"}
{"in":"# Using extended slice notation to reverse the string<nl>if str(n) == str(n)[::-1]:<nl><tab>print \"Palindrome!\"","out":"program to generate palindromic number"}
{"in":"response.xpath('\/\/li[@class=listclass\"]\/div[not(contains(@class,\"divclass\"))]\/text()').extract()","out":"Scrapy: parse a div from a list of divs"}
{"in":"class AlgoMixin(object):<nl>  # Does not end in \"Test\"; not a subclass of unittest.TestCase.<nl>  # You may prefer \"AbstractBase\" or something else.<nl><nl>  def test_empty(self):<nl><tab>result = self.function(make_empty_graph())<nl><tab>self.assertTrue(result)<nl><nl>class TestF(AlgoMixin, unittest.TestCase):<nl>  function = staticmethod(f)<nl>  # Doesn't need to be in setup, nor be an instance attribute.<nl>  # But doesn't take either self or class parameter, so use staticmethod.<nl><nl>  def test_random(self):<nl><tab>pass  # Specific test for algorithm 'f'.","out":"How to factorise python test cases with nosetests"}
{"in":"import zipfile<nl><nl>fh = open(targetzip, 'rb')<nl>z = zipfile.ZipFile(fh)<nl>for name in z.namelist():<nl><tab>z.extract(name, extractto)<nl>fh.close()","out":"A simple Script to extracting a zip file"}
{"in":"branches = [ref for ref in repo.refs.keys(\"refs\/heads\/\") if<nl><tab><tab><tab>any((True for commit in repo.get_walker(include=[repo.refs[ref]])<nl><tab><tab><tab><tab> if commit.id == YOURSHA))]","out":"Check which branches contain a specific git commit sha using Python dulwich?"}
{"in":"test = props.find('S\/[@N=\"SamAccountName\"]')","out":"Python ETREE parsing of a windows XML output"}
{"in":"def isAnagram(str1, str2):<nl><tab>str1_list = list(str1)<nl><tab>str1_list.sort()<nl><tab>str2_list = list(str2)<nl><tab>str2_list.sort()<nl><nl><tab>return (str1_list == str2_list)","out":"Find anagrams for a list of words"}
{"in":"if (<nl><tab>(\"this phrase\" in textfile or \"that phrase\" in textfile) and not (<nl><tab>\"not this phrase\" in textfile or \"not that phrase\" in textfile)<nl>):<nl><tab>return True","out":"Checking text files for certain strings in python"}
{"in":"import collections<nl>import itertools<nl><nl>d = collections.defaultdict(list)<nl>for indices in itertools.product(*map(range, a.shape)):<nl><tab>d[a[indices]].append(indices)","out":"Python: How to index the elements of a numpy array?"}
{"in":"from scipy.signal import argrelmax<nl>f = xf[scipy.signal.argrelmax(yf[0:N\/2])]<nl>Af = np.abs(yf[argrelmax(yf[0:N\/2])])","out":"FFT coefficients using python"}
{"in":"A.objects.filter(name='abc').prefetch_related('ab_set')","out":"Use prefetch related many to many table without many to many field"}
{"in":"date_str = '2014-06-18 13:06:00.349565827'<nl><nl># split off the seconds & microseconds<nl>beginning, sec = date_str.rsplit(':', 1) <nl><nl># Use string formatting to recreate a rounded timestamp<nl>date = dateutil.parser.parse('{}:{:02.6f}'.format(beginning, float(sec)))","out":"Getting Python to round Timestamp with NS versus Truncate"}
{"in":"import csv<nl><nl>f1 = file('C:\\File1.csv', 'rb')<nl>f2 = file('C:File2.csv', 'rb')<nl>f3 = file('C:\\output_file.csv', 'wb')<nl>c1 = csv.reader(f1)<nl>c2 = csv.reader(f2)<nl>c3 = csv.writer(f3)<nl>masterlist = [row[0] for row in c2]<nl><nl>for hosts_row in c1:<nl><tab>if hosts_row[0] not in masterlist:<nl><tab><tab>print hosts_row<nl><tab><tab>c3.writerow(hosts_row)","out":"Comparing two CSV and writing the missing values(in different rows) to a file python"}
{"in":"import math<nl>import csv<nl><nl>x = 2.0<nl>with open('out.csv', 'wb') as f:<nl><tab>writer = csv.writer(f, delimiter=',')<nl><tab>while x < 100.0:<nl><tab><tab>print x, '\\t', math.log(x)\/math.log(2)<nl><tab><tab>writer.writerow([x, math.log(x)\/math.log(2)])<nl><tab><tab>x = x + x","out":"Export a table in CSV file"}
{"in":"from Tkinter import *<nl>import ttk<nl>import time<nl>import threading<nl><nl>def start():<nl><tab>start_stop.config(text=\"QUIT\", command=stop)<nl><tab>thread = threading.Thread(target=progBar, args=())<nl><tab>thread.daemon = True<nl><tab>thread.start()<nl><nl>def progBar():<nl><tab>for i in xrange(5):<nl><tab><tab>pbar_det.step(19.99)<nl><tab><tab>master.update()<nl><tab><tab># Busy-wait<nl><tab><tab>time.sleep(1)<nl><tab>master.quit()<nl><nl>def stop():<nl><tab>master.quit()<nl><nl>master = Tk()<nl><nl>start_stop = Button(master, text='START', command=start)<nl>start_stop.grid(row=0, column=1, pady=2, padx=2, sticky=E+W+N+S)<nl><nl>pbar_det = ttk.Progressbar(master, orient=\"horizontal\", length=600, mode=\"determinate\")<nl>pbar_det.grid(row=0, column=0, pady=2, padx=2, sticky=E+W+N+S)<nl><nl>master.mainloop()","out":"How to close the program by pressing button?"}
{"in":"drop=False, inplace=True","out":"Numpy arrays with compound keys; find subset in both"}
{"in":"def generateTuples(N, M):<nl>  done = 0<nl>  counters = {}<nl>  for C in range(3, N + 3):<nl><tab>for B in range(2, C):<nl><tab>  for A in range(1, B):<nl><tab><tab>if (counters.get('A%i' % A, 0) < M and<nl><tab><tab><tab>counters.get('B%i' % B, 0) < M and<nl><tab><tab><tab>counters.get('C%i' % C, 0) < M):<nl><tab><tab>  yield (A, B, C)<nl><tab><tab>  counters['A%i' % A] = counters.get('A%i' % A, 0) + 1<nl><tab><tab>  counters['B%i' % B] = counters.get('B%i' % B, 0) + 1<nl><tab><tab>  counters['C%i' % C] = counters.get('C%i' % C, 0) + 1<nl><tab><tab>  done += 1<nl><tab><tab>  if done >= N:<nl><tab><tab><tab>return<nl><nl>for (A, B, C) in generateTuples(8, 3):<nl>  print (A, B, C)","out":"Algorithm for generating list of unique tuples with specific properties"}
{"in":"# a is some list<nl>b2 = [0]*len(a[0])<nl>for x in a:<nl><tab>for y in range(len(x)):<nl><tab><tab> b2[y] += x[y]<nl>print(b2)","out":"How can I do the summatory of elements in a list of lists in python?"}
{"in":"for test in suite:<nl><tab>print test._tests","out":"How can I extract a list of TestCases from a TestSuite?"}
{"in":"import sys<nl>from PySide.QtGui import QApplication, QGraphicsScene, QGraphicsView<nl>from PySide.QtWebKit import QGraphicsWebView<nl><nl>if __name__ == '__main__':<nl><tab>app = QApplication(sys.argv)<nl><nl><tab>item = QGraphicsWebView()<nl><tab>item.load('front.svg')<nl><tab>view = QGraphicsView()<nl><tab>scene = QGraphicsScene()<nl><tab>scene.addItem(item)<nl><tab>view.setScene(scene)<nl><tab>view.show()<nl><tab>sys.exit(app.exec_())","out":"PySide - QSvgWidget renders embedded SVG files incorrectly"}
{"in":"def read_or_write_file(self, file, section, passed_option = None,<nl><tab><tab><tab><tab><tab>  value = None, read = True):<nl><nl><tab>config = ConfigParser.RawConfigParser()<nl><tab>with open(file) as configfile:<nl><tab><tab>config.readfp(configfile)<tab><nl><nl><tab>if read:<nl><tab><tab>options = config.options(section)<nl><nl><tab><tab>for option in options:<nl><tab><tab><tab>file_settings[option] = config.get(section, option)<nl><nl><tab>else:<nl><tab><tab>config.set(section, passed_option, value)<nl><nl><tab><tab>with open(file, 'w') as configfile:<nl><tab><tab><tab>config.write(configfile)","out":"How To Read and Write to a INI file in Python"}
{"in":"pattern = '<td.*?bgcolor=\"#ff9900\".*?>(.*?)<\/th>'<nl>re.findall(pattern, html)","out":"Python: Get data between html tags if an attribute matches and put it into a list"}
{"in":"with open('test.txt') as input_data:<nl><tab>for line in input_data:<nl><tab>   match = re.search(r' is (.*) test ', line)<nl><tab>   if match:<nl><tab><tab>  print(line)<nl><tab><tab>  print(match.group(1))","out":"Python read certain text from a single line"}
{"in":"res = [word for word in simpleTokenize(string) if word not in stopwords]","out":"What's the most efficient way to filter values out of a list based on the values in another list"}
{"in":"run('''python -c \"import os;os.mkdir('some dir')\" ''')","out":"How to use fabric to create a folder\/directory on arbitrary host, multiple platforms, Linux and Windows?"}
{"in":"import urllib2<nl>def download(url, file):<nl><tab>dataset = urllib2.urlopen(url)<nl><tab>CHUNK = 16 * 1024<nl><tab>with open(file, 'wb') as dl:<nl><tab><tab>while True:<nl><tab><tab><tab>peice = dataset.read(CHUNK)<nl><tab><tab><tab>if not peice: break<nl><tab><tab><tab>dl.write(peice)<nl><nl>download(r'http:\/\/dds.cr.usgs.gov\/emodis\/Africa\/historical\/TERRA\/2012\/comp_056\/AF_eMTH_NDVI.2012.047-056.QKM.COMPRES.005.2012059143841.zip',r'AF_eMTH_NDVI.2012.047-056.QKM.COMPRES.005.2012059143841.zip')","out":"Download a file using Python"}
{"in":"from collections import defaultdict<nl>import re<nl>params = {<nl><tab>'a': 'b',<nl><tab>'c': 'd',<nl><tab>'foo[bar]': 'element1',<nl><tab>'foo[baz]': 'element2',<nl><tab>'foo[qis]': 'element3',<nl><tab>'foo[borfarglan][bofgl]': 'element4',<nl><tab>'foo[borfarglan][bafgl]': 'element5',<nl>}<nl><nl>def split(string, brackets_on_first_result = False):<nl><tab>matches = re.split(\"[\\[\\]]+\", string)<nl><tab>matches.remove('')<nl><tab>return matches<nl><nl>def mr_parse(params):<nl><tab>results = {}<nl><tab>for key in params:<nl><tab><tab>if '[' in key:<nl><tab><tab><tab>key_list = split(key)<nl><tab><tab><tab>d = results<nl><tab><tab><tab>for partial_key in key_list[:-1]:<nl><tab><tab><tab><tab>if partial_key not in d:<nl><tab><tab><tab><tab><tab>d[partial_key] = dict()<nl><tab><tab><tab><tab>d = d[partial_key]<nl><tab><tab><tab>d[key_list[-1]] = params[key]<nl><tab><tab>else:<nl><tab><tab><tab>results[key] = params[key]<nl><tab>return results<nl>print mr_parse(params)","out":"Parsing dictionary-like URL parameters in Python"}
{"in":"if any(test5 in subindex for subindex in index):<nl><tab>print True","out":"How to search for an item in a list of lists?"}
{"in":"d = ws.cell(row = 4, column = 2)<nl>print d.value","out":"how to find the excel value from row, col names in python?"}
{"in":"test = 'tester.rtf'<nl>out_file = open(test,'w')<nl>out_file.write(\"\"\"{\\\\rtf1<nl>This is \\\\b Bold  \\\\b0\\line\\<nl>}\"\"\")<nl>out_file.close() #thanks to the comment below","out":"Is there a way to write formatted text from Python?"}
{"in":"s.sprintf( <nl>  \"import imp<nl>\" <nl>  \"imp.load_source('%s', r'%s')\", modname, script_path); <nl>PyRun_SimpleString(s.c_str());","out":"How to import a file by its full path using C api?"}
{"in":"def file_len(fname):<nl><tab>with open(fname) as f:<nl><tab><tab>for line in f:<nl><tab><tab><tab>if line.strip() == \"{A   B}\":<nl><tab><tab><tab><tab>break<nl><tab><tab>return sum(1 for line in f)","out":"How to count number of lines after a certain line"}
{"in":"new_line = (T1.get(\"1.0\",'end-1c'))","out":".get() taking two arguments in python"}
{"in":"my_var = (#some_variable +<nl><tab><tab> some_other_var)","out":"How can I create inline comments (without using backslash to continue on another line)?"}
{"in":"request.FILES","out":"Parsing uploaded files without passing key"}
{"in":"import os<nl>def get_immediate_subdirectories(a_dir):<nl><tab>return [name for name in os.listdir(a_dir)<nl><tab><tab><tab>if os.path.isdir(os.path.join(a_dir, name))]","out":"get all of the immediate subdirectories in python"}
{"in":"from collections import Counter<nl><nl>def selectUnique(x):<nl><tab>count = Counter((i[1], i[2]) for i in x)<nl><tab>out = [i for i in x if count[(i[1], i[2])] == 1]<nl><tab>return out","out":"Remove duplicates from list of tuples based on value at certain index"}
{"in":"import networkx as nx<nl><nl>G = nx.DiGraph()<nl>G.add_nodes_from([\"Start\", \"a\", \"b\", \"c\", \"End\"])<nl>G.add_edges_from([(\"Start\", \"a\"), (\"Start\", \"c\"), (\"a\", \"b\"), (\"b\", \"a\"), (\"c\", \"End\")])<nl><nl>total_num_nodes = G.number_of_nodes()<nl><nl>if len(nx.shortest_path(G, source=\"Start\")) < total_num_nodes:<nl><tab>print \"<nl>This FSM has inaccessible states\"<nl>else:<nl><tab>print \"<nl>All nodes reachable from 'Start'\"<nl><nl>H = G.reverse()<nl>if len(nx.shortest_path(H, source=\"End\")) < total_num_nodes:<nl><tab>print \"<nl>This FSM has dead-end states\"<nl>else:<nl><tab>print \"<nl>All nodes have a path to reach the 'End' state\"","out":"Validate reachability of each state in a FSM from a 'start' state and to an 'end' state"}
{"in":"browser.profile.path","out":"How to find the name of the folder given to selenium webdriver object?"}
{"in":"def create_table():<nl><tab>curname = None<nl><tab>for amount in xrange(2500):<nl><tab><tab>name = best(amount)<nl><tab><tab>if name != curname:<nl><tab><tab><tab>if curname is not None:<nl><tab><tab><tab><tab>print \"%d-%d %s\" % (minamt, amount-1, curname)<nl><tab><tab><tab>curname = name<nl><tab><tab><tab>minamt = amount<nl><tab>print \"%d-%d %s\" % (minamt, amount-1, curname)","out":"Create a table from a function's return values"}
{"in":"response = urllib2.urlopen(url)<nl>CHUNK = 16 * 1024<nl>with open(file, 'wb') as f:<nl>   while True:<nl><tab>  chunk = response.read(CHUNK)<nl><tab>  if not chunk: break<nl><tab>  f.write(chunk)","out":"Stream large binary files with urllib2 to file"}
{"in":"yield context.transaction(lambda: increment_counter(acc.key(), 5))","out":"Providing arguments to transactions in Datastore Plus (NDB)"}
{"in":"path = 'C:\\Users\\Kenny\\Desktop\\TTUM'<nl>listing = os.listdir(path)<nl><nl>for infile in listing:<nl><tab>dir_item_path = os.path.join(path, infile)<nl><tab>fh = open(dir_item_path,'r')<nl><tab>Fname = infile <nl><tab>Lname = Fname.split('.')[0]<nl><tab>name = Lname + \".csv\"<nl><tab>process_file = open(name,\"wb\")<nl><tab>newfile = csv.writer(process_file)<nl><tab>for line in fh.readlines():<nl><tab><tab> space_remove = re.sub(r\"\\s+\",\",\",line.rstrip())<nl><tab><tab> split_Line = space_remove.split(\" \")<nl><tab><tab> newfile.writerow(split_Line)<nl><tab>process_file.close()","out":"Reading file from a directory in Python"}
{"in":"Input.readLines()","out":"Data miss in socket transfer"}
{"in":"#updated<nl>L = []<nl>for index, line in enumerate(open('data.txt')):<nl><tab>if index <= 4: #skip first 5 lines<nl><tab><tab>continue<nl><tab>else:<nl><tab><tab> L.append(line.split()[2]) #split on whitespace and append value from third columns to list.<nl>print(L)<nl>#[6.0, 5.0, 7.0]","out":"Reading a specific row & columns of data in a text file"}
{"in":"from datetime import timedelta<nl>from time import sleep<nl><nl>while True:<nl><tab>try:<nl><tab><tab>hours, minutes, seconds = input('Enter hours, minutes, seconds (with a comma in between): ')<nl><tab>except (ValueError, TypeError):<tab># other errors<nl><tab><tab>print(\"Error 1, please ...\")<nl><tab><tab>continue<nl><tab>except NameError:<nl><tab><tab>print(\"Error 2\")<nl><tab><tab>continue<nl><tab>else:<nl><tab><tab>print(\"All good\")<nl><tab><tab>break<nl><nl>total = timedelta(hours=hours, minutes=minutes, seconds=seconds)<nl>for passed_seconds in range(int(total.total_seconds())):<nl><tab>print total - timedelta(seconds=passed_seconds)<nl><tab>sleep(1)","out":"Trouble with a Python Countdown Program"}
{"in":"axes.set_autoscale_on(True)<nl>axes.autoscale_view(True,True,True)<nl>axes.set_ylim(0, 11) # 11 -> max(yvalues) + 1","out":"Autoscale with margin in matplotlib"}
{"in":"result = default.copy()<nl>result.update((k, v) for k, v in user.iteritems() if v is not None)","out":"Delete None values from Python dict"}
{"in":"import nose2<nl><nl>test_run = nose2.discover(argv = ['-s', 'path-to-tests'], exit = False)<nl>if test_run.result.wasSuccessful():<nl><tab>do_something()<nl>else:<nl><tab>do_something_else()","out":"How to check test run results in nose2?"}
{"in":"import foo<nl>foo.arbit = 'new value'","out":"Python Changing module variables in another module"}
{"in":"import re<nl><nl>mult = {'h': 60*60, 'mn': 60}<nl>res = sum(int(num) * mult.get(val, 1) for num, val in re.findall('(\\d+)(\\w+)', '1h 34mn 2s'))<nl># 5642","out":"Extract values from H mn s format time in python"}
{"in":"from os import listdir<nl>from os.path import isfile, join<nl>subString = \"xyz\"<nl>mypath = \"\/tmp\"<nl>onlyGoodfiles = [f for f in listdir(mypath) if isfile(join(mypath, f)) and subString in f]","out":"Finding a file with a particular string as part of its name in a directory"}
{"in":"controllers.py","out":"Flask and Angular Web Application Routing"}
{"in":"context = {'lang': 'fr_FR'}<nl>id_report = printsock.report(dbname, uid, pwd, model, ids, {'model': model, 'report_type':'webkit', 'id':id_of_report, 'webkit_header':[id_of_webkit_header,\"name_of_webkit_header\"], 'report_name':'webkit.account.invoice', 'lang':'fr_FR','tz':'Europe\/Paris'}, context)","out":"Odoo 7 Webkit Report printing for Invoice"}
{"in":"list(set(list1)-set(list2))","out":"How to remove the items from list in python based on other list"}
{"in":"nsmap = {'xmlns': 'urn:tva:metadata:2010'}<nl><nl>for info in root.xpath('\/\/xmlns:ProgramInformation', namespaces=nsmap):<nl><tab>print info.get('programId') # retrieve crid<nl><tab>print info.find('.\/\/xmlns:Title', namespaces=nsmap).text # retrieve title<nl><tab>print info.find('.\/\/xmlns:Genre\/xmlns:Name', namespaces=nsmap).text # retrieve genre","out":"Need help understanding XPATH in a specific XML example"}
{"in":"ax1[:set_yticks]([0.2,0.4,0.6,0.8,1.0])<nl>ax1[:set_yticklabels]([\"-40dB\",\"-30dB\",\"-20dB\",\"-10dB\",\"0dB\"])","out":"How to change radial ticks in julia PyPlot polar plot?"}
{"in":"def object_to_dict(obj, found=None):<nl><tab>if found is None:<nl><tab><tab>found = set()<nl><tab>mapper = class_mapper(obj.__class__)<nl><tab>columns = [column.key for column in mapper.columns]<nl><tab>get_key_value = lambda c: (c, getattr(obj, c).isoformat()) if isinstance(getattr(obj, c), datetime) else (c, getattr(obj, c))<nl><tab>out = dict(map(get_key_value, columns))<nl><tab>for name, relation in mapper.relationships.items():<nl><tab><tab>if relation not in found:<nl><tab><tab><tab>found.add(relation)<nl><tab><tab><tab>related_obj = getattr(obj, name)<nl><tab><tab><tab>if related_obj is not None:<nl><tab><tab><tab><tab>if relation.uselist:<nl><tab><tab><tab><tab><tab>out[name] = [object_to_dict(child, found) for child in related_obj]<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab>out[name] = object_to_dict(related_obj, found)<nl><tab>return out","out":"Convert SqlAlchemy orm result to dict"}
{"in":"nan_mask = np.isnan(matrix)<nl>matrix[nan_mask] = np.random.randint(0, 2, size=np.count_nonzero(nan_mask))","out":"Replacing missing values with random in a numpy array"}
{"in":"def func(rawData):<nl><tab>sum = 0<nl><tab>for i in rawData[::-1]:<nl><tab><tab>sum += i<nl><tab><tab>sum <<= 8<nl><nl><tab>sum >>= 8<nl><tab>return sum","out":"How to turn variable length bytes(less than 8) to long long int faster in python3?"}
{"in":"button = tkinter.Button(row6, text = 'Send', height = 2, width = 20, relief = 'raised', cursor = 'hand1', font = ('times', 14, 'bold'))","out":"how to set the exact height of an element in Tkinter?"}
{"in":"polls_list = Event.objects.filter(inserttime__gt=timezone.now()).order_by('-inserttime')","out":"How to filter records from a model within view?"}
{"in":"Item.query.join(Item.users).filter(User.name == 'bob')<nl>Item.query.join(Item.users).filter(User.name == 'bob', Item.name == 'shark')","out":"How to query many-to-many based on some constraints in flask sqlalchemy?"}
{"in":"def sortedfilter(in_fname, filter_fname, out_fname):<nl><tab>with open(in_fname) as inf, open(filter_fname) as fil, open(out_fname, 'w') as outf:<nl><tab><tab>ins = inf.next()<nl><tab><tab>try:<nl><tab><tab><tab>for fs in fil:<nl><tab><tab><tab><tab>while ins < fs:<nl><tab><tab><tab><tab><tab>outf.write(ins)<nl><tab><tab><tab><tab><tab>ins = inf.next()<nl><tab><tab><tab><tab>while ins == fs:<nl><tab><tab><tab><tab><tab>ins = inf.next()<nl><tab><tab>except StopIteration:<nl><tab><tab><tab># reached end of inf before end of fil<nl><tab><tab><tab>pass<nl><tab><tab>else:<nl><tab><tab><tab># reached end of fil first, pass rest of inf through<nl><tab><tab><tab>file_output.writelines(file_input.readlines())","out":"Optimizing removing duplicates in large files in Python"}
{"in":"plot = ggplot.ggplot(new_df, ggplot.aes(x='weekday', y='ENTRIESn_hourly')) +\\<nl>ggplot.geom_bar(stat='identity') +\\<nl>ggplot.ggtitle('NYC Subway ridership by day of week') +\\<nl>ggplot.xlab('Week day (0=Sunday)') +\\<nl>ggplot.ylab('Entries')","out":"How to manipulate pandas DataFrame to plot ggplot histogram"}
{"in":"import numpy as np<nl>import scipy as sp<nl>from scipy.interpolate import interp1d<nl><nl>x1 = sorted([1., 0.88, 0.67, 0.50, 0.35, 0.27, 0.18, 0.11, 0.08, 0.04, 0.04, 0.02])<nl>y1 = [0., 13.99, 27.99, 41.98, 55.98, 69.97, 83.97, 97.97, 111.96, 125.96, 139.95, 153.95]<nl><nl>new_length = 25<nl>new_x = np.linspace(x.min(), x.max(), new_length)<nl>new_y = sp.interpolate.interp1d(x, y, kind='cubic')(new_x)","out":"Spline Interpolation with Python"}
{"in":"def data():<nl>   name = input(\"Please enter the customer's name.\")<nl>   temp_phone = int(input(\"Please enter the customer's Phone Number.\"))<nl>   while len.str(temp_phone) != 11:<nl><tab><tab>temp_phone = int(input(\"Please enter the customer's Phone Number.\"))<nl>   phone = temp_phone<nl>   temp_groupno = int(input(\"Please enter the number of diners in the group (maximum 20 diners)\"))<nl>   while  not (1 <= groupno <=20):<nl><tab><tab>temp_groupno = int(input(\"Please enter the number of diners in the group (maximum 20)\"))<nl>   group = temp_groupno<nl><nl>   temp_score = int(input(\"Please enter the rating of the meal (between 1 and 10)\"))<nl>   while not (1 <= temp_score <= 3):<nl><tab><tab>temp_score = int(input(\"Please enter the rating of the meal - between 1 & 10.\"))<nl>   score = temp_score<nl>   return {'name': name, 'phone': phone, 'group': group, 'score': score}<nl><nl>customers = []<nl>customers.append(data())<nl>customers.append(data())<nl>print(customers)","out":"TypeError: data() missing 4 required positional arguments: 'n', 'p', 'gn', and 's'"}
{"in":"#!\/usr\/bin\/env python<nl><nl>import sys<nl>import dbus<nl>from PyQt4.QtGui import QApplication<nl>from dbus.mainloop.qt import DBusQtMainLoop<nl><nl>class DBus_Answer():<nl><tab>def __init__(self, text):<nl><tab><tab>self.answer = text<nl><tab><tab>bus_loop = DBusQtMainLoop(set_as_default=True)<nl><tab><tab>self.bus = dbus.SessionBus()<nl><tab><tab>self.bus.add_signal_receiver(self.my_func,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> dbus_interface=\"im.pidgin.purple.PurpleInterface\",<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> signal_name=\"ReceivedImMsg\")<nl><nl><tab>def my_func(self, account, sender, message, conversation, flags):<nl><tab><tab>obj = self.bus.get_object(\"im.pidgin.purple.PurpleService\", \"\/im\/pidgin\/purple\/PurpleObject\")<nl><tab><tab>purple = dbus.Interface(obj, \"im.pidgin.purple.PurpleInterface\")<nl><tab><tab>purple.PurpleConvImSend(purple.PurpleConvIm(conversation), self.answer)<nl><nl>app = QApplication(sys.argv)<nl>run = DBus_Answer(\"Slam\")<nl>app.exec_()","out":"Using DBus in python program"}
{"in":"driver.find_element_by_id(\"txtfld\").get_attribute(\"value\")","out":"python selenium save value of textfileld"}
{"in":"import re<nl>import locale<nl><nl># Remove anything not a digit, comma or period<nl>no_cruft = re.sub(r'[^\\d,.-]', '', st)<nl><nl># Split the result into parts consisting purely of digits<nl>parts = re.split(r'[,.]', no_cruft)<nl><nl># ...and sew them back together<nl>if len(parts) == 1:<nl><tab># No delimeters found<nl><tab>float_str = parts[0]<nl>elif len(parts[-1]) != 2:<nl><tab># >= 1 delimeters found. If the length of last part is not equal to 2, assume it is not a decimal part<nl><tab>float_str = ''.join(parts)<nl>else:<nl><tab>float_str = '%s%s%s' % (''.join(parts[0:-1]),<nl><tab><tab><tab><tab><tab><tab><tab>locale.localeconv()['decimal_point'],<nl><tab><tab><tab><tab><tab><tab><tab>parts[-1])<nl><nl># Convert to float<nl>my_float = float(float_str)","out":"Parse a string to floats with different separators"}
{"in":"import asizeof<nl><nl>N = 1000000<nl>print asizeof.asizeof(range(N)) \/ N<nl># -> 20 (python 2.5, WinXP, 32-bit Linux)<nl># -> 33 (64-bit Linux)","out":"How many bytes per element are there in a Python list (tuple)?"}
{"in":"for row in reader:<nl><tab>print(\"Time Stamp: %s - Temperature ?C: %.2f - Humidity: %%: %.2f\" % (row[0], float(row[1]), float(row[2])))","out":"Can't truncate a number with Python"}
{"in":"-lpython24","out":"using SWIG with C++"}
{"in":"with open(\"filename\", \"rtU\") as f:<nl><tab>columns = f.readline().strip().split(\" \")<nl><tab>numRows = 0<nl><tab>sums = [0] * len(columns)<nl><nl><tab>for line in f:<nl><tab><tab># Skip empty lines<nl><tab><tab>if not line.strip():<nl><tab><tab><tab>continue<nl><nl><tab><tab>values = line.split(\" \")<nl><tab><tab>for i in xrange(len(values)):<nl><tab><tab><tab>sums[i] += int(values[i])<nl><tab><tab>numRows += 1<nl><nl><tab>for index, summedRowValue in enumerate(sums):<nl><tab><tab>print columns[index], 1.0 * summedRowValue \/ numRows","out":"How to find the average of multiple columns in a file using python"}
{"in":"savetxt(fname='newPicksData.txt', X=new_picks.astype(int), fmt ='%.0f<nl>')","out":"How to write a only integers numpy 2D array on a txt file"}
{"in":"import clr<nl>clr.AddReference('ClassLibrary1')<nl>from ClassLibrary1 import MmsValue<nl>from System import UInt32<tab><nl><nl>uint32_mmsValue = MmsValue.__new__.Overloads[UInt32](MmsValue, 1)","out":"How to invoke a .Net method with unsigned integer argument from IronPython"}
{"in":"import tarfile, io<nl>byte_array = client.read_bytes()<nl>file_like_object = io.BytesIO(byte_array)<nl>tar = tarfile.open(fileobj=file_like_object)<nl># use \"tar\" as a regular TarFile object<nl>for member in tar.getmembers():<nl><tab>f = tar.extractfile(member)<nl><tab>print(f)","out":"How to construct a TarFile object in memory from byte buffer in Python 3?"}
{"in":"sys.path.insert(0, '\/usr\/local\/lib')<nl>sys.path.insert(0, os.path.expanduser('~\/lib'))","out":"Getting Pypy to recognize third party modules"}
{"in":"s = ','.join(info)<nl>f.write(s + '<nl>')","out":"Python write to file in list format"}
{"in":"try:<nl><tab>open(filename, 'w').close()<nl><tab>os.unlink(filePath)<nl><tab>print('Filename is valid.')<nl>except OSError:<nl><tab>print('Filename is not valid.')","out":"Check if a filename is valid"}
{"in":"#!\/usr\/bin\/python<nl>import os.path<nl>path = '\/dir1\/dir2\/dir3\/file.exe'<nl>name = os.path.basename(path)<nl>print name","out":"read string backwards and terminate at first '\/'"}
{"in":"def findColor():<nl><tab>pic=takePicture()<nl><tab>for pix in getPixels(pic):<nl><tab><tab>r = getRed(pix)<nl><tab><tab>g = getGreen(pix)<nl><tab><tab>b = getBlue(pix)<nl><tab><tab>print(r,g,b)","out":"Finding RGB values"}
{"in":"class RecordProcessor(object):<nl><tab>def __init__(self, recs):<nl><tab><tab>self.recs = recs<nl><tab><tab>self.processed_rec_count = 0<nl><tab>def __call__(self):<nl><tab><tab>for r in self.recs:<nl><tab><tab><tab>if r.sender('sender_of_interest'):<nl><tab><tab><tab>   self.processed_rec_count += 1<nl><tab><tab><tab>   # process record r...<nl><tab><tab><tab>   yield r  # processed record<nl><nl>def process_all_records(files):<nl><tab>for f in files:<nl><tab><tab>fd = open(f,'r')<nl><tab><tab>recs_p = RecordProcessor(read_records(fd))<nl><tab><tab>write_records(recs_p)<nl><tab><tab>print 'records processed:', recs_p.processed_rec_count","out":"Tracking how many elements we process in generator"}
{"in":"x = 0<nl>while x < len(days):<nl><tab>print (\"{0:20} \\t {1:20}\".format(days[x], str(gals[x])))<nl><tab>x += 1","out":"SyntaxError: invalid syntax for a beginner"}
{"in":"import requests<nl>username = \"SomeUser\"<nl>password = \"SomePass\"<nl>r = requests.get(\"https:\/\/a.b.c:7895\/resource\/path?param1=foo\",auth=(username,password),verify=False)","out":"How do I make a BasicAuth REST query over SSL with python3"}
{"in":"your_list = [[int(j) for j in i.split()] for i in ' '.join(data).split('<>')]","out":"breaking a list in to lists in python?"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl>import matplotlib.animation as animation<nl><nl>x = np.linspace(0,2*np.pi,100)<nl><nl>fig = plt.figure()  <nl>sub = fig.add_subplot(111, xlim=(x[0], x[-1]), ylim=(-1, 1))<nl>PLOT, = sub.plot([],[])<nl><nl>def animate(i):<nl><tab>PLOT.set_data(x[:i], np.sin(x[:i]))<nl><tab># print(\"test\")<nl><tab>return PLOT,<nl><nl>ani = animation.FuncAnimation(fig, animate, frames=len(x), interval=10, blit=True)<nl>plt.show()","out":"Python Matplotlib FuncAnimation only draws one frame"}
{"in":"import urllib<nl>import urllib2<nl>import simplejson<nl><nl>url = 'http:\/\/en.wikipedia.org\/w\/api.php'<nl>values = {'action' : 'query',<nl><tab><tab>  'prop' : 'revisions',<nl><tab><tab>  'titles' : 'Jennifer_Aniston',<nl><tab><tab>  'rvprop' : 'content',<nl><tab><tab>  'format' : 'json'}<nl><nl>data = urllib.urlencode(values)<nl>req = urllib2.Request(url, data)<nl>response = urllib2.urlopen(req)<nl>json = response.read()","out":"Query Wikipedia data page"}
{"in":"MyButton1 = Button(master, text=\"BUTTON1\", width=10, command=callback)<nl>MyButton1.grid(row=0, column=0)<nl><nl>MyButton2 = Button(master, text=\"BUTTON2\", width=10, command=callback)<nl>MyButton2.grid(row=1, column=0)<nl><nl>MyButton3 = Button(master, text=\"BUTTON3\", width=10, command=callback)<nl>MyButton3.grid(row=2, column=0)","out":"Setting the position on a button in Python?"}
{"in":"import locale<nl>import sys<nl><nl>def my_views(request):<nl><tab># before <nl><tab>reload(sys)<nl><tab>sys.setdefaultencoding(\"utf-8\")","out":"Django: How to upload file without UnicodeEncodeError on save()?"}
{"in":"keyPass = input(\"Create Admin Password > \")<nl><nl>with open(pathName, 'w') as db_file:<nl><tab>db_file.write(json.dumps({\"Admin\": keyPass}))<nl><nl>with open(pathName, 'w') as db_file:<nl><tab>json.dump({\"Admin\": keyPass}, db_file)","out":"Json File Handling in Python: Writing input to file"}
{"in":"import Skype4Py<nl>import time<nl>from pytify import Spotify<nl><nl># Create Skype object<nl>skype = Skype4Py.Skype()<nl>skype.Attach()<nl><nl># Create Spotify object<nl>spotify = Spotify()<nl>spotifyPlaying = spotify.isPlaying()<nl><nl># Create handler for when Skype call status changes<nl>def on_call_status(call, status):<nl>  if status == Skype4Py.clsInProgress:<nl><tab># Save current spotify state<nl><tab>global spotifyPlaying<nl><tab>spotifyPlaying = spotify.isPlaying()<nl><nl><tab>if spotify.isPlaying():<nl><tab>  print \"Call started, pausing spotify\"<nl><tab>  # Call started, pause Spotify<nl><tab>  spotify.stop()<nl><nl>  elif status == Skype4Py.clsFinished:<nl><tab># Call finished, resume Spotify if it was playing<nl><tab>if spotifyPlaying and not spotify.isPlaying():<nl><tab>  print \"Call finished, resuming spotify\"<nl><tab>  spotify.playpause()  <nl><nl>skype.OnCallStatus = on_call_status<nl><nl>while True:<nl>  time.sleep(10)","out":"How to programatically pause spotify when a call comes in on skype"}
{"in":"import transaction<nl><nl>def redirect_to_trial(trans, obj=None, parent=None):<nl><tab>if obj.id not in parent:<nl><tab><tab>request = getattr(obj, 'REQUEST', None)<nl><tab><tab>if request:<nl><tab><tab><tab>trial_url = obj.__parent__.__parent__.absolute_url()<nl><tab><tab><tab>request.response.redirect(trial_url)<nl><nl>@grok.subscribe(ISite, IObjectRemovedEvent)<nl>def on_site_delete(obj, event):<nl><tab>kwargs = dict(<nl><tab><tab>obj = obj,<nl><tab><tab>parent = event.oldParent,<nl><tab>)<nl><tab>transaction.get().addAfterCommitHook(redirect_to_trial, kws=kwargs)","out":"Plone: reacting to object removal"}
{"in":"R = numpy.arctan2(A[...,1],A[...,0])","out":"Operation by indexing only last axis"}
{"in":"h = int(raw_input(\"Please enter the height of the triangle: \"))<nl>for i in mytri(h):<nl><tab>print \" \" * (h * 2), i<nl><tab>h -= 1","out":"Formatting Pascal's triangle"}
{"in":"class Hello(object):<nl><tab>def __init__(self):<nl><tab><tab>self.x = None<nl><tab><tab>self.y = None<nl><tab><tab>self.z = None<nl><tab>def is_all_set(self):<nl><tab><tab>return all(getattr(self, attr) is not None for attr in self.__dict__)","out":"How to check the values in a instance with Python?"}
{"in":"import pandas as pd<nl>import matplotlib.pyplot as plt<nl><nl>df = pd.DataFrame({'color': ['blue','blue','yellow','blue','yellow'], 'area': [2,2,3,4,4]})<nl>fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2)<nl>#Hide upper left corner plot and create two new subplots<nl>ax1.axis('off')<nl>ax = fig.add_subplot(2,4,1)<nl>ax0 = fig.add_subplot(2,4,2)<nl>#Plot<nl>ax3.plot([[2,2], [3,6]])<nl>ax4.plot([[3,6], [2,2]])<nl>df.area.hist(by=df.color, ax=(ax,ax0)) #Pass both new subplots","out":"How to plot in a specific axis with DataFrame.hist(by=) in pandas"}
{"in":"def int_to_rgb(n):<nl><tab>b = (n & 0xff0000) >> 16<nl><tab>g = (n & 0x00ff00) >> 8<nl><tab>r = (n & 0x0000ff)<nl><tab>return (r, g, b)","out":"Integer to byte conversion"}
{"in":"areas = array([[1, 1, 2, 2],\\<nl><tab><tab>[0, 1, 0, 1],\\<nl><tab><tab>[3, 0, 1, 4],\\<nl><tab><tab>[0, 3, 1, 1]])<nl><nl>def is_in_area(x,y, area_num):<nl><tab>return areas[round(x), round(y)] == area_num","out":"how to detect if a point lies in a non-rectangular region in a 2D numpy array?"}
{"in":"import urllib.request<nl>external_ip = urllib.request.urlopen('http:\/\/ifconfig.me\/ip').read()","out":"Python SocketServer - Get own IP"}
{"in":"word = u'F??NF'","out":"working with ? in python"}
{"in":"def tup321(tup):<nl><tab>return (tup[0] + 3, tup[1] * 2, tup[2] \/ 2)","out":"How to make a function that applies different formulas to any length of tuple?"}
{"in":"b =['52.5%', '62.4%', '91.8%', '21.5%']<nl>b.sort(key = lambda a: float(a[:-1]))","out":"sort a list of percentages"}
{"in":"import git<nl>repo = git.Repo(\"path\/of\/repo\/\")<nl><nl># the below gives us all commits<nl>repo.commits()<nl><nl># take the first and last commit<nl><nl>a_commit = repo.commits()[0]<nl>b_commit = repo.commits()[1]<nl><nl># now get the diff<nl>repo.diff(a_commit,b_commit)","out":"how to do a git diff of current commit with last commit using gitpython?"}
{"in":"output = StringIO.StringIO()<nl>base.save(output, format='PNG')<nl>return [output.getvalue()]","out":"How to return in-memory PIL image from WSGI application"}
{"in":"self.prog.setCancelButton(None)","out":"Remove Cancel button from PyQt4 Progress Dialog"}
{"in":"vsprintf('The first 4 letters of the english alphabet are: %s, %s, %s and %s', ['a', 'b', 'c', 'd']);","out":"python string formatting in javascript"}
{"in":"[point_geom.x, point_geom.y]","out":"Convert Point Geometry to list"}
{"in":"raise cherrypy.HTTPRedirect(\"http:\/\/www.yahoo.com\")","out":"how to browse to a external url from turbogears\/cherrypy application?"}
{"in":"for kitten in kittens:<nl><tab>then = kitten.date<nl><tab>now = datetime.datetime.now()<nl><tab>tdelta = now - then<nl><nl>if tdelta.total_seconds() > 300:<nl><tab>kitten.delete()","out":"How to compare a google datastore datetime to python datetime?"}
{"in":"import subprocess<nl><nl>s = \"\"\"\/usr\/local\/sbin\/kamctl fifo profile_get_size myprofile | awk -F ':: ' '{print $2}'\"\"\"<nl><nl>p = subprocess.Popen(s, shell=True, stdout=subprocess.PIPE)<nl><nl>out, err = p.communicate()<nl><nl>print 'out: %r' % out<nl>print 'err: %r' % err<nl>print 'status: %r' % p.returncode","out":"Processing output from cmdline via a Python script"}
{"in":"[artist for artist in myJson['Artists'] if artist['profile']['age'] == 7]","out":"How to efficiently search in the following json dict in python and store into list or another dict?"}
{"in":"import matploltib.pyplot as plt<nl>import seaborn<nl><nl>import mylib<nl><nl>a4_dims = (11.7, 8.27)<nl>df = mylib.load_data()<nl>fig, ax = plt.subplots(figsize=a4_dims)<nl>seaborn.voilinplot(ax=ax, data=df, **violin_options)","out":"How do I change the figure size for a seaborn.violin_plot?"}
{"in":"a.encrypt(m).encode('hex')","out":"How can you print cipher text as a hex string?"}
{"in":"import sys<nl>import trace<nl><nl># create a Trace object, telling it what to ignore, and whether to<nl># do tracing or line-counting or both.<nl>tracer = trace.Trace(<nl><tab>ignoredirs=[sys.prefix, sys.exec_prefix],<nl><tab>trace=0,<nl><tab>count=1)<nl><nl># run the new command using the given tracer<nl>tracer.run('main()')<nl><nl># make a report, placing output in \/tmp<nl>r = tracer.results()<nl>r.write_results(show_missing=True, coverdir=\"\/tmp\")","out":"Method logging in Python"}
{"in":"0.22321428571428600000;0.44642857142857100000;0.66964285714285700000;0.89285714285714300000;1.11607142857143000000;1.33928571428571000000;1.56250000000000000000;1.78571428571429000000;2.00892857142857000000;2.23214285714286000000;2.45535714285714000000;2.67857142857143000000;2.90178571428571000000;3.12500000000000000000;3.34821428571428000000;3.57142857142857000000;3.79464285714286000000;4.01785714285714000000;4.24107142857143000000;4.46428571428571000000;4.68750000000000000000;4.91071428571428000000;5.13392857142857000000;5.35714285714286000000;5.58035714285714000000;5.80357142857143000000;6.02678571428571000000;6.25000000000000000000;6.47321428571428000000;6.69642857142857000000;6.91964285714285000000;7.14285714285714000000","out":"matplotlib grouping values of x axis"}
{"in":"import os<nl>from subprocess import Popen, PIPE<nl><nl>p = Popen(\"some_program.exe\", stdin=PIPE)<nl>p.communicate(os.linesep.join([\"name\", \"age\"]))","out":"Communicating with a windows executables commandline gui via python"}
{"in":"def put(d, keys, item):<nl><tab>if \".\" in keys:<nl><tab><tab>key, rest = keys.split(\".\", 1)<nl><tab><tab>if key not in d:<nl><tab><tab><tab>d[key] = {}<nl><tab><tab>put(d[key], rest, item)<nl><tab>else:<nl><tab><tab>d[keys] = item<nl><nl>def get(d, keys):<nl><tab>if \".\" in keys:<nl><tab><tab>key, rest = keys.split(\".\", 1)<nl><tab><tab>return get(d[key], rest)<nl><tab>else:<nl><tab><tab>return d[keys]","out":"Checking a Dictionary using a dot notation string"}
{"in":"import csv<nl>import sys<nl><nl>writer = csv.csvwriter(sys.stdout)<nl>writer.writerow(iterable_containing_my_strings)","out":"How can I change a list of strings into CSV in Python?"}
{"in":"filename = request.GET[ 'yourfilename' ]<nl><nl>from django.core.files.uploadedfile import SimpleUploadedFile<nl>file_contents = SimpleUploadedFile(\"%s\" %(filename), request.raw_post_data)<nl><nl>modelinstance.picture.save(filename, file_contents, True)","out":"Saving file uploaded via ajax to Django model ImageField"}
{"in":"def main():<nl><tab># take input from the user<nl><tab>num = float(input(\"Enter a number: \"))<nl><tab>if (num%1 != 0):<nl><tab><tab>print(\"Bad entry, only integers are accepted.\")<nl><tab><tab>return <nl><nl><tab>num = int(num)<nl><tab>factorial = 1<nl><tab>if num > 100:<nl><tab><tab>print(\"Bad entry. It should be an integer less than or equal to 100!\")<nl><tab><tab>print(\"Please try again: \")<nl><tab>elif num == 0:<nl><tab><tab>print(\"The factorial of 0 is 1\")<nl><tab>elif num < 0:<nl><tab><tab>print(\"Bad entry. It should be an integer superior than or equal to 0!\")<nl><tab><tab>print(\"Please try again: \")  <nl><tab>else:<nl><tab><tab>for i in range(1,num + 1):<nl><tab><tab><tab>factorial = factorial*i<nl><tab><tab>print(\"The factorial of\",num,\"is\",factorial)<nl><nl>main()","out":"How can i stop my python program from crashing"}
{"in":"from pylab import *<nl><nl>import time<nl><nl>ion()<nl><nl>tstart = time.time()<tab><tab><tab>   # for profiling<nl>x = arange(0,2*pi,0.01)<tab><tab><tab># x-array<nl>line, = plot(x,sin(x))<nl><nl>for i in arange(1,200):<nl><tab>line.set_ydata(sin(x+i\/10.0))  # update the data<nl><tab>draw()<tab><tab><tab><tab><tab><tab> # redraw the canvas<nl><nl><nl>print 'FPS:' , 200\/(time.time()-tstart)","out":"Updating a plot in python in real time"}
{"in":"args = [id, nya]<nl>Check2('SoapMethodName', *args)","out":"How to pass multiple variables as SUDS data in python?"}
{"in":"message = sendgrid.Mail()<nl>message.add_filter('templates', 'enable', '1')<nl>message.add_filter('templates', 'template_id', 'TEMPLATE-ALPHA-NUMERIC-ID')","out":"How to integrate sendgrid templates with python app?`"}
{"in":"application = tornado.web.Application([<nl><tab>(r'\/blah', BlahHandler),<nl><tab>], **settings)<nl><nl># Create an HTTP server listening on localhost, port 8080.<nl>http_server = tornado.httpserver.HTTPServer(application)<nl>http_server.listen(8080, address='127.0.0.1')","out":"How do you run the Tornado web server locally?"}
{"in":"import xmltodict<nl>import json<nl><nl>json.dumps(xmltodict.parase(txt))","out":"How do I parse Xml in a textarea using python and return json?"}
{"in":"import numpy as np<nl><nl>a = np.array([1,2,3])<nl>b = np.array([None, a, a, a])[1:]<nl><nl>print b.dtype, b[0].dtype, b[1].dtype<nl># object int32 int32","out":"Numpy object array of numerical arrays"}
{"in":"times = ncfile.createDimension('time', len(timerange))","out":"Creating a dimension with a range"}
{"in":"import os<nl><nl>with open('file.txt') as f:<nl><tab>for line in f:<nl><tab><tab>newname, file, checksum = line.split()<nl><tab><tab>if os.path.exists(file):<nl><tab><tab><tab>try:<nl><tab><tab><tab><tab>os.rename(file, os.sep.join([os.path.dirname(file), newname]))<nl><tab><tab><tab>except OSError:<nl><tab><tab><tab><tab>print \"Got a problem with file {}. Failed to rename it to {}.\".format(file, newname)","out":"Renaming files in folder from a text file"}
{"in":"def addWordHistory(words):<nl><tab>current = [wordhistory, 0]<nl><tab>for word in words:<nl><tab><tab>if current[0] is None:<nl><tab><tab><tab>current[0] = dict()<nl><tab><tab>children = current[0]<nl><tab><tab>if word in children:<nl><tab><tab><tab>children[word][1] += 1<nl><tab><tab>else:<nl><tab><tab><tab>children[word] = [None, 1]<nl><tab><tab>current = children[word]","out":"Python: reference and dereference of global variables in functions"}
{"in":"import os<nl>import time<nl><nl>PING_HOST='10.10.10.10' # some host on the other side of the VPN<nl><nl>while True:<nl><tab>retcode = os.system('ping -c 1 %s' % PING_HOST)<nl><nl><tab>if retcode:  <nl><tab>   # perform action for lost connection<nl><tab>   logging.warn(\"Lost visibility with %s\" % PING_HOST)<nl><nl><tab>time.sleep(10) # sleep 10 seconds","out":"Continuous check for VPN Connectivity - Python"}
{"in":"student_queryset = Students.objects.filter(Teacher__TeacherName__contains = 'Sara')","out":"Python django: filtering a table based on a criteria on another table"}
{"in":"Components = ['SAVE_DOCUMENT', 'GET_DOCUMENT', 'DVK_SEND', 'DVK_RECEIVE', 'GET_USER_INFO', 'NOTIFICATIONS', 'ERROR_LOG', 'SUMMARY_STATUS']<nl>missed = [x for x in Components if x + \"_STATUS\" not in locals() or x + \"_DESC\" not in locals()]<nl>if missed:<nl><tab>print \"Missing components: {0:}\".format(missed)<nl><tab>sys.exit(StateUnknown)","out":"How can I check to see if a variable exists?"}
{"in":"class YourProtocol(protocol.Protocol):<nl><nl><tab>def connectionMade(self):<nl><tab><tab>self._peer = self.transport.getPeer()<nl><nl><tab>def connectionLost(self):<nl><tab><tab>print 'Lost connection from', self._peer","out":"How to get the client IP address after got connection lost in twisted"}
{"in":"def __parse64(self, path_file):<nl><tab>file_data = open(path_file, 'rb').read(-1) <nl><tab>#This slurps the whole file as binary.<nl><tab>self.encoded_string_file = b64.b64encode(file_data)","out":"python implementation of 'readAsDataURL"}
{"in":"if __name__ == '__main__':<nl><tab>obj = GetOneMachineDataFromDatabase()<nl><nl><tab>make_transient(obj)<nl><tab>obj._oid = None<nl><tab>_session.add(obj)<nl><tab># this include a flush() and create a new primary key<nl><tab>_session.commit()","out":"How to use make_transient() to duplicate an SQLAlchemy mapped object?"}
{"in":"patterns = \"\"\"NP: {<DT|PP\\$>?<JJ>*<NN>}<nl><tab>{<NNP>+}<nl><tab>{<NN>+}<nl>\"\"\"","out":"Relation extraction via chunking using NLTK"}
{"in":"import numpy as np<nl>from matplotlib.patches import Circle<nl>from matplotlib.collections import PatchCollection<nl>import matplotlib.pyplot as plt<nl>from matplotlib import cm<nl>from matplotlib import animation<nl><nl>fig, ax = plt.subplots()<nl><nl>patches = []<nl># create circles with random sizes and locations<nl>N = 10 # number of circles<nl>x = np.random.rand(N)<nl>y = np.random.rand(N)<nl>radii  = 0.1*np.random.rand(N)<nl>for x1,y1,r in zip(x, y, radii):<nl><tab>circle = Circle((x1,y1), r)<nl><tab>patches.append(circle)<nl><nl># add these circles to a collection<nl>p = PatchCollection(patches, cmap=cm.prism, alpha=0.4)<nl>ax.add_collection(p)<nl><nl>def animate(i):<nl><tab>colors = 100*np.random.rand(len(patches)) # random index to color map<nl><tab>p.set_array(np.array(colors)) # set new color colors<nl><tab>return p,<nl><nl>ani = animation.FuncAnimation(fig, animate, frames=50, interval=50)<nl><nl>plt.show()","out":"How to efficiently alter the color in an animation of patches circles in matplotlib?"}
{"in":"from math import sin, cos, pi<nl>import matplotlib.pyplot as plt<nl><nl>x,y = [cos((i*pi)\/500) for i in range(1000)], [sin((i*pi)\/500) for i in range(1000)]<nl>plt.plot(x,y)<nl>plt.show()","out":"How to create a circle?"}
{"in":"def getMaxSubArrays(x):<nl><tab>y=x-np.mean(x)<nl><tab>z=y\/y.max()<nl><tab>maxSubArrays=[]<nl><tab>subFound=False<nl><tab>begin=0<nl><tab>for i in range(len(z)):<nl><tab><tab>if z[i]>0.75 and subFound==False:<nl><tab><tab><tab>subFound=True<nl><tab><tab><tab>begin=i<nl><tab><tab>elif z[i]<=0.75 and subFound==True:<nl><tab><tab><tab>subFound=False<nl><tab><tab><tab>maxSubArrays.append((begin,i))<nl><tab>for subarray in maxSubArrays:<nl><tab><tab>print \"subarray found: index \",subarray[0],\" to \",subarray[1], x[subarray[0]:subarray[1]]<nl><tab>return maxSubArrays","out":"How to find maximum interval in a graph?"}
{"in":"if isinstance(payload, list):<nl><tab>for m in payload:<nl><tab><tab>print str(m).split()<nl><nl>else:<nl><tab>print str(m).split()","out":"payload of an email in string format, python"}
{"in":"call([\"command\", \"argument\", raw_input(\"enter file name:  \")])","out":"How do I incorporate a raw_input as an argument in a function"}
{"in":"how_many = len(combobox.cget('values'))","out":"How write a for loop with ttk combobox"}
{"in":"import json<nl><nl>input_json = \"\"\"<nl>[<nl><tab>{<nl><tab><tab>\"type\": \"1\",<nl><tab><tab>\"name\": \"name 1\"<nl><tab>},<nl><tab>{<nl><tab><tab>\"type\": \"2\",<nl><tab><tab>\"name\": \"name 2\"<nl><tab>},<nl><tab>{<nl><tab><tab>\"type\": \"1\",<nl><tab><tab>\"name\": \"name 3\"<nl><tab>}<nl>]\"\"\"<nl><nl># Transform json input to python objects<nl>input_dict = json.loads(input_json)<nl><nl># Filter python objects with list comprehensions<nl>output_dict = [x for x in input_dict if x['type'] == '1']<nl><nl># Transform python object back into json<nl>output_json = json.dumps(output_dict)<nl><nl># Show json<nl>print output_json","out":"how to filter json array in python"}
{"in":"from collections import defaultdict<nl>from datetime import datetime, timedelta<nl><nl>week_ago = datetime.now() - timedelta(days=7)<nl><nl>author_recent_ratings = dict(Entry.objects.filter(pub_date__gt=week_ago)<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>  .order_by('pub_date')<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>  .select_related()<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>  .values_list('author', 'rating'))<nl><nl>recent_by_rating = defaultdict(list)<nl>for author, rating in author_recent_ratings.iteritems():<nl><tab>recent_by_rating[rating].append(author)","out":"Django list all authors by most recent rating"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl>rows, cols = 480, 640<nl>rgb_img = np.zeros((rows, cols, 3), dtype=np.uint8)<nl><nl>rgb_img[:rows\/\/2, :cols\/\/2] = 255<nl><nl>center_slice = rgb_img[1:-1, 1:-1]<nl>left_slice = rgb_img[1:-1, :-2]<nl>right_slice = rgb_img[1:-1, 2:]<nl>up_slice = rgb_img[:-2, 1:-1]<nl>down_slice = rgb_img[2:, 1:-1]<nl><nl>all_equal = (np.all(center_slice == left_slice, axis=-1) &<nl><tab><tab><tab> np.all(center_slice == right_slice, axis=-1) &<nl><tab><tab><tab> np.all(center_slice == up_slice, axis=-1) &<nl><tab><tab><tab> np.all(center_slice == down_slice, axis=-1))<nl><nl>plt.subplot(211)<nl>plt.imshow(rgb_img, interpolation='nearest')<nl>plt.subplot(212)<nl>plt.imshow(all_equal, interpolation='nearest')<nl>plt.show()","out":"Convolve an RGB image with a custon neighbout kernel using Python and Numpy"}
{"in":"#!\/usr\/bin\/env python<nl># -*- coding: utf-8 -*-<nl><nl>import odf<nl>from odf.opendocument import OpenDocumentText<nl>from odf.element import Element<nl>from odf.text import P<nl>from odf.math import Math<nl>from namespaces import MATHNS<nl><nl><nl>def main():<nl><tab>doc = OpenDocumentText()<nl><tab>p = P(text=u'text')<nl><tab>df = odf.draw.Frame( zindex=0, anchortype='as-char')<nl><tab>p.addElement(df)<nl><tab>doc.text.addElement(p)<nl><nl><tab>formula =u'c=sqrt(a^2+b^2)'<nl><tab>math = Math()<nl><tab>annot = Element(qname = (MATHNS,u'annotation'))<nl><tab>annot.addText(formula, check_grammar=False)<nl><tab>annot.setAttribute((MATHNS,'encoding'), 'StarMath 5.0', check_grammar=False)<nl><tab>math.addElement(annot)<nl><tab>do = odf.draw.Object()<nl><tab>do.addElement(math)<nl><tab>df.addElement(do)<nl><nl><tab>outputfile = u'result'<nl><tab>doc.save(outputfile, True)<nl><nl>if __name__ == '__main__':<nl><tab>main()","out":"How to add math formulas in odt document using odfpy?"}
{"in":"request.responseHeaders.setRawHeaders(<nl><tab>'Content-Disposition', ['attachment; filename=\"foo\"'])","out":"How to Force File Download on Twisted HTTP Server?"}
{"in":"soup = BeautifulSoup(content, 'lxml')","out":"How can I use Beautiful soup in combination with lxml Parser to find a keyword in a website?"}
{"in":"S = [1,2,3,4,5,6]<nl>result = [ (x,y) for x in S for y in S if y%x==0]","out":"Python implementation of set relations"}
{"in":"with open('test.txt', 'w') as f:<nl><tab>f.write('{0:10} {1:10}'.format('one', 'two'))","out":"In Python, how to format string while saving in a file"}
{"in":"from pylab import *<nl>from matplotlib.path import Path<nl>import matplotlib.patches as patches<nl><nl>data = np.random.rand(100,4)<nl><nl>verts = [(0.3, 0.7), (0.3, 0.3), (0.7, 0.3), (0.7, 0.7)]<nl><nl>path1 = Path(verts)<nl>index = path1.contains_points(data[:,:2])<nl><nl>print data[index, :2]<nl><nl>plot(data[:,0],data[:,1], 'b.')<nl>patch = patches.PathPatch(path1, facecolor='orange', lw=2)<nl>gca().add_patch(patch)<nl>plot(data[index,0], data[index,1], 'r.')<nl>show()","out":"Drawing a region of interest in a scatter plot and printing the points contained in matplotlib"}
{"in":"import numpy as np<nl>import qutip as qt<nl><nl>N = 2<nl>M = 2<nl><nl>Jp = qt.tensor(qt.qeye(M), qt.jmat(J, '+'))   # J+<nl>Jm = qt.tensor(qt.qeye(M), qt.jmat(J, '-'))   # J-<nl><nl># angular momentum<nl>Jx = (Jp + Jm) \/ 2.0<nl><nl># initial state<nl>rho0 = qt.tensor(qt.basis(M,0), qt.basis(N+1,N))<nl><nl>R = (1j*0.5*np.pi*Jx).expm()  # rotation transform<nl>rho = R * rho0","out":"How to take an exponential of a quantum object in Python's QuTiP"}
{"in":"import wx<nl><nl>class MyApp(wx.App):<nl><nl>  def __init__(self):<nl><tab>wx.App.__init__(self, redirect=False)<nl><nl>  def OnInit(self):<nl><tab>self.rootView = wx.Frame(parent=None, id=-1, title=\"Wire Frame\",<nl><tab>  pos=(150, 150), size=(350, 250))<nl><tab>self.rootView.Show()<nl><tab>self.SetTopWindow(self.rootView)<nl><tab>dlg = wx.MessageDialog(self.rootView, \"Hi\", \"title\", wx.OK|wx.ICON_ERROR)<nl><tab>#dlg.ShowModal()<nl><tab>if dlg.ShowModal() != wx.ID_OK:<nl><tab><tab>dlg.Destroy()<nl><tab>return True<nl><nl>if __name__ == \"__main__\":<nl>  app = MyApp()<nl>  app.MainLoop()","out":"wxPython - wx.MessageDialog disappears without click"}
{"in":"import cgi<nl><nl>data = cgi.FieldStorage()<nl><nl>make = data.getvalue('make')<nl>model = data.getvalue('model')<nl><nl>print ( 'Content-type:text\/html\\r<nl>\\r<nl>' )<nl>print ( '''<!DOCTYPE HTML><html lang = \"en\"><nl><tab><tab><head><nl><tab><tab><tab><meta charset=\"UTF-8\"><nl><tab><tab><tab><title>Python Response<\/title><nl><tab><tab><\/head><nl><tab><tab><body><nl><tab><tab><tab><h1>, ''' + make + ', ' + model + ''',<\/h1><nl><tab><tab><tab><a href = \"get.html\">Back<\/a><nl><tab><tab><\/body><nl><tab><tab><\/html>''' )","out":"Issue with HTTP GET Parameters in Python CGI"}
{"in":"my_str = \"\".join(reversed(my_str))","out":"Python string\/list reversal without using any library module or Dummy variable"}
{"in":"stringToQueryLevel1 = ['why this', 'why this code', 'why this code is complex']<nl>for item in stringToQueryLevel1:<nl><tab>print ' ' in item","out":"Using re.match() to find Substring"}
{"in":"[Python]","out":"Bit-operations on large number of bytes"}
{"in":"import time, os<nl>os.environ['TZ'] = \"Asia\/Kolkata\"   # timezone you want to display graphs in<nl>time.tzset()","out":"python-rrdtool, how to create graphs in UTC time zone"}
{"in":"db.User.collection.ensure_index(\"name\", 300)","out":"How to set TTL index for collection in MongoKit?"}
{"in":"im2 = cv2.imread(imgPath)<nl>im = cv2.cvtColor(im2, cv2.COLOR_BGR2GRAY)<nl>surfDetector = cv2.FeatureDetector_create(\"SURF\")<nl>surfDescriptorExtractor = cv2.DescriptorExtractor_create(\"SURF\")<nl>keypoints = surfDetector.detect(im)<nl>(keypoints, descriptors) = surfDescriptorExtractor.compute(im,keypoints)","out":"Does anyone have any examples of using OpenCV with python for descriptor extraction?"}
{"in":"class Application(UtilApplication):<nl><nl><tab>def __init__(self):<nl><tab><tab>self.configFiles = ['\/usr\/local\/etc\/foo\/bar.conf']<nl><tab><tab>UtilApplication.__init__(self)","out":"Alternate configuration file for starpy, asterisk interface library"}
{"in":"whatname = \"\"<nl>list_of_names = []<nl><nl>def regc():<nl><tab>global whatname<nl><tab>whatname = raw_input(\"Please introduce your clients first and last name.\")<nl><tab>list_of_names.append(whatname)<nl><tab>contactsav()","out":"How do i store data from my program and be able to reaccess and see\/edit it when i reopen it? Python"}
{"in":"hist(hmag, 30, range=[6.5, 12.5], facecolor='gray', align='mid')","out":"changing default x range in histogram matplotlib"}
{"in":"for t in w:<nl><tab>l.append(t.replace(\".\",\"\"))","out":"Different outputs in removing characters from a list - Python"}
{"in":"import operator<nl>primers_unsorted.sort(key=operator.itemgetter(' Construct Number', ' Part Number'))<nl><nl>for row in primers_unsorted:<nl><tab>print(row)","out":"How to do sub-sorting in python?"}
{"in":"cherrypy.tools.sessions","out":"How to process multiple ajax from client in cherrypy simultaneously"}
{"in":"post_data = [('name','Gladys'),]<tab> # a sequence of two element tuples<nl>result = urllib2.urlopen('http:\/\/example.com', urllib.urlencode(post_data))<nl>content = result.read()","out":"How to send a POST request using django?"}
{"in":"criterion = df['year_week'].map(lambda x: len(x)< 6)<nl>df[criterion].index.values","out":"Subsetting data in pandas with complex operations"}
{"in":"parser.ParseFile(open('sample.xml', 'rb'))","out":"Expat parsing in python 3"}
{"in":"from os.path import dirname, join<nl>myfile = open(join(dirname(__file__), \"mydatafile.txt\"))","out":"Text file not openable in custom module"}
{"in":"sys.stdin","out":"Passing argument to constantly running Python application"}
{"in":"class ModelFoo(Base):<nl><tab>__tablename__ = 'foo'<nl><tab>id = Column(\"id\", Integer, primary_key=True, autoincrement=True)<nl><tab>os = Column(String, nullable=False)<nl><tab>platform = Column(String)<nl><tab>search_cols = [\"os\", \"value\"]<nl><nl>for k, v in list(Base._decl_class_registry.items()):<nl><tab>if (hasattr(v, \"search_cols\")):<nl><tab><tab>cols = [getattr(v, val) for val in v.search_cols]<nl><tab><tab>query = sess.query(*cols)<nl><tab><tab>solr.add(query.all())","out":"marking columns in sqlalchemy tables"}
{"in":"plt.axvspan(x, x2, facecolor='g', alpha=0.5)","out":"matplotlib: is a changing background color possible?"}
{"in":"for tablename in cur.execute('SELECT name FROM sqlite_master WHERE type=\"table\";'):<nl><tab>if tablename[0].startswith('conn_'):<nl><tab><tab>execute_some_query_using_this_table()","out":"Python SQLite3 How to extract specific tables only"}
{"in":"k=0<nl>yterms = []<nl>while k<=SEG:<nl><tab>yterm = H + aa*m.cosh(xterms[k]\/aa) -aa*m.cosh(DIS\/aa)<nl><tab>yterms.append(yterm)<nl><tab>k+=1<nl>print yterms","out":"How to used a previously generated tuple to generate a new tuple"}
{"in":"re.findall('ATA((...)*?)AGA', mydna)","out":"How to select only certain Substrings"}
{"in":"word = \"because\"<nl>print(word[0])  # Prints \"b\"<nl>print(word[1])  # Prints \"e\"<nl>print(word[2])  # Prints \"c\"<nl>print(word[3])  # Prints \"a\"<nl>print(word[4])  # Prints \"u\"<nl>print(word[5])  # Prints \"s\"<nl>print(word[6])  # Prints \"e\"","out":"Is it possible to change a whole word into multiple letter variables?"}
{"in":"import matplotlib.pyplot as plt<nl>import pandas as pd<nl><nl>df = pd.read_csv('t.txt', delim_whitespace=True, header=None, parse_dates={'Dates': [1, 2]})<nl><nl>plt.figure()<nl>l_h = []<nl>for identifier in df[0].unique():<nl><tab>h, = plt.plot(df[df[0]==identifier]['Dates'], df[df[0]==identifier][3], label=identifier)<nl><tab>l_h.append(h)<nl>plt.legend(handles=l_h)<nl>plt.show()","out":"How can i plot line chart in python?"}
{"in":"import datetime<nl><nl>#parse json to get offset(import json; json.load(resonse); etc.)<nl>#offset is gmtoffset + dstoffset<nl>datetime.datetime.utcnow() + datetime.timedelta(seconds = offset)","out":"how to calculate the local time from gmtoffset"}
{"in":"adds = map((lambda (j, f, a):<nl>  j.join([f.format(i) for i in parse.options[a]]) if parse.options[a] else ''),<nl>  ((' ', ' -not -path \"{0}\" ', 'exclude'),<nl>  (' -or ', '-path \"{0}\"', 'include')))","out":"How to pass items as args lists in map?"}
{"in":"def authGSSServerInit(service):<nl><tab>\"\"\"<nl><tab>Initializes a context for GSSAPI server-side authentication with the given service principal.<nl><tab>authGSSServerClean must be called after this function returns an OK result to dispose of<nl><tab>the context once all GSSAPI operations are complete.<nl><nl><tab>@param service: a string containing the service principal in the form 'type@fqdn'<nl><tab><tab>(e.g. 'imap@mail.apple.com').<nl><tab>@return: a tuple of (result, context) where result is the result code (see above) and<nl><tab><tab>context is an opaque value that will need to be passed to subsequent functions.<nl><tab>\"\"\"","out":"authGSSServerInit looks for wrong entry from keytab"}
{"in":"from matplotlib import pylab as pl<nl><nl>pl.subplot(211)<nl>pl.plot(date, series1, color='black')<nl>pl.plot(date, series2, color='blue')<nl>pl.subplot(212)<nl>pl.plot(date, series3, color='red')<nl>pl.show()","out":"Python: Using Pandas to plot more than one series in each subplot"}
{"in":"p = re.compile(r':((\\\\:|[^:])+):')<nl>print p.match(\":abc'e12\\:3\\:text:\").group(0)","out":"Python regex match escaped char"}
{"in":"class UserProfileadmin(admin.ModelAdmin):<nl><tab>def formfield_for_foreignkey(self, db_field, request, **kwargs):<nl><tab><tab>if db_field.name == 'hub':<nl><tab><tab><tab>kwargs['queryset'] = Airports.objects.filter(hub=True)<nl><tab><tab>return super(UserProfileadmin, self).formfield_for_foreignkey(db_field, request, **kwargs)","out":"Django admin dropdowns based on a boolean"}
{"in":"def func(arg1, arg2):<nl><tab>\"\"\"Summary line.<nl><nl><tab>Extended description of function.<nl><nl><tab>Parameters<nl><tab>----------<nl><tab>arg1 : int<nl><tab><tab>Description of arg1<nl><tab>arg2 : str<nl><tab><tab>Description of arg2<nl><nl><tab>Returns<nl><tab>-------<nl><tab>bool<nl><tab><tab>Description of return value<nl><nl><tab>\"\"\"<nl><tab>return True","out":"Making API from Python docstrings written in PEP8"}
{"in":"test3 =((154L, u'SG'), (15L, u'SG3'), (1564L, u'SG'))<nl><nl>print(numpy.asarray(test3, dtype='<U4'))<nl><nl>[[u'154' u'SG']<nl> [u'15' u'SG3']<nl> [u'1564' u'SG']]","out":"Convert a tuple to a numpy array corrupts the data"}
{"in":"from collections import Counter<nl>from string import punctuation<nl><nl>counter = Counter()<nl>with open('\/tmp\/content_data') as f:<nl>  for line in f:<nl><tab>counter.update(word.strip(punctuation) for word in line.split())<nl><nl>result = dict(counter)<nl><nl># note: because we have<nl>#   isinstance(counter, dict)<nl># you may as well leave the result as a Counter object<nl><nl>print result","out":"Find the count of the words in the text file using python"}
{"in":"query = raw_input(\"enter binary number \")<nl><nl>try:<nl><tab>is_bin = int(query,2)<nl><tab>is_bin = True<nl><tab>print \"correct number\"<nl>except ValueError:<nl><tab>is_bin = False<nl><tab>print \"not a binary number\"","out":"How do I limit an input in python so it will only allow 0 or 1's?"}
{"in":"paraText = soup.find( text = re.compile ('Running Time:') )<nl>print paraText.findNext('dd')","out":"Trouble understanding how to use findNextSiblings"}
{"in":"for match in matches:<nl><tab>first_names.append(match[0])<nl><tab>last_names.append(match[1])","out":"Python pattern matching with regex, findall and groups "}
{"in":"def crawler():<nl><tab>while True:<nl><tab><tab>x = tasks.get()<nl><tab><tab>try:<nl><tab><tab><tab>print \"Crawler: \",x<nl><tab><tab>finally:<nl><tab><tab><tab>tasks.task_done()","out":"gevent block redis' socket request"}
{"in":"import matplotlib.pyplot as plt<nl>import networkx as nx<nl>import random<nl><nl>G = nx.gnp_random_graph(10,0.3)<nl>for u,v,d in G.edges(data=True):<nl><tab>d['weight'] = random.random()<nl><nl>edges,weights = zip(*nx.get_edge_attributes(G,'weight').items())<nl><nl>pos = nx.spring_layout(G)<nl>nx.draw(G, pos, node_color='b', edgelist=edges, edge_color=weights, width=10.0, edge_cmap=plt.cm.Blues)<nl>plt.savefig('edges.png')","out":"Colouring edges by weight in networkx"}
{"in":"cbaxes = fig.add_axes([1, 0.15, 0.03, 0.7])<nl>plt.colorbar(img, label=r\"Height (cm)\",format='%1.1f', ax=ax1, cax=cbaxes)","out":"Using colorbar with secondary y axis"}
{"in":"def find_difference(list_of_files, block_size=1000):<nl><tab>fs=[open(f,'rb') for f in list_of_files]<nl><tab>while True:<nl><tab><tab>first=True<nl><tab><tab>for f in fs:<nl><tab><tab><tab>if first:<nl><tab><tab><tab><tab>first=False<nl><tab><tab><tab><tab>s1=f.read(block_size)<nl><tab><tab><tab><tab>end=(s1==b'')<nl><tab><tab><tab><tab>continue<nl><tab><tab><tab>s2=f.read(block_size)<nl><tab><tab><tab>if s1!=s2:<nl><tab><tab><tab><tab>return True<nl><tab><tab><tab>if end and (s2!=b''):<nl><tab><tab><tab><tab>end=False<nl><tab><tab>if end:<nl><tab><tab><tab>return False","out":"Comparing more than 2 files in python3"}
{"in":"set_hint_string('append', '')","out":"How to merge notifications with a common title in pynotify?"}
{"in":"# Do everything needed to start the game<nl># For dramatic pacing, any of these might be scheduled to be<nl># called in a second or so, using pyglet.clock.schedule_once<nl>world.add(player)<nl>camera.to_follow(player)<nl>world.add(scoredisplay)<nl><nl># Finally, remove the main menu from the world<nl># This will stop showing it on screen<nl># and it will remove its keyboard event handler<nl>world.remove_item(self)","out":"Switching scenes with pyglet"}
{"in":"class Server(object):<nl><tab>_cp_config = {<nl><tab><tab>'tools.sessions.on': True,<nl><tab><tab>'tools.auth.on': True<nl><tab>}   <nl><tab>auth = AuthController()<tab>  <nl><tab>@cherrypy.expose<nl><tab>@require()<nl><tab>def index(self):<nl><tab><tab>f = open (\"file.txt\",\"r\")<nl><tab><tab>link = f.read()<nl><tab><tab>f.close()<nl><tab><tab>myText = \"Hello World\" <nl><tab><tab>html = \"\"\"<nl><tab><tab><html><nl><tab><tab><tab><body><nl><tab><tab><tab><tab><p>%s<\/p><tab><tab>  <nl><tab><tab><tab><tab><a href=\"%s\" ><img src=\"images\/go_online.png\"><\/a><nl><tab><tab><tab><\/body><nl><tab><tab><\/html><nl><tab><tab>\"\"\" %(myText, link)<tab><tab><nl><tab><tab>return html<nl><tab>index.exposed = True","out":"How to pass python variable to html variable?"}
{"in":"d1 = datetime.datetime.now() + datetime.timedelta(minutes=15)<nl>d2 = datetime.datetime.now() + datetime.timedelta(hours=1)","out":"In Python, how do I make a datetime that is 15 minutes from now? 1 hour from now?"}
{"in":"import curses<nl>import time<nl><nl>scr = curses.initscr()<nl>while True:<nl><tab>try:<nl><tab><tab>scr.addstr(0, 0, str(time.time()))<nl><tab><tab>scr.refresh()<nl><tab>except KeyboardInterrupt: break<nl>curses.endwin()","out":"How do I show a statement repeatedly on the command line using curses?"}
{"in":"import pygame,sys<nl>from pygame import *<nl><nl>WIDTH = 480<nl>HEIGHT = 480<nl>WHITE = (255,255,255) #RGB<nl>BLACK = (0,0,0) #RGB<nl><nl>pygame.init()<nl>screen = display.set_mode((WIDTH,HEIGHT),0,32)<nl>display.set_caption(\"Name of Application\")<nl>screen.fill(WHITE)<nl>timer = pygame.time.Clock()<nl>pos_on_screen, radius = (50, 50), 20<tab><nl>while True:<nl><tab>for event in pygame.event.get():<nl><tab><tab>if event.type == QUIT:<nl><tab><tab><tab>pygame.quit()<nl><tab><tab><tab>sys.exit()<nl><tab>timer.tick(60) #60 times per second you can do the math for 17 ms<nl><tab>draw.circle(screen, BLACK, pos_on_screen, radius)<nl><tab>display.update()","out":"drawing a point on the screen every 17ms in Python?"}
{"in":"lxml.etree.Comment()","out":"How can I instantiate a comment element programatically using lxml?"}
{"in":"class Category(models.Model):<nl><tab>name = models.CharField('Name', max_length=255)<nl><nl><tab>class Meta:<nl><tab><tab>db_table = 'tbl_category'<nl><nl>class Entry(models.Model):<nl><tab>category = models.ForeignKey(Category, db_column='id_tbl_category')<nl><tab>contents = models.TextField('Contents')<nl><nl><tab>class Meta:<nl><tab><tab>db_table = 'tbl_entry'","out":"Django how to customize table name and foreign key field"}
{"in":"class single_return_format(object):<nl><nl><tab>def __init__(self, func):<nl><tab><tab>self._func = func<nl><nl><tab>def __get__(self, instance, owner):<nl><tab><tab>return SimpleFormMethod(instance, self._func)<nl><nl><nl>class SimpleFormMethod(object):<nl><nl><tab>def __init__(self, instance, func):<nl><tab><tab>self._instance = instance<nl><tab><tab>self._func = func<nl><nl><tab>def __call__(self, *args, **kwargs):<nl><tab><tab>return self._func(self._instance, *args, **kwargs)<nl><nl><tab>@property<nl><tab>def standard_format(self):<nl><tab><tab>return lambda *args, **kwargs: (self._func(self._instance, *args, **kwargs), )<nl><nl><nl>class _SomeClass(object):<nl><nl><tab>def __init__(self):<nl><tab><tab>self._amount_to_add = 1<nl><nl><tab>@single_return_format<nl><tab>def add_one(self, x):<nl><tab><tab>return x+self._amount_to_add<nl><nl><nl>obj = _SomeClass()<nl>assert obj.add_one(3) == 4<nl>assert obj.add_one.standard_format(3) == (4, )","out":"Using Python decorators to add a method to a method"}
{"in":"from multiprocessing import Process<nl>import os<nl><nl>def info(title):<nl><tab>print title<nl><tab>print 'module name:', __name__<nl><tab>print 'parent process:', os.getppid()<nl><tab>print 'process id:', os.getpid()<nl><nl>def f(name):<nl><tab>os.setuid(1000)<nl><tab>info('function f')<nl><tab>print 'hello', name<nl><tab>os.system('id')<nl><nl>if __name__ == '__main__':<nl><tab>info('main line')<nl><tab>p = Process(target=f, args=('bob',))<nl><tab>p.start()<nl><tab>p.join()","out":"In Python how to call subprocesses under a different user?"}
{"in":"cx_Oracle.connect(u'hr\/XXXXX@local_xe')","out":"Connecting to Oracle database using cx_Oracle on Python"}
{"in":"return (resp.text, resp.status_code, resp.headers.items())","out":"Return a requests.Response object from Flask"}
{"in":"s.decode('string_escape')","out":"convert hex ascii mixed string like r'\\x74op' to 'top' in python"}
{"in":"import urllib2<nl>import BeautifulSoup<nl>import MySQLdb<nl><nl>f = urllib2.urlopen('http:\/\/www.python.org\/')<nl>soup=BeautifulSoup.BeautifulSoup(f.read())<nl>title=soup.find('title')<nl>print(title.string)<nl><nl>connection=MySQLdb.connect(<nl><tab>host='HOST',user='USER',<nl><tab>passwd='PASS',db='MYDB')<nl>cursor=connection.cursor()<nl><nl>sql='''CREATE TABLE IF NOT EXISTS foo (<nl><tab><tab>   fooid int(11) NOT NULL AUTO_INCREMENT,<nl><tab><tab>   title varchar(100) NOT NULL,<nl><tab><tab>   PRIMARY KEY (fooid)<nl><tab>   )'''<nl>cursor.execute(sql)<nl><nl>sql='INSERT INTO foo (title) VALUES (%s)'<nl>args=[title.string]<nl>cursor.execute(sql,args)<nl>cursor.close()<nl>connection.close()","out":"Getting contents of title tags with Python script"}
{"in":"for s in self.level.sprites:<nl>  spritelayer.fill((0), s.rect)","out":"How do I clear a pygame alpha layer efficiently?"}
{"in":"from google.appengine.api import users<nl>from google.appengine.api.namespace_manager import set_namespace<nl><nl>class ClientClass(webapp.RequestHandler):<nl>  def get(self):<nl><tab># For this example let's assume the user_id is your unique id.<nl><tab># You could just as easily use a parameter you are passed.<nl><tab>user = users.get_current_user()<nl><tab>if user:<nl><tab>   # If there is a user, use their queue.  Otherwise the global queue.<nl><tab>   set_namespace(user.user_id())<nl><nl><tab>item = QueueItem.pop()<nl><tab>self.response.out.write(str(item))<nl><nl><tab>QueueItem.push('The next task.')","out":"How to implement a FIFO queue that supports namespaces"}
{"in":"def get_queryset(self):<nl><tab>qs = super(SomeObjectDataTableView, self).get_queryset()<nl><tab>return qs.select_related().annotate(items_count=Count('items'))","out":"Aggregation with django-eztables"}
{"in":"from scipy import misc<nl>import glob<nl><nl>for image_path in glob.glob(\"\/home\/adam\/*.png\"):<nl><tab>image = misc.imread(image_path)<nl><tab>print image.shape<nl><tab>print image.dtype","out":"Importing PNG files into Numpy?"}
{"in":"import cv2<nl>img = cv2.imread(\"lenna.png\")<nl>crop_img = img[200:400, 100:300] # Crop from x, y, w, h -> 100, 200, 300, 400<nl># NOTE: its img[y: y + h, x: x + w] and *not* img[x: x + w, y: y + h]<nl>cv2.imshow(\"cropped\", crop_img)<nl>cv2.waitKey(0)","out":"How to crop an image in OpenCV using Python"}
{"in":"def microtime(dt):<nl><tab>time.mktime(dt.timetuple()) + dt.microsecond \/ 1000000.0","out":"Python get micro time from certain date"}
{"in":"__getattribute__()","out":"How do you make an access a hash in python?"}
{"in":"test = raw_input(\"Put in a word\")","out":"How to store an input(raw_input) in a variable to use it later in Python 2.7.9?"}
{"in":"def get_items(cheapness):<nl><tab>\"\"\" Return a list of (item, (price, count)) tuples that are the given<nl><tab>cheapness. Note that the second element of the tuple is another tuple. \"\"\"<nl><nl><tab>if cheapness == 'CHEAP':<nl><tab><tab>return [(item, (price,count)) for (item, (price,count)) in inventory.items() if price < 20]<nl><tab>elif cheapness == 'MODERATE':<nl><tab><tab>return [(item, (price,count)) for (item, (price,count)) in inventory.items() if price > 20 and price < 100]<nl><tab>elif cheapness == 'EXPENSIVE':<nl><tab><tab>return [(item, (price,count)) for (item, (price,count)) in inventory.items() if price > 100]","out":"How do I return this as a list"}
{"in":"#!\/usr\/bin\/env python<nl><nl>import pygtk<nl>pygtk.require('2.0')<nl>import gtk<nl><nl>class ComboBoxExample:<nl><tab>def __init__(self):<nl><tab><tab>window = gtk.Window()<nl><tab><tab>window.connect('destroy', lambda w: gtk.main_quit())<nl><tab><tab>combobox = gtk.combo_box_new_text()<nl><tab><tab>window.add(combobox)<nl><tab><tab>combobox.append_text('Select a pie:')<nl><tab><tab>combobox.append_text('Apple')<nl><tab><tab>combobox.append_text('Cherry')<nl><tab><tab>combobox.append_text('Blueberry')<nl><tab><tab>combobox.append_text('Grape')<nl><tab><tab>combobox.append_text('Peach')<nl><tab><tab>combobox.append_text('Raisin')<nl><tab><tab>combobox.connect('changed', self.changed_cb)<nl><tab><tab>combobox.set_active(0)<nl><tab><tab>window.show_all()<nl><tab><tab>return<nl><nl><tab>def changed_cb(self, combobox):<nl><tab><tab>model = combobox.get_model()<nl><tab><tab>index = combobox.get_active()<nl><tab><tab>if index:<nl><tab><tab><tab>print 'I like', model[index][0], 'pie'<nl><tab><tab>return<nl><nl>def main():<nl><tab>gtk.main()<nl><tab>return<nl><nl>if __name__ == \"__main__\":<nl><tab>bcb = ComboBoxExample()<nl><tab>main()","out":"Python GTK adding signal to a combo box"}
{"in":"lines = open('wordprob.txt','r').readlines()<nl>words = open('StdWord.txt','r').readlines()<nl>for i,line in enumerate(lines):<nl><tab><tab>v = [eval(s) for s in line.split()]<nl><tab><tab>if v[0] > v[1]:<nl><tab><tab><tab><tab>print words[i].strip()","out":"How to cleanly loop over two files in parallel in Python"}
{"in":"bikes['dayflag'] = (bikes.ts.dt.hour > 5) & (bikes.ts.dt.hour <18)","out":"Using Pandas to create a day\/ night flag"}
{"in":"i=0<nl><nl>while i < len(text):<nl><tab>print text[i]<nl><tab>i += 1","out":"Printing one character at a time from a string, using the while loop"}
{"in":"import os<nl>os.sys.path.append(os.path.dirname(os.path.realpath(__file__))+ '\/..\/..\/')","out":"How to import package modules from in-package \"main\" module"}
{"in":"from subprocess import Popen, PIPE, STDOUT<nl><nl>#do some stuff <nl>data = do_some_computation_from_file<nl><nl>#prepare your executable using subprocess.Popen<nl>exe = Popen(['your_executable'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)<nl><nl>#pass in the computed data to the executable and grap the result<nl>result = exe.communicate(input=data)[0]","out":"Python send data to an executable passed as parameter in terminal"}
{"in":"for i_t in range(0, np.shape(t)[1]):<nl><tab>ax.clear()<nl><tab>plt.hold(True)<nl><tab>#<tab>plot limits<nl><tab>ax.set_xlim(-(max(q0) + bodies[-1].L), +(max(q0) + bodies[-1].L))<nl><tab>ax.set_ylim(-(max(q0) + bodies[-1].L), +(max(q0) + bodies[-1].L))<nl><tab>for i in range(0, N):<nl><tab><tab>ax.plot(x_matrix[i_t, i], y_matrix[i_t, i], 's', color=colors[0, i])<nl><nl><tab>plt.pause(0.0001)","out":"animation plot in matplotlib with double for loop"}
{"in":"import csv<nl>foo_in = open('bar.csv', 'rU')<nl>readfoo = csv.reader(foo_in)<nl><nl>for row in readfoo:<nl><tab>spam = row[0]<nl><tab>eggs = row[1]<nl><tab>foobar = row[2]<nl><tab>new_data = dict()<nl><tab>new_data.setdefault(spam, {})<nl><tab>new_data[spam].setdefault(eggs, []).append(foobar)<nl><tab>print new_data","out":"Creating either 2 dictionaries from CSV or creating dictionary from 3 rows"}
{"in":"from urllib2 import Request, urlopen<nl>from pyPdf import PdfFileWriter, PdfFileReader<nl>from StringIO import StringIO<nl><nl>url = \"http:\/\/www.silicontao.com\/ProgrammingGuide\/other\/beejnet.pdf\"<nl>writer = PdfFileWriter()<nl><nl>remoteFile = urlopen(Request(url)).read()<nl>memoryFile = StringIO(remoteFile)<nl>pdfFile = PdfFileReader(memoryFile)<nl><nl>for pageNum in xrange(pdfFile.getNumPages()):<nl><tab><tab>currentPage = pdfFile.getPage(pageNum)<nl><tab><tab>#currentPage.mergePage(watermark.getPage(0))<nl><tab><tab>writer.addPage(currentPage)<nl><nl><nl>outputStream = open(\"output.pdf\",\"wb\")<nl>writer.write(outputStream)<nl>outputStream.close()","out":"Opening pdf urls with pyPdf"}
{"in":"import ipdb; ipdb.set_trace()","out":"Python - equivalent of Matlab\/Octave keyboard function?"}
{"in":"import contextlib<nl>import selenium.webdriver as webdriver<nl>import lxml.html as LH<nl>import lxml.html.clean as clean<nl><nl>url=\"http:\/\/www.yahoo.com\"<nl>ignore_tags=('script','noscript','style')<nl>with contextlib.closing(webdriver.Firefox()) as browser:<nl><tab>browser.get(url) # Load page<nl><tab>content=browser.page_source<nl><tab>cleaner=clean.Cleaner()<nl><tab>content=cleaner.clean_html(content)<tab><nl><tab>with open('\/tmp\/source.html','w') as f:<nl><tab>   f.write(content.encode('utf-8'))<nl><tab>doc=LH.fromstring(content)<nl><tab>with open('\/tmp\/result.txt','w') as f:<nl><tab><tab>for elt in doc.iterdescendants():<nl><tab><tab><tab>if elt.tag in ignore_tags: continue<nl><tab><tab><tab>text=elt.text or ''<nl><tab><tab><tab>tail=elt.tail or ''<nl><tab><tab><tab>words=' '.join((text,tail)).strip()<nl><tab><tab><tab>if words:<nl><tab><tab><tab><tab>words=words.encode('utf-8')<nl><tab><tab><tab><tab>f.write(words+'<nl>')","out":"Getting all visible text from a webpage using Selenium"}
{"in":"max_len = 0<nl>max_key = \"\"<nl>for key in d:<nl><tab>cur_len = len(d[key])<nl><tab>if cur_len>max_len:<nl><tab><tab>max_key = key<nl><tab><tab>max_len = cur_len<nl>print max_key","out":"How do you find which key in a dictionary has the longest list of values?"}
{"in":"def group(self, user):<nl><tab>groups = []<nl><tab>for group in user.groups.all():<nl><tab><tab>groups.append(group.name)<nl><tab>return ' '.join(groups)<nl>group.short_description = 'Groups'<nl><nl>list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff', 'group')<nl># The last argument will display a column with the result of the \"group\" method defined above","out":"Display user group in admin interface?"}
{"in":"with open(\"input.csv\", \"r\") as input_file:<nl><tab>header = input_file.readline()[:-1] #this is to remove trailing '<nl>'<nl><tab>header += \",Table exists?\"<nl><tab>output_lines = [header]<nl><nl><tab>for line in input_file:<nl><tab><tab> output_lines.append(line[:-1])<nl><tab><tab> if 'table' in line.split(\",\")[3]:<nl><tab><tab><tab> output_lines[-1]+=\",table exists\"<nl><tab><tab> else:<nl><tab><tab><tab> output_lines[-1]+=\",No table found\"<nl><nl>with open(\"output.csv\", \"w\") as output_file:<nl><tab>output_file.write(\"<nl>\".join(output_lines))","out":"Appending results of an element related if function to the last column of a csv"}
{"in":"graphdays = [pivot_table[(m)].astype(float).values for m in range(1, len(Days)+1)]<nl>days_dict = OrderedDict(list(zip(Days, graphdays)))","out":"Making OrderedDict out of Lists"}
{"in":"import pyglet<nl><nl>key = pyglet.window.key<nl><nl>win = pyglet.window.Window()<nl>keyboard = key.KeyStateHandler()<nl>win.push_handlers(keyboard)<nl><nl>print keyboard[key.UP] and keyboard[key.LEFT]","out":"detecting two simultaneous keys in pyglet (python)"}
{"in":"if self._log.GetNumberOfLines() > MAX_LINES:<nl><tab><tab>if self._log.GetLineText(DELETION_POINT) != DELETION_LINE:<nl><tab><tab><tab>start = self._log.XYToPosition(0, DELETION_POINT)<nl><tab><tab><tab>self._log.SetInsertionPoint(start)<nl><tab><tab><tab>self._log.WriteText(DELETION_LINE)<nl><tab><tab>while (self._log.GetNumberOfLines() > MAX_LINES):<nl><tab><tab><tab>start = self._log.XYToPosition(0, DELETION_POINT+1)<nl><tab><tab><tab>len = self._log.GetLineLength(DELETION_POINT+1)<nl><tab><tab><tab>self._log.Remove(start, start+len+1)","out":"Deleting lines from the middle of a TextCtrl"}
{"in":"from time import *<nl><nl># make a time string<nl>t = strftime('%H%M%S', localtime())<nl><nl># convert time string to unix time (seconds since epoch)<nl>mktime(localtime()[:3] + strptime(t, '%H%M%S')[3:])","out":"python generate Posix time from time of day"}
{"in":"import win32com.client <nl>import os<nl>import re<nl>rootdir ='C:\\Users\\IdaLim\\Desktop\\docs'<tab> <nl>try:<nl><tab>app = win32com.client.Dispatch('Word.Application')<nl><tab>app.Visible = True<nl><tab>for subdir, dirs, files in os.walk(rootdir):<nl><tab><tab>for file in files:<nl><tab><tab><tab>fullpath = os.path.join(*[subdir, file])<nl><tab><tab><tab>if file.endswith(\".doc\"):<nl><tab><tab><tab><tab>out_name = file.replace(\"doc\", r\"txt\")<nl><tab><tab><tab><tab>in_file = os.path.abspath(rootdir + \"\\\\\" + file)<nl><tab><tab><tab><tab>out_file = os.path.abspath(rootdir + \"\\\\\" + out_name)<nl><tab><tab><tab><tab>doc = app.Documents.Open(in_file)<nl><tab><tab><tab><tab>content = doc.Content.Text<nl><tab><tab><tab><tab>print 'Exporting', out_file<nl><tab><tab><tab><tab>doc.SaveAs(out_file, FileFormat=7)<nl><tab><tab><tab><tab>doc.Close()<nl>except Exception, e:<nl><tab>print e<nl>finally:<nl><tab>app.Quit()","out":"How to retrieve plain text from .doc files using Python?"}
{"in":"savefig()","out":"Plot 3d in 2d with numpy?"}
{"in":"letters = raw_input(\"Please enter forbidden letters\")<nl>words = set(open(\"p.txt\", \"r\").read().split())<nl>for word in words:<nl>  if all(letter not in word for letter in letters):<nl><tab>print word","out":"How to find words that have no characters of an string?"}
{"in":"import Polygon, numpy<nl><nl># Here I extracted and combined some contours and created a convex hull from it.<nl># Now I wanna check whether a contour acquired differently intersects with this hull or not.<nl><nl>for contour in contours:  # The result of cv2.findContours is a list of contours<nl><tab>contour1 = contour.flatten()<nl><tab>contour1 = numpy.reshape(contour1, (int(contour1.shape[0]\/2),-1))<nl><tab>poly1 = Polygon.Polygon(contour1)<nl><nl><tab>hull = hull.flatten()  # This is the hull is previously constructued<nl><tab>hull = numpy.reshape(hull, (int(hull.shape[0]\/2),-1))<nl><tab>poly2 = Polygon.Polygon(hull)<nl><nl><tab>if (poly1 & poly2).area()<= some_max_val:<nl><tab><tab>some_operations","out":"Intersection of 2D numpy ndarrays"}
{"in":"# x = range(6)<nl>x = [\"this\", \"is\", \"an\", \"example\", \"list\"]<nl><nl>for prv, nxt in zip(x, x[1:]):<nl><tab>print prv, nxt","out":"How to select sequential elements from a list?"}
{"in":"PairRDDFunctions.join()","out":"Joining data sets in Spark"}
{"in":"def my_function(*args):<nl>   if len(args) == 0:<nl><tab>   return x[y[args[0]]]<nl>   return [x[y[a]] for a in args]","out":"Unpacking arguments from dict and list"}
{"in":"result=[dictionary[k] for k in keys if k in dictionary]","out":"How to get dictionary values having its keys as a list"}
{"in":"from traits.api import Instance, Str, HasTraits<nl><nl>class Person(HasTraits):<nl><tab>name = Str(\"hooked\")<nl><nl>class Chair(HasTraits):<nl><tab>sitting = Instance(Person, kw = {})<nl><nl>t = Chair()<nl>print t.sitting.name","out":"Instantiating a default instance for an Enthought trait"}
{"in":"s = 'caaat caat cat kittycaat, rack, smaaack'<nl>x = 0<nl>for i in s.split():<nl><tab>if i.count('a') > x:<nl><tab><tab>x = i.count('a')<nl><tab><tab>word = i<nl>print word","out":"Searching the word in a list with more a's"}
{"in":"for k in wlist:<nl><tab>if k != i:<nl><tab><tab>k.send(data)","out":"Python socket send data"}
{"in":"def change_window(browser):<nl><tab>\"\"\"<nl><tab>Simple window switcher without the need of playing with ids.<nl><tab>@param browser: Current browser instance<nl><tab>\"\"\"<nl><tab>curr = browser.current_window_handle<nl><tab>all_handles = browser.window_handles<nl><tab>for handle in list(set([curr]) - set(all_handles)):<nl><tab><tab>return browser.switch_to_window(handle)","out":"Convert Selenium IDE Syntax to Python Webdriver"}
{"in":"firstList = [1,2,3]<nl>secondList=[]<nl><nl>counter = len(firstList)-1<nl><nl>while counter >= 0:<nl><tab>secondList.append(firstList[counter])<nl><tab>counter -= 1","out":"How do I reverse a list using while loop?"}
{"in":"five_image = (display_image,)","out":"Assigning a value to a tuple"}
{"in":"from collections import Counter<nl>import sys<nl>from random import randint<nl><nl># Python 2\/3 compatibility<nl>if sys.hexversion >= 0x3000000:<nl><tab>inp = input<nl><tab>rng = range<nl>else:<nl><tab>inp = raw_input<nl><tab>rng = xrange<nl><nl>def get_int(prompt):<nl><tab>while True:<nl><tab><tab>try:<nl><tab><tab><tab>return int(inp(prompt))<nl><tab><tab>except ValueError:<nl><tab><tab><tab>pass<nl><nl>def main():<nl><tab>sides = get_int(\"How many sides does your die have? \")<nl><tab>times = get_int(\"How many times do you want to roll? \")<nl><tab>results = Counter(randint(1, sides) for roll in rng(times))<nl><nl>if __name__==\"__main__\":<nl><tab>main()","out":"Unlimited sides to dice in simulator"}
{"in":"for line in file:<nl><tab>if username == line.strip():<nl><tab>   validusername = True<nl><tab>   break","out":"Getting number of lines in a text file without readlines"}
{"in":"\" Play a WAVE file. \"<nl><nl>import pyaudio<nl>import wave<nl>import sys<nl><nl>chunk = 1024<nl><nl>if len(sys.argv) < 2:<nl><tab>print \"Plays a wave file.<nl><nl>\" +\\<nl><tab><tab>  \"Usage: %s filename.wav\" % sys.argv[0]<nl><tab>sys.exit(-1)<nl><nl>wf = wave.open(sys.argv[1], 'rb')<nl><nl>p = pyaudio.PyAudio()<nl><nl># open stream<nl>stream = p.open(format =<nl><tab><tab><tab><tab>p.get_format_from_width(wf.getsampwidth()),<nl><tab><tab><tab><tab>channels = wf.getnchannels(),<nl><tab><tab><tab><tab>rate = wf.getframerate(),<nl><tab><tab><tab><tab>output = True)<nl><nl># read data<nl>data = wf.readframes(chunk)<nl><nl># play stream<nl>while data != '':<nl><tab>stream.write(data)<nl><tab>data = wf.readframes(chunk)<nl><nl>stream.close()<nl>p.terminate()","out":"Windows (XP to Windows 7) audio playback with python?"}
{"in":"class MyMixIn(object):<nl><tab>def op_custom(self):<nl><tab><tab>print(\"foo\")<nl><nl>class MyOperation(models.Model, MyMixIn):<nl><tab>def op_normal(self):<nl><tab><tab>print(\"bar\")","out":"How to add new method to Django class from other modules?"}
{"in":"def myrepl(match):<nl><tab>num = int(match.group(1))<nl><tab># Do something here<nl><tab>return str(num) # this will replace the $url[2]<nl><nl>mystr = \"this is $url[2] a string\"<nl><nl>print re.sub(r'\\$url\\[([0-9])\\]', myrepl, mystr, flags=re.IGNORECASE)","out":"RegEx replace in Python"}
{"in":"def _accumulate_stress(betweenness,S,P,sigma,s):<nl><tab>delta = dict.fromkeys(S,0)<nl><tab>while S:<nl><tab><tab>w = S.pop()<nl><tab><tab>for v in P[w]:<nl><tab><tab><tab>delta[v] += (1.0+delta[w])<nl><tab><tab>if w != s:<nl><tab><tab><tab>betweenness[w] += sigma[w]*delta[w]<nl><tab>return betweenness","out":"Faster way to calculate the number of shortest paths a vertex belongs to using Networkx"}
{"in":"import numpy as np<nl>import pylab as pl<nl>from matplotlib.colors import hsv_to_rgb<nl><nl>V, H = np.mgrid[0:1:100j, 0:1:300j]<nl>S = np.ones_like(V)<nl>HSV = np.dstack((H,S,V))<nl>RGB = hsv_to_rgb(HSV)<nl>pl.imshow(RGB, origin=\"lower\", extent=[0, 360, 0, 1], aspect=150)<nl>pl.xlabel(\"H\")<nl>pl.ylabel(\"V\")<nl>pl.title(\"$S_{HSV}=1$\")<nl>pl.show()","out":"2d hsv color space in matplotlib"}
{"in":"x = struct.pack(4*'B' + 'HB'[ALPHA<256] + 4*'B', *data)","out":"Converting list of integers into a binary \"string\" in python"}
{"in":"\"<nl>This is a Google style docs.<nl>...<nl>...<nl>Raises:<nl><tab>TypeError: 1. foo() missing 1 required positional argument.<nl><tab><tab><tab>   2. key must be a numeric value.<nl><tab><tab><tab>   3. ...<nl><tab>KeyError:  1. bar key is missing.<nl><tab><tab><tab>   2. ...<nl>\"","out":"How should I group similar exceptions in a docstring?"}
{"in":"def strtr(strng, replace):<nl><tab>buffer = []<nl><tab>i, n = 0, len(strng)<nl><tab>while i < n:<nl><tab><tab>match = False<nl><tab><tab>for s, r in replace.items():<nl><tab><tab><tab>if strng[i:len(s)+i] == s:<nl><tab><tab><tab><tab>buffer.append(r)<nl><tab><tab><tab><tab>i = i + len(s)<nl><tab><tab><tab><tab>match = True<nl><tab><tab><tab><tab>break<nl><tab><tab>if not match:<nl><tab><tab><tab>buffer.append(strng[i])<nl><tab><tab><tab>i = i + 1<nl><tab>return ''.join(buffer)","out":"php's strtr for python"}
{"in":"import argparse<nl>parser = argparse.ArgumentParser(add_help=False)<nl>parser.add_argument('-t', '--test', action=\"store_true\")<nl>parser.add_argument('params', nargs='+')<nl>args = parser.parse_args()<nl>if args.test is True:<nl><tab>intro = None<nl>elif args.params:<nl><tab>pass  # process the params here<nl>else:<nl><tab>pass  # no params whatsoever","out":"How to handle missing arguments in argparse?"}
{"in":"class ValidationForm(forms.Form):<nl><tab>email = forms.EmailField(label = 'Email', error_messages = {'invalid': 'Your Email Confirmation Not Equal With Your Email'})<nl><tab>email_confirmation = forms.EmailField(label = 'Email Confirmation')<nl><nl><tab>def clean_email(self):<nl><tab>   if email != email_confirmation:<nl><tab><tab>  raise ValidationError(self.fields['email'].error_messages['invalid'])<nl><tab>   return email","out":"Django - How to add custom error message in Form?"}
{"in":"try:<nl><tab>WindowsError<nl>except NameError:<nl><tab>WindowsError = None","out":"Shutil cannot import WindowsError on windows"}
{"in":"def resizeConsoleEvent(self, resizeObject):<nl><tab>if not self.keyPressDown and not self.blockResizing:<nl><tab><tab># calculate maximum columns and lines based on a '|' character<nl><tab><tab>font = self.ui.console.currentFont()<nl><tab><tab>fmetric = QtGui.QFontMetrics(font)<nl><tab><tab>fontPixelWidth = fmetric.width(\"|\")<nl><tab><tab>fontPixelHeight = fmetric.height()<nl><tab><tab>availableWidthPixels = int(self.ui.console.geometry().width())<nl><tab><tab>availableHeightPixels = int(self.ui.console.geometry().height())<nl><tab><tab># Calculate columns and lines w\/ adjustments for rounding<nl><tab><tab>self.consoleColumns = int(availableWidthPixels \/ fontPixelWidth) + 1<nl><tab><tab>self.consoleLines = int(availableHeightPixels \/ fontPixelHeight) - 3<nl><nl><tab><tab># resize the pyte screen I'm using with the calculated information<nl><tab><tab>self.shell.resizeConsole(self.consoleLines, self.consoleColumns)<nl><nl><tab><tab># block double resize event<nl><tab><tab>self.keyPressDown = False<nl><tab><tab>return False<nl><tab>else:<nl><nl><tab><tab>return True","out":"How do I convert width and height (in pixels) to columns for use with the python library pyte?"}
{"in":"import re<nl>infilename = 'file2.txt'<nl>outfilename = 'file.txt'<nl><nl>with open(infilename, 'r') as infile, open(outfilename, 'w') as outfile:<nl><tab>for line in infile:<nl><tab><tab>line = line.rstrip('<nl>').split('\\t')<nl><tab><tab>line = [val if val else '-9' for val in line]<nl><tab><tab>outfile.write('\\t'.join(line) + '<nl>')","out":"Replacing missing data with a number in python"}
{"in":"from requests_oauthlib import OAuth1<tab><nl><nl>client_key = ''<nl>client_secret = ''<nl>resource_owner_key = ''<nl>resource_owner_secret = ''<nl><nl>def query(queryurl):<nl><tab><tab>headeroauth = OAuth1(client_key, client_secret, resource_owner_key,<nl><tab><tab>resource_owner_secret, signature_type = 'auth_header')<nl><nl><tab><tab>return requests.get(queryurl, auth = headeroauth)<nl><nl>query('http:\/\/website.com')","out":"Is there a working OAuth library for Python 3?"}
{"in":"result = commands.getoutput('zcat ' + fullpath + ' |wc -l')","out":"About insert shell commands into python"}
{"in":"announcements = Announcement.objects.all().filter(date_start__gte = datetime.now())","out":"How to filter objects on datetime fields?"}
{"in":"ep =  1412673904406<nl><nl>from datetime import datetime<nl><nl>print datetime.fromtimestamp(ep\/1000).strftime(\"%A\")<nl>Tuesday<nl><nl><nl>def ep_to_day(ep):<nl><tab>return datetime.fromtimestamp(ep\/1000).strftime(\"%A\")","out":"Python convert epoch time to day of the week"}
{"in":"import urllib2<nl>import StringIO<nl>from zipfile import ZipFile<nl>import csv<nl><nl>baseUrl = \"http:\/\/api.worldbank.org\/v2\/en\/indicator\/ny.gdp.pcap.cd?downloadformat=csv\"<nl>remoteCSV = urllib2.urlopen(baseUrl)<nl><nl>sio = StringIO.StringIO()<nl>sio.write(remoteCSV.read())<nl><tab># We create a StringIO object so that we can work on the results of the request (a string) as though it is a file.<nl><nl>z = ZipFile(sio, 'r')<nl><tab># We now create a ZipFile object pointed to by 'z' and we can do a few things here:<nl><nl>print z.namelist()<nl><tab># A list with the names of all the files in the zip you just downloaded<nl><tab># We can use z.namelist()[1] to refer to 'ny.gdp.pcap.cd_Indicator_en_csv_v2.csv'<nl><nl>with z.open(z.namelist()[1]) as f:<nl># Opens the 2nd file in the zip<nl><tab>csvr = csv.reader(f)<nl><tab>for row in csvr:<nl><tab><tab>print row","out":"How to download a CSV file from the World Bank's dataset"}
{"in":"import sys<nl>import sqlite3<nl><nl>print 'python version:', sys.version<nl>print 'PySQLite version:', sqlite3.version<nl>print 'sqlite3 version:', sqlite3.sqlite_version<nl>print<nl><nl>conn = sqlite3.connect('shane.sqlite')<nl>conn.isolation_level = None  # CHANGED<nl><nl>with conn:<nl><tab>conn.execute(\"create table example (A, B);\")<nl><nl>with conn:<nl><tab>conn.execute(\"insert into example values (?, ?);\", (0,200))<nl><nl><tab>conn.execute(\"savepoint spTest;\")<nl><tab>conn.execute(\"insert into example values (?, ?);\", (1,201))<nl><tab>conn.execute(\"insert into example values (?, ?);\", (2,202))<nl><tab>conn.execute(\"rollback to savepoint spTest;\")  # CHANGED<nl><nl><tab>conn.execute(\"insert into example values (?, ?);\", (5,205))","out":"Using savepoints in python sqlite3"}
{"in":"import re<nl>with open(\"filename\") as f:<nl><tab>for line in f:<nl><tab><tab>if re.match(r\"^\\d+.*$\",line):<nl><tab><tab><tab>print line","out":"Read lines starting with numbers"}
{"in":"import random<nl><nl>words = [line.strip() for line in open('\/etc\/dictionaries-common\/words')]<nl>print(random.choice(words))","out":"Return a random word from a word list in python"}
{"in":"class C(object):<nl><nl><tab>def __init__(self, Type='generic', X=None, Y=None):<nl><tab><tab>X = X or 5<nl><tab><tab>Y = Y or 500<nl><tab><tab>self.X, self.Y = {<nl><tab><tab><tab>\"generic\": (X, Y),<nl><tab><tab><tab>\"short\": (1, Y),<nl><tab><tab><tab>\"long\": (10, Y),<nl><tab><tab><tab>\"large\": (X, 2000),<nl><tab><tab><tab>\"small\": (X, 100),<nl><tab><tab>}[Type]<nl><nl><tab>def __str__(self):<nl><tab><tab>return \"X={0} Y={1}\".format(self.X, self.Y)<nl><nl><nl>print(C())<nl>print(C('short'))<nl>print(C('long'))<nl>print(C('large'))<nl>print(C('small'))<nl>print(C('small', 10))<nl>print(C('small', 20, 20))","out":"defaults of method python"}
{"in":"(q,qq,qqq)=mystring.split()","out":"Detecting spaces and applying to a variable"}
{"in":"n = 100<nl>numbers = range(2,100)<nl>results = []<nl>while len(numbers) > 0:<nl><tab>results.append(numbers[0])<nl><tab>numbers = [number for number in numbers if number % results[-1] != 0]<nl>print len(results)","out":"Find all the primes from 2 to n, using the Sieve of Eratosthenes"}
{"in":"from itertools import groupby<nl><nl>money = money_tx.objects.order_by('-tx_date')<nl>plans = investment_plan.objects.select_related()<nl>result = []<nl><nl>for date, group in groupby(money, lambda x: x.tx_date):<nl><tab>plans_for_date = set(x.investment_plan_id for x in group)<nl><tab>for plan in plans:<nl><tab><tab>data = {'ORG': plan.organization.organization_name,<nl><tab><tab><tab><tab>'INV_PLAN': plan.plan_code,<nl><tab><tab><tab><tab>'DATE': date,<nl><tab><tab><tab><tab>'PRESENT': (plan.id in plans_for_date)}<nl><tab><tab>result.append(data)<nl><nl>print result","out":"pickup \"unique item\" of a field in a django model using python"}
{"in":"faulthandler.dump_traceback_later(3, repeat=True)","out":"Python pdb breakpoint after 10 seconds"}
{"in":"ranges = (<nl><tab>(8700, 12600),<nl><tab>(15700, 17600),<nl><tab>(18750, 22350),<nl><tab>(23700, 27250),<nl><tab>(106950, 115300),<nl>)<nl><nl>newSndIdx = 0<nl><nl>for start, end in ranges:<nl><tab>for i in range(start, end + 1):<nl><tab><tab>sampleValue = getSampleValueAt(sound, i)<nl><tab><tab>setSampleValueAt(newSnd, newSndIdx, sampleValue)<nl><tab><tab>newSndIdx += 1<nl><tab>newSndIdx += 500","out":"How would make this run with an if statement and one for loop?"}
{"in":"try:<nl><tab>result = simulate(open(\"myfile\"))<nl>except SimulationException as sim_exc:<nl><tab>print \"error parsing stream\", sim_exc<nl>else:<nl><tab>if result:<nl><tab><tab>print \"result pass\"<nl><tab>else:<nl><tab><tab>print \"result fail\"<nl><nl># execution continues from here, regardless of exception or not","out":"In Python how should I test if a variable is None, True or False"}
{"in":"file_local = open( folder_path + file_id + '.pdf', 'wb' )","out":"PDF files downloaded with Python cannot be opened in acrobat"}
{"in":"file.seek(0)","out":"python insert Analytics code into all files"}
{"in":"os.system('php -f file.php')","out":"Calling PHP from Python"}
{"in":"from lockfile.pidlockfile import PIDLockFile<nl>from lockfile import AlreadyLocked<nl><nl>pidfile = PIDLockFile(\"\/var\/run\/mydaemon.pid\", timeout=-1)<nl>try:<nl><tab>pidfile.acquire()<nl>except AlreadyLocked:<nl><tab>try:<nl><tab><tab>os.kill(pidfile.read_pid(), 0)<nl><tab><tab>print 'Process already running!'<nl><tab><tab>exit(1)<nl><tab>except OSError:  #No process with locked PID<nl><tab><tab>pidfile.break_lock()<nl><nl>#pidfile can now be used to create DaemonContext","out":"python-daemon context fails to start when a stale PID file is present"}
{"in":"import sys <nl><nl>fileTemps = 'temps'<nl><nl>with open(fileTemps, 'rw') as fd:<nl><tab>temps = fd.readlines()<nl><nl>if temps.__len__() >= 15:<nl><tab>temps.pop(0)<nl><nl>temps.append(' '.join(sys.argv[1:]) + '<nl>')<nl><nl>with open(fileTemps, 'w') as fd:<nl><tab>for l in temps:<nl><tab><tab>fd.write(l)","out":"Store 15 last values on a file on Python"}
{"in":"def print_divide(x,y):<nl><tab>try:<nl><tab><tab>print x\/y<nl><tab>except ZeroDivisionError:<nl><tab><tab>pass","out":"Avoid IF statement after condition has been met"}
{"in":"def tail_pg():<nl><tab>log = sudo('ls -t \/var\/lib\/pgsql\/9.3\/data\/pg_log\/| head -n 1')<nl><nl><tab>print type(log), log<nl><tab>sudo('tail -n 25 -f %s' % log, pty=True)","out":"Python Fabric Save Output to Variable"}
{"in":"map_by_state = collections.defaultdict(list)<nl><nl>for state, address in zip (statefloatingselfips, selfips):<nl><tab>map_by_state[state].append(address)","out":"dictionary created using zip with combining two list"}
{"in":"def closest_common_ancestor(ds1, ds2):<nl><nl><tab><tab>while ds1 != None:<nl><tab><tab><tab><tab>dd = ds2<nl><tab><tab><tab><tab>while dd != None:<nl><tab><tab><tab><tab><tab><tab>if ds1 == dd:<nl><tab><tab><tab><tab><tab><tab><tab><tab>return dd<nl><tab><tab><tab><tab><tab><tab>dd = dd.parent<nl><tab><tab><tab><tab>ds1 = ds1.parent<nl><tab><tab>return None","out":"Tree traversal in a customised way in Python?"}
{"in":"import urllib<nl>content = urllib.urlopen('http:\/\/www.google.com\/').read()","out":"Python: Read a file (from an external server)"}
{"in":"OrderedDict((k, v) for k, v in zip(list_1, list_2) if v is not None)","out":"Conditional zip of two lists"}
{"in":"import rarfile<nl>import os.path<nl><nl>extracted_dir_name = \"samples\/sample\"<tab># Directory with extracted files<nl>file = rarfile.RarFile(\"samples\/sample.rar\", \"r\")<nl><nl># list file information<nl>for info in file.infolist():<nl><tab> print info.filename, info.date_time, info.file_size<nl><nl><tab> # Compare with extracted file here<nl><tab> extracted_file = os.path.join(extracted_dir_name, info.filename)<nl><tab> if info.file_size != os.path.getsize(extracted_file):<nl><tab><tab> print \"Different size!\"","out":"Compare archiwum.rar content and extracted data from .rar in the folder on Windows 7"}
{"in":"class Shows(models.Model) :<nl><tab>title = models.TextField(primary_key=True)<nl><tab>description = models.TextField()  <nl><tab>image = models.TextField()<nl><tab>class Meta:<nl><tab><tab>db_table = 'shows'<nl><tab>def __str__(self):<nl><tab><tab>return self.title  <nl><nl><nl>class Episode(models.Model) :<nl><tab>show = models.ForeignKey(Show, related_name=\"episodes\")<nl><tab>title = models.TextField(primary_key=True)<nl><tab>link = models.TextField()  <nl><tab>show_title = models.ForeignKey(Shows)<nl><nl><tab>class Meta: <nl><tab><tab>db_table = 'episodes'<nl><tab>def __str__(self):<nl><tab><tab>return self.title","out":"Django models, one to many relationship with back reference [how]"}
{"in":"df_new = df.groupby('video_id').agg({\"ios_id\": {\"count\": \"count\",<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>\"distinct\": \"unique\"},<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> \"feed_position\": np.average,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> \"time_watched\": np.sum,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> \"video_length\": np.sum})","out":"How to perform aggregate options on one groupby column, giving two column outputs"}
{"in":"# How to load a text file as a corpus.<nl>import nltk<nl>from nltk.corpus import PlaintextCorpusReader<nl>from nltk.corpus.util import LazyCorpusLoader<nl>afrikaans = LazyCorpusLoader('afrikaans', PlaintextCorpusReader, r'(?!\\.).*\\.txt')<nl>afrikaans.sents()[1]<nl>af = nltk.Text(afrikaans.words())<nl>af.concordance(\"mense\")","out":"How to access a text file with Afrikaans language words as a nltk corpus"}
{"in":"for i in range(4):<nl><tab>ax.plot([VecStart_x[i], VecEnd_x[i]], [VecStart_y[i],VecEnd_y[i]],zs=[VecStart_z[i],VecEnd_z[i]])","out":"How can I make a simple 3D line with Matplotlib?"}
{"in":"request = urllib2.Request('http:\/\/localhost:8080\/manager\/deploy?path=\/war_file', data=war_file_contents)","out":"deploying a war to tomcat using python"}
{"in":"grt.root.wb.doc.physicalModels[0].catalog.schemata[0].tables[1].columns[7].flags.append('UNSIGNED')","out":"Change column flags in MySQL Workbench scripting shell"}
{"in":"import maya.OpenMaya as OpenMaya<nl><nl>def projectPoint(worldPnt, camPnt, depth):<nl><tab>'''<nl><tab>@param worldPnt - MPoint of point to project. (WorldSpace)<nl><tab>@param camPnt - MPoint of camera position. (WorldSpace)<nl><tab>@param depth - Float value of distance.<nl><tab>Returns list of 3 floats.<nl><tab>'''<nl><tab>#Get vector from camera to point and normalize it.<nl><tab>mVec_pointVec = worldPnt - camPnt<nl><tab>mVec_pointVec.normalize()<nl><nl><tab>#Multiply it by the depth and the camera offset to it.<nl><tab>mVec_pointVec *= depth<nl><tab>mVec_pointVec += OpenMaya.MVector(camPnt.x, camPnt.y, camPnt.z)<nl><nl><tab>return [mVec_pointVec.x, mVec_pointVec.y, mVec_pointVec.z]","out":"Project a 2D Point to 3D using a depth value. Maya Python API"}
{"in":"l1 = [['a','b'],['b','c'],[]]<nl>l2 = [0,1,3]<nl>l3 = [l1[i] + [x] for i, x in enumerate(l2)]","out":"How to combine a list of lists with a second list into a single list of lists?"}
{"in":"from matplotlib.pyplot import imshow, colorbar<nl><nl>data = [[0.0,0.2],[0.5,1.0]]<nl>imshow(data)<nl><nl>cb = colorbar()<nl>cb.ax.plot([0,1],[cb.norm(0.3),cb.norm(0.3)],'r')<nl>cb.ax.plot([0,1],[cb.norm(0.8),cb.norm(0.8)],'r')","out":"how can I plot on colorbar python"}
{"in":"response = render(request, template, context)<nl>response.set_cookie('my_cookie', 'my_cookie_value')<nl>return response","out":"Django: How to set a (permanent) cookie, in addition to temp session, in Class based views?"}
{"in":"def get_resolution(filename):<nl><tab>with open(filename, \"rb\") as f:<nl><tab><tab>data = f.read()<nl><tab>if data[0:2] != b\"\\xff\\xd8\":<nl><tab><tab>raise ValueError(\"Not JPEG.\")<nl><tab>if data[2:4] != b\"\\xff\\xe0\":<nl><tab><tab>return None<nl><tab>else:<nl><tab><tab>if data[13] == b\"\\x00\":<nl><tab><tab><tab>unit = \"no unit\"<nl><tab><tab>elif data[13] == b\"\\x01\":<nl><tab><tab><tab>unit = \"dpi\"<nl><tab><tab>elif data[13] == b\"\\x02\":<nl><tab><tab><tab>unit = \"dpcm\"<nl><tab><tab>else:<nl><tab><tab><tab>raise ValueError(\"Bad JFIF\")<nl><tab><tab>x = 256 * ord(data[14]) + ord(data[15])<nl><tab><tab>y = 256 * ord(data[16]) + ord(data[17])<nl><tab>return {\"unit\":unit, \"resolution\":(x, y)}","out":"How to extract image file details in Python (Windows)?"}
{"in":"class MyForm(forms.Form):<nl><tab>email = forms.EmailField(required=False)<nl><tab>cell = forms.CharField(required=False, max_length=20)<nl><nl><tab>def clean(self):<nl><tab><tab>cleaned_data = super(MyForm, self).clean()<nl><tab><tab>if cleaned_data.get('email') and cleaned_data.get('cell'):<nl><tab><tab><tab>raise forms.ValidationError(\"Please select either E-mail address or cell number, but not both\")<nl><tab><tab>return cleaned_data","out":"Post to Python view after Javascript validation in Django"}
{"in":"import urllib2<nl>import json<nl>response = urllib.request.urlopen('https:\/\/api.ripple.com\/v1\/accounts\/rssc7gemsZBsseHxyb5NmjfYpJD6aUJirq\/balances')<nl>html = response.read()<nl>json_data = json.loads(html)","out":"How to process and return information in API (JSON to Python and back)?"}
{"in":"w = root.winfo_reqwidth()<nl>h = root.winfo_reqheight()<nl>ws = root.winfo_screenwidth()<nl>hs = root.winfo_screenheight()<nl>x = (ws\/2) - (w\/2)<nl>y = (hs\/2) - (h\/2)<nl>root.geometry('+%d+%d' % (x, y)) ## this part allows you to only change the location","out":"Centering window python tkinter"}
{"in":"import numpy as np<nl><nl>def F(c,D,x):<nl><tab>\"\"\"Assume c and x are numpy arrays of equal size and D is a scalar\"\"\"<nl><tab># differencing of the concentration field<nl><tab>deltac = np.diff(c)<nl><tab>deltax = np.diff(x)<nl><nl><tab>return -D * deltac \/ deltax","out":"Trying to implement Fick's first law of diffusion in a simulation of water movement across cell membrane"}
{"in":"import asyncmongo<nl>import tornado.web<nl><nl>class Handler(tornado.web.RequestHandler):<nl><nl><tab>@tornado.web.asynchronous<nl><tab>def get(self, id):<nl><tab><tab>self.id = id<nl><tab><tab>self.db = asyncmongo.Client(pool_id='mypool', host='localhost', <nl><tab><tab><tab>port=27107, dbname='mydb')<nl><nl><tab><tab>self.db.users.find_one({'username': self.current_user}, <nl><tab><tab><tab>callback=self.on_user)<nl><nl><tab>def on_user(self, response, error):<nl><tab><tab>if error:<nl><tab><tab><tab>raise tornado.web.HTTPError(500)<nl><tab><tab>self.user = response<nl><tab><tab>self.db.documents.find_one({'id': self.id, 'user': self.user}, <nl><tab><tab><tab>callback=self.on_document)<nl><nl><tab>def on_document(self, response, error):<nl><tab><tab>if error:<nl><tab><tab><tab>raise tornado.web.HTTPError(500)<nl><tab><tab>self.render('template', first_name=self.user['first_name'],<nl><tab><tab><tab>document=response)","out":"Multiple Database calls in an asynchronous request with Tornado"}
{"in":"import datetime<nl>from System import DateTime<nl>datetime.datetime(DateTime.Now)","out":"How do I convert from a .NET DateTime to an IronPython datetime?"}
{"in":"step1 = Popen(['ip','addr','show','br0'],stdout=PIPE)<nl>step2 = Popen(['grep','inet6'],stdout=PIPE,stdin=step1.stdout)<nl>step3 = Popen(['sed','-e','\/fe80\/d','-e','s\/ *inet6 *\/\/g','-e','s\/\\\/64.*$\/\/g'],stdout=PIPE,stdin=step2.stdout)<nl>step4 = Popen(['tail','-n1'],stdout=PIPE,stdin=step3.stdout)<nl>step4.communicate()[0]","out":"How to get the IPv6 address of an interface under linux"}
{"in":"str(inventor1.encode(\"UTF-8\") if inventor1 else inventor1)","out":"AttributeError: 'NoneType' object has no attribute 'encode' with lxml-python"}
{"in":"def walk_on_the_beach(sig, t, interval=1000):<nl><tab>\"\"\"<nl><tab>:param sig: signal.<nl><tab>:param t: threshold.<nl><tab>:param interval: interval between next value check (ms).<nl><tab>\"\"\"<nl><tab>last_value = 0<nl><tab>interval_flag = True<nl><tab>interval_iterator = 0<nl><tab>markers = np.zeros(np.size(sig))<nl><tab>for i in np.arange(np.size(sig)):<nl><tab><tab>absolute = np.abs(last_value - sig[i])<nl><tab><tab>last_value = sig[i]<nl><tab><tab>if interval_flag:<nl><tab><tab><tab>if absolute > t:<nl><tab><tab><tab><tab>markers[i] = np.max(sig)<nl><tab><tab><tab><tab>interval_flag = False<nl><tab><tab>else:<nl><tab><tab><tab>if interval_iterator == interval:<nl><tab><tab><tab><tab>interval_flag = True<nl><tab><tab><tab><tab>interval_iterator = 0<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>interval_iterator += 1<nl><nl><tab>return markers<nl><nl>py.plot(time_scale[:100000], walk_on_the_beach(filtered, 0.02))","out":"Marking a signal"}
{"in":"[[row[i] for row in data] for i in range(len(data[0]))]","out":"How to transpose a matrix without using numpy or zip (or other imports)"}
{"in":"output = open('\/home\/user\/test\/wsservice\/data.pkl', 'wb')","out":"IO Error while storing data in pickle"}
{"in":"class HttpResponseSeeOther(HttpResponseRedirect):<nl><tab>status_code = 303<nl><nl>return HttpResponseSeeOther('\/other-url\/')","out":"How to produce a 303 Http Response in Django?"}
{"in":"distance = [self.dx - self.x - offsetx, self.dy - self.y - offsety]","out":"pygame bullet physics messed up by scrolling"}
{"in":"json.loads(request.body.decode('utf-8'))","out":"json.loads doesn't work with binary JSON posted by AngularJS in Python"}
{"in":"import cx_Oracle<nl>conn_to = cx_Oracle.connect('user', '...', 'dbserver:1521\/ENGR') <nl><nl>cur_to = conn_to.cursor()<nl><nl>insert_sql = 'insert into tc values (:val, xmltype(:xmlval))' # need to wrap with xmltype() !<nl><nl>cur_to.setinputsizes(val=cx_Oracle.CLOB, xmlval=cx_Oracle.CLOB) # need to set to cx_Oracle.CLOB!<nl>s =  ('<xml>' + '<inner\/>' * 550 + '<\/xml>')<nl>cur_to.execute(insert_sql, val = s, xmlval = s)<nl><nl>conn_to.commit()","out":"cx_Oracle insert large XMLType value"}
{"in":"title = text.encode('utf8')","out":"Utf8 encoding with MySQLdb on non-utf symbols"}
{"in":"telconn.sendline(password + '<nl>')","out":"telnet from linux pc to windows pc using python script"}
{"in":"items = Item.all().order('name').fetch(10)<nl>headers = ['Name', 'Price', 'Quantity']<nl>viewitems = [[getattr(x, h) for h in headers] for x in items]<nl><nl>template_values = {'items': viewitems,<nl><tab><tab><tab><tab>   'headers': headers}<nl>render('Views\/table.html', self, template_values)","out":"Django: using variables as array indices?"}
{"in":"parse.y","out":"Parsing\/Tokenizing a String Containing a SQL Command"}
{"in":"def printList(l, dict1):<nl><tab>for l1 in l:<nl><tab><tab>if dict1.has_key(l1):<nl><tab><tab><tab>print \"withinrange\"<nl><tab><tab>else:<nl><tab><tab><tab>print \"outsiderange\"<nl><nl>file = open(\"test1.txt\")<nl>textfile = file.readlines()<nl>dict={'sca4': [['BM1', 17], ['BM2', 33]], 'sca6': [['GM2', 46], ['GM2', 67], ['BM',17]]}<nl>dict1 = {}<nl>l =[]<nl>key = ''<nl>for line in textfile:<nl><tab>if not line.strip():<nl><tab><tab>continue<nl><tab>col1, col2, col3 = line.strip().split(\" \")<nl><tab>if not (key == col1):<nl><tab><tab>printList(l, dict1)<nl><tab><tab>l =[]<nl><tab><tab>key = col1<nl><tab><tab>dict1 = {}<nl><tab>for value_list in dict.get(col1, []):<nl><tab><tab>#print value_list[1]<nl><tab><tab>if not (value_list[1] in l):<nl><tab><tab><tab>l.append(value_list[1])<nl><tab><tab>if ((int(col2) <= value_list[1]) and (value_list[1] <= int(col3))):<nl><tab><tab><tab>dict1[value_list[1]] = 'correct'<nl>printList(l, dict1)","out":"Check if complex values of dict matches certain criteria"}
{"in":"self.response.out.write(today.strftime(\"\"\"<html><body><p style='color:#3E3535'>%A, %d %B<\/p>\"\"\"))","out":"if statement invalid syntax"}
{"in":"matrix = [[0 for i in range(7)] for j in range(7)]<nl>with open('t.dat.txt', 'r') as source:<nl><tab>for line in source:<nl><tab><tab>i, j, value = line.split()<nl><tab><tab>i, j = int(i), int(j)<nl><tab><tab>matrix[i - 1][j - 1] = float(value)","out":"How can I create a matrix\/array from a txt file?"}
{"in":"import xmlrpclib, httplib<nl><nl>class TimeoutTransport(xmlrpclib.Transport):<nl><tab>timeout = 10.0<nl><tab>def set_timeout(self, timeout):<nl><tab><tab>self.timeout = timeout<nl><tab>def make_connection(self, host):<nl><tab><tab>h = httplib.HTTPConnection(host, timeout=self.timeout)<nl><tab><tab>return h<nl><nl>t = TimeoutTransport()<nl>t.set_timeout(20.0)<nl>server = xmlrpclib.Server('http:\/\/time.xmlrpc.com\/RPC2', transport=t)","out":"Timeout for xmlrpclib client requests"}
{"in":"__init__.py","out":"Python - loading module from directory"}
{"in":"for FundingOppSynopsis in root.findall('FundingOppSynopsis'): <nl><tab>IDs = [int(category.text) for category in FundingOppSynopsis.findall('EligibilityCategory')]<nl><tab>if 99 not in IDs:<nl><tab><tab>root.remove(FundingOppSynopsis)","out":"Python XML parsing with ElementTree: How to find values of elements with the same name?"}
{"in":"def rem(a):<nl><tab>copy = a[:]<nl><tab>for value in set(copy):<nl><tab><tab>copy.remove(value)<nl><tab>return copy","out":"Return a list with every duplicate value in Python?"}
{"in":"class VForm(forms.ModelForm):<nl><nl><tab>def __init__(self, *args, **kwargs):<nl><tab><tab>super(VForm, self).__init__(*args, **kwargs)<nl><nl><tab><tab>if self.instance.field == 'Y':<nl><tab><tab><tab>self.fields['field2'] = forms.ChoiceField(<nl><tab><tab><tab><tab>choices=[(self.instance.field,<nl><tab><tab><tab><tab><tab><tab>  self.instance.field),], required=True)","out":"How to make a record read-only in a Django form?"}
{"in":"f = open('file.txt', 'rb')<nl><nl>stream = f.readlines()","out":"send file using XMODEM in python"}
{"in":"print(\"Content-Type: text\/html<nl><nl>\")<nl>print(\"\"\"<html><nl> <head><\/head><nl> <body><nl> <form name='success' action='nav.py' method='post'><nl><tab> <input type='hidden' name='linkB' value='Add Assets' \/><nl> <\/form><nl> <script type='text\/javascript'><nl><tab> document.success.submit()<nl> <\/script><nl> <\/body>\"\"\")","out":"Post to another python cgi-script from the current cgi-script"}
{"in":"import wx.lib.agw.speedmeter","out":"import a tkinter widget in wxpython application as a panel"}
{"in":"FileC = FileA.append(FileB ,ignore_index = True)","out":"Combine 2 csv files with same no. of features Python"}
{"in":"import sys<tab><tab> # top-level<nl><nl>3 + 4<tab><tab><tab>  # top-level<nl><nl>x = 0<tab><tab><tab>  # top-level<nl><nl>def f():<tab><tab>   # top-level<nl><tab>import os<tab>  # not top-level!<nl><tab>return 3<tab>   # not top-level<nl><nl>if x:<tab><tab><tab>  # top-level<nl><tab>print 3<tab><tab># not top-level<nl>else:<nl><tab>print 4<tab><tab># not top-level, but executes as part of an if statement<nl><tab><tab><tab><tab>   # that is top-level<nl><nl>class TopLevel(object): # top-level<nl><tab>x = 3<tab><tab>  # not top-level, but executes as part of the class statement<nl><tab>def foo(self): # not top-level, but executes as part of the class statement<nl><tab><tab>print 5<tab># not top-level","out":"What is a top-level statement in Python?"}
{"in":"import os<nl>import sys<nl>import django<nl>sys.path.append('\/path\/to\/django_project')<nl>from django_project import *<nl>os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')<nl>django.setup()","out":"Standalone Django ORM - default settings not recognized"}
{"in":"from music21 import *<nl>s = converter.parse(filepath)<nl># assuming key changes are the same in all parts, just get the first part<nl>p = s.parts[0]<nl>pFlat = p.flat<nl>keySigs = pFlat.getElementsByClass('KeySignature')<nl>for k in keySigs:<nl><tab>print k.measureNumber","out":"Extracting measure number of key change in MusicXML"}
{"in":"from itertools import islice<nl>for x in islice(L, 1, None): # start=1, stop=None<nl><tab>print(x)","out":"Create an iterator from a certain point"}
{"in":"print x.rjust(40) + x.ljust(40)","out":"spacing issue in python"}
{"in":"data.append(dict(zip(('name', 'surname', 'phone', 'address', 'email', 'etc'),<nl><tab><tab><tab><tab><tab> line.split(\";\", 6))))","out":"How write this example in python style?"}
{"in":"class TalkAdmin(admin.ModelAdmin):<nl><nl><tab>list_display = ['title', 'get_speakers', 'date']<nl><nl><tab>def get_speakers(self, obj):<nl><tab><tab>speakers = obj.speakers.all().order_by('name').values_list('name', flat=True)<nl><tab><tab>return ', '.join(speakers)","out":"Alphabetically order values in a Many-to-Many relation, then list_display the first item"}
{"in":"request.session.pop('message')","out":"How to remove key from request QueryDict in Django?"}
{"in":"import os<nl>dir = os.path.dirname(__file__)<nl>path = raw_input()<nl>if os.path.isabs(path):<nl><tab>print \"input path is absolute\"<nl>else:<nl><tab>path = os.path.join(dir, path)<nl><tab>print \"absolute path is %s\" % path","out":"How to resolve relative paths in python?"}
{"in":"Type.objects.filter(type=typeImInterestedIn)","out":"Values from models from Database (Django)"}
{"in":"n = gdb.nodes.create(**nodeDict)","out":"How to use neo4jrestclient to make a node with properties from a python dictionary?"}
{"in":"templates\/AndroidManifest.xml.tmpl","out":"screen support in kivy set to normal and large screens"}
{"in":"base = b'\\x80abc'.decode(FSENCODING, \"replace\")","out":"Porting Python 2 Unicode to Python 3"}
{"in":"if __name__=='__main__':<nl><tab>from timeit import Timer<nl><tab>t = Timer(lambda: superMegaIntenseFunction(10))<nl><tab>print t.timeit(number=1)","out":"How to use python timeit when passing variables to functions?"}
{"in":"hash-timestamp","out":"How create an Etag with an expire date"}
{"in":"Teams = ['Boston Americans','World Series Not Played in 1904','New York Giants',<nl><tab><tab> 'Chicago White Sox','Chicago Cubs','Chicago Cubs','Pittsburgh Pirates',<nl><tab><tab> 'Philadelphia Athletics']<nl>Year = [1903,1904,1905,1906,1907,1908,1909,1910]<nl><nl>l = zip(Teams, Year)<nl>d = {}<nl>for e in l:<nl><tab>if e[0] not in d:<nl><tab><tab>d[e[0]] = [e[1]]<nl><tab>else:<nl><tab><tab>d[e[0]].append(e[1])<nl><nl>#Max Item<nl>s = sorted(d.items(), key=lambda x: len(x[1]))[-1]<nl>print(\"%s - %s\" % (s[0], len(s[1])))<nl><nl># Entire list<nl>for k, v in sorted(d.items(), key=lambda x: -len(x[1])):<nl><tab>print(\"%s - %s\" % (k, len(v)))","out":"Dictionary: Print entire list from max to min items in a dictionary"}
{"in":"df = df[~df['addzip'].str.contains(\"[a-zA-Z]\").fillna(False)]","out":"Pandas Python: Delete Rows of DF That Have ASCII Letters"}
{"in":"catalog = getToolByName(context, 'portal_catalog')<nl>for brain in catalog(portal_type='MyType'):<nl><tab>obj = brain.getObject()<nl><tab>if obj._ordering == 'unordered':<nl><tab><tab>obj.setOrdering(u'')<nl><tab>order = obj.getOrdering()<nl><tab>for id in obj._tree:<nl><tab><tab>if id not in order._order():<nl><tab><tab><tab>order.notifyAdded(id)","out":"How do you migrate an unordered folder to an ordered in Plone"}
{"in":"sys.stdout = codecs.getwriter('utf8')(sys.stdout.buffer, 'strict')<nl>sys.stderr = codecs.getwriter('utf8')(sys.stderr.buffer, 'strict')","out":"UnicodeEncodeError is occurring while extracting Twitter data"}
{"in":"import time<nl>import threading<nl>import win32ui, win32gui, win32com, pythoncom, win32con<nl>from win32com.client import Dispatch<nl><nl>class IeThread(threading.Thread):<nl><tab>def run(self):<nl><tab><tab>pythoncom.CoInitialize()<nl><tab><tab>ie = Dispatch(\"InternetExplorer.Application\")<nl><tab><tab>ie.Visible = 0<nl><tab><tab>ie.Navigate('http:\/\/website\/file.xml')<nl><nl>def PushButton(handle, label):<nl><tab>if win32gui.GetWindowText(handle) == label:<nl><tab><tab>win32gui.SendMessage(handle, win32con.BM_CLICK, None, None)<nl><tab><tab>return True<nl><nl>IeThread().start()<nl>time.sleep(3)  # wait until IE is started<nl>wnd = win32ui.GetForegroundWindow()<nl>if wnd.GetWindowText() == \"File Download - Security Warning\":<nl><tab>win32gui.EnumChildWindows(wnd.GetSafeHwnd(), PushButton, \"&Save\");<nl><tab>time.sleep(1)<nl><tab>wnd = win32ui.GetForegroundWindow()<nl>if wnd.GetWindowText() == \"Save As\":<nl><tab>win32gui.EnumChildWindows(wnd.GetSafeHwnd(), PushButton, \"&Save\");","out":"Downloading file using IE from python"}
{"in":"import time<nl>import serial<nl><nl># configure the serial connections (the parameters differs on the device you are connecting to)<nl>ser = serial.Serial(<nl><tab>port='COM2',<nl><tab>baudrate=9600,<nl><tab>timeout=1,<nl><tab>parity=serial.PARITY_ODD,<nl><tab>stopbits=serial.STOPBITS_TWO,<nl><tab>bytesize=serial.SEVENBITS<nl>)<nl>ser.isOpen()<nl># Reading the data from the serial port. This will be running in an infinite loop.<nl><nl>while 1 :<nl><tab><tab># get keyboard input<nl><tab><tab>bytesToRead = ser.inWaiting()<nl><tab><tab>data = ser.read(bytesToRead)<nl><tab><tab>time.sleep(1)<nl><tab><tab>print(data)","out":"Reading from RS 232 port using python"}
{"in":"db = server['test']<nl>for doc in db:<nl><tab>print doc<nl><tab>for key in db[doc].keys():<nl><tab><tab>print key","out":"how to introspect a couchdb document for its set of fields via couchdb-python"}
{"in":"parent.children_set.all()","out":"django how to following relationships backwards?"}
{"in":"import wx<nl><nl>class main(wx.Frame):<nl><tab>def __init__(self):<nl><tab><tab>wx.Frame.__init__(self, None, -1, \"Testing an app\")<nl><tab><tab>self.Maximize()<nl><tab><tab>panel = wx.Panel(self, -1)<nl><tab><tab>textList = wx.StaticText(panel, -1, \"Text1\")<nl><tab><tab>self.listBox = wx.ListBox(panel, -1, choices=[\"Some large text\", \"another large text\"], size=(400, 400))<nl><tab><tab>text = wx.StaticText(panel, -1, \"Content\")<nl><tab><tab>self.text = wx.TextCtrl(panel, -1, \"\", style=wx.TE_READONLY|wx.TE_MULTILINE, size=(500, 500))<nl><nl><tab><tab>listbox = wx.BoxSizer(wx.HORIZONTAL)<nl><tab><tab>listbox.Add(textList)<nl><tab><tab>listbox.Add(self.listBox)<nl><nl><tab><tab>textbox = wx.BoxSizer(wx.HORIZONTAL)<nl><tab><tab>textbox.Add(text)<nl><tab><tab>textbox.Add(self.text)<nl><nl><tab><tab>sizer = wx.BoxSizer(wx.HORIZONTAL)<nl><tab><tab>sizer.Add(listbox)<nl><tab><tab>sizer.Add(textbox)<nl><tab><tab>panel.SetSizer(sizer)<nl>  # Some stuff here...<nl>if __name__ == \"__main__\":<nl><tab>app = wx.App()<nl><tab>frame = main().Show()<nl><tab>app.MainLoop()","out":"Shows WxPython widgets on the Screen"}
{"in":"start=re.sub(r'(\\+.*)|(\\-.*)$', '', startTime)","out":"Time zone is not detected when formating datetime"}
{"in":"class GameForm(forms.ModelForm): <nl><tab><tab>name = forms.CharField(max_length=15, label='Name') <nl><tab><tab>url = forms.URLField(label='URL', initial='http:\/\/') <nl><tab><tab>cats = forms.ModelMultipleChoiceField(widget=forms.CheckboxSelectMultiple(),required=True)<nl><tab><tab>class Meta: <nl><tab><tab><tab><tab>model = Game <nl><tab><tab><tab><tab>fields = ('name','url','cats')","out":"How can I render a ManyToManyField as checkboxes?"}
{"in":"for x, y in itertools.izip(l, l[1:]): print x, y","out":"Pythonic iteration over sliding window pairs in list?"}
{"in":"datetime.date","out":"Can I have a timezone-aware datetime.date object?"}
{"in":"dict(zip([\"key1\",\"key2\",\"key3\"], [\"val1\",\"val2\",\"val3\"]))","out":"Merge two lists,one as keys, one as values, into a dict in Python"}
{"in":"def grouper(iterable, n, fillvalue=None):<nl><tab>\"Collect data into fixed-length chunks or blocks\"<nl><tab># grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx<nl><tab>args = [iter(iterable)] * n<nl><tab>return izip_longest(fillvalue=fillvalue, *args)<nl><nl>from itertools import izip_longest # required by grouper<nl>i = [0, 0, 0, 0, 15, 28, 28, 28, 27, 27, 35, 44, 43, 43, 42, 39]<nl>lowest = None<nl>highest = None<nl>for z,q in grouper(i, 2):<nl><tab>v = z-q<nl><tab>if v < lowest:<nl><tab><tab>lowest = v<nl><tab>if v > highest:<nl><tab><tab>highest = v<nl>print(lowest)<nl>print(highest)","out":"Iterate through arraylist calculating the difference of consecutive values in python"}
{"in":"f = open('\/tmp\/output', 'wb')","out":"Python Write bytes to file"}
{"in":"from twisted.internet import protocol, reactor<nl>from twisted.protocols.basic import LineReceiver<nl><nl>class Echo(LineReceiver):<nl><tab>def dataReceived(self, data):<nl><tab><tab>self.transport.write(data)<nl><nl><tab>def connectionLost(self, reason):<nl><tab><tab>print 'Client connection lost. Reason:<nl>{r}<nl>'.format(r=reason)<nl><tab><tab>LineReceiver.connectionLost(self, reason)<nl><tab><tab>reactor.stop()<nl><nl>class EchoFactory(protocol.Factory):<nl><tab>def buildProtocol(self, addr):<nl><tab><tab>return Echo()<nl><nl>reactor.listenTCP(8000, EchoFactory())<nl>reactor.run()","out":"How to break a while true statement"}
{"in":"User.phone_number << contacts","out":"How to do an IN operator in peewee"}
{"in":"list = [\"simon\", \"tom\", \"sarah\", \"peter\", \"jane\"]<nl>word = input()<nl>if word.lower() in list:<nl><tab>print('Ok')<nl><tab>#continue with rest of program<nl>else:<nl><tab> print('No, sorry')","out":"Python How to accept only certain words with user input"}
{"in":"import matplotlib.pyplot as plt<nl>import matplotlib.ticker as ticker<nl>import numpy as np<nl><nl>fig = plt.figure()<nl>ax = fig.add_subplot(1,1,1)<nl><nl>mu, sigma=100, 15<nl>x=mu + sigma*np.random.randn(1000000)<nl>n, bins, patches=ax.hist(x, 50, facecolor='green', alpha=0.75)<nl><nl>ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda y, pos: ('%.2f')%(y*1e-3)))<nl>ax.set_ylabel('Frequency (000s)')<nl><nl>plt.show()","out":"Matplotlib histogram, frequency as thousands"}
{"in":"import os<nl>import shutil<nl>import glob<nl><nl>src = 'source_folder'<nl>name = 'D_folder_name'<nl><nl>#In your case this would be something like C:\\\\A<nl>top = 'root_folder for destination'<nl><nl>for root, dirs, files in os.walk(top):<nl><tab>if name in dirs:<nl><tab><tab>for filename in glob.glob(os.path.join(src, '*.*')):<nl><tab><tab><tab>shutil.copy(filename, os.path.join(root,name))","out":"In Windows command prompt, copy one file (or multiple files) to multiple directories that have a user specified name"}
{"in":"xrange(len(strval))","out":"How do I get same result without using enumerate?"}
{"in":"from matplotlib.patches import Rectangle<nl>import numpy as np<nl>import pylab as P<nl><nl>xs = np.arange(0,10,0.1)<nl>line1 = P.plot(xs,np.sin(xs),\"r-\", label=\"lower limit\")[0]<nl>line2 = P.plot(xs,np.sin(xs-1)+3,\"b-\", label=\"upper limit\")[0]<nl>P.fill_between(xs,np.sin(xs), np.sin(xs-1)+3,color='green', alpha=0.5, label=\"test\")<nl>rect = Rectangle((0, 0), 1, 1, fc=\"g\", alpha=0.5)<nl>P.legend([line1, line2, rect], [\"lower limit\", \"upper limit\", \"green area\"])<nl>P.show()","out":"Labelling a coloured area under a graph"}
{"in":"while(self.d(resourceId=\"android:id\/text1\").text!='Hawaii'):<nl><tab><tab>self.d.press('down');<nl>self.d.press('enter')","out":"Able to click on button but next page is not loading in my native android application"}
{"in":"#!\/usr\/bin\/python<nl>import sys<nl>import zlib<nl>f = open(sys.argv[1], \"rb\")<nl>g = open(sys.argv[2], \"wb\")<nl>z = zlib.decompressobj()<nl>while True:<nl><tab>buf = z.unconsumed_tail<nl><tab>if buf == \"\":<nl><tab><tab>buf = f.read(8192)<nl><tab><tab>if buf == \"\":<nl><tab><tab><tab>break<nl><tab>got = z.decompress(buf)<nl><tab>if got == \"\":<nl><tab><tab>break<nl><tab>g.write(got)","out":"How to inflate a partial zlib file"}
{"in":"class Scores(base):<nl><tab>__tablename__ = 'center_master'<nl><tab>id = Column(Integer(), primary_key=True)<nl><tab>email = Column(String(255), index=True)","out":"Poor MySQL performance on EC2 Micro instance"}
{"in":"import os<nl>dir_path = '%s\\\\Example\\\\' %  os.environ['APPDATA'] <nl>if not os.path.exists(dir_path):<nl><tab>os.makedirs(dir_path)<nl><nl>file_path = '%sexample.db' % dir_path<nl>sqlite3.connect(file_path)","out":"Creating a folder in the \"AppData\\Roaming\" directory [Python]"}
{"in":"app.add_url_rule","out":"Making urls.py file for Flask like in Django"}
{"in":"class A(object):<nl><nl><tab>def __init__(self):<nl><tab><tab>self.a = 1<nl><tab><tab>self.b = 1<nl><nl><tab>@property<nl><tab>def a_plus_b(self):<nl><tab><tab>return self.a + self.b<nl><nl>foo = A()<nl>print foo.a_plus_b # prints \"2\"<nl>foo.a = 3<nl>print foo.a_plus_b # prints \"4\"<nl>foo.b = 4<nl>print foo.a_plus_b # prints \"7\"","out":"Python - Set class property to depend on values of other properties in the same class"}
{"in":"import matplotlib as mpl<nl>mpl.use('macOsX')","out":"Matplotlib - histogram frequency error with data"}
{"in":"clipboard = '&'.join(args)","out":"string manipulation - stringing '&' between a list of args"}
{"in":"db.execute(\"INSERT INTO present VALUES('test2', ?, 10)\", (None,))","out":"Insert Null into SQLite3 in Python"}
{"in":"def selectDown(self):<nl><tab><tab>global topTxt, midTxt, backTxt, midTxtTab, list_<nl><tab><tab>print \"down pressed\"<nl><tab><tab>global blkNum <nl><tab><tab>cursor = midTxtTab.textCursor()<nl><tab><tab>cursor.movePosition(QtGui.QTextCursor.Start)<nl><tab><tab># cursor.movePosition(QtGui.QTextCursor.Down)<nl><nl><tab><tab>tmp = cursor.blockFormat()<nl><tab><tab>tmp.setBackground(QtGui.QBrush(QtCore.Qt.yellow))<nl><tab><tab>cursor.setBlockFormat(tmp)","out":"how to highlight and change the line selection upon button press in QTextEdit PYQT"}
{"in":"serial_f = serial.Serial(port=dev, baudrate=BAUDRATE, timeout=2)<nl><nl>def write_serial():<nl><tab>status = serial_f.read(1)<nl><tab>serial_f.write(buffer)<nl><nl>loop = asyncio.get_event_loop()<nl>loop.add_reader(serial_f.fileno(), write_serial)","out":"Using asyncio to read the output of a serial port"}
{"in":"from google.appengine.api import rdbms<nl>conn = rdbms.connect(instance='instance_name', database='database', user='user', password='password')","out":"Image upload to MYSQL using Google App Engine (Python)"}
{"in":"setattr(Person, 'first_name', 'John')","out":"Excluding fields when dynamically creating a pseudo model in Django to initiate a Form"}
{"in":"for count in range(1,numGames+1):<nl><tab>print()<nl><tab>while True:<nl><tab><tab>try:<nl><tab><tab><tab>print(\"Game\",str(count))<nl><tab><tab><tab>atBats=input(\"How many at bats did the player have? \")<nl><tab><tab><tab>atBats=int(atBats)<nl><tab><tab><tab>hits=input(\"How many hits did the player have? \")<nl><tab><tab><tab>hits=int(hits)<nl><tab><tab><tab>battingAverage=hits\/atBats<nl><tab><tab>except Exception as err:<nl><tab><tab><tab>print(\"Please enter a number\")<nl><tab><tab><tab>print(err)<nl><tab><tab><tab>continue<nl><tab><tab>break","out":"How to make my count reset on for loops"}
{"in":"# Merge source and watermark pages<nl>page0 = source.getPage(0)<nl>over0 = overlay.getPage(0)<nl>if rotaion_angle:<nl><tab>page0.mergeRotatedAroundPointPage(<nl><tab><tab>over0,<nl><tab><tab>rotaion_angle,<nl><tab><tab>over0.mediaBox.getWidth() \/ 2,<nl><tab><tab>over0.mediaBox.getWidth() \/ 2)<nl><nl><tab>#page0.mergeRotatedPage(overlay.getPage(0), rotaion_angle, True)<nl>else:<nl><tab>page0.mergePage(over0)","out":"Python PyPDF2 merge rotated pages"}
{"in":"def print_books(d):<nl><tab>if isinstance(d['shelf'], dict):<nl><tab><tab>print d['shelf']['book']['title']<nl><tab>else:<nl><tab><tab>for book in d['shelf']:<nl><tab><tab><tab>print book['book']['title']","out":"Python: get all values associated with key in a dictionary, where the values may be a list or a single item"}
{"in":"import mechanize<nl><nl>br = mechanize.Browser()<nl>br.open(URL)<nl>br.select_form(nr=0)<nl>br.form['self'] = [\"88\"]<nl>r = br.submit()<nl><nl>print r.read()","out":"Python mechanize checkboxes with dropdown submit"}
{"in":"j,k=input().split(\" \")<nl>j=int(j)<nl>k=int(k)","out":"How do I input multiple values from a single line?"}
{"in":"trgmst_info = request.DATA['trgmst_info'][0]<nl>request_accts = ['request-dev', 'request-qa', 'request-uat', 'request-prod']<nl>for rep in request_accts:<nl><tab>request.DATA['trgmst_info'] = [rd.replace(rep, settings.REQUEST_ACCT) for rd in request.DATA['trgmst_info']]","out":"coercing to Unicode: need string or buffer, list found"}
{"in":"#!\/usr\/bin\/env python<nl>import sys<nl>n = int(sys.argv[1])<nl>data = sys.stdin.read()<nl>print(data[::n])","out":"Output every nth byte of stdin"}
{"in":"list.extend(['a3', 'a4'])","out":"Appending to a List"}
{"in":"os = getattr(__builtins__, \"\".join(chr(ord(x) - 1) for x in  \"``jnqpsu``\"))(\"os\")","out":"Importing in python, how many ways can it be done?"}
{"in":"import matplotlib.cm as cm<nl><nl>ab = np.array(abundance)<nl>gs = np.array(grain_size)<nl>ab_norm = ab\/ab.max()*100<nl>plt.matshow([ab_norm], cmap=cm.gist_rainbow_r) <nl>plt.xticks(range(7), gs)<nl>plt.yticks(range(1), [\"abundance\"])<nl>plt.colorbar()<nl>plt.show()","out":"2D Heat Map using matplot lib"}
{"in":"from sgmllib import SGMLParser<nl>import urllib2<nl>import urllib<nl><nl># Define the class that will parse the suggestion XML<nl>class PullSuggestions(SGMLParser):<nl><nl>   def reset(self):<nl><tab>  SGMLParser.reset(self)<nl><tab>  self.suggestions = []<nl><tab>  self.queries = []<nl><nl>   def start_suggestion(self, attrs):<nl><tab>  for a in attrs:<nl><tab><tab> if a[0] == 'data': self.suggestions.append(a[1])<nl><nl>   def start_num_queries(self, attrs):<nl><tab>  for a in attrs:<nl><tab><tab> if a[0] == 'int': self.queries.append(a[1])<nl><nl># ENTER THE BASE QUERY HERE<nl><nl>base_query = \"\"  #This is the base query<nl><nl>base_query += \"%s\"<nl>alphabet = \"abcdefghijklmnopqrstuvwxyz\"<nl>for letter in alphabet:<nl>   q = base_query % letter;<nl>   query = urllib.urlencode({'q' : q})<nl>   url = \"http:\/\/google.com\/complete\/search?output=toolbar&%s\" % query<nl><nl>   res = urllib2.urlopen(url)<nl>   parser = PullSuggestions()<nl>   parser.feed(res.read())<nl>   parser.close()<nl><nl>   for i in range(0,len(parser.suggestions)):<nl><tab>  print \"%s\\t%s\" % (parser.suggestions[i], parser.queries[i])","out":"Is there a Google Insights API?"}
{"in":"from django import forms<nl>from django.db import models<nl>from django.contrib import admin<nl><nl>class Foo(models.Model):<nl><tab>pass<nl><nl>class Bar(models.Model):<nl><tab>foo = models.ForeignKey(Foo)<nl><nl>class FooForm(forms.ModelForm):<nl><tab>class Meta:<nl><tab><tab>model = Foo<nl><nl><tab>bars = forms.ModelMultipleChoiceField(queryset=Bar.objects.all())<nl><nl><tab>def __init__(self, *args, **kwargs):<nl><tab><tab>super(FooForm, self).__init__(*args, **kwargs)<nl><tab><tab>if self.instance:<nl><tab><tab><tab>self.fields['bars'].initial = self.instance.bar_set.all()<nl><nl><tab>def save(self, *args, **kwargs):<nl><tab><tab># FIXME: 'commit' argument is not handled<nl><tab><tab># TODO: Wrap reassignments into transaction<nl><tab><tab># NOTE: Previously assigned Foos are silently reset<nl><tab><tab>instance = super(FooForm, self).save(commit=False)<nl><tab><tab>self.fields['bars'].initial.update(foo=None)<nl><tab><tab>self.cleaned_data['bars'].update(foo=instance)<nl><tab><tab>return instance<nl><nl>class FooAdmin(admin.ModelAdmin):<nl><tab>form = FooForm","out":"one-to-many inline select with django admin"}
{"in":"textfile = open('a.txt')<nl>replace_dict_list = []<nl><nl>replace_symbol =  raw_input(\" Which symbol would you like to replace \")<nl>replace_letter = raw_input(\" Which letter would you like to replace it with \")<nl><nl>dict = {replace_symbol:replace_letter}<nl><nl>already_exists = False<nl>for item in replace_dict_list:<nl><tab>if replace_symbol in item:<nl><tab><tab>already_exists = True<nl><tab>else:<nl><tab><tab>replace_dict_list.append(dict)<nl><nl>if not already_exists:<nl><tab>print \"running\"<nl><tab>words = words.replace(replace_symbol, replace_letter)","out":"How to see whether a symbol has been matched or not?"}
{"in":"import json<nl><nl>newDictionary=json.loads(str(soup))","out":"python beautiful soup how to json decode to dict"}
{"in":"g = Gnuplot.Gnuplot(debug=1)<nl>#xpos is always the same<nl>xpos=0.0<nl>for plotnr,datafile in enumerate(glob.glob('*.dat')):<nl><tab>#ypos as a function of the plot-number, e.g.<nl><tab>ypos=plotnr*2.0<nl><tab>g(\"set key at \"+str(xpos)+\",\"+str(ypos))<nl><tab>d = Gnuplot.File(datafile, using='1:2', with_='l', title=datafile)<nl><tab>g.plot(d)","out":"python: Gnuplot - variable parameter in 'set key' (for example)"}
{"in":"numpy.random.shuffle(a[1:])","out":"Fix first element, shuffle the rest of a list\/array"}
{"in":"proc = subprocess.Popen('testing.sh', stdout=subprocess.PIPE, stderr=subprocess.PIPE)<nl>(stdout, stderr) = proc.communicate()<nl>if stderr:<nl>   print \"Shell script gave some error\"<nl>else:<nl>   print \"end\" # Shell script ran fine.","out":"How to check the status of a shell script using subprocess module in Python?"}
{"in":"import requests<nl>from requests_ntlm import HttpNtlmAuth<nl><nl>requests.get(\"http:\/\/sharepoint-site.com\", auth=HttpNtlmAuth('DOMAIN\\\\USERNAME','PASSWORD'))","out":"How to access a sharepoint site via the REST API in Python?"}
{"in":"for i in clients:<nl><tab><tab>  if i is not s:<nl><tab><tab><tab>i.send(data)","out":"python tcp server sending data to multiple clients"}
{"in":"ttest_ind(df[df['Treatment'] == 'a']['Performance'], df[df['Treatment'] == 'b']['Performance'])","out":"Transforming a Dataframe for statsmodels t-test"}
{"in":"emp_no = no_define_object_no and no_define_object_no[0].current_no or False<nl>return {'value': {'emp_no':  emp_no}}","out":"OpenERP 7 How to null check?"}
{"in":"model.filled_date = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')<nl>model.save()","out":"Using DateTimeField in Django with Oracle"}
{"in":"articles.map_reduce(map, reduce, {\"replace\": \"articleTrending\"}, query=queryFilter)","out":"How to resovle rename exception in Pymongo map reduce"}
{"in":"cur_hour = None<nl>for line in lines:<nl><tab>dt = dateutil.parser.parse(line[0])<nl><tab>hour = dt.hour<nl><tab>if hour != cur_hour:<nl><tab><tab>outFile = open(\"%d.00.00.txt\" % hour, \"w\")<nl><tab><tab>cur_hour = hour<nl><tab>print >> outFile, ', '.join(line)","out":"Saving the data for each hour into separate txt files?"}
{"in":"name = forms.CharField(error_messages={<nl><tab>'min_length': _('Enter a longer name'),<nl>})<nl><nl>warehouse = forms.CharField(error_messages={<nl><tab>'invalid': _('Enter a unique combination'),<nl>})","out":"How to customize django form validation"}
{"in":"def create_ini(db_file_paths):<nl><nl><tab>#array of file tmpfs ini filehandles<nl><tab>file_handles = []<nl><nl><tab>for path in db_file_paths:<nl><tab><tab>#make a tempfs file handle<nl><tab><tab>f_handle = tempfile.NamedTemporaryFile(delete=False)<nl><tab><tab>#match and replace db dummy file path<nl><tab><tab>f_handle = replace( f_handle.name, source_ini, pattern, path )<nl><tab><tab>file_handles.append(f_handle)<nl><tab>return file_handles # <-- change of indentation here","out":"Create an array of temp files in python"}
{"in":"unquote()","out":"decode urlencoded string, or apache rejects url due to '\/' in params"}
{"in":"with open(\"filename\", 'w') as outFile:<nl>  for frame in frames:<nl><tab>outFile.write(frame)","out":"Recording and writing voice data as String in a file for Encryption"}
{"in":"from google.appengine.api import urlfetch<nl><nl>url = \"https:\/\/www.googleapis.com\/language\/translate\/v2\/detect\"<nl><nl>payload = {\"key\":translate_api_key, \"q\":str(sentence)}<nl><nl>result = urlfetch.fetch(url=url, payload=payload)<nl>if result.status_code == 200:<nl>  api_response = result.content","out":"Sending HTTPS requests in Google App Engine using requests python library"}
{"in":"from PyQt4 import QtGui, QtCore<nl><nl>class Window(QtGui.QWidget):<nl><tab>def __init__(self):<nl><tab><tab>QtGui.QWidget.__init__(self)<nl><tab><tab>self.label = QtGui.QLabel(self)<nl><tab><tab>self.label.setText('Hello World')<nl><tab><tab>self.label.setAlignment(QtCore.Qt.AlignCenter)<nl><tab><tab>self.label.setFrameStyle(QtGui.QFrame.Box | QtGui.QFrame.Plain)<nl><tab><tab>self.label.setMouseTracking(True)<nl><tab><tab>self.label.installEventFilter(self)<nl><tab><tab>layout = QtGui.QVBoxLayout(self)<nl><tab><tab>layout.addWidget(self.label)<nl><nl><tab>def eventFilter(self, source, event):<nl><tab><tab>if (event.type() == QtCore.QEvent.MouseMove and<nl><tab><tab><tab>source is self.label):<nl><tab><tab><tab>pos = event.pos()<nl><tab><tab><tab>print('mouse move: (%d, %d)' % (pos.x(), pos.y()))<nl><tab><tab>return QtGui.QWidget.eventFilter(self, source, event)<nl><nl>if __name__ == '__main__':<nl><nl><tab>import sys<nl><tab>app = QtGui.QApplication(sys.argv)<nl><tab>window = Window()<nl><tab>window.show()<nl><tab>window.resize(200, 100)<nl><tab>sys.exit(app.exec_())","out":"PyQt: how to handle event without inheritance"}
{"in":"import multiprocessing as mp<nl><nl>def f(x):<nl><tab>f.q.put('Doing: ' + str(x))<nl><tab>return x*x<nl><nl>def f_init(q):<nl><tab>f.q = q<nl><nl>def main():<nl><tab>jobs = range(1,6)<nl><nl><tab>q = mp.Queue()<nl><tab>p = mp.Pool(None, f_init, [q])<nl><tab>results = p.imap(f, jobs)<nl><tab>p.close()<nl><nl><tab>for i in range(len(jobs)):<nl><tab><tab>print q.get()<nl><tab><tab>print results.next()<nl><nl>if __name__ == '__main__':<nl><tab>main()","out":"Can I use a multiprocessing Queue in a function called by Pool.imap?"}
{"in":"SESSION_SAVE_EVERY_REQUEST=True","out":"requests using django session table"}
{"in":"ListA = [2,1,0]<nl>ListB = [4,5,6]<nl><nl># make a copy -- I'm assuming you don't want to modify ListA in the process.<nl>new_list = ListA[:]<nl># insert ListB at a particular location.  I've arbitrarily chosen `1`<nl># basically this says to take the empty section of the list<nl># starting just before index 1 and ending just before index 1 and replace it<nl># with the contents of ListB<nl>new_list[1:1] = ListB<nl># Check the output to make sure it worked.<nl>print(new_list)  # [2, 4, 5, 6, 1, 0]","out":"Merging List after particular element"}
{"in":"myWidget.setStyleSheet(\"background-color: black;\");","out":"Pyside: setting the background of a row in a QVBoxLayout widget"}
{"in":"def input_scores():<nl><tab>scores = []<nl><tab>y = 1<nl><tab>for num in range(5):<nl><tab><tab>score = int(input('Please enter your score for test %d: ' %y))<nl><tab><tab>while score < 0 or score > 100:<nl><tab><tab><tab>print ('Error --- all test scores must be between 0 and 100 points')<nl><tab><tab><tab>score = int(input('Please try again: '))<nl><tab><tab>scores.append(score)<nl><tab><tab>y += 1<nl><tab>return scores","out":"For loop only executes 1 time, though given a range of 5"}
{"in":"import warnings<nl>warnings.simplefilter('error', RuntimeWarning)","out":"Finding location in code for numpy RuntimeWarning"}
{"in":"import subprocess<nl>import fcntl<nl>import os<nl>import select<nl><nl><nl>proc = subprocess.Popen(['gnuplot'],<nl><tab><tab><tab><tab><tab>stderr=subprocess.PIPE,<nl><tab><tab><tab><tab><tab>close_fds=True,<nl><tab><tab><tab><tab><tab>universal_newlines=True)<nl>fcntl.fcntl(<nl><tab>proc.stderr.fileno(),<nl><tab>fcntl.F_SETFL,<nl><tab>fcntl.fcntl(proc.stderr.fileno(), fcntl.F_GETFL) | os.O_NONBLOCK)<nl><nl>status = select.select([proc.stderr.fileno()], [], [])[0]<nl>if status:<nl><tab>out = proc.stderr.read()<nl>print(out)<nl>proc.kill()","out":"Reading initial screen from application with Python"}
{"in":"class BaseProxy(object):<nl><tab> # ...<nl><tab> def _incref(self):<nl><tab><tab> # ...<nl><tab><tab> util.debug('INCREF %r', self._token.id)<nl><tab> # ...<nl><tab> def _after_fork(self):<nl><tab><tab> # ...<nl><tab><tab> self._incref()<nl><tab><tab> # ...","out":"Starting multiple multiprocessing Managers becomes extremely slow"}
{"in":"import sys<nl><nl>lists = {<nl><tab>\"list1\": [\"A\", \"B\", \"C\"],<nl><tab>\"list2\": [1, 2, 3],<nl>}<nl><nl>myarg = sys.argv[1]<nl>print len(lists[myarg])","out":"Python - Use a variable as a list name"}
{"in":"import gtk","out":"Unable to import gtk after installing PyGObject"}
{"in":"template_dir = os.path.abspath(<nl><tab><tab><tab>   os.path.join(os.path.dirname(__file__),<nl><tab><tab><tab><tab><tab><tab><tab>'..\/Frontend\/templates'))","out":"How do I link to another directory with python?"}
{"in":"title = item.find('title').text<nl>title = title.encode('iso-8859-1')","out":"? gets converted to ?? in Python while parsing XML"}
{"in":"from apiclient.http import BatchHttpRequest<nl><nl>def insert_event(request_id, response, exception):<nl>  if exception is not None:<nl><tab># Do something with the exception<nl><tab> pass<nl>  else:<nl><tab># Do something with the response<nl><tab>pass<nl><nl>service = build('calendar', 'v3')<nl><nl>batch = BatchHttpRequest(callback=insert_event)<nl><nl>batch.add(service.events().quickAdd(calendarId=\"you@domain.com\",<nl>  text=\"Lunch with Jim on Friday\"))<nl>batch.add(service.events().quickAdd(calendarId=\"you@domain.com\",<nl>  text=\"Dinner with Amy on Saturday\"))<nl>batch.add(service.events().quickAdd(calendarId=\"you@domain.com\",<nl>  text=\"Breakfast with John on Sunday\"))<nl>batch.execute(http=http)","out":"Google Calendar API v3 batch update in python"}
{"in":"import time<nl><nl>word=['s','t','a','r','t','i','n','g']<nl><nl>for i in range(0,len(word)):<nl><tab>lower=word[i-1].lower()<nl><tab>word[i-1]=lower<nl><nl><tab>caps=word[i].upper()<tab><nl><tab>word[i]=caps<nl><nl><tab>wordstr=''.join(word) #hacky way of converting lists to strings<nl><tab>print(wordstr)<nl><tab>time.sleep(1)","out":"How can I implement the upper case animation from Metasploit in Python?"}
{"in":"def splitNoEscapes(string, char):<nl><tab>sections = string.split(char)<nl><tab>sections = [i + (char if i[-1] == \"\\\\\" else \"\") for i in sections]<nl><tab>result = [\"\" for i in sections]<nl><tab>j = 0<nl><tab>for s in sections:<nl><tab><tab>result[j] += s<nl><tab><tab>j += (1 if s[-1] != char else 0)<nl><tab>return [i for i in result if i != \"\"]","out":"Python split string without splitting escaped character"}
{"in":"def isPrime(n):<nl><tab>def isSpsp(n, a):<nl><tab><tab>d, s = n - 1, 0<nl><tab><tab>while d % 2 == 0: d, s = d \/ 2, s + 1<nl><tab><tab>t = pow(a, d, n)<nl><tab><tab>if t == 1: return True<nl><tab><tab>while s > 0:<nl><tab><tab><tab>if t == n - 1: return True<nl><tab><tab><tab>t, s = (t * t) % n, s - 1<nl><tab><tab>return False<nl><tab>ps = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,<nl><tab><tab> 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]<nl><tab>if n in ps: return True<nl><tab>for p in ps:<nl><tab><tab>if not isSpsp(n, p): return False<nl><tab>return True","out":"Making my program faster using with compiling"}
{"in":"list2 = list1 + [''] * (5 - len(list1))","out":"How to extend a fixed-length Python list by variable number of characters?"}
{"in":"r = r'abc' '\\\\'","out":"Trailing slash in a raw string"}
{"in":"import glob<nl>for filename in glob.glob(r\"C:\\script\\test\\*.dat\"):<nl><tab>with open(filename, 'rb') as inputfile:<nl><tab><tab>data = inputfile.read()<nl><tab>with open(filename, 'wb') as outputfile:<nl><tab><tab>outputfile.write(data.replace(\"^\", \"|\"))","out":"Python in Windows"}
{"in":"reviews = [{'content': c, 'author': a} for c, a in zip(contentList, authorList)]","out":"How to put 2 lists into 1 Dictionary in Python?"}
{"in":"doc_id = db.test.insert({\"foo\": 1})<nl>db.test.remove(doc_id)","out":"How do I get the ID of an object after persisting it in PyMongo?"}
{"in":"for i in range(0,3):<nl><tab>driver.find_element_by_link_text('Download Search Results').click()<nl><tab>for j in range(0,101):<nl><tab><tab>f_exists = os.path.isfile('\/Users\/jeff\/downloaded.csv')<nl><tab><tab>if not f_exists:<nl><tab><tab><tab>print(j, 'file DOES NOT exist')<nl><tab><tab><tab>time.sleep(.05)<nl><tab><tab>else:<nl><tab><tab><tab>print(i, 'file exists')<nl><tab><tab><tab>return","out":"download a file, validate the download, attempt again if not downloaded"}
{"in":"'\/web#id=%s&view_type=form&model=mrp.bom&menu_id=448&action=565'","out":"How to get the url of a page in OpenERP?"}
{"in":"from sqlalchemy.sql import select, and_, or_, not_<nl># ...<nl>query = select(# what to select (tables or columns)<nl><tab><tab><tab>   [table.c.column1, table.c.column2],<nl><tab><tab><tab>   # filters (use any expression using and_, or_, not_...<nl><tab><tab><tab>   and_(table.c.column1.like(\"j%\")),<nl><tab><tab><tab>   )<nl>result = query.execute()","out":"Selecting specific columns with generative selects"}
{"in":"host = connectionDetails.get('host','someDefault')","out":"python dictionary and default values"}
{"in":"result.cal = CALORIES[name]","out":"read the dictionary value from array"}
{"in":"from castro import Castro<nl>c = Castro()<nl>c.start()<nl># Do something awesome!<nl>c.stop()","out":"Capturing screenshots with python in windows and linux"}
{"in":"import os<nl>import zipfile<nl><nl>with zipfile.ZipFile('archive.zip') as z:<nl><tab>for filename in z.namelist():<nl><tab><tab>if not os.path.isdir(filename):<nl><tab><tab><tab># read the file<nl><tab><tab><tab>with z.open(filename) as f:<nl><tab><tab><tab><tab>for line in f:<nl><tab><tab><tab><tab><tab>print line","out":"How to read text files in a zipped folder in Python"}
{"in":"def Showquestions2(self):<nl><tab>self.group.setExclusive(False)<nl><tab>self.Questionum.setText(\"Question 2\")<nl><tab>self.Correctanswer.setChecked(False)<nl><tab>self.Incorrectans1.setChecked(False)<nl><tab>self.Incorrectans2.setChecked(False)<nl><tab>self.Incorrectans3.setChecked(False)<nl><tab>self.ismultichoiceButton.clicked.connect(self.Showquestions3)<nl><tab>self.group.setExclusive(True)","out":"How to uncheck a checked radio buttons in pyqt4"}
{"in":"import csv<nl>from itertools import groupby<nl><nl>with open(yourfile) as fin:<nl><tab>tabin = csv.reader(fin, delimiter='\\t')<nl><tab>sentences = [[el[1] for el in g] for k, g in groupby(tabin, bool) if k]","out":"Python parsing a huge file"}
{"in":"df.groupby(df.ID.str[:1])['Value'].sum()","out":"Pandas groupby slice of a string"}
{"in":"viewport().setCursor();","out":"How to change cursor shape of QPlainTextEdit (Pyqt, PySide)"}
{"in":"np.rollaxis(array_name,0,3).shape","out":"How to reshape numpy image?"}
{"in":"#!\/usr\/bin\/python2.5<nl>from email.utils import parsedate<nl>import mailbox<nl><nl>def extract_date(email):<nl><tab>date = email.get('Date')<nl><tab>return parsedate(date)<nl><nl>the_mailbox = mailbox.mbox('\/path\/to\/mbox')<nl>sorted_mails = sorted(the_mailbox, key=extract_date)<nl>the_mailbox.update(enumerate(sorted_mails))<nl>the_mailbox.flush()","out":"How can I reorder an mbox file chronologically?"}
{"in":"i = arr.index(var3)<nl>left = arr[:i]<nl>right = arr[i+1:]","out":"Separating a list at a given index"}
{"in":"C = [[x + y for x,y in zip(w,v)] for w,v in zip(A,B)]","out":"How can I take two matrices as input"}
{"in":"tree.export_graphviz(clf, out_file=dot_data, feature_names=vec.get_feature_names())","out":"How to add feature names to output of decision tree in scikit learn"}
{"in":"item_ids = db.my_categories(slug=request.args[0]).items_<nl>items = db(db.my_items.id.belongs(item_ids)).select()","out":"How can I select all items referenced by a specific list:reference field?"}
{"in":"python-tk","out":"How to install python-tk package without sudo?"}
{"in":"# -*- coding: utf-8 -*- # <nbformat>3.0<\/nbformat><nl><nl>import paramiko<nl>import os<nl><nl><nl>savefile = 'dump.sql'<nl>mykey = paramiko.RSAKey.from_private_key_file(\"\/users\/me\/my-host.pem\")<nl><nl>client = paramiko.SSHClient()<nl>client.load_system_host_keys()<nl>client.connect('hungry.turtles.com', username = \"turtles\", pkey = mykey)<nl><nl><nl>def ssh(cmd):<nl><tab>out = []<nl><tab>msg = [stdin, stdout, stderr] = client.exec_command(cmd)<nl><tab>for item in msg:<nl><tab><tab>try:<nl><tab><tab><tab>for line in item:<nl><tab><tab><tab><tab>out.append(line.strip('<nl>'))<nl><tab><tab>except: pass<nl><nl><tab>return(list(out))<nl><nl>dump = ssh('mysqldump -u root -ppassword turtleturds')<nl><nl>file = open(savefile, 'w')<nl>file.write(str(dump))<nl>file.close()<nl>print 'The dump had '+ str(len(dump))+ ' lines and was saved to '+ str(os.path.realpath('dump.sql'))","out":"Running remote mysqldump over SSH all in python"}
{"in":"vis.display()","out":"Unable to plot worldmap with Vincent in iPython notebook"}
{"in":"[y for x in range(3) for y in [x, x]]","out":"Repeating elements in list comprehension"}
{"in":"# this will be the namespace of the user when the code loads or nothing<nl># and it will never change as long as the instance is up<nl>namespace_manager.set_namespace(user.namespace)  <nl><nl>class YourHandler(webapp2.RequestHandler):<nl><tab>def get(self):<nl><tab>   # get the user....<nl><tab>   namespace_manager.set_namespace(user.namespace)<nl><tab>   # setting the namespace here will change it for each request.","out":"setting GAE namespace"}
{"in":"cursor.execute('SELECT ...')<nl>columns = []<nl>for column in cursor.description:<nl><tab>columns.append(column[0].lower())<nl>failed_sites = {}<nl>for row in cursor:<nl><tab>for i in range(len(row)):<nl><tab><tab>failed_sites[columns[i]] = row[i]<nl><tab><tab>if isinstance(row[i], basestring):<nl><tab><tab><tab> failed_sites[columns[i]] = row[i].strip()","out":"Obtaining data from PostgreSQL as Dictionary"}
{"in":"#!\/sw\/bin\/python2.5<nl><nl>import warnings, sys<nl><nl>def customwarn(message, category, filename, lineno, file=None, line=None):<nl><tab>sys.stdout.write(warnings.formatwarning(message, category, filename, lineno))<nl><nl>warnings.showwarning = customwarn<nl>warnings.warn(\"test warning\")","out":"How to redirect python warnings to a custom stream?"}
{"in":"engine = create_engine('mysql:\/\/root:******@localhost?charset=utf8')","out":"Python, SQLAlchemy and MySQL, odd characters"}
{"in":"def activate():<nl><tab>global x1, y1<nl><tab>if(ultrasonic.get_sample() < 10):<nl><tab><tab>both.turn(power=-70, tacho_units=400, brake=False)<nl><tab>bx, by = get_ballxy()<nl><tab>rx, ry, a = get_robotxya()<nl><nl><tab>if sqrt((x1-bx)*(x1-bx)+(y1-by)*(y1-by)) <= 4: #This is the distance parameter, change at will<nl><tab><tab>turn_to(brick, bx, by, rx, ry, a)<nl><tab><tab>move_to(brick, bx, by, rx, ry)<nl><tab><tab>kickBall(brick, by, ry)<nl><nl><tab>x1, y1 = bx, by<nl><nl>Thread(target=update_coordinates).start()<nl>connect()<nl>x1, y1 = 0, 0<nl>update_coordinates()<nl>while True:<nl><tab>activate()","out":"How do i return the correct values of to this?"}
{"in":"struct.pack","out":"How do I extract a ieee-be binary file embedded in a zipfile?"}
{"in":"if __name__ == '__main__' :<nl>  app = web.application(urls, globals())<nl>  app.run()","out":"Running python app on localhost"}
{"in":"lines = [(\"LC\" if i < 3 else \"LB\")+line for i,line in enumerate(lines)]","out":"Writing specific lines of a text file"}
{"in":"#!\/usr\/bin\/python<nl>#-*- coding:utf-8 -*-<nl><nl>import xlwt<nl><nl>base = xlwt.Workbook()<nl><nl>b = ['company1','company2']<nl>a = ['a', 'b', 'c']<nl><nl>for name in b:<nl><tab>n = 0<nl><tab>s = base.add_sheet(name);<nl><tab>for v in a:<nl><tab><tab>s.write(n, 0, v)<nl><tab><tab>n += 1<nl><nl>base.save('C:\\\\test.xls')","out":"Writing data to excel iteratively"}
{"in":"import time, socket<nl><nl>class ControllableSocket:<nl><tab>def __init__(self, latency, bandwidth):<nl><tab><tab>self._latency = latency<nl><tab><tab>self._bandwidth = bandwidth<nl><tab><tab>self._bytesSent = 0<nl><tab><tab>self._timeCreated = time.time()<nl><tab><tab>self._socket = socket.socket()<nl><nl><tab>def send(self, bytes):<nl><tab><tab>now = time.time()<nl><tab><tab>connectionDuration = now - self._timeCreated<nl><tab><tab>self._bytesSent += len(bytes)<nl><tab><tab># How long should it have taken to send how many bytes we've sent with our<nl><tab><tab># given bandwidth limitation?<nl><tab><tab>requiredDuration = self._bytesSent \/ self._bandwidth<nl><tab><tab>time.sleep(max(requiredDuration - connectionDuration, self._latency))<nl><tab><tab>return self._socket.send(bytes)","out":"Simple way to simulate a slow network in python"}
{"in":"d = {'tom':'stats', 'keys':[{'tim': 'doc', 'year': 1999},{'mum':'veg', 'nba':'qweqwe'}] }<nl><nl>def print_all_values(input):<nl><tab>if isinstance(input, dict):<nl><tab><tab>for key, value in input.items():<nl><tab><tab><tab>print_all_values(value)<nl><tab>elif isinstance(input, list):<nl><tab><tab>for value in input:<nl><tab><tab><tab>print_all_values(value)<nl><tab>else:<nl><tab><tab>print(input)<nl><nl>print_all_values(d)","out":"Python: print out all values of a complicated data structure (excluding hash keys)"}
{"in":"from selenium import webdriver<nl>from selenium.webdriver.common.keys import Keys<nl><nl>driver = webdriver.Chrome()<nl>driver.get(\"http:\/\/www.python.org\")<nl>assert \"Python\" in driver.title<nl>elem = driver.find_element_by_name(\"q\")<nl>elem.send_keys(\"selenium\")<nl>elem.send_keys(Keys.RETURN)<nl>assert \"Google\" in driver.title<nl>driver.close()","out":"How to simulate a AJAX call (XHR) with python and mechanize"}
{"in":"def create_app(name):<nl><tab>app = Flask(name)<nl><tab>for url in urls:<nl><tab><tab>app.add_url_rule(url[0], methods=url[1], view_func=url[2])<nl><tab>return app<nl><nl>app = create_app(__name__)","out":"Django-styled Flask URL pattern for large application"}
{"in":"import os<nl>for root, dirs, files in os.walk(path):<nl><tab>for filename in files:<nl><tab><tab>filename = os.path.join(root, filename)<nl><tab><tab>print(filename)","out":"Is there existing any utilities to get all absolute path of leaf file under a given directory?"}
{"in":"os.environ.copy()","out":"Python subprocess\/Popen with a modified environment"}
{"in":"from itty import get, run_itty<nl>import glob, gzip, json, os, functools<nl><nl>def jsonify(origfunc):<nl><tab>@functools.wraps(origfunc)<nl><tab>def wrapper(*args, **kwds):<nl><tab><tab>result = origfunc(*args, **kwds)<nl><tab><tab>return json.dumps(result, indent=4)<nl><tab>return wrapper<nl><nl>@get('\/logs')<nl>@jsonify<nl>def list_logfiles(request):<nl><tab>return glob.glob('\/var\/log\/myserver\/*.gz')<nl><nl>@get('\/logs\/(?P<name>\\w+)')<nl>def show_logfile(request, name):<nl><tab>fullname = os.path.join('\/var\/log\/myserver', name)<nl><tab>with gzip.open(fullname, 'rb') as f:<nl><tab><tab>return f.read()<nl><nl>run_itty(host='localhost', port=8080)","out":"Python Logging monitor through http server"}
{"in":"#!\/usr\/bin\/env python<nl><nl>import sys<nl><nl>def generate_log_report(logfile):<nl><tab><tab>for line in logfile:<nl><tab><tab><tab><tab>line_split = line.split()<nl><tab><tab><tab><tab>list = [line_split[0], line_split[1], line_split[2], line_split[4]]<nl><tab><tab><tab><tab>if \"exim\" in list[3]:<nl><tab><tab><tab><tab><tab><tab>l = [line_split[0], line_split[1], line_split[2], line_split[4]]<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab><tab>li = [line_split[0], line_split[1], line_split[2], line_split[4]]<nl><tab><tab>return l<nl><nl><nl>if __name__ == \"__main__\":<nl><tab><tab>if not len(sys.argv) > 1:<nl><tab><tab><tab><tab>print __doc__<nl><tab><tab><tab><tab>sys.exit(1)<nl><tab><tab>infile_name = sys.argv[1]<nl><tab><tab>try:<nl><tab><tab><tab><tab>infile = open(infile_name, \"r\")<nl><tab><tab>except IOError:<nl><tab><tab><tab><tab>print \"you must specify a valid file\"<nl><tab><tab><tab><tab>print __doc__<nl><tab><tab><tab><tab>sys.exit(1)<nl><tab><tab>log_report = generate_log_report(infile)<nl><tab><tab>print log_report<nl><tab><tab>infile.close()","out":"python logparse search specific text"}
{"in":"if a not in some_list:<nl><tab>some_list.append(a)","out":"How can I search through a list in python for something that might not exist?"}
{"in":"def prepositions():<nl><tab>items = []<nl><tab>with open('test.txt') as input:<nl><tab><tab>for line in input:<nl><tab><tab><tab>items.extend(line.strip().split(','))<nl><tab>return items<nl><nl>print(prepositions())","out":"converting a textfile into a list on python"}
{"in":"mylist = [1,2,3,1,4,4,5,6]<nl>dic = {}<nl><nl>for i in range(0,len(mylist)):<nl><tab>if mylist[i] in dic:<nl><tab><tab>dic[mylist[i]].append(i)<nl><tab>else:<nl><tab><tab>dic[mylist[i]] = [i]<nl>print dic.values()<nl># prints [[0, 3], [1], [2], [4, 5], [6], [7]]","out":"How to find 2 items in a list that are the same in Python"}
{"in":"if resource.rstrip('0123456789') in resources:<nl><tab>if resource != resource.rstrip('0123456789'):<nl><tab><tab>print 'ok'<nl><tab>else:<nl><tab><tab>print 'banned'<nl>else:<nl><tab>raise NotImplementedError()  # replace with own code","out":"Python - How to include any random integer in a string"}
{"in":"from Tkinter import *<nl>import math<nl><nl>master = Tk()<nl>w = Canvas(master, width=200, height=200)<nl>w.pack()<nl>x1=0<nl>y1=0<nl>x2=100<nl>y2=100<nl>delta=10<nl>i=w.create_line(x1, y1, x2, y2)<nl><nl>def click(event):<nl># event.x is the x coordinate and event.y is the y coordinate of the mouse<nl><tab>D = math.fabs((event.y-event.x))\/math.sqrt(2)<tab><nl><tab>if D < delta and x1 - delta < event.x < x2 + delta:<nl><tab><tab><tab>w.delete(i)<tab><nl>w.bind(\"<Button-1>\", click)<nl><nl>mainloop()","out":"How To Delete Previously Drawn Line With a Mouse Click in Python?"}
{"in":"import operator<nl>inverted = dict((v,k) for k,v in sorted(d.iteritems(), key=operator.itemgetter(1)))","out":"Inverting Dictionaries in Python"}
{"in":"logger = logging.getLogger(\"mylog\")<nl>formatter = logging.Formatter('%(asctime)s | %(name)s |  %(levelname)s: %(message)s')<nl>logger.setLevel(logging.DEBUG)<nl><nl>stream_handler = logging.StreamHandler()<nl>stream_handler.setLevel(logging.INFO)<nl>stream_handler.setFormatter(formatter)<nl><nl>logFilePath = \"my.log\"<nl>file_handler = logging.handlers.TimedRotatingFileHandler(filename = logFilePath, when = 'midnight', backupCount = 30)<nl>file_handler.setFormatter(formatter)<nl>file_handler.setLevel(logging.DEBUG)<nl><nl>logger.addHandler(file_handler)<nl>logger.addHandler(stream_handler)<nl><nl>logger.info(\"Started\");<nl>try:<nl><tab>x = 14<nl><tab>y = 0<nl><tab>z = x \/ y<nl>except Exception as ex:<nl><tab>logger.error(\"Operation failed.\")<nl><tab>logger.debug(\"Encountered {0} when trying to perform calculation.\".format(ex))<nl><nl>logger.info(\"Ended\");","out":"How to set different levels for different python log handlers"}
{"in":"new = [[x, y, val] for (x, y), val in zip(points, vals)]","out":"Adding an entry to a python tuple"}
{"in":"from django.db.models import Q<nl>import operator<nl><nl><nl>def dynamic_search(queryset):<nl><tab>search_fields = [\"search_field1\", \"search_field2\", \"search_field3\"]<nl><tab>search_text = \"dummy_text\"<nl><tab>queryset.filter(reduce(operator.or_, [Q(**{'{0}__contains'.format(search_field): search_text}) for search_field in search_fields]))","out":"dynamic search with django orm"}
{"in":"a=b=c=d=e=f=g=h=\"\"","out":"Initialize many string variables"}
{"in":"from glob import glob<nl>from process import process_one_file<nl><nl>for i in range(100):<nl><tab>process_one_file(glob('prefix_foo_{}_*'.format(i)))","out":"Looping over filenames in python"}
{"in":"from bs4 import BeautifulSoup<nl>import requests<nl><nl>url = 'http:\/\/alerts.weather.gov\/cap\/us.php?x=1'<nl><nl>r = requests.get(url)<nl>soup = BeautifulSoup(r.text, 'xml')<nl>entries = soup.find_all('entry')<nl><nl>geocode = {}<nl>k = None<nl>for tag in entries[0].geocode.children:<nl><tab>if tag.name == 'valueName':<nl><tab><tab>k = tag.string<nl><tab>elif tag.name == 'value':<nl><tab><tab>geocode[k] = tag.string<nl><nl>print 'title: ', entries[0].title.string<nl>print 'cap_geocode: ', str(geocode)<nl>print 'cap_event: ', entries[0].event.string","out":"Python\/XML RSS Feedparser - Blank Fields"}
{"in":"import numpy as np<nl><nl>a = np.arange(12)<nl>b = np.array([5, 9, 2, 4])<nl>b = np.append(b, b[0])<nl><nl>for i in range(0, len(b)-1):<nl><tab>print np.roll(a, len(a)-b[i])[:b[i+1]-b[i]+1]","out":"Python\/Numpy - Wrap Slice Around End of Array"}
{"in":"import scipy.spatial.distance as ssd<nl>distVec = ssd.squareform(SimMatrix)<nl>linkage = hcluster.linkage(1 - distVec)<nl>dendro  = hcluster.dendrogram(linkage)<nl>show()","out":"Dendrogram through scipy given a similarity matrix"}
{"in":"class my_lil_matrix(sparse.lil_matrix):<nl><tab>def __init__(self, *args, **kwargs):<nl><tab><tab>if len(args) >= 2 and isinstance(args[1], list):<nl><tab><tab><tab>try:<nl><tab><tab><tab><tab>data, rows = args<nl><tab><tab><tab>except:<nl><tab><tab><tab><tab>raise TypeError(\"Invalid input format\")<nl><nl><tab><tab><tab>if kwargs.get('shape') is None:<nl><tab><tab><tab><tab># Column count will just be the largest value in rows<nl><tab><tab><tab><tab>M, N = (len(rows), max(np.array(rows).max()) + 1)<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>M, N = shape<nl><nl><tab><tab><tab>super(my_lil_matrix, self).__init__((M, N), **kwargs)<nl><nl><tab><tab><tab>self.data = np.array(data, copy=kwargs.get('copy'),<nl><tab><tab><tab><tab><tab><tab><tab><tab> dtype=kwargs.get('dtype'))<nl><tab><tab><tab>self.rows = np.array(rows, copy=kwargs.get('copy'),<nl><tab><tab><tab><tab><tab><tab><tab><tab> dtype=kwargs.get('dtype'))<nl><tab><tab>else:<nl><tab><tab><tab>super(my_lil_matrix, self).__init__(*args, **kwargs)","out":"Initialize lil_matrix given data and coordinates"}
{"in":"myvector.T","out":"matrix - vector multiplication in python (numpy)"}
{"in":"lines.sort(key=lambda a_line: a_line.split()[0])","out":"Sort file\/lines by first word with Python"}
{"in":"min((idx for idx in indexes if not visited[idx]), key=lambda idx: dist[idx])","out":"In python, find minimum subject to a constraint?"}
{"in":"def distance(self, tile1, tile2):<nl><tab>self.xDist = abs(tile1.col * TILE_SIZE - tile2.col * TILE_SIZE)<nl><tab>self.yDist = abs(tile1.row * TILE_SIZE - tile2.row * TILE_SIZE)<nl><tab>self.totalDist = self.diagCost * math.sqrt(self.xDist*self.xDist + self.yDist*self.yDist)<nl><tab><tab><tab><tab><tab> # or it might be self.straightCost, depending on their values.<nl><tab><tab><tab><tab><tab> # self.diagCost is probably right, though.<nl><tab>return self.totalDist","out":"Python A* algorithm not searching appropriately"}
{"in":"import numpy as np<nl>a = np.array([(1.0, 2,1),(3.0, 4,2),(9, 3,6)], dtype=[('x', float), ('y', float), ('z', float)])<nl>print(a)<nl><nl>print(a[['x', 'z']])","out":"How to access multiple fields from a numpy.array?"}
{"in":"DATA = {\"records\": [{\"key1\": \"AAA\", \"key2\": \"BBB\", \"key3\": \"CCC\", \"key4\": \"AAA\"}]}<nl><nl>for name, datalist in DATA.iteritems():  # Or items() in Python 3.x<nl><tab>for datadict in datalist:<nl><tab><tab>for key, value in datadict.items():<nl><tab><tab><tab>if value == \"AAA\":<nl><tab><tab><tab><tab>datadict[key] = \"XXX\"<nl><nl>print (DATA)<nl># Prints {'records': [{'key3': 'CCC', 'key2': 'BBB', 'key1': 'XXX', 'key4': 'XXX'}]}","out":"Replacing values in a Python list\/dictionary?"}
{"in":"query(extract('hour', timeStamp).label('h')).group_by('h')","out":"Group by hour in SQLAlchemy?"}
{"in":"import urllib<nl><nl>x = \"http:\/\/query.yahooapis.com\/v1\/public\/yql?q=select%20owner%2Curls%20from%20flickr.photos.info%20where%20photo_id%3D'%s'&format=json\"<nl>tmp = urllib.unquote(x)<nl>tmp2 = tmp % (foo, bar)<nl>x = urllib.quote(tmp2)","out":"How to do a string replace in a urlencoded string"}
{"in":"file_stream.close()","out":"difference method open file in python"}
{"in":"cat_pub = Publicacion.objects.all().values('id_categoria').annotate(max_update_time=Max('update_time')).order_by('-max_update_time')","out":"How to make a Group by and order by max(...) in django"}
{"in":"class B(A):<nl><tab>__tablename__ = 'b'<nl><nl><tab>id = Column(Integer, ForeignKey('a.id'), primary_key=True)<nl><nl><tab>__mapper_args__ = {<nl><tab><tab>'polymorphic_identity': 'b',<nl><tab><tab>'inherit_condition': id == A.id<nl><nl><tab>}<nl><nl><tab>a_id = Column(Integer, ForeignKey('a.id'))<nl><tab>a = relationship(<nl><tab><tab>'A',<nl><tab><tab>backref='b', primaryjoin=A.id == a_id, remote_side=A.id)","out":"Polymorphic self referential foreign key in sqlalchemy"}
{"in":"setattr(foo, mystring, False)   # this is just here to let me submit","out":"Python: Add atribute to object named after an existing string"}
{"in":"re.sub('(\\d+)(?=\\.html)', r'.\\1', s)","out":"python add character to filename"}
{"in":"from pylons import config<nl><nl>def my_cache(*args, **kwargs):<nl><tab>if config[\"debug\"]:<nl><tab><tab>decorate = lambda f: f<nl><tab>else: <nl><tab><tab>decorate = beaker_cache(*args, **kwargs)<nl><nl><tab>return decorate","out":"Disable cache in Pylons app under development mode"}
{"in":"def ind(the_string, the_char):<nl>   i = 0<nl>   for a_char in the_string:<nl><tab>   if a_char == the_char: return i<nl><tab>   i += 1<nl>   return -1","out":"Python: How to get the Index of a string"}
{"in":"import subprocess<nl>import sys<nl><nl>perl_script = subprocess.Popen([\"script.pl\", params], stdout=sys.stdout)<nl>perl_script.communicate()","out":"Run a perl script from my python script, print the output and wait for it to finish"}
{"in":"threading.Timer(1.0,self.add_csv).start()","out":"How to run a function without interrupting program in python?"}
{"in":"mod.__dict__[\"__builtins__\"] = {}","out":"How to change __builtins__ module variable?"}
{"in":"sorted_list = sorted(d.keys(), key=lambda i: d[i]['priority'], reverse=True)","out":"Sorting python by value in a value dict"}
{"in":"from uwsgidecorators import *<nl>from gevent.queue import Queue<nl><nl>channels = []<nl><nl>@filemon('\/tmp',target='workers')<nl>def trigger_event(signum):<nl><tab>for channel in channels:<nl><tab><tab>try:<nl><tab><tab><tab>channel.put_nowait(True)<nl><tab><tab>except:<nl><tab><tab><tab>pass<nl><nl>def application(e, sr):<nl><tab>sr('200 OK', [('Content-Type','text\/html')])<nl><tab>yield \"Hello and wait...\"<nl><tab>q = Queue()<nl><tab>channels.append(q)<nl><tab>q.get()<nl><tab>yield \"event received, goodbye\"<nl><tab>channels.remove(q)","out":"trigger WebSocket in Flask from external event"}
{"in":"def bytestomb(b):<nl><tab>mb = float(b) \/ (1024*1024)<nl><tab>return mb<nl><nl><nl>def bytessubidatransferidos():<nl><tab>interface= 'ppp0'<nl><tab>for line in open('\/proc\/net\/dev', 'r'):<nl><tab><tab>if interface in line:<nl><tab><tab><tab>data = line.split('%s:' % interface)[1].split()<nl><tab><tab><tab>tx_bytes =  (data[8])<nl><tab>return bytestomb(tx_bytes)<nl><nl><nl>def bytesbajadatransferidos():<nl><tab>interface= 'ppp0'<nl><tab>for line in open('\/proc\/net\/dev', 'r'):<nl><tab><tab>if interface in line:<nl><tab><tab><tab>data = line.split('%s:' % interface)[1].split()<nl><tab><tab><tab>rx_bytes = (data[0])<nl><tab>return bytestomb(rx_bytes)<nl><nl><nl>print bytessubidatransferidos()<nl>print bytesbajadatransferidos()","out":"Modules or functions to obtain information from a network interface in Python"}
{"in":"import time, datetime<nl><nl>d = datetime.datetime.now()<nl>print time.mktime(d.timetuple())","out":"Converting datetime to POSIX time"}
{"in":"values = struct.unpack('!7h', data)","out":"How to switch byte order of binary data"}
{"in":"def data(self, index, role):<nl><tab>if not index.isValid(): return false<nl><tab>row=index.row()<nl><tab>if row>len(self.items): return false<nl><nl><tab>if role == Qt.DisplayRole or role == Qt.EditRole:<nl><tab><tab>return self.items[row]","out":"How to prevent QTableView item from getting cleared on double-click"}
{"in":"from IPython.display import HTML<nl><nl>HTML('''<script><nl>code_show=true; <nl>function code_toggle() {<nl> if (code_show){<nl> $('div.input').hide();<nl> } else {<nl> $('div.input').show();<nl> }<nl> code_show = !code_show<nl>} <nl>$( document ).ready(code_toggle);<nl><\/script><nl><form action=\"javascript:code_toggle()\"><input type=\"submit\" value=\"Click here to toggle on\/off the raw code.\"><\/form>''')","out":"How to hide code from cells in ipython notebook visualized with nbviewer?"}
{"in":"import csv<nl><nl>f = open(\"iter.csv\", \"r\")<nl>g = open(\"out.csv\", \"w\", newline=\"\")<nl>transpose_columns = ['date1', 'date2', 'date3']<nl>target_columns = ['date', 'value']<nl>reader = csv.DictReader(f)<nl>writer = csv.DictWriter(g, fieldnames=[a for a in reader.fieldnames<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab>   if a not in transpose_columns] + target_columns,<nl><tab><tab><tab><tab><tab><tab>extrasaction='ignore')<nl>writer.writeheader()<nl>for row in reader:<nl><tab>for col in transpose_columns:<nl><tab><tab>row[target_columns[0]] = col<nl><tab><tab>row[target_columns[1]] = row[col]<nl><tab><tab>writer.writerow(row)<nl>f.close()<nl>g.close()","out":"Manipulating data in csv using itertools (python)"}
{"in":"def grayScale(picture):<nl><tab>  xstop=getWidth(picture)\/2<nl><tab>  ystop=getHeight(picture)\/2<nl><tab>  for x in range(0,xstop):<nl><tab><tab>  for y in range(0,ystop):<nl><tab><tab><tab>oldpixel= getPixel(picture,x,y)<nl><tab><tab><tab>colour=getColor(oldpixel)<nl><tab><tab><tab>newColor = (getRed(oldpixel)+getGreen(oldpixel)+getBlue(oldpixel))\/3<nl><tab><tab><tab>setColor(oldpixel,makeColor(newColor,newColor,newColor))<nl><tab>  repaint(picture)","out":"How to make a part of the picture grayscale in JES?"}
{"in":"item = self.list.GetItem(row, column)<nl>print item.GetText()","out":"Writing all data from each row in CheckListCtrl"}
{"in":"class Data(db.Model):<nl>  property = db.StringProperty()<nl><nl>data = Data(property = 'value')<nl>data.put()<nl><nl>query = db.GqlQuery(\"SELECT * FROM Data\")<nl><nl>myvar = 'property'<nl><nl>for line in query:<nl>  getattr(line, myvar)","out":"Use variable to get property value"}
{"in":"p = None #This initializes the variables globally.<nl><nl>def message_handler(connect_object, message_node):<nl><tab>R = (message_node.getBody())<nl><tab>if R== \"video\" :<nl><tab><tab>movie_path= '\/home\/pi\/Desktop\/media\/video.mp4'<nl><tab><tab>p = subprocess.Popen(['omxplayer', movie_path],stdin=subprocess.PIPE)<nl><tab>elif R== \"pause\":<nl><tab><tab>p.stdin.write('\\x20') #Much cleaner alternative to named pipes...<nl><tab>else:<nl><tab><tab>pass","out":"Python, pausing a subprocess based on the received messages"}
{"in":"if not args.input or not args.output:<nl><tab><tab>print 'Incorrect number of params'<nl><tab><tab>exit()<nl>else:<nl><tab><tab>print \"Correct number of params\"","out":"Understanding argument parsing with argparse in Python"}
{"in":"def __unicode__(self):<nl><tab>return u\"{0} ({1}, {2})\".format(self.icon, self.attrib1, self.attrib2)","out":"Define Self as multiple attributes in Django"}
{"in":"str1 = 'foo1({0}).foo2({1})'<nl>para = [1,2]<nl>eval(str1.format(*para)) # equivalent to eval(str1.format(1,2))","out":"how to fill the paremeter into function name string for invoking?"}
{"in":"'\/\/[^\/]+\/[^\/]+\/[^\/]+\/(\\d+(?=_)|[^\/]+)'","out":"Regex for conditionally extracting a named group"}
{"in":"#!\/usr\/bin\/env python<nl><nl>__all__ = [\"monotonic_time\"]<nl><nl>import ctypes, os<nl><nl>CLOCK_MONOTONIC_RAW = 4 # see <linux\/time.h><nl><nl>class timespec(ctypes.Structure):<nl><tab>_fields_ = [<nl><tab><tab>('tv_sec', ctypes.c_long),<nl><tab><tab>('tv_nsec', ctypes.c_long)<nl><tab>]<nl><nl>librt = ctypes.CDLL('librt.so.1', use_errno=True)<nl>clock_gettime = librt.clock_gettime<nl>clock_gettime.argtypes = [ctypes.c_int, ctypes.POINTER(timespec)]<nl><nl>def monotonic_time():<nl><tab>t = timespec()<nl><tab>if clock_gettime(CLOCK_MONOTONIC_RAW , ctypes.pointer(t)) != 0:<nl><tab><tab>errno_ = ctypes.get_errno()<nl><tab><tab>raise OSError(errno_, os.strerror(errno_))<nl><tab>return t.tv_sec + t.tv_nsec * 1e-9<nl><nl>if __name__ == \"__main__\":<nl><tab>print monotonic_time()","out":"How do I get monotonic time durations in python?"}
{"in":"verifications = Verification.objects.filter(asset_code__range=(10, 100))<nl>verifications.update(product_details=form.cleaned['product_details'])","out":"How to update a single column in a subset of database table records using Django form or ModelForm?"}
{"in":"OrderNotes.objects.filter(item=item).values_list('shared_note', flat=True).distinct()","out":"DISTINCT ON in django"}
{"in":"from pandas import *<nl><nl>P1Channels = data.filter(regex=\"P1\")<nl>P1Sum = P1Channels.sum(axis=1)","out":"Sum all columns with a wildcard name search using Python Pandas"}
{"in":"# start with an empty output dictionary<nl>out = {}<nl><nl># iterate through the keys in the dictionary<nl>for key in p:<nl>   # iterate through the values in the sublist<nl>   for val in p[key]:<nl><tab>  # check to see if we've seen this one before<nl><tab>  if not out.has_key(val):<nl><tab><tab> # if not, start it out at 0<nl><tab><tab> out[val] = 0<nl><nl><tab>  # increment by one because we've seen it once more<nl><tab>  out[val] += 1<nl><nl>print out","out":"How can I create a histogram of appearances of values in a dictionary?"}
{"in":"Article.objects.filter(category__in=self.object.categories.all())","out":"A 'related content' list with DetailView in Django"}
{"in":"a = np.arange(10)<nl>class Case():<nl><tab>def __init__(self, gcv_pointer):<nl><tab><tab>self.gcv = gcv_pointer<nl><nl><tab>def gcv(self):<nl><tab><tab>return(self.gcv)<nl><nl><tab>def gcv_set(self, value):<nl><tab><tab>self.gcv[:] = value<nl>pass<nl>#===============================================================================<nl># NumPy<nl>#===============================================================================<nl>caseList = []<nl>for i in range(1, 10):<nl><tab>case = Case(a[i-1:i])<nl><tab>caseList.append(case)<nl>gcvs = [case.GetGCV() for case in caseList]<nl>caseList[1].SetGCV(5)<nl>caseList[1].SetGCV(13)<nl>caseList[1].gcv[:] = 6<nl><nl>setattr(caseList[1], 'dpd', a[5:6])<nl><nl>caseList[1].dpd<nl>caseList[1].dpd[:] = 888","out":"Python ORM to NumPy arrays"}
{"in":"import sys<nl>import subprocess<nl>def dorun(args):<nl>   subprocess.Popen([sys.executable, args])<nl>dorun(sys.argv[1])","out":"Python program to execute any other Python program as argument?"}
{"in":"mycanvas.showPage()","out":"Add page break to Reportlab Canvas object"}
{"in":"for i, d in enumerate(DICE):<nl><tab>print choice(d),   # comma prevents newline<nl><tab>if not (i+1) % 4:  # i+1 modulus 4 will evaluate to [1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0]<nl><tab><tab>print ''<tab>   # empty string forces new line, when above was 0","out":"Boggle game - putting randomly selected letters from an array of 16 arrays in a 4x4 grid (Python)"}
{"in":"def histogram(data, num_bins):<nl>  span = max(data) - min(data)<nl>  bin_size = float(span) \/ num_bins<nl>  thresholds = [0] * num_bins<nl><nl>  for i in range(num_bins):<nl><tab>#I change thresholds calc<nl><tab>thresholds[i] = min(data) + bin_size * (i+1)<nl><nl>  counts = [0] * num_bins<nl>  for datum in data:<nl><tab>for bin_index, threshold in enumerate(thresholds):<nl><tab>  if datum <= threshold:<nl><tab><tab>counts[bin_index] += 1<nl><tab><tab>#I add a break<nl><tab><tab>break<nl>  return counts<nl><nl>data = [-3.2, 0, 1, 1.5, 1.6, 1.9, 5, 6, 9, 1, 4, 5, 8, 9, 5, 6.7, 9]<nl>print(\"Correct result:\\t\" + str([1, 6, 4, 6]))<nl>print(\"Your result:\\t\" + str(histogram(data, num_bins=4)))","out":"Python-compute the histogram of a set of data"}
{"in":"map.input.file","out":"How to get the name of input file in MRjob"}
{"in":"class MainHandler(tornado.web.RequestHandler):<nl><tab>def prepare(self):<nl><tab><tab>self.render('intro.html')","out":"How to handle both GET and POST requests in TornadoWeb framework?"}
{"in":"import numpy as np<nl>def find_nearest(array,value):<nl><tab>idx = (np.abs(array-value)).argmin()<nl><tab>return array[idx]<nl><nl>array = np.random.random(10)<nl>print(array)<nl># [ 0.21069679  0.61290182  0.63425412  0.84635244  0.91599191  0.00213826<nl>#   0.17104965  0.56874386  0.57319379  0.28719469]<nl><nl>value = 0.5<nl><nl>print(find_nearest(array, value))<nl># 0.568743859261","out":"find nearest value in numpy array"}
{"in":"import matplotlib.pyplot as plt<nl>fig = plt.figure()<nl>def onclick(event):<nl><tab>if event.dblclick:<nl><tab><tab> print event.button<nl><nl>connection_id = fig.canvas.mpl_connect('button_press_event', onclick)<nl>plt.show()","out":"How can I detect double click events in matplotlib?"}
{"in":"return f","out":"Return a value coming directly from a function call vs. an intermediate variable"}
{"in":"root = lxml.html.fromstring(s)<nl>anchors = root.cssselect(\"a\")<nl>links = [a.get(\"href\") for a in anchors]","out":"fast parsing links out of a page in python"}
{"in":"lastline = None<nl><nl>with open('test.txt', 'r') as f:<nl><tab>for line in f.readlines():<nl><tab><tab>if not lastline:<nl><tab><tab><tab>lastline = line.rstrip('<nl>')<nl><tab><tab><tab>continue<nl><tab><tab>if line.rstrip('<nl>') == 'Sequence unavailable':<nl><tab><tab><tab>_, _, id = lastline.split('|')<nl><tab><tab><tab>print 'Sequence unavailable|' + id<nl><tab><tab>lastline = None","out":"Difficulty in selection specific row and merge with specific column"}
{"in":"def allInRange(bst, left, right):<nl><tab>if bst is EmptyValue:<nl><tab><tab>return<nl><tab>if left <= bst.root <= right:<nl><tab><tab>print(bst.root)<nl><tab>allInRange(bst.left, left, right)<nl><tab>allInRange(bst.right, left, right)","out":"Collect values in a certain range from a binary tree?"}
{"in":"for csvFile in directory:<nl><tab>root = Element('Order')<nl><tab>with open(csvFile, 'rt') as f:<nl><tab><tab>junk = next(f)<tab><tab> #read the first line, don't do anything with it.<nl><tab><tab>reader = csv.reader(f)<nl><tab><tab>for row in reader:<nl><tab><tab><tab>queue = row[0]<nl><tab><tab><tab>token = row[1]<nl><tab><tab><tab>current_order = SubElement(root, 'Token', {'text':token})<nl><tab><tab><tab>details = SubElement(current_order, 'Queue',<nl><tab><tab><tab><tab><tab><tab><tab><tab> {'queue':queue})<nl><nl><tab>print prettify(root)","out":"Stripping headers from CSV data when converting to XML in Python"}
{"in":"tex.delete('1.0', END)","out":"how to clear\/delete the Textbox in tkinter python on Ubuntu"}
{"in":"app = Tk()<nl>app.title(\"My GUI\")<nl>app.iconbitmap(app, \"C:\\Program Files (x86)\\Notepad++\\Files\\icon.ico\")<nl>app.resizable(0,0)<nl><nl>app.mainloop()","out":"Python Tkinter small window pops up momentarily before main window"}
{"in":"df=pd.read_excel(u\"url\/??2008.xls\", encoding=sys.getfilesystemencoding())","out":"Pandas read excel with Chinese filename"}
{"in":"import unittest<nl>import SomeTestModule<nl><nl>loader = unittest.TestLoader()<nl>loader.loadTestsFromModule(SomeTestModule)","out":"How to run all test-cases from several modules?"}
{"in":"import re<nl>print re.sub(r\"u('\\w)\", r\"\\1\", p)","out":"Regex. How to remove multiple occurence of 'u' if it's befoure some symbol"}
{"in":"cur.execute(\"INSERT INTO \" + relevant_table + \"VALUES (?,?,?,?,?)\",<nl><tab><tab><tab>(export_date, export_morning, export_day, export_eve, export_night))","out":"Writing to SQLite tables with variable names (Python)"}
{"in":"strings = ['a', 'b']<nl>strings = [s + 'c' for s in strings]","out":"Changing python immutable type while iterating through a mutable container such as list"}
{"in":"fileInfos = list(DirectoryInfo(path).GetFiles())<nl>fileInfos.sort(key=lambda f: f.CreationTime, reverse=True)","out":"how to sort list of FileInfo in IronPython"}
{"in":"reverse('api_v2_top_level', kwargs={'api_name': 'v2'})","out":"How to redirect to the API's entry point without hardcoding the path?"}
{"in":"mapping = {X1: Y1, X2: Y2, X3: Y3}<nl>mapping[X4] = Y4<nl>mapping[X5] = Y5<nl><nl>for X,Y in mapping.items():<nl><tab>if Y is not None:<nl><tab><tab>obj[X][0] = Y","out":"Condensing code in Python with Mappings"}
{"in":"check = cells[1].get_text(strip=True)","out":"Beautifulsoup, unable to compare strings"}
{"in":"return render(request, 'blog\/articles\/{}.html'.format(pk), {'article': article})","out":"Django: Necessary html-page in views"}
{"in":"arr = []<nl>arr.append((time, host, status, bytes_))<nl>reqs_host, bytes_host, errors_host = {}, {}, {}<nl>for item in arr:<nl><tab>reqs_host[item[1]] = reqs_host.get(item[1], 0) + 1<nl><tab>bytes_host[item[1]] = bytes_host.get(item[1], 0) + item[3]<nl><tab>if item[2] and item[2][0] in \"45\": <nl><tab><tab>errors_host[item[1]] = errors_host.get(item[1], 0) + 1","out":"Counting dictionary elements from Perl to Python"}
{"in":"glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, GL_COLOR_ATTACHMENT0_EXT, GL_TEXTURE_2D, surface.texture, 0)","out":"Transparent FrameBuffer background in OpenGL"}
{"in":"for key in dict1.keys():<nl>  if key in dict2.keys():<nl><tab>dict1[key].append(dict2[key])","out":"Matching Python Dict"}
{"in":"values = [1,2,3]<nl><nl># Turn list of values into list of Q objects<nl>queries = [Q(pk=value) for value in values]<nl><nl># Take one Q object from the list<nl>query = queries.pop()<nl><nl># Or the Q object with the ones remaining in the list<nl>for item in queries:<nl><tab>query |= item<nl><nl># Query the model<nl>Article.objects.filter(query)","out":"How to dynamically compose an OR query filter in Django?"}
{"in":"outfile.write(str(i) + '<nl>')","out":"print in an archive with python"}
{"in":"import subprocess<nl>import json<nl><nl>testing = \"HelloWorld\"<nl><nl>jsonStr = '{\"script\":\"#!\/bin\/bash \\<nl> STRING=\\'%VP%\\' \\<nl> echo $STRING \\<nl>\"}'.replace('%VP%', testing)<nl><nl>j = json.loads(jsonStr)<nl><nl>print \"start\"<nl>subprocess.call(j['script'], shell=True)<nl>print \"end\"","out":"How to execute shell script from Python after passing input parameters"}
{"in":"list_of_parent_keys = ndb.put_multi(list_of_entities)<nl>child_keys = []<nl>for parent_key in list_of_parent_keys:<nl>  child_key = ndb.Key(Parent, parent_key, Child, child_key)<nl>  child_keys.append(child_key)","out":"google app engine Efficient way to put large data in datastore"}
{"in":"s = \"evening\"<nl>ans = len([x for x in xrange(len(s)-2) if s[x] == s[x+2]])<nl>print ans","out":"How to make a function that counts how many times each element is equal to 2 elements to its right"}
{"in":"coord = tuple(sum(x) for x in zip(coord, change))","out":"Adding Values From Tuples of Same Length"}
{"in":"concordance()","out":"concordance for a phrase using NLTK in Python"}
{"in":"container = array.array('I', [0]) * ((10000000000 + 31) \/\/ 32)","out":"long-index arrays in python"}
{"in":"import logging<nl>logger = logging.getLogger(__name__)<nl><nl>def restart_service(node_name):<nl><tab>print('='*30 + '  Starting to work on ' + node_name + '  ' + '='*30 + '<nl>')<nl><tab>logging.info('Connecting to %s in order to restart %s...', node_name, service_name)<nl><tab>ssh = paramiko.SSHClient()<nl><tab>ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())<nl><tab>ssh.load_system_host_keys()<nl><tab>ssh.connect(node_name)<nl><tab>channel = ssh.get_transport().open_session()<nl><tab>channel.exec_command(command)<nl><tab>while True:<nl><tab><tab>if channel.exit_status_ready():<nl><tab><tab><tab>break<nl><tab><tab>rl, wl, xl = select.select([channel], [], [], 0.0)<nl><tab><tab>if len(rl) > 0:<nl><tab><tab><tab># Log output<nl><tab><tab><tab>logger.info(channel.recv(1024))<nl><tab>ssh.get_transport().close()<nl><tab>ssh.close()","out":"Python Paramiko log output of commands to a file"}
{"in":"data = {}<nl>for row in words:<nl><tab>if not row[\"name\"] + \"-\" + row[\"subname\"] in data:<nl><tab><tab>data[row[\"name\"] + \"-\" + row[\"subname\"]] = {<nl><tab><tab><tab>\"name\": row[\"name\"],<nl><tab><tab><tab>\"subname\": row[\"subname\"],<nl><tab><tab><tab>\"data\": {<nl><tab><tab><tab><tab>\"attr1\": {\"name\":\"value1\", \"values\": []},<nl><tab><tab><tab><tab>\"attr2\": {\"name\":\"value2\", \"values\": []}<nl><tab><tab><tab>}<nl><tab><tab>}<nl><tab>data[row[\"name\"] + \"-\" + row[\"subname\"]][\"data\"][\"attr1\"][\"values\"].append(row[\"value1\"])<nl><tab>data[row[\"name\"] + \"-\" + row[\"subname\"]][\"data\"][\"attr2\"][\"values\"].append(row[\"value2\"])","out":"Reading from finite sets of CSV columns and outputing as rows to a specific JSON schema"}
{"in":"import scraperwiki<nl>import lxml.html<nl><nl>html = scraperwiki.scrape('http:\/\/ahr13.mapyourshow.com\/5_0\/exhibitor_results.cfm?  alpha=%40&type=alpha&page=1')<nl><nl>root = lxml.html.fromstring(html)<nl># get the links<nl>hrefs = root.xpath('\/\/td[@class=\"mys-elastic mys-left\"]\/a')<nl><nl>for href in hrefs:<nl>   print 'http:\/\/ahr13.mapyourshow.com' + href.attrib['href']","out":"Scraperwiki + lxml. How to get the href attribute of a child of an element with a class?"}
{"in":"--nothreading","out":"Segfault on 2nd connection with pyodbc to mirrored MS SQL Server"}
{"in":"with open('ids.txt', 'rU') as f:<nl><tab>interesting_ids = set('>' + line.lower()[0:4] + \"_\" + line[4] for line in f)  # Get all ids in a set.<nl><nl>found_id = None<nl>with open('seqres.txt', 'rU') as g:<nl><tab>for line in g:<nl><tab><tab>if found_id is not None:<nl><tab><tab><tab>with open(found_id+'.fasta','w') as h:<nl><tab><tab><tab><tab>h.write(line)<nl><nl><tab><tab>id = line[:7]<nl><tab><tab>if id in interesting_ids: found_id = id<nl><tab><tab>else: found_id = None","out":"Loop over a file and write the next line if a condition is met"}
{"in":"lambda a=a: inputBoardSize(a)","out":"In Tkinter how can I correct this loop\/function so that each button changes a value to the value of the button?"}
{"in":"import bs4<nl>soup = bs4.BeautifulSoup(html_string)<nl>href = soup.find('h3').find('a').get('href')<nl>print(href)","out":"how to access the first result of a google search result ( prominently a video link)?"}
{"in":"ans = np.logical_and(<nl><tab>np.logical_and(array1 != 0, array2 != 0),<nl><tab>array1 == array2 )","out":"Comparing two numpy arrays to each other"}
{"in":"color_from_url = self.request.get('color')<nl>flavour_from_url = self.request.get('flavour')","out":"Basic Python Script in Google App Engine to get the GET parameters and use it accordingly"}
{"in":"import numpy<nl><nl>my_ar = numpy.array((0,5,10))<nl>print my_ar<nl><nl>transformed = numpy.array(map(lambda x:numpy.array((x,x*2,x*3)), my_ar))<nl>print transformed<nl><nl>print transformed.shape","out":"Adding a dimension to every element of a numpy.array"}
{"in":"import re<nl>import os<nl>r = re.compile(r'\\d{2}.+gif$')<nl>for root, dirs, files in os.walk('\/home\/vinko'):<nl>  l = [os.path.join(root,x) for x in files if r.match(x)]<nl>  if l: print l #Or append to a global list, whatever","out":"How do I search through a folder for the filename that matches a regular expression using Python?"}
{"in":"import pylab as pl<nl>import numpy as np<nl>import pandas as pd<nl><nl># prepare some random data<nl>N = 100<nl>np.random.seed(0)<nl>weekday = np.random.randint(0, 7, N)<nl>week = np.random.randint(0, 40, N)<nl>activity = np.random.randint(0, 100, N)<nl><nl>df = pd.DataFrame({\"weekday\":weekday, \"week\":week, \"activity\":activity})<nl>df.drop_duplicates(cols=[\"weekday\", \"week\"], inplace=True)<nl><nl># reshape the data and plot it<nl>df2 = df.pivot(columns=\"week\", index=\"weekday\", values=\"activity\")<nl>df2.fillna(0, inplace=True)<nl><nl>Weekday, Week = np.mgrid[:df2.shape[0]+1, :df2.shape[1]+1]<nl>fig, ax = pl.subplots(figsize=(12, 4))<nl>ax.set_aspect(\"equal\")<nl>pl.pcolormesh(Week, Weekday, df2.values, cmap=\"Greens\", edgecolor=\"w\", vmin=-10, vmax=100)<nl>pl.xlim(0, df2.shape[1])","out":"How to create an activity plot from Pandas Dataframe (like the Github contribution plot)"}
{"in":"process=subprocess.Popen([PathToProcess],stdin=subprocess.PIPE,stdout=subprocess.PIPE);<nl>for i in xrange(StepsToComplete):<nl><tab>print \"Forcing step # %s\"%i<nl><tab>process.stdin.write(\"<nl>\")<nl><tab>result=process.stdout.readline()","out":"Starting and Controlling an External Process via STDIN\/STDOUT with Python"}
{"in":"def get_absolute_url(self):<nl><tab>return \"\/event\/%d\" % self.id","out":"Creating a get_absolute_url()"}
{"in":"import sqlalchemy<nl>import fdb","out":"Connecting to a firebird superserver on windows using sqlalchemy"}
{"in":"def download(url, local_file):<nl><tab>def progress(blocks_read, block_size, total_size):<nl><tab><tab>percent = min(int(blocks_read * block_size * 100 \/ total_size), 100)<nl><tab><tab>sys.stdout.write(\"\\rdownloading {}: {:2}%\".format(local_file, percent))<nl><tab><tab>if percent == 100:<nl><tab><tab><tab>sys.stdout.write('<nl>')<nl><tab><tab>sys.stdout.flush()<nl><nl><tab>urllib.urlretrieve(url, local_file, reporthook=progress)<nl><nl><nl># call download function<nl>download(\"http:\/\/ww1.microchip.com\/downloads\/en\/DeviceDoc\/pk2cmdv1-20Linux2-6.tar.gz\",<nl><tab><tab> \"pickit.tar.gz\")","out":"How do I read the size of an archive on web"}
{"in":"re.search(\"([0-9]{2}\\-[0-9]{2}\\-[0-9]{4})\", fileName)","out":"Python\/Regex - How to extract date from filename using regular expression?"}
{"in":"from collections import defaultdict<nl>type_dict = defaultdict(list)<nl>for element in self.elements:<nl><tab>type_dict[element.type()].append(element.dimStr())<nl>return ','.join('%s: %s' for k, v in type_dict.items())","out":"How to use duck typing effectively with inheritance"}
{"in":"reader = csv.reader(thefile.file.read().splitlines())","out":"Parse HTML uploaded CSV file in Python"}
{"in":"icfg = Matrix2D_icfg(\"icfg\") #declaring object<nl>icfg_compress = pickle.dumps(icfg) #to pickle<nl><nl>icfg = pickle.loads(str(icfg_compress)) # to unload","out":"Google App Engine Payload Object"}
{"in":"import active_directory<nl><nl>user = active_directory.find_user(\"jimboface\")<nl>destination_ou = active_directory.find_ou(\"happyland\")<nl>destination_ou.com_object.MoveHere(str(user.as_string()), str(user.Name))<nl>#Thats it!","out":"How do you move a user to a different OU using Python"}
{"in":"import os<nl>import shutil<nl>from os import path<nl>from os.path import join, getmtime<nl>from time import time<nl><nl>archive = \"bak\"<nl>current = \"cur\"<nl><nl>def archive_old_versions(days = 3):<nl><tab>for root, dirs, files in os.walk(current):<nl><tab><tab>for name in files:<nl><tab><tab><tab>fullname = join(root, name)<nl><tab><tab><tab>if (getmtime(fullname) < time() - days * 60 * 60 * 24):<nl><tab><tab><tab><tab>shutil.move(fullname, join(archive, name))","out":"How to express this Bash command in pure Python"}
{"in":"colNums = [0, 2, 6]<nl>to_write = [ col for i, col in enumerate(zip(*my_reader)) if i in colNums ]","out":"how to copy some csv file colums into another csv file with python?"}
{"in":"app = wx.App()<nl>frame = MyFrame1(None)<nl>frame.Show()<nl>app.MainLoop()","out":"wxPython frame don't show"}
{"in":"#input<nl><nl>file1 = open('1.txt', 'r')<nl>file2 = open('2.txt', 'r')<nl>matrix1 = [line.rstrip().split(', ') for line in file1.readlines()]<nl>matrix2 = [line.rstrip().split(', ') for line in file2.readlines()]<nl>file1.close()<nl>file2.close()<nl><nl>#combine<nl><nl>t_matrix1 = [[r[col] for r in matrix1] for col in range(len(matrix1[0]))]<nl>t_matrix2 = [[r[col] for r in matrix2] for col in range(len(matrix2[0]))]<nl>final_t_matrix = []<nl>for i in (t_matrix1 + t_matrix2):<nl><tab>if i not in final_t_matrix:<nl><tab><tab>final_t_matrix.append(i)<nl>final_matrix = [[r[col] for r in final_t_matrix] for col in range(len(final_t_matrix[0]))]<nl><nl>#output<nl><nl>outfile = open('out.txt', 'w')<nl>for i in final_matrix:<tab><tab><tab>   <nl><tab>for j in i[:-1]:<nl><tab><tab>outfile.write(j+', ')<nl><tab>outfile.write(i[-1]+'<nl>')<nl>outfile.close()","out":"merging two tables by common column"}
{"in":"print myDict[ u'Command']","out":"pymongo result to String"}
{"in":"import matplotlib.pyplot as plt<nl>import numpy as np<nl><nl>listAct = []<nl>for pos,rem in np.array(db.extractData(mess)):<nl><tab>act = gen.unixTime_to_dateTime(rem)- gen.unixTime_to_dateTime(pos) ##act is a datetime object<nl><tab>listAct.append(act.days + act.seconds\/float(86400)) <nl><nl>bins = range(1,15)<nl>plt.hist(listAct,bins)<nl>plt.show()","out":"Plot a distribution graph in Python"}
{"in":"album_list.append((album, Photo.objects.filter(album=album).order_by('?')[0]))","out":"Trying to create a tuple of objects create an object and a queryset"}
{"in":"prefetch_related()","out":"Django get ContentType in a template"}
{"in":"df_masked = df[(df.time <= t1) & (df.time >= t0)]","out":"how to get particular part of DataFrame"}
{"in":"punctuation_i_care_about=\"?.!\"<nl>split_by_punc =  re.split(\"[%s]\"%punctuation_i_care_about, some_big_block_of_text)<nl>words_by_puct = [len(x.split()) for x in split_by_punc]","out":"Counting number of words between punctuation characters in Python"}
{"in":"from Crypto.Cipher import AES<nl>from Crypto import Random<nl>IV = Random.new().read(32)<nl>c = AES.new('abcd1234efgh5678', AES.MODE_CFB, IV)<nl>data = c.encrypt('test')<nl><nl>c.decrypt(data)","out":"How to secure messages travelling between a socket client and server in Python 3?"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl>#plot<nl>r = np.arange(0, 3.0, 0.01)<nl>theta = 2 * np.pi * r<nl>rmax = 2.0<nl>n_th = 6<nl>th_pos = np.linspace(0.0, 2 * np.pi, n_th, endpoint=False)<nl>n_r = 5<nl>r_pos = np.linspace(0, rmax, n_r)<nl><nl><nl>ax = plt.subplot(111, polar=True)<nl><nl>## Plot the grid<tab><nl>for pos in th_pos:<nl><tab>ax.plot([th_pos]*2, [0, rmax], 'k:', lw=2)<nl>for pos in r_pos[1:-1]:<nl><tab>x = np.linspace(0, 2*np.pi, 50)<nl><tab>y = np.zeros(50)+pos<nl><tab>ax.plot(x, y, 'k:', lw=2)<nl><nl>## Plot your data<nl>ax.plot(theta, r, color='r', linewidth=20)<nl>ax.set_rmax(rmax)<nl>ax.grid(False)<nl><nl>#set ticks and labels<nl>ax.set_xticks(th_pos)<nl>label_cols = ['Label ' + str(num) for num in np.arange(n_th)]<nl>ax.set_xticklabels(label_cols, size=24)<nl>ax.set_yticks(r_pos[1:])<nl><nl><nl>plt.show()","out":"In matplotlib, Is there a way to set gridlines below bars\/lines\/patches while retaining ticklabels above?"}
{"in":"def primes(n): # sieve of eratosthenes<nl><tab>ps, sieve = [], [True] * (n + 1)<nl><tab>for p in range(2, n + 1):<nl><tab><tab>if sieve[p]:<nl><tab><tab>   ps.append(p)<nl><tab><tab>   for i in range(p * p, n + 1, p):<nl><tab><tab><tab>   sieve[i] = False<nl><tab>return ps","out":"My sieve of eratosthenes implementation in Python"}
{"in":"import os<nl><nl>dir_path = '\/path\/to\/folders\/folder{}'<nl><nl>x = 10<nl><nl>for i in range(0, x):<nl><tab>formatted_path = dir_path.format(i)<nl><tab>try:<nl><tab><tab>for f in os.listdir(formatted_path):<nl><tab><tab><tab>filename = os.path.join(formatted_path, f)<nl><tab><tab><tab>if os.path.isfile(filename):<nl><tab><tab><tab><tab>print filename<nl><nl><tab>except OSError:<nl><tab><tab>print \"{} does not exist\".format(formatted_path)","out":"Walk through folders until specific ending number python"}
{"in":"key, value = line.split(':')","out":"Creating a dictionary in python from a text file"}
{"in":"df['hours'] = [ts.hour for ts in pd.to_datetime(df['datetime'])]","out":"Best way to manage custom object to extra date and time"}
{"in":"plt.clf()","out":"How to update a matplotlib figure from loop?"}
{"in":"tbl = Table('users', self.meta, autoload=True, autoload_with=Engine)<nl>stmt = select([tbl.c.id, tbl.c.name])<nl>result = self.CONN.execute(stmt)<nl>ids = [row[tbl.c.id] for row in result]<nl>for x in range(2):<nl><tab>for i in ids:<nl><tab><tab>print(i)","out":"Looping through a result proxy object"}
{"in":"DockArea.makeContainer()","out":"Prevent a dock from being resized to the point of disappearing"}
{"in":"import ctypes<nl>ctypes.windll.user32.PostQuitMessage(0)","out":"How do I use my own loop with pyhook instead of pumpMessages()?"}
{"in":"application = wsgi.Application(soap_application)","out":"soaplib with mod_wsgi without django, cherypy or other framework"}
{"in":"fig, ax = plt.subplots()<nl><nl>bar1 = ax.bar(date, value)<nl><nl>plt.title('Title')<nl>plt.ylabel('Value')<nl>plt.xlabel('Date')<nl>plt.show()","out":"Bar Graphs with Matplotlib"}
{"in":"matches = re.findall(\"([0-9]{5})\",f.read())","out":"Extraction from python over multiple lines"}
{"in":"b.append(i)","out":"Saving data in a .mat file using a for loop using python"}
{"in":"test_range = agents.coll.find({ \"created_at\": {\"$gte\" : datetime(2015, 3, 1), \"$lt\": datetime(2015, 3, 30)}})","out":"how to query using isodate in pymongo"}
{"in":"import wx<nl><nl>class MyFrame(wx.Frame):<nl><tab>def __init__(self, parent, id, title):<nl><tab><tab>wx.Frame.__init__(self, parent, id, title,size=(250, 250))<nl><nl><tab><tab>topPanel = wx.Panel(self)<nl><nl><tab><tab>panel1 = wx.Panel(topPanel, -1,pos=(0,100),size=(100,100))<nl><tab><tab>button1 = wx.Button(panel1, -1, label=\"click me\")<nl><nl><tab><tab>panel2 = wx.Panel(topPanel, -1,pos=(0,200))<nl><tab><tab>button2 = wx.Button(panel2, -1, label=\"click me\")<nl><tab><tab>sizer = wx.BoxSizer(wx.VERTICAL)<nl><tab><tab>sizer.Add(panel1,0,wx.EXPAND|wx.ALL,border=10)<nl><tab><tab>sizer.Add(panel2,0,wx.EXPAND|wx.ALL,border=10)<nl><nl><tab><tab>topPanel.SetSizer(sizer)<nl><nl><nl><nl>class MyApp(wx.App):<nl><tab> def OnInit(self):<nl><tab><tab> frame = MyFrame(None, -1, 'frame')<nl><tab><tab> frame.Show(True)<nl><tab><tab> return True<nl><nl>app = MyApp(0)<nl>app.MainLoop()","out":"wxpython two panel layout"}
{"in":"google.appengine.ext.ereporter","out":"Log errors to database with Django on Google App Engine"}
{"in":"import os<nl><nl>def get_file_path(file):<nl><tab>for (root, dirs, files) in os.walk('.'):<nl><tab><tab>if file in files:<nl><tab><tab><tab>return os.path.join(root, file)","out":"Open a file without specifying the subdirectory python"}
{"in":"value=str('6,0865000000e-01')<nl>value2=value.replace(',', '.')<nl>float(value2)<nl>0.60865000000000002","out":"Converting exponential to float"}
{"in":"x_0 = (points[0].getX())<nl>x_02 = (points[1].getX())<nl>x_1 = (((points[0].getX())\/3)*2 +  (points[1].getX())\/3)<nl>x_2 = (((points[0].getX())\/3)   + ((points[1].getX())\/3)*2)","out":"Sierpinski Carpet Recursion - Python"}
{"in":"context = super(RegistrationView, self).get_context_data(**kwargs)<nl>print(self.get_slug_field())<nl>context['company'] = self.kwargs['company']<nl>context['program'] = self.kwargs['program']","out":"Get parameters slugs from the URL"}
{"in":"fig, ax_f = plt.subplots(nrows=1, ncols=1)","out":"Matplotlib: putting together figure, xaxis, minor_locator, major_locator"}
{"in":"import urllib2<nl>import re<nl>from BeautifulSoup import BeautifulSoup<nl><nl>url = \"http:\/\/forums.epicgames.com\/archive\/index.php?f-356-p-164.html\"<nl>page = urllib2.urlopen(url).read()<nl>soup = BeautifulSoup(page)<nl><nl># Get all the links<nl>links = [str(match) for match in soup('a')]<nl><nl>s = r'<a href=\"http:\/\/forums.epicgames.com\/archive\/index.php\\?t-\\d+.html\">(.+?)<\/a>' <nl>r = re.compile(s)<nl>for link in links:<nl><tab>m = r.match(link)<nl><tab>if m:<nl><tab><tab>print m.groups(1)[0]","out":"Regex Matching Error"}
{"in":"d1 = {\"dog\":\"woof\", \"cat\":\"meow\"}<nl>d2 = d1.copy() # make a copy, not a reference to the same dictionary<nl>d2[\"dog\"] = \"bark\"<nl>for i in d1:<nl><tab>print(i, d1[i])<nl><nl># dog woof<nl># cat meow","out":"Python: Dictionaries linked data"}
{"in":"openid.store","out":"Errors with python-openid and Google Apps Federated Login"}
{"in":"import subprocess<nl>server = subprocess.Popen([\"python\", \"manage.py\", \"runserver\"])","out":"IPython Kernel Non-Responsive: Running a Django development server from an IPython Notebook"}
{"in":"sorted(list, key=lambda d: int(d[2:]))","out":"Python sorting a list of strings"}
{"in":"import sys;<nl>sys.path.insert(0, '\/path\/to\/application\/app(folder)')<nl><nl>import urlregister","out":"Python import file from app"}
{"in":"pos = mylist.index(max(mylist))","out":"Efficient way to get the position info of the biggest item in a Python list"}
{"in":"class_list = []<nl>class CollectSubclasses(type):<nl><tab>def __new__(cls, name, bases, attrs):<nl><tab><tab>abstract = False<nl><tab><tab>if attrs.get('abstract', False):<nl><tab><tab><tab>abstract = True<nl><tab><tab><tab>del attrs['abstract']<nl><tab><tab>res = super(CollectSubclasses, cls).__new__(cls, name, bases, attrs)<nl><tab><tab>if not abstract:<nl><tab><tab><tab>class_list.append(res)<nl><tab><tab>return res<nl><nl>class BaseFoo(object):<nl><tab>__metaclass__ = CollectSubclasses<nl><tab>abstract = True<nl><nl>class Concrete1(BaseFoo):<nl><tab>pass<nl><nl>class Abstract(BaseFoo):<nl><tab>abstract = True<nl><nl>class Concrete2(Abstract):<nl><tab>pass<nl><nl>print class_list","out":"How do I create a class in Python that behaves like Django's abstract base class?"}
{"in":"list(collection.questions)","out":"Many to many using Flask-SQLAlchemy returns raw sql instead of executed"}
{"in":"items = [{'category': m.category, 'message': m.message}<nl>  for m in h.flash.pop_messages()]","out":"Load list with content of object"}
{"in":"days_left = 100<nl>units_left = 50<nl>ideal_daily_rate = units_left\/days_left<nl>spend = 1.2*ideal_daily_rate<nl><nl>while (days_left>0):<nl><tab>print( \"days_left: %4.1f unit_left: %4.1f ideal: %5.2f spend: %5.2f\" % (days_left,units_left,ideal_daily_rate,spend))<nl><tab>units_left -= spend<nl><tab>days_left -= 1<nl><tab>if (days_left>0):<nl><tab><tab>ideal_daily_rate = units_left\/days_left<nl><tab><tab>spend = 1.2*ideal_daily_rate","out":"Recursive subtraction in numpy"}
{"in":"as_<nl>with_<nl>for_<nl>in_","out":"What's the advantage of a trailing underscore in Python naming?"}
{"in":"import numpy as np<nl><nl>A = np.array([1,2,3,4,5,6,7])<nl>B = np.array([2,4,6])<nl>C = np.searchsorted(A, B)<nl><nl>D = np.delete(np.arange(np.alen(A)), C)<nl><nl>D<nl>#array([0, 2, 4, 6])","out":"Check if each element in a numpy array is in another array"}
{"in":"#ID<tab>  Postal Code  <nl>data = [<nl><tab>('1001', 'MK18 1TN'),<nl><tab>('1001', 'MK18 1TL'),<nl><tab>('1002', 'HP17 6DG'),<nl><tab>('1002', 'HP17 6DH'),<nl><tab>]<nl>d = dict()<nl>for id,pc in data:<nl><tab>if id not in d:<nl><tab><tab>d[id] = []<nl><tab>d[id].append(pc)<nl>idkeys = d.keys()<nl>idkeys.sort()<nl>for k in idkeys:<nl><tab>print k, ', '.join(d[k])","out":"Copy values from CSV rows and adding to rows where the ID is the same"}
{"in":"shape = (QT.shape[2],)*2<nl>result = np.memmap('result.dat', dtype=QT.dtype, mode='w+', shape=shape)<nl>np.dot(QT.T, QT, out=result)","out":"improving Numpy dot performance by removing arrays copy"}
{"in":"ssh.exec_command(\"pwd; .\/test.sh \" + str(command))","out":"How to pass a variable value in exec_command in python?"}
{"in":"def checkComm(old_commCount): # passed as a parameter<nl><tab>server = xmlrpclib.ServerProxy(server_uri) # connect to WP server<nl><tab>comments = server.wp.getComments(blog_id, server_admin, admin_pass, filters)<nl><tab>new_commCount = len(comments)<nl><tab>if new_commCount > old_commCount:<nl><tab><tab>print \"there are new comments\"<nl><tab><tab>old_commCount = new_commCount<nl><tab><tab>return old_commCount # return it so you can update it<nl><tab>else:<nl><tab><tab>print \"no new comments\"<nl><tab><tab>return old_commCount<nl><nl>comm_count = 0 # initialize it here<nl>while True:<nl><tab>comm_count = checkComm(comm_count) # update it every time<nl><tab>time.sleep(60)","out":"how can I give a variable another value inside a function in python?"}
{"in":"import pylab as pl<nl><nl>data = pl.loadtxt(\"myfile.txt\")<nl><nl>pl.figure(figsize=(14,6))<nl>pl.plot(data[:,1], data[:,0], \"b\")<nl>pl.plot(data[:,2], data[:,0], \"r\")<nl>pl.plot(data[:,3], data[:,0], \"r\")<nl><nl>pl.show()","out":"Plotting three data sets on a single plot using matplotlib"}
{"in":"from selenium import webdriver<tab><nl><nl>driver = webdriver.Firefox()<nl>driver.get('navigate to url')<nl><nl>select_elem = driver.find_element_by_id('TargetRadius')<nl>select_elem.click()<nl>options = select_elem.find_elements_by_tag_name('option')<nl>options[len(options)-1].click()","out":"How can I select the last drop-down option in selenium with python?"}
{"in":"def parse_arguments(s):<nl><tab>openers = \"{[\\\"'(\"<nl><tab>closers = \"}]\\\"')\"<nl><tab>state = []<nl><tab>current = \"\"<nl><tab>for c in s:<nl><tab><tab>if c == \",\" and not state:<nl><tab><tab>   yield current<nl><tab><tab>   current = \"\"<nl><tab><tab>else:<nl><tab><tab>   current += c<nl><tab><tab>   if c in openers:<nl><tab><tab><tab>  state.append(c)<nl><tab><tab>   elif c in closers:<nl><tab><tab><tab>  assert state, \"ERROR No Opener for %s\"%c<nl><tab><tab><tab>  assert state[-1] == openers[closers.index(c)],\"ERROR Mismatched %s %s\"%(state[-1],c)<nl><tab><tab><tab>  state.pop(-1)<nl><tab>assert not state, \"ERROR Unexpected End, expected %s\"%state[-1]<nl><tab>yield current<nl><nl>print list(parse_arguments(\"1, bar(x+17, 1), arr = 's,y'\"))","out":"Split string that looks like a Python function call to arguments"}
{"in":"url(r'^[\\w\\-]+\/', include('project.urls_tenant')),","out":"Django multitenant urls configuration"}
{"in":"result = [item for word in words for item in word.split(',')]","out":"split items in list"}
{"in":"def example():<nl>  try:<nl><tab>return pickle.loads(\"\")<nl>  except EOFError:<nl><tab>return None","out":"How to pickle a empty file?"}
{"in":"import numpy as np<nl>from scipy.interpolate import UnivariateSpline<nl><nl>def make_norm_dist(x, mean, sd):<nl><tab>return 1.0\/(sd*np.sqrt(2*np.pi))*np.exp(-(x - mean)**2\/(2*sd**2))<nl><nl>x = np.linspace(10, 110, 1000)<nl>green = make_norm_dist(x, 50, 10)<nl>pink = make_norm_dist(x, 60, 10)<nl><nl>blue = green + pink   <nl><nl># create a spline of x and blue-np.max(blue)\/2 <nl>spline = UnivariateSpline(x, blue-np.max(blue)\/2, s=0)<nl>r1, r2 = spline.roots() # find the roots<nl><nl>import pylab as pl<nl>pl.plot(x, blue)<nl>pl.axvspan(r1, r2, facecolor='g', alpha=0.5)<nl>pl.show()","out":"Finding the full width half maximum of a peak"}
{"in":"import time<nl>import curses<nl><nl>stdscr = curses.initscr()<nl><nl>n = 0<nl>b = 0<nl>for _ in range(0, 5):<nl><tab>i = 1<nl><tab>for _ in range(0, 123):<nl><tab><tab>stdscr.addstr(b, 0, \"Current: %d\" % i)<nl><tab><tab>i = i + 1<nl><tab><tab>n = n + 1<nl><tab><tab>time.sleep(0.01)<nl><tab><tab>stdscr.addstr(b+1, 0, \"Total: %d\" % n)<nl><tab><tab>stdscr.refresh()<nl><tab>b = b + 1","out":"Python - How to display two counters in for loops"}
{"in":"import smtplib<nl>smtp_client = smtplib.SMTP('smtp.gmail.com', 587)<nl>smtp_client.starttls()<nl>smtp_client.login(username, password)","out":"Automate SMTP Using Python"}
{"in":"request_token_url = 'http:\/\/api.twitter.com\/oauth\/request_token'<nl>access_token_url = 'http:\/\/api.twitter.com\/oauth\/access_token'<nl># This is the slightly different URL used to authenticate\/authorize.<nl>authenticate_url = 'http:\/\/api.twitter.com\/oauth\/authenticate'","out":"how do i get the request token"}
{"in":"# NYSE<nl>url_nyse = \"http:\/\/www.nasdaq.com\/screening\/companies-by-name.aspx?letter=0&exchange=nyse&render=download\"<nl># Nasdaq<nl>url_nasdaq = \"http:\/\/www.nasdaq.com\/screening\/companies-by-name.aspx?letter=0&exchange=nasdaq&render=download\"<nl># AMEX<nl>url_amex = \"http:\/\/www.nasdaq.com\/screening\/companies-by-name.aspx?letter=0&exchange=amex&render=download\"<nl><nl>import pandas as pd<nl><nl>df = pd.DataFrame.from_csv(url_nyse)<nl>stocks = df.index.tolist()","out":"How to pull stock data for every stock on a given exchange"}
{"in":"import json<nl>import datetime<nl><nl><nl>class Custom_JSONEncoder(json.JSONEncoder):<nl><tab>def default(self, obj, **kwargs):<nl><tab><tab>if isinstance(obj, datetime.datetime):<nl><tab><tab><tab># Use the appropriate format for datetime<nl><tab><tab><tab>return obj.strftime('%Y-%m-%d %I:%M%p')<nl><tab><tab>return None","out":"Prevent JSON serialization from throwing an exception in Python"}
{"in":"import dbf<nl><nl>my_table = dbf.Table('\/path\/and\/filename')<nl><nl>with my_table:<nl><tab>my_table.add_fields('header3 N(3,0)')<nl><nl><tab>for record in dbf.Process(my_table):<nl><tab><tab>record.header3 = record.header1 + record.header2","out":"How to reference cells from DBF with python?"}
{"in":"__class__.__name__","out":"How can I get the name of a python class?"}
{"in":"import Tkinter as tk<nl>import threading<nl>import random<nl>import time<nl>from Queue import Queue, Empty<nl><nl>root = tk.Tk()<nl>time_label = tk.Label(root, text='<unknown> seconds')<nl>volt_label = tk.Label(root, text='<unknown> volts')<nl>time_label.pack()<nl>volt_label.pack()<nl><nl>def DAQ(q):<nl><tab>while True:<nl><tab><tab>q.put((time.time(), random.randrange(100)))<nl><tab><tab>time.sleep(2)<nl><nl>def update_data(queue, root):<nl><tab>try:<nl><tab><tab>timestamp, volts = queue.get_nowait()<nl><tab>except Empty:<nl><tab><tab>pass<nl><tab>else:<nl><tab><tab>time_label.config(text='{:.1f} seconds'.format(timestamp))<nl><tab><tab>volt_label.config(text='{:.4f} volts'.format(volts))<nl><tab>root.after(100, update_data, queue, root)<nl><nl>data_queue = Queue()<nl>t = threading.Thread(target=DAQ, args=(data_queue,))<nl>t.daemon = True<nl>t.start()<nl>update_data(data_queue, root)<nl>root.mainloop()","out":"Data Acquistion using Python"}
{"in":"import datetime, pytz<nl><nl>datetime.datetime.now(pytz.timezone('Asia\/Jerusalem')).strftime('%z')<nl><nl># returns '+0300' (because 'now' they have DST)<nl><nl><nl>pytz.timezone('Asia\/Jerusalem').localize(datetime.datetime(2011,1,1)).strftime('%z')<nl><nl># returns '+0200' (because in January they didn't have DST)","out":"get UTC offset from time zone name in python"}
{"in":"import tweepy<nl><nl>CONSUMER_KEY = 'yourconsumerkey'<nl>CONSUMER_SECRET = 'yourconsumersecret'<nl>ACCESS_KEY = 'youraccesskey'<nl>ACCESS_SECRET = 'yoursecret'<nl>auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)<nl>auth.set_access_token(ACCESS_KEY, ACCESS_SECRET)<nl>api = tweepy.API(auth)<nl><nl>search_text = \"#gamedev\"<nl>search_number = 2<nl>search_result = api.search(search_text, rpp=search_number)<nl>for i in search_result:<nl><tab>print i.text","out":"Tweepy Python, retrieving latest 5 instances of a hashtag"}
{"in":"myspline.ev(xI, yI)","out":"Fast 2-D interpolation in Python with SciPy regular grid to scattered \/ irregular evaluation"}
{"in":"is_active = models.BooleanField(default=True)","out":"AssertionError with custom user model django-allauth"}
{"in":"bin_range = [0, 100000]<nl>bin_input = raw_input(\"Enter bins as comma seperated list\")<nl>bin_input_parsed = [int(x.strip()) for x in bin_input.split(',')]<nl><nl>bins = [bin_range[0]] + bin_input_parsed + [bin_range[1]]<nl>pd.cut(df['Quantity'], bins)","out":"Pandas cut with user-defined bins"}
{"in":"db_connection.commit()","out":"Entering data into SQLite"}
{"in":"import urllib<nl>import urllib.request<nl>myurl = \"http:\/\/www.mysite.com\"<nl><nl>sock = urllib.request.urlopen(myurl)<nl>pagedata = str(sock.read())<tab><tab><tab><tab><tab><tab>  <nl>sock.close()<nl><nl>file = open(\"output.txt\",\"w\")<nl>file.write(pagedata)<nl>file.close()","out":"Trouble Getting a clean text file from HTML"}
{"in":"foo = [\"'the\"]<nl>foo = ['\"the']<nl>foo = ['''\"the''']<nl>foo = [\"\"\"'the\"\"\"]","out":"Single quotes as a part of an element of a Python list"}
{"in":"ages_train = np.array([20, 22, 25, 27, 30, 31, 31, 34, 42, 50])<nl>net_worths_train = np.array([10000, 12000, 16000, 20000, 30000, 33000, 34000, 38000, 49000, 60000])<nl>reg.fit(ages_train[:, np.newaxis], net_worths_train[:, np.newaxis])<nl>print reg.coef_, reg.intercept_","out":"Sklearn linear regression X and Y input format"}
{"in":"print \"\\t\".join([<nl>data['user']['screen_name'],<nl>str(data['user']['followers_count']), <nl>str(data['user']['friends_count'])<nl>])","out":"Parsing 'user' data from Twitter JSON data using Python"}
{"in":"from Tkinter import *<nl><nl>top = Toplevel()<nl>diagrams = PhotoImage(file='your image')<nl>logolbl= Label(top, image = diagrams)<nl>logolbl.grid()<nl><nl>mainloop()","out":"How to show an image in Tkinter?"}
{"in":"import urllib2<nl>from xml.etree import ElementTree<nl><nl>result = urllib2.urlopen('http:\/\/boardgamegeek.com\/xmlapi\/boardgame\/13').read()<nl>xml = ElementTree.fromstring(result)<nl>print xml.findtext(\".\/\/age\")","out":"How to parse xml in Python on Google App Engine"}
{"in":"keys.sort(key=lambda x: [int(y) for y in x.split('.')])","out":"Sorting numbers in string format with Python"}
{"in":"db.session.query(models.Recipe).\\<nl><tab>join(models.Ingredient, models.Recipe.ingredients)<nl><nl>db.session.query(models.Recipe).\\<nl><tab>join(models.Recipe.ingredients)","out":"Joining two tables with one table having a different foreign key"}
{"in":"tDict = {}<nl><nl>with open(\"Lexicon.txt\", \"r\") as infile:<tab><nl>  for line in infile:<nl><tab>s = line.split()<nl><tab>tDict[s[0]] = s[1]<nl><nl>while True:<nl>  wordIn = input(\"Enter the English word(s) to be translated (enter 'exit' to stop the program): \")<nl><nl>  if wordIn == \"exit\": break<nl><nl>  words = wordIn.split()<nl>  for word in words:<nl><tab>if word in tDict.keys():<nl><tab>  print(tDict[word])<nl><tab>else:<nl><tab>  print(\"*\" + word)","out":"Using Loops in a Python Piglatin Translator"}
{"in":"import os<nl>print os.path.splitext('\/home\/user\/somefile.txt')[0]+'.jpg'","out":"How to replace (or strip) an extension from a filename in Python?"}
{"in":"username = request.GET['username']","out":"How to filter model (User) using url param in views.py?"}
{"in":"import matplotlib.pyplot as plt<nl>boundaries = collections.OrderedDict([(10,'red'),(20,'blue'),(55,'purple')])<nl>areas = range(0,101)<nl>n, bins, patches = plt.hist(areas, [0]+list(boundaries), histtype='bar', rwidth=1.0)<nl>for (patch,color) in zip(patches,boundaries.values()):<nl><tab>patch.set_color(color)<nl>plt.show()","out":"How do I bin and categorize numbers in Python?"}
{"in":"lang-id","out":"Detecting foreign words"}
{"in":"from bson import json_util<nl>json_util.dumps(MyDoc._collection_obj.find(MyDoc.objects()._query))","out":"Return MongoEngine Documents as JSON"}
{"in":"import urllib2<nl>f = urllib2.urlopen(\"http:\/\/your-url\")<nl>size= f.headers[\"Content-Length\"]<nl>print size","out":"How can I get the file size on the Internet knowing only the URL"}
{"in":"import urllib2<nl>try:<nl><tab>data = urllib2.urlopen('http:\/\/www.python.org\/pythonHomePage.html').read()<nl>except urllib2.HTTPError, e:<nl><tab>print e.code<nl><tab>print e.msg<nl><tab>print e.headers<nl><tab>print e.fp.read()<nl><tab>with open(\"code2.txt\", \"wb\") as code:<nl><tab>  code.write(e.fp.read())","out":"urllib2 retrieve an arbitrary file based on URL and save it into a named file"}
{"in":"import re<nl><nl>t=re.search(r\"(.+?)\\\\(.+)\\\\(.+)\", reg)<nl>t.groups()<nl>('HKEY_LOCAL_MACHINE', 'SOFTWARE\\\\TT\\\\Tools\\\\SYS', 'exePath')","out":"problem about split a string"}
{"in":"import numpy as np<nl><nl>um=np.empty((34,17), dtype='float32') # Make these dimensions \"backwards\" for easier reshaping<nl>vm=np.empty((34,17), dtype='float32') # Also watch out, I believe the default type is float64<nl><nl>f = open(inputfile,'rb')<nl>recl = np.zeros(1,dtype=np.uint32)<nl>for i in range(nm+1):<nl><tab>recl = np.fromfile(f, dtype='uint32', count=1)<nl><tab>tmpu = np.fromfile(f, dtype='float32', count=um.size) # These arrays will be flat<nl><tab>tmpv = np.fromfile(f, dtype='float32', count=vm.size)<nl><tab>recl = np.fromfile(f, dtype='uint32', count=1)<nl><nl><tab>um = np.transpose(np.reshape(tmpu, um.shape))<nl><tab>vm = np.transpose(np.reshape(tmpv, vm.shape))","out":"How to read fortran 77 unformatted binary file into python"}
{"in":"from selenium.webdriver.support.ui import WebDriverWait<nl>from selenium.webdriver.common.by import By<nl>from selenium.webdriver.support import expected_conditions as EC<nl><nl>WebDriverWait(self.driver, 10).until(<nl><tab>EC.presence_of_element_located((By.XPATH, '\/\/*[@id=\"toast-container\"]\/div\/div[1][@class=\"ng-binding toast-title\"]'))<nl>)","out":"How to get text generated by JS in Selenium?"}
{"in":"import win32com.client<nl>shell = win32com.client.Dispatch(\"WScript.Shell\")<nl>shell.Run(\"outlook\")<nl>shell.AppActivate(\"Outlook\")<nl>shell.SendKeys(\"^o\", 0) # 1 f?r Pause = true 0 f?r nein<nl>shell.SendKeys(\"^a\", 0)<nl>shell.SendKeys(\"^c\", 0)","out":"how to open a program in python and send keystrokes?"}
{"in":"from flask import Flask, render_template, request, jsonify<nl>import dogo<nl>import traceback<nl><nl>app = Flask(__name__)<nl><nl><nl>@app.route('\/')<nl>def index():<nl><tab>return render_template(\"index.html\")<nl><nl><nl>@app.route('\/_summary', methods=[\"GET\"])<nl>def summary():<nl><tab>try:<nl><tab><tab>song = request.args.get('a')<tab><nl><tab><tab>return jsonify(result=dogo.parse_it_asap(song))<nl><tab>except Exception:<nl><tab><tab>return traceback.format_exc()<nl><nl>if __name__ == \"__main__\":<nl><tab>app.run(debug = True)","out":"Flask App request ajax GET returning 500 Internal Server Error"}
{"in":"for i, e in enumerate(myList):<nl><tab>key = e[e.index(\"_\"):]<nl><tab>if key not in myDict: continue<nl><tab>myList[i] = myDict[key]","out":"How to replace strings in a list by numbers based on their endings?"}
{"in":"class example:<nl><tab>def GET(self):<nl><tab><tab>print web.ctx.ip","out":"Extracting IP from request in Python"}
{"in":"from selenium.common.exceptions import NoSuchElementException, ElementNotVisibleException<nl><nl>try:<nl><tab>Ui.find_el(link.AuthorPopupNodes.LOGIN_EMAIL)<nl>except (NoSuchElementException, ElementNotVisibleException):<nl><tab>try:<nl><tab><tab>Ui.find_el(link.HeaderNodes.LOGOUT_BUTTON)<nl><tab><tab>self.log_out()<nl><tab>except (NoSuchElementException, ElementNotVisibleException):   <nl><tab><tab>pass<nl><nl><tab>Ui.wait_for_element(link.HeaderNodes.LOGIN_BUTTON, \"Timeout: Wait for Login button!\")<nl><tab>Ui.click_el(link.HeaderNodes.LOGIN_BUTTON)","out":"How to check if element is on screen"}
{"in":"import sys <nl>class MyNameSpace(object):<nl><tab>def __init__(self,ns):<nl><tab><tab>self.ns = ns<nl><tab>def __enter__(self):<nl><tab><tab>globals().update(self.ns)<nl><tab>def __exit__(self, exc_type,exc_value,traceback):<nl><tab><tab>self.ns.update(sys._getframe(1).f_locals)<nl><nl>my_dict = {'a':3, 'b':2} <nl>with MyNameSpace(my_dict) as ns:<nl><tab>print(a) # Should print 3<nl><tab>x = 5 # When the block finishes, my_dict['x'] should now be 5 <nl><nl>print(my_dict['x'])","out":"Getting the block of commands that are to be executed in the with statement"}
{"in":"(\".slave-checkbox\")","out":"Selecting all checkboxes in Django"}
{"in":"import tarfile<nl>tar = tarfile.open(\"file.tgz\")<nl>for file in tar.getmembers():<nl><tab>print file.name","out":"Get the directory structure of a tgz file in python"}
{"in":"import matplotlib.pyplot as plt<nl>import numpy<nl><nl>x = numpy.arange(10.)<nl>d = dict((i, numpy.sin(x+i)) for i in range(5))<nl><nl>for k in sorted(d):  # sort purely to make deterministic<nl><tab>plt.plot(x,d[k],label=str(k))<nl><nl>plt.legend(loc=2)<nl>plt.draw()","out":"How does legend() work on a dynamic data set?"}
{"in":"with open('Path\/to\/file', 'r') as content_file:<nl><tab>content = content_file.read()<nl><tab>print(content.count(\"Methadone\"))","out":"Counting the occurence of a specific string in a csv file"}
{"in":"tri_crop[tri_crop == 0] = tri_warp[tri_crop == 0]","out":"Make seamless join on rotated ROI"}
{"in":"import numpy as np<nl><nl>#here y2 is the new extrapolated array<nl>y2 = np.interp(x2,x1,y1)","out":"Extrapolate python array with unequal spacing between elements"}
{"in":"class ConversationManager(models.Manager):<nl><tab>def has_all(self, participants):<nl><tab><tab># Start with all conversations<nl><tab><tab>reducedQs = self.get_query_set()<nl><tab><tab>for p in participants:<nl><tab><tab><tab># Reduce to conversations that have a participant \"p\" <nl><tab><tab><tab>reducedQs = reducedQs.filter(participants__id=p.id)<nl><tab><tab>return reducedQs","out":"Django M2M QuerySet filtering on multiple foreign keys"}
{"in":"import pycurl, json<nl><nl>github_url = 'https:\/\/api.postmarkapp.com\/email'<nl><nl>data = json.dumps({\"From\": \"user@example.com\", \"To\": \"receiver@example.com\", \"Subject\": \"Pycurl\", \"TextBody\": \"Some text\"})<nl><nl>c = pycurl.Curl()<nl>c.setopt(pycurl.URL, github_url)<nl>c.setopt(pycurl.HTTPHEADER, ['X-Postmark-Server-Token: API_TOKEN_HERE','Accept: application\/json'])<nl>c.setopt(pycurl.POST, 1)<nl>c.setopt(pycurl.POSTFIELDS, data)<nl>c.perform()","out":"Convert curl example to pycurl"}
{"in":"def query(id):<nl><tab>for line in file:<nl><tab><tab>table = {}<nl><tab><tab>(table[\"ID\"],table[\"name\"],table[\"city\"]) = line.split(\";\")<nl><tab><tab>if id == int(table[\"ID\"]):<nl><tab><tab><tab> file.close()<nl><tab><tab><tab> return table<nl><tab># ID not found; close file and return empty dict<nl><tab>file.close()<nl><tab>return {}","out":"How to return a dictionary | Python"}
{"in":"thisCell = [ numpy.zeros(shape=(i,j,k)) for t in range(1, Nmax) ]","out":"Matlab cell like structure in python"}
{"in":"base.html","out":"Problem with django urls which have a hyphen in them"}
{"in":"s.get(url)","out":"Python Requests - missing element value"}
{"in":"output = sorted([1] * k + [0] * (n - k), key=lambda k: random.random())","out":"Pythonic random list of booleans of length n with exactly k Trues"}
{"in":"re.findall(\"[A-Za-z]+\", \"Toronto, Ontario, Canada\", 0)[1]<nl>'Ontario'<nl><nl>re.findall(\"[A-Za-z]+\", \"California - LA\", 0)[1]<nl>'LA'","out":"Select substring from an RDD in pyspark"}
{"in":"[{'a':v, 'b':v, 'c':c} <nl><tab>for (l, c) in zip((l_Y, l_Z), ('Y', 'Z')) <nl><tab><tab>for v in l]","out":"combine two lists in a dictionary - python"}
{"in":"l1 = [1,2,3]<nl>l2 = [4,5,6]<nl><nl>newl = []<nl>for item1, item2 in zip(reversed(l1), reversed(l2)):<nl><tab>newl.append(item1)<nl><tab>newl.append(item2)<nl><nl>print newl","out":"Creating new list with values from two prior lists"}
{"in":"fields = ax.stackplot(df.index,df.field1,df.field2)<nl>colors = [field.get_facecolor()[0] for field in fields]<nl>patch1=mpl.patches.Patch(color=colors[0],label= 'field 1')<nl>patch2=mpl.patches.Patch(color=colors[1], label ='field 2')","out":"python matplotlib: add labels and set their colours correctly for a stackplot"}
{"in":"#Initiating Variables for use by importing functions<nl>module_name = 'mymod'<nl>filename = 'action_file'<nl>source = PossibleMatches[0][1] #the source code from the best matched option<nl><nl># define module_name somewhere<nl>import types<nl>module = types.ModuleType(module_name)<nl><nl># source should the code to execute<nl># filename should be a pseudo-filename that the code's from<nl># (it doesn't actually have to exist; it's used for error messages)<nl>code_object = compile(source, filename, 'exec')<nl><nl>#execute the code in the context of the module<nl>exec code_object in module.__dict__<nl><nl>#Executing the 'Main' Function from the code<nl>return module.Main()","out":"Dynamically running python code on google app engine"}
{"in":"#!\/usr\/bin\/python<nl><nl>f = open(\"blah.txt\");<tab>   # open file<nl>for line in f:<tab><tab><tab>  # iterate over lines in file<nl>  line = line.strip()<tab>   # strip leading and trailing white space<nl>  print (\",\" + line + \",\")  # print line between commas<nl>f.close() # close file<tab>  # close file when done","out":"Print beginning and ending with a comma in Python?"}
{"in":"members = QuerySelectMultipleField(query_factory=get_members)","out":"How do I populate many-to-many relationship with WTForms and SQLAlchemy?"}
{"in":"import io<nl>import re<nl>import sys<nl><nl>file = io.StringIO('''<nl>title|Head1|Head2|Head3|head4 <nl>----|------|-----|-----|<nl>1|1150976|0|25300992|bfa92720\/bfa924f8|su|(None, None)<nl>2|1150976|0|25300992|bfa92720\/bfa924f8|su|(None, None)<nl>3|1150976|0|25300992|bfa92720\/bfa924f8|su|(None, None)<nl>4|1150976|0|25300992|bfa92720\/bfa924f8|su|(None, None)<nl>5|1150976|0|25300992|bfa92720\/bfa924f8|su|(None, None)<nl>All|processes:|MemAlloc|=|408125440|(None, None)|0.0.0.0<nl>|(None, None)<nl>0.0.0.0 ,text<nl>''')<nl><nl>sys.stdout.writelines(line for line in file if re.match('\\d+\\|', line))","out":"Python 3: Regex matching 2 seperate conditions"}
{"in":"r = requests.get(\"https:\/\/api.imgur.com\/3\/gallery\/r\/earthporn\/top\/\")","out":"Correct API call to request JSON-formatted data from Imgur?"}
{"in":"import csv<nl>import os<nl><nl>os.chdir(r\"C:\\Users\\Robert\\Documents\\qwe\")<nl><nl>output_ary = []<nl>with open(\"gdweights_feh_robert_cmr.csv\",'rb') as f:<nl><tab>reader = csv.reader(f, delimiter= ',')<nl><tab>zerovar = 0<nl><tab>for row in reader:<nl><tab><tab>if zerovar==0:<nl><tab><tab><tab>zerovar = zerovar + 1<nl><tab><tab>else:<nl><tab><tab><tab>sn = row [11]<nl><tab><tab><tab>zerovar = zerovar + 1<nl><tab><tab><tab>x = float(sn)<nl><tab><tab><tab>if x > 20:<nl><tab><tab><tab><tab>print x<nl><tab><tab><tab><tab>output_ary.append(row)<nl><nl>with open(\"output.csv\",'w') as f2:<nl><tab>for row in output_ary:<nl><tab><tab>for item in row:<nl><tab><tab><tab>f2.write(item + \",\")","out":"How to find specific rows in csv document in python"}
{"in":"import re<nl>import fileinput<nl><nl>#  write concepts which are not not in log<nl><nl>with open(\"log.txt\", 'r') as f,  open(\"substance.txt\", \"r\") as oldfile, open('new_substance.txt', 'w') as newfile:<nl><tab># read f only once and convert it to a list<nl><tab>logList = list(f)<nl><tab># remove everything that exists in f either with a +\\t or a -\\t<nl><tab>withconceptsremoved = [x for x in oldfile if ('-\\t'+x not in logList and '+\\t'+x not in logList)]<nl><tab># convert to string and write to file<nl><tab>withconceptsremoved = \"\".join(withconceptsremoved)<nl><tab>newfile.write(withconceptsremoved)<nl><tab>#  so the new file only has comments which are neither positive or negative in log.  If we now copy positive ones, we've removed the negatives<nl><tab>#  write new additions to bottom of new file <nl><tab>for line in logList:<nl><tab><tab>if '+\\t' in line:<nl><tab><tab><tab>addedconcept = line.replace('+\\t','1\\t')<nl><tab><tab><tab>newfile.write(addedconcept)","out":"python: updating file by finding unique values between two files, and then appending further data to bottom"}
{"in":"background.save(\"result.png\")","out":"PIL paste image without blur"}
{"in":"from traits.api \\<nl><tab>import HasTraits, Button, Range, Float<nl>from traitsui.api \\<nl><tab>import View, Item, Group, RangeEditor<nl>from traitsui.qt4.extra.bounds_editor import BoundsEditor<nl><nl>class Parameters(HasTraits):<nl><tab>rgb_range = Range(0.,1.0)<nl><tab>range1 = rgb_range<nl><tab>range2 = rgb_range<nl><tab>low_val = Float(0.0)<nl><tab>high_val = Float(1.0)<nl><tab>eval_button = Button(\"Eval\")  <nl><nl><tab>traits_view= View(<nl><tab><tab>Item('range1', editor=RangeEditor()),<nl><tab><tab>Item('range2', editor=BoundsEditor(low_name = 'low_val', high_name = 'high_val')),<nl><tab><tab>Item('eval_button'))<nl><nl><nl><tab>def _range1_changed(self, value):<nl><tab><tab>print(value)<nl><nl><tab>def _low_val_changed(self):<nl><tab><tab>print(self.low_val)<nl><nl><tab>def _high_val_changed(self):<nl><tab><tab>print(self.high_val)<nl><nl><tab>def _eval_button_fired(self):<nl><tab><tab>print(self.range1)<nl><tab><tab>print(self.low_val)<nl><tab><tab>print(self.high_val)<nl><nl>if __name__ == '__main__':<nl><tab>alg = Parameters()<nl><tab>alg.configure_traits()","out":"Usage of BoundsEditor in TraitsUI"}
{"in":"import re<nl><nl>js = open(\"yourfile.js\", \"r\").readlines()[:2]<nl><nl>matcher_rex = re.compile(r'^var\\s+(?P<varname>\\w+)\\s+=\\s+\"(?P<varvalue>[\\w\\s]+)\";?$')<nl>for line in js:<nl><tab>matches = matcher_rex.match(line)<nl><tab>if matches:<nl><tab><tab>name, value = matches.groups()<nl><tab><tab>print name, value","out":"Read JavaScript variables from a file with Python"}
{"in":"#Usage: response.set_cookie( 'cookie_name', 'cookie_value' )<nl><nl>class RefererMiddleware(object):<nl><tab>def process_response(self, request, response):<nl><tab><tab>if not request.COOKIES.has_key( 'HTTP_REFERER' ):<nl><tab><tab><tab>response.set_cookie( 'HTTP_REFERER', request.META.get('HTTP_REFERER') )<nl><tab><tab>return response","out":"Django saving HTTP_REFERER to use it as landingpage information"}
{"in":"import multiprocessing<nl>import time<nl><nl>def process(x):<nl><tab>time.sleep(1)<nl><tab>return x<nl><nl>if __name__ == '__main__':<nl><tab>jobs = range(100)<nl><tab>pool = multiprocessing.Pool(20)<nl><tab>for result in pool.imap_unordered(process, jobs):<nl><tab><tab>print(result)<nl><tab>pool.close()<nl><tab>pool.join()","out":"Multiprocessing slots in python"}
{"in":"cb = {}<nl>for link in br.links(url_regex=\"inquiry-results.jsp\"):<nl><tab>cb[link.url] = link<nl>print cb.values()","out":"How to remove duplicates in Links genrated using mechnize in Python?"}
{"in":"import time<nl>import wx<nl><nl>class MyFrame(wx.Frame):<nl><tab>def __init__(self, *args, **kargs):<nl><tab><tab>wx.Frame.__init__(self, *args, **kargs)<nl><tab><tab>self.bt = wx.Button(self)<nl><tab><tab>self.status = ProgressStatusBar(self)<nl><tab><tab>self.sizer = wx.BoxSizer(wx.VERTICAL)<nl><nl><tab><tab>self.Bind(wx.EVT_BUTTON, self.on_bt, self.bt)<nl><nl><tab><tab>self.sizer.Add(self.bt, 1, wx.EXPAND)<nl><tab><tab>self.sizer.Add(self.status, 1, wx.EXPAND)<nl><nl><tab><tab>self.SetSizer(self.sizer)<nl><tab><tab>self.Fit()<nl><tab><tab>self.SetSize((500,200))<nl><nl><tab>def on_bt(self, evt):<nl><tab><tab>\"press the button and it will start\" <nl><tab><tab>for n in range(100):<nl><tab><tab><tab>time.sleep(0.1)<nl><tab><tab><tab>self.status.SetProgress(n)<nl><tab><tab><tab>self.Update()<nl><nl>if __name__ == '__main__':<nl><tab>app = wx.PySimpleApp()<nl><tab>frame = MyFrame(None)<nl><tab>frame.Show()<nl><tab>app.MainLoop()","out":"Progress gauge in status bar, using Cody Precord's ProgressStatusBar"}
{"in":"pairs = int(raw_input(\"How many pairs do you have?\"))<nl>for pair_n in xrange(1, pairs + 1):<nl>  file1 = raw_input(\"pair%d-a: \" % pair_n)<nl>  file2 = raw_input(\"pair%d-b: \" % pair_n)<nl>  cmd = \"samtools merge pair%d.bam '%s' '%s'\" % (pair_n, file1, file2)<nl>  # os.system(cmd) to run the command.","out":"How to generate a sequence of numbers that can later be used in the command lines in python?"}
{"in":"import os<nl>os.chdir('\/foo\/bar')<nl>f = open('foobar.txt', 'r')","out":"reading a file in python from different directory"}
{"in":"def find_root(f, a, b, EPS=0.0001):<nl>  if f(a)==0 : return a<nl>  if f(b)==0 : return b<nl>  if f(a)*f(b)>0 : return None<nl>  c=(a+b)\/2<nl>  while(abs(f(c))>EPS) :<nl><tab>if f(a)*f(c)<0 : b=c<nl><tab>else : a=c<nl><tab>c=(a+b)\/2<nl>  return c","out":"How to find a root for a mathematical function using Intermediate value theorem?"}
{"in":"def gen_command_string(path, url):<nl><tab>cmd = path + 'TortoiseProc.exe \/command:ignore \/path:\\\"%s\\\" \/closeonend:0' % url<nl><tab>return cmd<nl><nl>SVN_PATH = 'C:\/Program Files\/TortoiseSVN\/bin'<nl>HG_PATH = 'C:\/Program Files\/TortoiseHg\/bin\/'<nl><nl>cmd = gen_command_string(SVN_PATH, 'http:\/\/google.com')<nl>call(cmd)","out":"How can I get a python script to find the right Tortoise.exe if I have multiple Tortoise clients (Git, SVN) installed?"}
{"in":"file_name = files.blobstore.create(mime_type='image\/png',_blobinfo_uploaded_filename=file_name_from_url)","out":"How to set filename property in BlobStore?"}
{"in":"import collections<nl>import heapq<nl><nl>Node = collections.namedtuple('Node', ['v', 'children'])<nl><nl>def min_depth_bfs(root):<nl><tab>todo = [(1, root)]<nl><tab>while todo:<nl><tab><tab>depth, node = heapq.heappop(todo)<nl><tab><tab>if not node.children: return depth, node<nl><tab><tab>for c in node.children:<nl><tab><tab><tab>heapq.heappush(todo, (depth + 1, c))<nl><nl>def min_depth_dfs(node):<nl><tab>if not node.children: return 1, node<nl><tab>d, n = min(min_depth_dfs(c) for c in node.children)<nl><tab>return 1 + d, n<nl><nl>example = Node(8, [Node(3, [Node(1, [])]), Node(10, [])])<nl><nl>print min_depth_dfs(example)<nl>print min_depth_bfs(example)","out":"how to caculate the minimum depth of binary tree"}
{"in":"batchIDlist = []<nl><nl>for s3_file in bucket.list(prefix='Download\/test_queue1\/'):<nl><tab>batchID = str((s3_file.name).split(\"\/\"))[32:-13]<nl><nl><tab>if batchID not in batchIDlist:<nl><tab><tab>batchIDlist.append(batchID)","out":"How to get a unique list of objects from AWS S3 bucket"}
{"in":"d=np.array(dataPoints.tolist())","out":"Converting nested lists of data into multidimensional Numpy arrays"}
{"in":"tabsplit=line.split()","out":"splitting file and how to access certain index python"}
{"in":"def altElement(a):<nl><tab>return a[::2]","out":"Skipping every other element after the first"}
{"in":"scipy.stats.f_oneway(*archive.values())","out":"Running scipy's oneway anova in a script"}
{"in":"class decorator(object):<nl><tab>def __init__(self, functor):<nl><tab><tab>self.functor = functor<nl><nl><tab><tab>#  lets copy some key attributes from the original function<nl><tab><tab>self.__name__ = functor.__name__<nl><tab><tab>self.__doc__ = functor.__doc__<nl><nl><tab>def __call__(self, *args, **kwargs):<nl><tab><tab>return self.functor(*args, **kwargs)<nl><nl><tab>def __repr__(self):<nl><tab><tab>return '<function %s created by ...>' % self.functor.__name__<nl><nl><nl>@decorator<nl>def f():<nl><tab>return 'spam'<nl><nl><nl>print f()  # spam<nl>print repr(f)  # <function hehe created by ...>","out":"How do I change the representation of a Python function?"}
{"in":"tup = (2009, 3, 23, 13, 6, 34, 0, 82, 0)<nl>import datetime <nl>d = datetime.datetime(*(tup[0:6]))<nl>#two equivalent ways to format it:<nl>dStr = d.isoformat(' ')<nl>#or<nl>dStr = d.strftime('%Y-%m-%d %H:%M:%S')","out":"Python, Convert 9 tuple UTC date to MySQL datetime format"}
{"in":"data = [{\"name\": \"John\", \"age\": \"20\", \"occupation\": \"Python pro\"}, \\<nl><tab><tab>{\"name\": \"Jack\", \"age\": \"80\", \"occupation\": \"Olympic Athlete\"}, \\<nl><tab><tab>{\"name\": \"John\", \"age\": \"20\", \"occupation\": \"Student\"}]<nl><nl>new_data = []<nl>names_ages = set([])<nl>for d in data:<nl><tab>name_age = (d[\"name\"], d[\"age\"])<nl><tab>if name_age not in names_ages:<nl><tab><tab>new_data.append(d)<nl><tab>names_ages.add(name_age)<nl><nl>print new_data<nl># [{'age': '20', 'name': 'John', 'occupation': 'Python pro'},<nl>#  {'age': '80', 'name': 'Jack', 'occupation': 'Olympic Athlete'}]","out":"List of dictionaries that should be filtered by certain values"}
{"in":"print(\"Sisesta isikukood\")<nl>isikukood = str(input())<nl><nl>if (isikukood[:1] == '1' or isikukood[:1] == '3' or isikukood[:1] == '5'):<nl><tab>print(\"He\")<nl>elif isikukood[:1] == '2' or isikukood[:1]== '4' or isikukood[:1] == '6':<nl><tab>print(\"She\")<nl>else:<nl><tab>print(\"Vale isikukood\")","out":"Read first number of user input"}
{"in":"class Abc(object):<nl><tab>pass<nl><nl>def new_funct(self):<nl><tab>print 1234<nl><nl>Abc.instance_funct = new_funct<nl>a = Abc()<nl>a.instance_funct()","out":"Python: How to extend a class?"}
{"in":"import maya.cmds as mc<nl><nl>Shader = mc.ls(type = 'surfaceShader')<nl>for i in Shader:<nl><tab>con = mc.listConnections('%s.outColor' % i)<nl><tab>names = mc.listConnections(con, type=\"mesh\")<nl><tab>print i, \"->\", \", \".join(names)","out":"Getting the name of the mesh that shader was assigned to"}
{"in":"import numpy as np<nl>data = np.random.randn(3000000,50)<nl>newData = data.reshape(300,10000,50) # This is as [300,10000,50] array<nl><nl>print newData[0,...] # Show the first matrix, 1 of 300","out":"Converting 2d array into 3d array in python"}
{"in":"id_array = [x.id for x in _get_object_array() if x.id % 2 == 0]","out":"Python for loop with condition"}
{"in":"import pandas as pd<nl>DF = pd.DataFrame({'COL1': [1.0,2.0,\"A\"]})<nl><nl>def ToInt(x):<nl><tab>try:<nl><tab><tab>x = int(x)<nl><tab>except:<nl><tab><tab>pass<nl><tab>return x<nl><nl>DF.index = [ToInt(x) for x in DF.COL1]<nl>DF","out":"Set Index as Integers with Mixed Types"}
{"in":"keys_to_print = ['1', '3', '20', '23', '45', '46']<nl>for key in keys_to_print:<nl><tab>print d[key] + ' ',","out":"What's the easiest way to print seleced key values from dictionary in python"}
{"in":"def testOne(self):<nl><tab>\"\"\"Test IsOdd(1)\"\"\"<nl><tab>self.failUnless(IsOdd(1))<nl><nl>def testTwo(self):<nl><tab>\"\"\"Test IsOdd(2)\"\"\"<nl><tab>self.failIf(IsOdd(2))","out":"Python unittest, how to display a better group\/test name?"}
{"in":"import bugzilla<nl>bz = bugzilla.Bugzilla(url=\"https:\/\/bugzilla.kernel.org\")<nl><nl>print bz._proxy.Bug.fields({\"names\" : [\"rep_platform\"]})","out":"how to retrieve field values from python-bugzilla xml-rpc"}
{"in":"sorted(set(s[a:b] for a in range(n) for b in range(a+1,n+1)),<nl><tab>   key=lambda x:(len(x),x))","out":"Python sorting : sub strings"}
{"in":"x=[\"123\",\"456.678\",\"abc.def.ghi\"]<nl>[y.rsplit(\".\",1)[0] for y in x]","out":"String Manipulation of All Elements of an Array in Python"}
{"in":"string1.rstrip(\"-\")<nl># \"title\"<nl>string2.rstrip(\"-\")<nl># \"title\"<nl>string3.rstrip(\"-\")<nl># \"title-is-a-title\"","out":"How can I remove all trailing dashes from a string?"}
{"in":"filter_stmt.append(func.text(Multicast.addr).like(stmt))","out":"Search on non-text column in flask-admin"}
{"in":"# importing numpy as np and<nl># assign a ndarray to x<nl>ind = np.nonzero(x)[-k:]","out":"MATLAB find function translate to python - 3 input arguments version"}
{"in":"def extract_data_one():<nl><tab>for item in sites:<nl><tab><tab>os.chdir(r\"\\\\svr-dc\\ftp site\\%s\\Daily\" % item)<nl><tab><tab>subprocess.call(['7z', 'e', 'data1.zip', '*.*'])","out":"7z will not find archive using subprocess"}
{"in":"df.to_csv(path, mode='a')","out":"Concatenate rows of data to new dataframe in Pandas"}
{"in":"{<nl><tab><tab>\"_id\" : {<nl><tab><tab><tab><tab>\"value\" : 1<nl><tab><tab>},<nl><tab><tab>\"value\" : 3<nl>}","out":"Integer as key for Map Reduce in Mongodb"}
{"in":"import random<nl>import sys<nl><nl>def random_line(file_handle):<nl><tab>lines = file_handle.readlines()<nl><tab>num_lines = len(lines)<nl><nl><tab>random_line = None<nl><tab>while not random_line:<nl><tab><tab>random_line_num = random.randint(0, num_lines - 1)<nl><tab><tab>random_line = lines[random_line_num]<nl><tab><tab>random_line = random_line.strip()<nl><nl><tab>return random_line<nl><nl>file_handle = None<nl><nl>if len(sys.argv) < 2:<nl><tab>sys.stderr.write(\"Reading stdin<nl>\")<nl><tab>file_handle = sys.stdin<nl>else:<nl><tab>file_handle = open(sys.argv[1])<nl><nl>print(random_line(file_handle))<nl><nl>file_handle.close()","out":"Function to randomly read a line from a text file"}
{"in":"def generate_primes(n):<nl>  from math import sqrt<nl>  primes=[]<nl>  potentialPrimes=range(2,n+1)<nl>  prime=potentialPrimes[0]<nl>  while prime<sqrt(n):<nl><tab>  primes.append(prime)<nl><tab>  potentialPrimes.remove(prime)<nl><tab>  for potential in potentialPrimes:<nl><tab><tab>  if potential%prime==0:<nl><tab><tab><tab>  potentialPrimes.remove(potential)<nl><tab>  prime=potentialPrimes[0]<nl><nl>  for potential in potentialPrimes:<nl><tab>  primes.append(potential)<nl>  for number in primes:<nl><tab>  print number","out":"Trying to generate primes from 1 - n, but consistently is missing primes 3 and 5.?"}
{"in":"def getPoints(connectionList):<nl><tab>firstConnection = connectionList[0]<nl><tab>points = [firstConnection[1][1]]<nl><tab>lastLine = firstConnection[1][0]<nl><nl><tab>connectionList.remove(firstConnection)<nl><nl><tab>while len(connectionList):<nl><tab><tab>for connection in list(connectionList):<nl><tab><tab><tab>(line1, p1), (line2, p2) = connection<nl><tab><tab><tab>if lastLine == line1 or lastLine == line2:<nl><tab><tab><tab><tab>points.append(p1)<nl><tab><tab><tab><tab>lastLine = line1 if lastLine == line2 else line2<nl><tab><tab><tab><tab>connectionList.remove(connection)<nl><tab><tab><tab><tab>break<nl><tab>return points","out":"Searching and matching objects through tuples, list of lists"}
{"in":"# not fair<nl>serving = 'A'<nl><nl># note: we assume probA + probe == 1.0<nl><nl># initial serving is decided by players' skill<nl>serving = 'A' if probA > random() else 'B'<nl><nl># or, initial serving is decided by a coin<nl>serving = 'A' if 0.5 > random() else 'B'","out":"I use random() in a code to calcuate the times to win, but the result is as expected"}
{"in":"line = line.decode('unicode_escape').encode('latin-1').decode('utf8')","out":"Read hex characters and convert them to utf-8 using python 3"}
{"in":"nx,ny = smallerArray.shape<nl>largeArray[0:nx,0:ny] = smallerArray[0:nx,0:ny]","out":"Python - Copying into Numpy Array of set size"}
{"in":"logging.info('Altitude:%s' % gpsd.fix.altitude)","out":"How do I log text and a variable in the same line in Python?"}
{"in":"# -*- coding: utf-8 -*-<nl>import curses<nl><nl>screen = curses.initscr()<nl>curses.noecho()<nl>curses.mousemask(curses.ALL_MOUSE_EVENTS)<nl><nl>screen.keypad(1)<nl><nl>char = \"\"<nl><nl>try:<nl><tab>while True:<nl><tab><tab>char = screen.getch()<nl><nl><tab><tab>screen.addstr( str(char) + \" \")<nl><tab><tab>if char == curses.KEY_MOUSE:<nl><tab><tab><tab>screen.addstr (\" |\" + str(curses.getmouse()) + \"| \")<nl><nl>finally:<nl><tab>screen.keypad(0)<nl><tab>curses.endwin()<nl><nl><tab>curses.echo()","out":"A slider for curses based UI"}
{"in":"dictionary = {'a':'n', 'b':'o', 'c':'p',<nl><tab><tab><tab> 'd':'q', 'e':'r', 'f':'s',<nl><tab><tab><tab> 'g':'t','h':'u','i':'v',<nl><tab><tab><tab> 'j':'w', 'k':'x','l':'y',<nl><tab><tab><tab> 'm':'z','n':'a','o':'b',<nl><tab><tab><tab> 'p':'c','q':'d','r':'e',<nl><tab><tab><tab> 's':'f','t':'g','u':'h',<nl><tab><tab><tab> 'v':'i', 'w':'j','x':'k',<nl><tab><tab><tab> 'y':'l','z':'m'}<nl><nl>def rot(xy):<nl><tab>rot13 = ''<nl><tab>for c in xy:<nl><tab><tab>if c.islower():<nl><tab><tab><tab>rot13 += dictionary.get(c)<nl><tab><tab>if c.isupper():<nl><tab><tab><tab>c = c.lower()<nl><tab><tab><tab>rot13 += dictionary.get(c).capitalize()<nl><tab><tab>if c not in dictionary:<nl><tab><tab><tab>rot13 += c<nl><tab>print \"ROTTED: \", rot13  <nl><tab>return rot13","out":"How to re-work this ROT13 Function"}
{"in":"list.sort(key=lambda x: x[0][1])","out":"Python how to sort a list with list elements"}
{"in":"#!\/usr\/bin\/python<nl>import csv<nl><nl>with open('text_file.txt') as input_file:<nl><tab>csv_data = []<nl><nl><tab>for row in csv.reader(input_file, delimiter=','):<nl><tab><tab>csv_data += [[row[0], int(row[1].strip()) + 10]]<nl><nl><tab>convert_to_csv = True<nl><nl><tab>if convert_to_csv:<nl><tab><tab>with open('input.csv', 'w') as output_file:<nl><tab><tab><tab>csv_file = csv.writer(output_file, delimiter=',')<nl><tab><tab><tab>csv_file.writerow(['Text', 'Count'])<nl><nl><tab><tab><tab>for row in csv_data:<nl><tab><tab><tab><tab>csv_file.writerow(row)","out":"CSV calculation with Python. Get data from list"}
{"in":"while True: <nl><tab>sleep_now = False<nl><tab>try:<nl><tab><tab>print \"WRITER:Getting\"<nl><tab><tab>line,offset = self.queue.get(True, 5)<nl><tab><tab>#Process the line just read<nl><tab><tab>proc_line = self.process_line(line)<nl><tab><tab>if proc_line: <nl><tab><tab><tab>#Must write it to DB. Put it into DB Queue<nl><tab><tab><tab>if self.dbqueue.full(): <nl><tab><tab><tab><tab>#DB Queue is full, put data into DB before putting more data<nl><tab><tab><tab><tab>self.empty_dbqueue()<nl><tab><tab><tab>self.dbqueue.put(proc_line)<nl><tab><tab><tab>#Keep a track of the maximum offset in the queue<nl><tab><tab><tab>self.queue_offset = offset if offset > self.queue_offset else self.queue_offset<nl><tab>except Queue.Empty: <nl><tab><tab>#Looks like writing queue is empty. Just check if DB Queue is empty too<nl><tab><tab>print \"WRITER: Empty Read Queue\"<nl><tab><tab>self.empty_dbqueue()","out":"File Processor using multiprocessing"}
{"in":"url = 'http:\/\/webapps.rrc.state.tx.us\/CMPL\/viewPdfReportFormAction.do?method=cmplP4FormPdf&packetSummaryId=97770'<nl><nl>req = urllib2.Request(url)<nl>req.add_unredirected_header('User-Agent', 'Mozilla\/5.0')<nl><nl>file_pointer = urllib2.urlopen(req)<nl>print file_pointer.getcode()<nl>print file_pointer.geturl();","out":"Trying to download page in python with urllib2 and requests but keep getting redirected"}
{"in":"GAE_SETTINGS_MODULES = (<nl><tab>'maps.gae_models_settings',<nl>)","out":"django non-rel \/ Managing per-field indexes on App Engine"}
{"in":"with open(\"test.csv\",\"wa\") as f:<nl><tab>f.write(\"name\\tnum<nl>\")<nl><tab>for k, v in tripo.items():<nl><tab><tab>if v:<nl><tab><tab><tab>f.write(\"1\\t\")<nl><tab><tab><tab>f.write(\"{}<nl>\".format(k.split('.')[0]))<nl><tab><tab><tab>for s in v:<nl><tab><tab><tab><tab>f.write(\"1\\t{}<nl>\".format(s.split('.')[0]))","out":"How to add new column to output file in Python?"}
{"in":"list3=list1[:10]+list2[:20]","out":"Get elements from list in python"}
{"in":"#!\/usr\/bin\/python<nl>a = []<nl>b = []<nl>nums = raw_input(\"Enter input- \")<nl>#append all to a list<nl>for n in nums.split():<nl><tab>n = int(n)<nl><tab>if n < 0:<nl><tab><tab>break<nl><tab>a.append(n)<nl><nl>#get the maximums<nl>b = list(a)<nl>first_max = max(b)<nl>b.remove(first_max)<nl>second_max = max(b)<nl>b.remove(second_max)<nl>third_max = max(b)<nl><nl>#get the minimums<nl>b = list(a)<nl>first_min = min(b)<nl>b.remove(first_min)<nl>second_min = min(b)<nl>b.remove(second_min)<nl>third_min = min(b)<nl><nl>## now swap <nl>xMax, yMax, zMax = a.index(first_max), a.index(second_max), a.index(third_max)<nl>xMin, yMin, zMin = a.index(first_min), a.index(second_min), a.index(third_min)<nl>a[xMax], a[xMin] = a[xMin], a[xMax]<nl>a[yMax], a[yMin] = a[yMin], a[yMax]<nl>a[zMax], a[zMin] = a[zMin], a[zMax]<nl><nl>print a","out":"How to swap maximums with the minimums? (python)"}
{"in":"z=urlopen(url).read().decode('utf-8')<nl>self.feed(z)","out":"This code works running from Aptana but fails in python HTMLParser"}
{"in":"from twython import Twython<nl><nl>twitter = Twython()<nl>followers = twitter.get_followers_ids(screen_name = \"ryanmcgrath\")<nl><nl>for follower_id in followers:<nl><tab>print \"User with ID %d is following ryanmcgrath\" % follower_id","out":"How to get twitter followers using Twython?"}
{"in":"sys.setrecursionlimit(n)","out":"How safe is recursion in Python?"}
{"in":"x = '123 Main St'<nl>y = '123 MAIN ST'<nl><nl>new_x = x.lower()<nl>new_y = y.lower()<nl><nl><nl><nl>if new_x == new_y :<nl>   print \"correct\"<nl>else:<nl>   print \"incorrect\"","out":"Compare addresses pulled from an XML document in different formats"}
{"in":"logging.basicConfig(filename='test.log', format='[%(levelname)s] %(message)s', level=logging.DEBUG)","out":"python logging format: how to add bracket"}
{"in":"import threading<nl><nl>class Test:<nl><tab>def printit(self):<nl><tab><tab>print(\"hello world\")<nl><tab><tab>threading.Timer(5.0, self.printit).start()<nl><nl>test = Test()<nl>test.printit()","out":"Run a class-method every n seconds"}
{"in":"logging.config.dictConfig(yaml.load(open('logging.yaml', 'r')))","out":"How to logging with timed rotate file handler in Tornado?"}
{"in":"print (\"ln(x) at \", x, \"is: \", lnx)","out":"Beginner looking for help for printing in python"}
{"in":"def test2():<nl><tab>\"\"\"Test with a subfunction.\"\"\"<nl><tab>exec 'print \"hi from test2\"' in globals(), locals()<nl><tab>def subfunction():<nl><tab><tab>return True","out":"In Python, why doesn't exec work in a function with a subfunction?"}
{"in":"string = letters[0]<nl>listInDesiredFormat = string.replace('\\'', '').split(', ')","out":"Convert a string literal into a list of strings"}
{"in":"import urllib<nl>from multiprocessing import Process, Queue<nl><nl>def worker(input, output):<nl>  for func, args in iter(input.get, 'STOP'):<nl><tab>result = func(*args)<nl><tab>output.put(result)<nl><nl>def find_on_page(num):<nl>  uri = 'http:\/\/www.example.com\/index.php?id=%d' % num<nl>  f = urllib.urlopen(uri)<nl>  data = f.read()<nl>  f.close()<nl>  index = data.find('datahere:') # obviously use your own methods<nl>  if index < 0:<nl><tab>return None<nl>  else:<nl><tab>return data[index:index+20]<nl><nl>def main():<nl>  NUM_PROCESSES = 4<nl>  tasks = [(find_on_page, (i,)) for i in range(99999)]<nl>  task_queue = Queue()<nl>  done_queue = Queue()<nl>  for task in tasks:<nl><tab>task_queue.put(task)<nl>  for i in range(NUM_PROCESSES):<nl><tab>Process(target=worker, args=(task_queue, done_queue)).start()<nl>  for i in range(99999):<nl><tab>print done_queue.get()<nl>  for i in range(NUM_PROCESSES):<nl><tab>task_queue.put('STOP')<nl><nl>if __name__ == \"__main__\":<nl>  main()","out":"C++ or Python: Bruteforcing to find text in many webpages"}
{"in":"class UploadPincode(models.Model):<nl><tab>added_on = models.DateField(auto_now_add=True)<nl><tab>pincode_file = models.FileField(<nl><tab><tab>upload_to=\"Pincodes\/\", verbose_name=\"Pincode Excel file (.xls,xlsx)\", blank=False, null=False)<nl><nl><tab>def save(self):<nl><tab><tab>print \"Before Save #######\"<nl><nl><tab><tab>super(UploadPincode, self).save()<nl><tab><tab>print \" Save #######\"<nl><nl><tab><tab>pincode_process(self.pincode_file.url)<nl><nl><nl><tab>def __unicode__(self):<nl><tab><tab>return str(self.added_on)<nl><nl><nl><nl>def pincode_process(pincode_file=None):<nl><nl><tab>print \"Pincode Adding ##########################\",pincode_file,pincode_file[1:]<nl><nl><nl><tab>book = open_workbook(pincode_file[1:])<nl><tab>for j in range(0, book.nsheets - 1):<nl><tab><tab>sheet = book.sheet_by_index(j)<nl><tab><tab>for i in range(sheet.nrows):<nl><tab><tab><tab>if i != 0:<nl><tab><tab><tab><tab>a = sheet.row_values(i)<nl><tab><tab><tab><tab>int_pin = int(a[0])<nl><tab><tab><tab><tab>Pincode(pincode=str(int_pin)).save()<nl><nl><tab>return True","out":"How to Process Uploaded file in Django Model save method"}
{"in":"actors = [item.text for item in soup.findAll('span', {\"itemprop\":\"actor\"})]<nl>print \"Actors: %s\" % (\", \".join(actors))","out":"How to for-loop output in python?"}
{"in":"# ...<nl>app = Flask(__name__)<nl># ...<nl>from fresque import filters","out":"Unusual behavior of jinja2 template_filter decorator in flask application"}
{"in":"print '7\\xe6\\x9c\\x8810\\xe6\\x97\\xa5'.decode('utf-8')","out":"Python prints result as '7\\xe6\\x9c\\x8810\\xe6\\x97\\xa5', but I want '7?10?'"}
{"in":"import pyglet<nl>from pyglet.window import mouse<nl><nl>window = pyglet.window.Window()<nl><nl>@window.event<nl>def on_draw():<nl><tab>pass<nl><nl><nl>@window.event<nl>def on_mouse_drag(x, y, dx, dy, buttons, modifiers):<nl><tab>pyglet.graphics.draw(4, pyglet.gl.GL_QUADS, ('v2f', [x, y, x-dx, y, x-dx, y-dy, x, y-dy]))<nl><tab>print x, y, dx, y, dx, dy, x, dy<nl>pyglet.app.run()","out":"Drawing a rectangle around mouse drag Pyglet"}
{"in":"import SendKeys<nl><nl>SendKeys.SendKeys(\"\"\"<nl>{CAPSLOCK}<nl>{SCROLLOCK}<nl>{NUMLOCK}<nl>\"\"\")","out":"Change keyboard locks in Python"}
{"in":"file_obj.seek(0)","out":"Django store uploaded file in S3"}
{"in":"window.delch([y, x])","out":"How to clear string in a specific coordinate range in ncurses?"}
{"in":"def strip_string(string, to_strip):<nl><tab>if to_strip:<nl><tab><tab>while string.startswith(to_strip):<nl><tab><tab><tab>string = string[len(to_strip):]<nl><tab><tab>while string.endswith(to_strip):<nl><tab><tab><tab>string = string[:-len(to_strip)]<nl><tab>return string","out":"Strip an ordered sequence of characters from a string"}
{"in":"import re<nl><nl>filename = \"file.txt\"<nl>regex = re.compile(r'(memcpy\\s*\\(\\s*buffer\\s*,\\s*\")\\s*(\"\\s*,\\s*64\\s*)')<nl>with open(filename) as in_file:<nl><tab>in_buffer = in_file.readlines()<nl><nl>data = \"foo bar\"<nl>with open(filename, \"w\") as out_file:<nl><tab>for line in in_buffer:<nl><tab><tab>out_file.write(regex.sub(r'\\g<1>'+data+'\\g<2>', line))","out":"How to insert a specific string into a specific location of a specific line in a file using a Python script?"}
{"in":"return ''.join(sorted(comb_))","out":"Sorting elements in string with Python"}
{"in":"import StringIO<nl><nl>pa.read_csv(StringIO.StringIO(lines.join('<nl>')))","out":"Load data from a list of lines using pandas"}
{"in":"from bottle import static_file<nl>@route('\/static\/<filename>')<nl>def server_static(filename):<nl><tab>return static_file(filename, root='\/path\/to\/your\/static\/files')","out":"How to return an html file in bottle server?"}
{"in":"name = \"frame%d.jpg\"%count<nl>cv2.imwrite(name, frame)<tab> # save frame as JPEG file","out":"Save Video as Frames OpenCV{PY}"}
{"in":"import csv<nl>with open('output.csv', 'wb') as fout:<nl><tab>csvout = csv.writer(fout)<nl><tab>for row in a['rows']:<nl><tab><tab>csvout.writerow( [row['id']] + row['cell'] )","out":"how to convert dictionary into csv file"}
{"in":"with open('test.txt') as f:<nl><tab>for line in f:<nl><tab><tab>nextLine = next(f)<nl><tab><tab>if 'A' == line.strip():<nl><tab><tab><tab>print nextLine","out":"Read next line in Python"}
{"in":"old_headings = [old_freestream_headings] * 2 + [old_integral_headings] + [old_forces_headings] * 5","out":"Python: multiple copies of a string in a list"}
{"in":"import time<nl>with open(file) as f:<nl><tab>for line in f:<nl><tab><tab>identifier, t0, score, date, hour = line.split()<nl><nl><tab><tab># You can also get a time_struct from the time<nl><tab><tab>timer = time.strptime(date + hour, \"%d\/%m\/%Y%H:%M:%S\")","out":"python read data from file"}
{"in":"self.crackButton.bind('<ButtonRelease-1>', lambda e: self.crack(Filenamelist, forceclick))","out":"Python\/Tkinter force wait on button click"}
{"in":"from traceback import format_exception<nl><nl>def excepthook(self, type_, value, traceback):<nl><tab>print format_exception(type_, value, traceback)<nl><nl>sys.excepthook = self.excepthook","out":"Print original exception in excepthook"}
{"in":"import gtk<nl><nl>def keypress(win, event):<nl><tab>if event.keyval == gtk.keysyms.F11:<nl><tab><tab>win.is_fullscreen = not getattr(win, 'is_fullscreen', False)<nl><tab><tab>action = win.fullscreen if win.is_fullscreen else win.unfullscreen<nl><tab><tab>action()<nl><tab><tab>label.set_visible(not win.is_fullscreen)<nl><nl>win = gtk.Window()<nl>win.connect(\"delete-event\", gtk.main_quit)<nl>win.connect('key-press-event', keypress)<nl>image = gtk.image_new_from_stock(gtk.STOCK_ABOUT, gtk.ICON_SIZE_DIALOG)<nl>label = gtk.Label(('test ' * 20 + '<nl>') * 20)<nl>vbox = gtk.HBox()<nl>vbox.add(label)<nl>vbox.add(image)<nl>win.add(vbox)<nl>win.show_all()<nl>gtk.main()","out":"How to change the layout of a Gtk application on fullscreen?"}
{"in":"import sys<nl>import inspect<nl><nl>def f1():<nl><tab>\"f1!\"<nl><tab>pass<nl>def f3():<nl><tab>\"f3!\"<nl><tab>pass<nl>def f2():<nl><tab>\"f2!\"<nl><tab>pass<nl><nl>funcs = [elt[1] for elt in inspect.getmembers(sys.modules[__name__],<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>  inspect.isfunction)]<nl>ordered_funcs = sorted(funcs, key=lambda f: f.__code__.co_firstlineno)<nl>for f in ordered_funcs:<nl><tab>print(f.__doc__)","out":"List of Python functions, in their order of definition in the module"}
{"in":"run('mysql -u %s -p%s -e \"grant all on %s.* to \\'%s\\'@\\'localhost\\' identified by \\'PASSWORD\\'\"' % (user, dbpasswd, account, account))","out":"mysql user privileges with fabric python regex"}
{"in":"total = sum(int(v) for name,v in table)","out":"Finding a sum in nested list using a lambda function"}
{"in":"db.collection.update(<nl>   {\"charachters.char_name\": \"Testarion\"},<nl>   {\"$push\": {\"charachters.$.parties\": \"party_user\"}})","out":"MongoDB update an array element matching a condition using $push"}
{"in":"self.setAttribute(QtCore.Qt.WA_DeleteOnClose)","out":"QTimer persists after QMainWindow is closed"}
{"in":"import traceback<nl><nl>traceback.print_stack()","out":"Print stacktrace without throwing exception"}
{"in":"CTemp = str(12.34) #set for testing<nl>text = \"The temp is: \"+CTemp<nl><nl>msg = MIMEText(text)","out":"Send an email in Python and include a vaiable in the subject line"}
{"in":"from tornado.ioloop import IOLoop<nl>from tornado import gen<nl>from tornado.httpclient import AsyncHTTPClient<nl>from toro import Queue<nl><nl>q = Queue(maxsize=1)<nl><nl><nl>@gen.coroutine<nl>def consumer():<nl><tab>item = yield q.get()<nl><tab>while item:<nl><tab><tab>print item<nl><tab><tab>item = yield q.get()<nl><nl><nl>@gen.coroutine<nl>def producer():<nl><tab>try:<nl><tab><tab>client = AsyncHTTPClient()<nl><tab><tab>for url in [<nl><tab><tab><tab><tab>'http:\/\/tornadoweb.org',<nl><tab><tab><tab><tab>'http:\/\/python.org',<nl><tab><tab><tab><tab>'http:\/\/readthedocs.org']:<nl><tab><tab><tab>response = yield client.fetch(url)<nl><tab><tab><tab>item = (url, len(response.body))<nl><tab><tab><tab>yield q.put(item)<nl><nl><tab><tab># Done.<nl><tab><tab>q.put(None)<nl><tab>except Exception:<nl><tab><tab>IOLoop.current().stop()<nl><tab><tab>raise<nl><nl>future = producer()<nl>IOLoop.current().run_sync(consumer, timeout=20)","out":"Write a tornado coroutine that also yields normal values"}
{"in":"gevent.spawn(daemon.requestLoop)","out":"How can I use Pyro with gevent?"}
{"in":"datetime.datetime.now().strftime(\"%H:%M:%S.%f\")","out":"Using %f with strftime() in Python to get microseconds"}
{"in":"gameDisplay.fill(your_color_tuple)<nl><nl># afterwards add your drawing code","out":"Replace Text On Pygame Window"}
{"in":"print [item for item in dir(adfix) if not item.startswith(\"__\")]","out":"How to get a list of variables in specific Python module?"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl>x = np.array([0,1,2,3,4,5,6])<nl>y = np.array([0,2,0,4.5,0.5,2,3])<nl><nl>line = plt.plot(x,y,'o')[0]<nl>line.set_clip_on(False)<nl>plt.show()","out":"plotting markers on top of axes"}
{"in":"Book.objects.all().delete()","out":"How do I TRUNCATE TABLE using Django orm?"}
{"in":"import os<nl><nl>def doc_to_text_catdoc(filename):<nl><tab>(fi, fo, fe) = os.popen3('catdoc -w \"%s\"' % filename)<nl><tab>fi.close()<nl><tab>retval = fo.read()<nl><tab>erroroutput = fe.read()<nl><tab>fo.close()<nl><tab>fe.close()<nl><tab>if not erroroutput:<nl><tab><tab>return retval<nl><tab>else:<nl><tab><tab>raise OSError(\"Executing the command caused an error: %s\" % erroroutput)<nl><nl># similar doc_to_text_antiword()","out":"Best way to extract text from a Word doc without using COM\/automation?"}
{"in":"def view2(request):<nl><tab>if request.method == 'POST':<nl><tab><tab>page_list=request.POST.values()<nl><tab>else:<nl><tab><tab>HttpResponseRedirect('\/urls\/')","out":"how to pass a list between views in django"}
{"in":"with open('file.csv') as f:<nl><tab>f.readline() # ignore first line (header)<nl><tab>mydict = dict(csv.reader(f, delimiter=','))<nl><nl>print mydict","out":"how to convert csv into dict format"}
{"in":"import socket<nl>import struct<nl>address = (\"10.0.0.12\", 5000)<nl>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<nl>s.bind(address)<nl>s.listen(1000)<nl><nl><nl>client, addr = s.accept()<nl>print 'got connected from', addr<nl><nl>buf = ''<nl>while len(buf)<4:<nl><tab>buf += client.recv(4-len(buf))<nl>size = struct.unpack('!i', buf)<nl>print \"receiving %s bytes\" % size<nl><nl>with open('tst.jpg', 'wb') as img:<nl><tab>while True:<nl><tab><tab>data = client.recv(1024)<nl><tab><tab>if not data:<nl><tab><tab><tab>break<nl><tab><tab>img.write(data)<nl>print 'received, yay!'<nl><nl>client.close()","out":"Python socket server receive image"}
{"in":"import os<nl>os.write(fd, os.linesep)","out":"How to write native newline character to a file descriptor in Python?"}
{"in":"df.to_pickle(file_name)","out":"Serialization of a pandas DataFrame"}
{"in":"import scipy.signal<nl>import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl>im = plt.imread('example.jpg')<nl>im \/= 255.   # normalise to 0-1, it's easier to work in float space<nl><nl># make some kind of kernel, there are many ways to do this...<nl>t = 1 - np.abs(np.linspace(-1, 1, 21))<nl>kernel = t.reshape(21, 1) * t.reshape(1, 21)<nl>kernel \/= kernel.sum()   # kernel should sum to 1!  :) <nl><nl># convolve 2d the kernel with each channel<nl>r = scipy.signal.convolve2d(im[:,:,0], kernel, mode='same')<nl>g = scipy.signal.convolve2d(im[:,:,1], kernel, mode='same')<nl>b = scipy.signal.convolve2d(im[:,:,2], kernel, mode='same')<nl><nl># stack the channels back into a 8-bit colour depth image and plot it<nl>im_out = np.dstack([r, g, b])<nl>im_out = (im_out * 255).astype(np.uint8) <nl><nl>plt.subplot(2,1,1)<nl>plt.imshow(im)<nl>plt.subplot(2,1,2)<nl>plt.imshow(im_out)<nl>plt.show()","out":"Image smoothing in Python"}
{"in":"from keystoneclient.auth.identity import v2<nl>from keystoneclient import session<nl>from ceilometerclient import client<nl><nl>auth=v2.Password(auth_url=\"hosturl:5000\/v2.0\/\", username=\"admin\", password=\"pass\", tenant_id='123456')<nl><nl>sess = session.Session(auth=auth,verify=False)<tab> # verify=False may not be required for you<tab><nl>token = auth.get_token(sess)<nl><nl>cclient = client.get_client(2, ceilometer_url=\"hosturl:8777\/\", token=token,verify=False)<nl>cclient.meters.list()","out":"how to impliment auth_token in Ceilometer Python Client API"}
{"in":"[t[:-1] + (100,) for t in a]","out":"Replacing last value in list of tuples"}
{"in":"# untested<nl>from itertools import count<nl>rows = len(csvList)<nl>pctn = rows \/\/ 100<nl>perc = count()<nl>for rowno, row in enumerate(csvList):<nl><tab>if rowno % pctn == 0:<nl><tab><tab>print '{}%'.format(next(perc))","out":"SQL Insert progress bar"}
{"in":"def isBetween(a, b, c):<nl><tab>crossproduct = (c.y - a.y) * (b.x - a.x) - (c.x - a.x) * (b.y - a.y)<nl><tab>if abs(crossproduct) > epsilon : return False   # (or != 0 if using integers)<nl><nl><tab>dotproduct = (c.x - a.x) * (b.x - a.x) + (c.y - a.y)*(b.y - a.y)<nl><tab>if dotproduct < 0 : return False<nl><nl><tab>squaredlengthba = (b.x - a.x)*(b.x - a.x) + (b.y - a.y)*(b.y - a.y)<nl><tab>if dotproduct > squaredlengthba: return False<nl><nl><tab>return True","out":"How can you determine a point is between two other points on a line segment?"}
{"in":"array = lane_emden(3)","out":"Python 3.5 Save an array for use outside a function"}
{"in":"from fuzzywuzzy import process<nl>import csv<nl><nl>save_file = open('FuzzyResults3.csv', 'w')<nl>writer = csv.writer(save_file, lineterminator = '<nl>')<nl><nl>def parse_csv(path):<nl><nl><tab>with open(path,'r') as f:<nl><tab><tab>reader = csv.reader(f, delimiter=',')<nl><tab><tab>for row in reader:<nl><tab><tab><tab>yield row<nl><nl><nl>if __name__ == \"__main__\":<nl><tab>## Create lookup dictionary by parsing the products csv<nl><tab>data = {}<nl><tab>for row in parse_csv('File1.csv'):<nl><tab><tab>data[row[0]] = row[1]<nl><nl><tab>## For each row in the lookup compute the partial ratio<nl><tab>for row in parse_csv(\"File2.csv\"):<nl><tab><tab>#print(process.extract(row,data, limit = 100))<nl><tab><tab>for found, score, matchrow in process.extract(row, data, limit=100):<nl><tab><tab><tab>if score >= 60:<nl><tab><tab><tab><tab>print('%d%% partial match: \"%s\" with \"%s\" ' % (score, row, found))<nl><tab><tab><tab><tab>Digi_Results = [score, row, found]<nl><tab><tab><tab><tab>writer.writerow(Digi_Results)<nl><nl><nl>save_file.close()","out":"Fuzzy compare two column"}
{"in":"import Queue, thread<nl><nl># create a Queue.Queue here<nl>queue = Queue.Queue()<nl><nl>print (\"downloading and parsing Bibles...\")<nl>root = html.parse(open('links.html'))<nl>for link in root.findall('\/\/a'):<nl>  url = link.get('href')<nl>  queue.put(url) # produce<nl><nl><nl><nl><nl>def thrad():<nl>  url = queue.get() # consume<nl>  name = urlparse.urlparse(url).path.split('\/')[-1]<nl>  dirname = urlparse.urlparse(url).path.split('.')[-1]<nl>  f = urllib2.urlopen(url)<nl>  s = f.read()<nl>  if (os.path.isdir(dirname) == 0): <nl><tab>os.mkdir(dirname)<nl>  soup = BeautifulSoup(s)<nl>  articleTag = soup.html.body.article<nl>  converted = str(articleTag)<nl>  full_path = os.path.join(dirname, name)<nl>  open(full_path, 'wb').write(converted)<nl>  print(name)<nl><nl>thread.start_new(thrad, ()) # start 1 threads","out":"Multithreading for faster downloading"}
{"in":"wb = load_workbook('path\/doc.xls', use_iterators=True)","out":"Getting values from a column in excel using openpyxl"}
{"in":"import NetworkManager<nl><nl>for dev in NetworkManager.NetworkManager.GetDevices():<nl><tab>if dev.DeviceType != NetworkManager.NM_DEVICE_TYPE_WIFI:<nl><tab><tab>continue<nl><tab>for ap in dev.SpecificDevice().GetAccessPoints():<nl><tab><tab>print ap.Ssid","out":"How can I get a list of all WLANs my computer can see with Python?"}
{"in":"['%f, %s' % (x,y) for _,_,_,x,_,y in d.values()]","out":"Iterating through a python list of list and creating a new list"}
{"in":"if __name__ == '__main__':<nl><tab>manager = Manager()<nl><tab>flag = manager.list([True])<nl><tab>for taskSize in taskSizes:<nl><tab><tab>flag[0] = True<nl><tab><tab>processes = [] # a list to store the process handles <nl><tab><tab>for i in range(1,TASK_LAUNCHERS):<nl><tab><tab><tab>p = Process(target=backgroundTaskLauncher, args=(taskSize,flag))<nl><tab><tab><tab>p.start()<nl><tab><tab><tab>processes.append(p) # save process handle<nl><tab><tab># Experiment goes here (I think it goes here (unindented(?)))<nl><tab><tab>flag[0] = False<nl><tab><tab># after you are done with your experiment, join all child processes<nl><tab><tab>for p in processes:<nl><tab><tab><tab>p.join()","out":"Toggle a loop on and off in a multi-processed program in Python"}
{"in":"import heapq<nl><nl>a = [(\"a\", 6), (\"b\", 4), (\"c\", 3), (\"d\", 1)]<nl>b = [(\"e\", 5), (\"f\", 5), (\"g\", 4), (\"h\", 2)]<nl><nl>class Pair:<nl><tab>def __init__(self, i, j, value):<nl><tab><tab>self.i = i<nl><tab><tab>self.j = j<nl><tab><tab>self.value = value<nl><tab>def __cmp__(self, other):<nl><tab><tab>return other.value - self.value<nl><nl>def solution(a, b):<nl><tab>heap = []<nl><tab>for i in range(len(a)):<nl><tab><tab>heapq.heappush(heap, Pair(i, 0, a[i][1] + b[0][1]))<nl><tab>while len(heap) > 0:<nl><tab><tab>pair = heapq.heappop(heap)<nl><tab><tab>yield (a[pair.i], b[pair.j], pair.value)<nl><tab><tab>if pair.j + 1 < len(b):<nl><tab><tab><tab>heapq.heappush(heap, Pair(pair.i, pair.j + 1, a[pair.i][1] + b[pair.j + 1][1]))<nl><nl>for (a, b, value) in solution(a, b):<nl><tab>print (\"%s %s -> %d\" % (a, b, value))","out":"Generate All Permutations of Several Lists in Permutation-Value Order"}
{"in":"x = np.empty((21, 2))<nl>x[:, 0] = 45<nl>x[:, 1] = np.linspace(55, 65, x.shape[0])","out":"Numpy - easier way to change the value of one column of an array only?"}
{"in":"import webapp2<nl><nl>from webapp2_extras import sessions<nl><nl>class BaseHandler(webapp2.RequestHandler):<nl><tab>def dispatch(self):<nl><tab><tab># Get a session store for this request.<nl><tab><tab>self.session_store = sessions.get_store(request=self.request)<nl><nl><tab><tab>try:<nl><tab><tab><tab># Dispatch the request.<nl><tab><tab><tab>webapp2.RequestHandler.dispatch(self)<nl><tab><tab>finally:<nl><tab><tab><tab># Save all sessions.<nl><tab><tab><tab>self.session_store.save_sessions(self.response)<nl><nl><tab>@webapp2.cached_property<nl><tab>def session(self):<nl><tab><tab># Returns a session using the default cookie key.<nl><tab><tab>return self.session_store.get_session()<nl><nl># To set a value:<nl>self.session['foo'] = 'bar'<nl><nl># To get a value:<nl>foo = self.session.get('foo')","out":"Google App Engine - Getting Sessions working with Python 2.7"}
{"in":"from pymongo.bulk import BulkUpsertOperation<nl>bulk=clientConn.db.table.initialize_ordered_bulk_op()<nl><nl>for i in someList:<nl><tab>bulk.find({'uid':i,\"dt\":datetime(y,m,d)}).upsert().update({'$inc': {'count': 1}})<nl>res=bulk.execute()","out":"MongoDb pymongo how to increment multiple documents"}
{"in":"# create query order by monthly price <nl>base_query = Contract.query.order_by(Contract.monthly_price)<nl><nl># build subqueries for each network <nl>queries = []<nl>for n in networks.all():<nl><tab>queries.append( base_query.filter(Contract.network_id==n.id).\\<nl><tab><tab><tab><tab><tab><tab>limit(3).subquery().select() )<nl><nl># get contracts using union_all<nl>contracts = Contract.query.select_entity_from(union_all( *queries )).all()","out":"SQLalchemy top 3 results from each category"}
{"in":"{{ item.date|date:\"Y M d\" }}","out":"How to convert datetime to string in python in django"}
{"in":"import xml.etree.ElementTree as ET<nl><nl># I find that using a dictionary to map prefixes to namespaces keeps<nl># things easier to understand. You can also use the namespaces directly<nl># though if you prefer<nl>NAMESPACE_PREFIXES = {<nl><tab>'w': 'http:\/\/schemas.openxmlformats.org\/wordprocessingml\/2006\/main'<nl><tab>}  <nl><nl>tree = ET.parse('document.xml')<nl>root = tree.getroot()<nl>text_elements = [element for element in root.iter() if element.tag == <nl>'{' + NAMESPACE_PREFIXES['w'] + '}t']<nl># Equivalent to:<nl># text_elements = [element for element in root.iter() if element.tag == <nl># '{http:\/\/schemas.openxmlformats.org\/wordprocessingml\/2006\/main}t']<nl>for text_element in text_elements:<nl><tab>if text_element.text == 'Hello world!':<nl><tab><tab>text_element.text = 'Goodbye world!'","out":"Trying to parse Word docx file as a zip document using Python's xml.elementtree"}
{"in":"HATEOAS = False","out":"Eve pretty _links for items, multiple entry points"}
{"in":"numbers = [1,2,3,4,5,6]<nl><nl>with open('output.txt', 'w') as f:<nl>  f.write('\\t'.join(numbers))","out":"how to write to a text file using python ?"}
{"in":"from itertools import imap<nl>from operator import mul<nl>def sumsquared(arr):<nl><tab>return sum(imap(mul, arr, arr))","out":"Optimising a simple mathematical calculation over list"}
{"in":"import csv<nl>data = []<nl>with open('Trial_test.csv', 'rb') as csvfile:<nl>   reader = csv.reader(csvfile, delimiter=' ', quotechar='|')<nl>   for row in reader:<nl><tab>   data.append(row)<nl><nl># now do your calculations on the 'data' object.<nl><nl>with open('Trial_test_new.csv', 'wb') as csvfile:<nl>   writer = csv.writer(csvfile, delimiter=' ', quotechar='|')<nl>   for row in data:<nl><tab>   writer.writerow(row)","out":"Appending data to csv file"}
{"in":"import subprocess<nl><nl># ps -ux | grep 1842 (Assuming 1842 is the process id. replace with process id you get)<nl><nl>p1 = subprocess.Popen([\"ps\", \"-ux\"], stdout=subprocess.PIPE)<nl>p2 = subprocess.Popen([\"grep\", \"1842\"], stdin=p1.stdout, stdout=subprocess.PIPE)<nl>p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.<nl>output = p2.communicate()[0]<nl>print output","out":"How can I read the memory of a process in python in linux?"}
{"in":"def unique_list(l):<nl><tab>ulist = []<nl><tab>[ulist.append(x) for x in l if x not in ulist]<nl><tab>return ulist<nl><nl>a=\"calvin klein design dress calvin klein\"<nl>a=' '.join(unique_list(a.split()))","out":"How can I remove duplicate words in a string with Python?"}
{"in":"result_record_list[0].pic = None<nl>result_record_list[0].put()","out":"How to remove value from GAE NDB Property (type BlobKeyProperty)"}
{"in":"pyplot.errorbar()","out":"Python matplotlib plotting an array with different colors"}
{"in":"9**(9**9)","out":"right way to run some code with timeout in Python"}
{"in":"import FreeImagePy as FIPY<nl>F = FIPY.Image()<nl>F.new(multiBitmap = \"multipage.tiff\")<nl>F.appendPage(\"test1.jpg\")<nl>F.appendPage(\"test2.jpg\")<nl>F.deletePage(0)<nl>F.close()","out":"Python library to convert jpgs to multipage tiffs"}
{"in":"from flask import Flask,redirect","out":"Rewrite a URL with Flask"}
{"in":"def removeSel(self):<nl><tab>listItems=self.listA.selectedItems()<nl><tab>if not listItems: return<tab><tab><nl><tab>for item in listItems:<nl><tab>   self.listA.takeItem(self.listA.row(item))","out":"How to remove Item from QListWidget"}
{"in":"grouped = df.groupby([df.index.year,df.index.day])<nl>df['sum'] = grouped.apply(lambda x: x.Open + x.Close)","out":"Add new column in pandas dataframe object with column math"}
{"in":"for dir, subdir, files in os.walk(path):<nl><tab>for file in files:<nl><tab><tab>print os.path.join(dir, file)","out":"In python, how to get the path to all the files in a directory, including files in subdirectories, but excluding path to subdirectories"}
{"in":"eval(CMD[17:-1])","out":"How to print the variable user input in python 3?"}
{"in":"get_top_from_all()","out":"I'd like to get a list of the top posts of all time in a subreddit using praw"}
{"in":"import json<nl>from django.forms.models import model_to_dict<nl><nl>@render_to ('companion\/companionSub.html')<nl>def topic(request, id):   <nl><nl><tab>ids = Catagories.objects.get(catagory=id)<nl><nl><tab>topics = [model_to_dict(topic) for topic in Topics.objects.filter(fabCatagory_id=ids.id)]<nl><tab>topic_list = json.dumps({'topics':topics})<nl><nl><tab>return HttpResponse(topics_list)","out":"Django render dictionary object in template through ajax get"}
{"in":"# -*- coding: utf-8 -*-<nl><nl>def run():<nl><tab>code_task = get_active_task()<nl><nl><tab>from os.path import dirname<nl><nl><tab>def change_directory():<nl><tab><tab>code_editor = code_task.active_editor<nl><tab><tab>if not code_editor:<nl><tab><tab><tab>return<nl><tab><tab>python_pane = code_task.python_pane<nl><tab><tab>active_dir = dirname(code_editor.obj.path)<nl><tab><tab>python_pane.execute_command(u'cd %s<nl>' % active_dir)<nl><nl><tab>code_task.on_trait_change(change_directory, 'active_editor')","out":"Setting the working directory of IPython Shell to that of the python file being executed in Canopy"}
{"in":"rc('font',**{'family':'serif','serif':['Times']})","out":"How do I get rid of these artifacts (matplotlib with LaTeX)"}
{"in":"with open('\/Users\/d-sdf\/test_erick\/test\/essays.csv') as csvfile:<nl><tab>for i, line in enumerate(csvfile):<nl><tab><tab>with open(\"essay{}.txt\".format(str(i+1)), \"w\") as txtfile:<nl><tab><tab><tab>txtfile.write(line)","out":"Saving each line I read from a file as a different file"}
{"in":"import Tkinter<nl>import tkFileDialog<nl>import tkSimpleDialog<nl>from tkFileDialog import askopenfilename<nl>import os<nl><nl># Set up GUI<nl><nl><nl>def main():<nl><nl><tab>root = Tkinter.Tk(); <nl><tab>root.withdraw()<nl><nl><tab># Prompt for user info<nl><tab>File_number = tkSimpleDialog.askinteger(\"File number\", <nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>\"How many files do you want to compare?\")<nl><nl><tab>if not File_number:<nl><tab><tab>return<nl><nl><tab>user_fiels = []<nl><nl><nl><tab>max_file_no = int(File_number)<nl><tab>current_file = 1;<nl><nl><tab>while(current_file <= max_file_no):<nl><nl><tab><tab>fileloc = tkFileDialog.askopenfilename(parent=root, title='Choose file {}'.format(current_file))<nl><nl><tab><tab>if not fileloc:<nl><tab><tab><tab>continue<nl><nl><tab><tab>fileloc_name_clean = os.path.splitext(fileloc)[0]<nl><tab><tab>fileloc_name = os.path.basename(fileloc_name_clean)<nl><nl><tab><tab>user_fiels.append([fileloc, fileloc_name_clean, fileloc_name])<nl><nl><tab><tab>current_file += 1<nl><nl><tab><tab>#print(fileloc_name_clean, fileloc_name)<nl><nl><tab>print(user_fiels) <nl><nl>main()","out":"Python: Looping a certain amount of time in order different process"}
{"in":"input_implementations = { 'xls':xls, 'xml':xml, 'csv':csv }<nl><nl>def input_factory(filename):<nl><tab>ext = os.path.splitext(filename)[1][1:].lower()<nl><tab>impl = input_implementations.get(ext, None)<nl><tab>if impl is None:<nl><tab><tab>print 'rain fire from the skies'<nl><tab>else:<nl><tab><tab>return impl(filename)","out":"Determine behavior based on subclass"}
{"in":"from re import findall<nl><nl>print findall(r'\\w[\\w.]*\\w', 'WARC-_Target-URI: http:\/\/www.allchocolate.com\/health\/basics\/')","out":"Regex that would give certain words python"}
{"in":"from xml.dom import minidom<nl>import xml.etree.ElementTree as ET<nl><nl>tree = ET.parse('\/tmp\/input.xml').getroot()<nl>namespaces = {'gml': 'http:\/\/www.opengis.net\/gml', 'ogr':'http:\/\/ogr.maptools.org\/'}<nl>for child in tree.findall('gml:featureMember', namespaces=namespaces):<nl><tab>if len(child.find('ogr:TZwards', namespaces=namespaces)):<nl><tab><tab>name = child.find('ogr:TZwards', namespaces=namespaces).find('ogr:Region_Nam', namespaces=namespaces).text<nl><tab><tab>if name != 'TARGET':<nl><tab><tab><tab>tree.remove(child)<nl><nl>out = ET.ElementTree(tree)<nl>out.write(\"\/tmp\/out.xml\")","out":"Remove XML node if childnode's childnode contains specific value"}
{"in":"#!\/usr\/bin\/env python<nl><nl>#x=1.123<nl>#y=2.123<nl><nl>pos = [1.123, 2.123]<nl><nl>with open('vars.txt','w') as f:<nl><tab>f.write(\"%s %s\" % (pos[0], pos[1]))<nl><tab>#f.write(\"%s %s\" % (x,y))<nl><nl>with open ('vars.txt', 'r') as myfile:<nl><tab>position=myfile.read().split()<nl><nl>position = map(float, position)<nl># position = [1.123, 2.123]","out":"How to write and read Python var from file"}
{"in":"import numpy as np<nl><nl>Rxx = np.arange(100)<nl>epochs = 10<nl>Rxx_mean = []<nl><nl>epoch_Rxx = np.array_split(Rxx,epochs)<nl>for i in range(0,epochs):<nl>  Rxx_mean.append(np.mean(epoch_Rxx[i]))<nl><nl>print Rxx_mean","out":"Python Split Array use For Loop to Mean every split and put it back together"}
{"in":"def guid2hexstring(val):<nl><tab>s = ['\\\\%02X' % ord(x) for x in val]<nl><tab>return ''.join(s)<nl><nl>guid = ldapobject.get('objectGUID', [''])[0] # 'Igr\\xafb\\x19ME\\xb2P9c\\xfb\\xa0\\xe2w'<nl>guid2string(guid).replace(\"\\\\\", \"\") # '496772AF62194D45B2503963FBA0E277'<nl><nl>#and back to a value you can use in an ldap search filter<nl><nl>guid = ''.join(['\\\\%s' % guid[i:i+2] for i in range(0, len(guid), 2)]) # '\\\\49\\\\67\\\\72\\\\AF\\\\62\\\\19\\\\4D\\\\45\\\\B2\\\\50\\\\39\\\\63\\\\FB\\\\A0\\\\E2\\\\77'<nl><nl>searchfilter = ('(objectGUID=%s)' % guid)","out":"Python LDAP converting objectGUID to hex string and back"}
{"in":"dshape = discover(resource('report_2015.csv'))<nl>t = odo('report_2015.csv', 'sqlite:\/\/\/report.db::report', dshape=dshape)","out":"Using odo to migrate data to SQL"}
{"in":"plt.savefig(str(new_counter)+'foo.eps')","out":"plotting in loop, only getting last plot"}
{"in":"with tempfile.TemporaryFile() as tmp:<nl><tab>with gzip.open(fname, 'rb') as f:<nl><tab><tab>shutil.copyfileobj(f, tmp)<nl><tab><tab>tmp.seek(0)","out":"modify gzipped file with python"}
{"in":"from PIL import Image<nl>import numpy as np<nl><nl>def SRGBResize(im, size, filter):<nl><tab># Convert to numpy array of float<nl><tab>arr = np.array(im, dtype=np.float32) \/ 255.0<nl><tab># Convert sRGB -> linear<nl><tab>arr = np.where(arr <= 0.04045, arr\/12.92, ((arr+0.055)\/1.055)**2.4)<nl><tab># Resize using PIL<nl><tab>arrOut = np.zeros((size[1], size[0], arr.shape[2]))<nl><tab>for i in range(arr.shape[2]):<nl><tab><tab>chan = Image.fromarray(arr[:,:,i])<nl><tab><tab>chan = chan.resize(size, filter)<nl><tab><tab>arrOut[:,:,i] = np.array(chan)<nl><tab># Convert linear -> sRGB<nl><tab>arrOut = np.where(arrOut <= 0.0031308, 12.92*arrOut, 1.055*arrOut**(1.0\/2.4) - 0.055)<nl><tab># Convert to 8-bit<nl><tab>arrOut = np.uint8(np.rint(arrOut * 255.0))<nl><tab># Convert back to PIL<nl><tab>return Image.fromarray(arrOut)","out":"SRGB-aware image resize in Pillow"}
{"in":"friendship_union = select([<nl><tab>FacebookFriendship.dater_id,<nl><tab>cast(FacebookFriendship.fb_uid_friend, Integer()).label(<nl><tab><tab>'fb_uid_friend')<nl>]).union(<nl><tab>select([<nl><tab><tab>cast(FacebookFriendship.fb_uid_friend, Integer()),<nl><tab><tab>FacebookFriendship.dater_id]<nl><tab>)<nl>).alias()<nl><nl>cls.all_fb_friendships = relationship(<nl><tab>UserSocialAuth,<nl><tab>secondary=friendship_union,<nl><tab>primaryjoin=UserSocialAuth.user_id == friendship_union.c.dater_id,<nl><tab>secondaryjoin=and_(<nl><tab><tab>UserSocialAuth.provider == 'facebook',<nl><tab><tab>cast(UserSocialAuth.uid, Integer() ) == friendship_union.c.fb_uid_friend,<nl><tab>),<nl><tab>viewonly=True<nl>)","out":"SQLAlchemy: How can I define a relationship as the union of two other relationships?"}
{"in":"def print_rect(l, w, c):<nl><tab>for a in range(w):<nl><tab><tab>print(a*\" \", l*c)","out":"How to make a parallelogram on python"}
{"in":"from collections import defaultdict<nl><nl>terms = ['Electronic rock', 'Alternative rock', 'Indie pop']<nl>d = defaultdict(list)<nl>for term in terms:<nl><tab>for word in term.split():<nl><tab><tab>d[word].append(term)<nl><nl>for k,v in d.iteritems():<nl><tab>if len(v) > 1:<nl><tab><tab>print k,v","out":"Python: detect strings that share words"}
{"in":"Info[\"City_Name\"].update({\"Population\": 20000, \"Population_Density\": 200})","out":"How to assign multiple values to multiple keys with a single command"}
{"in":"f = open(\"output.txt\", \"a\")","out":"Python - Only last line is saved to file"}
{"in":"import urllib2<nl>data = urllib2.urlopen(\"some_url\")<nl>html_data = data.read()<nl>soup = BeautifulSoup(html_data)<nl><nl>for a in soup.findAll('a',href=True):<nl><tab>print a['href']","out":"How to extract a href link from anchor tags in beautiful soup"}
{"in":"def check_time(until_when, def_time, how_long):<nl><tab>arg_dict = {def_time:how_long}<nl><tab>dt = datetime.timedelta(**arg_dict)<nl><tab>if until_when- datetime.datetime.now() > dt:<nl><tab><tab>input('Task has been finished.<nl>Press any key to quit<nl>')<nl><tab><tab>exit()","out":"how to pass argument to datetime.timedelta"}
{"in":"def make_happiness_table(filename=\"word-happiness.csv\"):<nl>   ''' make_happiness_table: string -> dict<nl><tab>  creates a dictionary of happiness scores from the given file '''<nl><nl>   return {}","out":"Input a filename as a string and return a dictionary"}
{"in":"times = race1.index.to_series()<nl>today = pandas.Timestamp('00:00:00')<nl>timedelta = times - today<nl>times_ordinal = timedelta.dt.seconds\/(24*60*60) + today.toordinal()<nl>ax = times_ordinal.hist()<nl>ax.xaxis_date()<nl>plt.gcf().autofmt_xdate()<nl>plt.ylabel('Number of finishers')","out":"Histogram of times from a CSV via Pandas"}
{"in":"import urllib, urllib2<nl>import time<nl>import sys<nl><nl>query = ' '.join(sys.argv)   <nl><nl># encode params as a list of 2-tuples<nl>params = ( ('from','ACC'), ('to', 'P_REFSEQ_AC'), ('format','tab'), ('query', query))<nl># url encode them<nl>data = urllib.urlencode(params)<tab><nl>url = 'http:\/\/www.uniprot.org\/mapping\/'<nl><nl># fetch the data<nl>try:<nl><tab>foo = urllib2.urlopen(url, data)<nl>except urllib2.HttpError, e:<nl><tab>if e.code == 503:<nl><tab><tab># blah blah get the value of the header...<nl><tab><tab>wait_time = int(e.hdrs.get('Retry-after', 0))<nl><tab><tab>print 'Sleeping %i seconds...' % (wait_time,)<nl><tab><tab>time.sleep(wait_time)<nl><tab><tab>foo = urllib2.urlopen(url, data)<nl><nl><nl># foo is a file-like object, do with it what you will.<nl>foo.read()","out":"How can I talk to UniProt over HTTP in Python?"}
{"in":"df['Monday-Friday'] = df['days'].isin(range(5)).astype(int)<nl>df['Saturday'] = (df['days'] == 5).astype(int)<nl>df['Sunday'] = (df['days'] == 6).astype(int)","out":"How to separate Monday-Friday from Saturday and Sunday Pandas?"}
{"in":"import os<nl><nl>outFile = 'C:\/CompanyFiles\/Matrix.txt'<nl>folder = 'C:\/CompanyFiles'<nl><nl>with open(outFile, 'w') as wfp:<nl><tab>for f in os.listdir(inFolder):<nl><tab><tab>tmp = [line.rstrip() for line in open(os.path.join(folder, f), 'r')]<nl><tab><tab>arr = tmp[0].split('-')<nl><tab><tab>arr = [arr[0]] + arr[1].split('_')<nl><tab><tab>arr += [t.split(':')[1].strip() for t in tmp[1:]]<nl><tab><tab>wfp.write(','.join([\"'\" + e + \"'\" for e in arr]) + '<nl>')","out":"Comma separated Matrix from txt files - continued"}
{"in":"from pydub import AudioSegment<nl><nl>def detect_leading_silence(sound, silence_threshold=-50.0, chunk_size=10):<nl><tab>'''<nl><tab>sound is a pydub.AudioSegment<nl><tab>silence_threshold in dB<nl><tab>chunk_size in ms<nl><nl><tab>iterate over chunks until you find the first one with sound<nl><tab>'''<nl><tab>trim_ms = 0 # ms<nl><tab>while sound[trim_ms:trim_ms+chunk_size].dBFS < silence_threshold:<nl><tab><tab>trim_ms += chunk_size<nl><nl><tab>return trim_ms<nl><nl>sound = AudioSegment.from_file(\"\/path\/to\/file.wav\", format=\"wav\")<nl><nl>start_trim = detect_leading_silence(sound)<nl>end_trim = detect_leading_silence(sound.reverse())<nl><nl>duration = len(sound)<tab><nl>trimmed_sound = sound[start_trim:duration-end_trim]","out":"remove silence at the beginning and at the end of wave files with PyDub"}
{"in":"boxticks = IntVar().get()","out":"Modifying a variable with onvalue and offvalue"}
{"in":"def gather_path(self):<nl><tab>path_object = PathsOfDomain.objects.filter(FKtoTld=3)","out":"Passing an attribute from method to another method python"}
{"in":"import subprocess<nl>p = subprocess.Popen([\"some\", \"command\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)<nl>stdout, stderr = p.communicate()<nl>stdout=stdout.split(\"<nl>\")<nl>for line in stdout:<nl><tab>if line.startswith(\"This is the line:\"):<nl><tab><tab>print line","out":"How to get only one specific line from subprocess output"}
{"in":"ratio = Column(Numeric(5, 3), nullable=True)","out":"How to declare this column with SQLAlchemy"}
{"in":"name=input(\"Enter your name: \")<nl>message=input(\"Enter your message:\")<nl>namefinal = ''<nl>for letter  in name:   <nl>   if letter not in message:<nl><tab>   namefinal += letter<nl>print namefinal","out":"Deleting elements in Python list using user input"}
{"in":"def GetHtmlText(self,text):<nl><tab>html_text = '<h3>Data Results:<\/h3><p><table border=\"2\">'<nl><tab>html_text += \"<tr><td>Domain:<\/td><td>Mail Server:<\/td><td>TLS:<\/td><td># of Employees:<\/td><td>Verified<\/td><\/tr>\"<nl><tab>for row in root.ptglobal.to_csv():<nl><tab><tab>html_text += \"<tr>\"<nl><tab><tab>for x in range(len(row)):<nl><tab><tab><tab>html_text += \"<td>\"+str(row[x])+\"<\/td>\"<nl><tab><tab>html_text += \"<\/tr>\"<nl><tab>return html_text + \"<\/table><\/p>\"","out":"wxPython print string with formatting"}
{"in":"handler.cgi_directories = [\"\/\"]","out":"Python CGIHTTPServer Default Directories"}
{"in":"stored_json = token.readlines()<nl>token.close()<nl>return stored_json","out":"Read and write json files to server with flask"}
{"in":"from PyQt4 import QtGui<nl><nl>app = QtGui.QApplication([])<nl><nl>menu = QtGui.QMenu()<nl><nl>sub_menu = QtGui.QMenu(\"Sub Menu\")<nl><nl>for i in [\"a\", \"b\", \"c\"]: #or your dict<nl><tab>sub_menu.addAction(i) #it is just a regular QMenu<nl><nl>menu.addMenu(sub_menu)<nl><nl>menu.show()<nl><nl>app.exec_()","out":"dropdown menu with sub menu in pyqt4"}
{"in":"webbrowser.open('https:\/\/www.google.com') # open a passed URL string using default browser","out":"Open URL from Python 2.7"}
{"in":"length = len(filelist)<nl>for i in range(length):<nl>   self.importFiles(filelist[i],timestamps[i])","out":"How can I get the values from two list a time"}
{"in":"def mask_z_level(xi, yi, msk_img, x0=-14.3887, y0=5.564):<nl><tab>im = plt.imread(msk_img)<nl><tab>msk = np.zeros(xi.shape, dtype='bool')<nl><nl><tab>pxmm = np.zeros((3, 2))<nl><tab>p = 0<nl><nl><tab>for row in range(im.shape[0]):<nl><tab><tab>for col in range(im.shape[1]):<nl><tab><tab><tab>if tuple(im[row, col]) == (1., 0., 0.):<nl><tab><tab><tab><tab>pxmm[p] = (row, col)<nl><tab><tab><tab><tab>p += 1<nl><nl><tab>pxx = pxmm[1, 1] \/ 5.5<nl><tab>pxy = pxmm[2, 0] \/ 6.5<nl><tab>print(pxx, pxy)<nl><nl><tab>for j in range(xi.shape[1]):<nl><tab><tab>for i in range(xi.shape[0]):<nl><tab><tab><tab>x, y = xi[i, j], yi[i, j]<nl><tab><tab><tab>dx, dy = x - x0, y - y0<nl><tab><tab><tab>dpx = np.round(dx * pxx).astype('int')<nl><tab><tab><tab>dpy = -np.round(dy * pxy).astype('int')<nl><nl><tab><tab><tab>if tuple(im[dpy, dpx]) == (1., 1., 1.):<nl><tab><tab><tab><tab>msk[i, j] = True<nl><nl><tab>return msk","out":"Finding edge from 2d points Python"}
{"in":"lines = file.readlines()<nl>lines = lines[:-1]","out":"Python remove last line of a file"}
{"in":"file = open(\"save_file.txt\")<nl><nl>for each_line in file:<nl><tab>s = {}<nl><tab>(s['name'], s['race'], s['class'], s['FOR'], s['INT'], s['DES']) = each_line.split(\";\")<nl><tab>print(s['name'])<nl><tab>print(s['race'])<nl><tab>print(s['class'])<nl><tab>print(s['FOR'])<nl><tab>print(s['INT'])<nl><tab>print(s['DES'])<nl><tab>print(s['name'])<nl>file.close()","out":"How to print more lines?"}
{"in":"from Spotfire.Dxp.Application.Visuals import VisualContent<nl><nl>#\"visual\" is the name of the parameter found in the \"Script Parameter\" dialog below the editor which points to the visualization I want to change.<nl>vc = visual.As[VisualContent]()<nl>exp=\"[\"+Document.Properties[\"DocPropertyNameHere\"]+\"]\"<nl>vc.YAxis.Expression =exp","out":"How do I set the x-axis (xaxis) on a Bar Graph in Spotfire with IronPython?"}
{"in":"class SignupForm(authtoolsforms.UserCreationForm):<nl><tab>captcha = CaptchaField()<nl><nl><tab>def __init__(self, *args, **kwargs):<nl><tab><tab>super(SignupForm, self).__init__(*args, **kwargs)<nl><tab><tab>self.helper = FormHelper()<nl><tab><tab>self.fields[\"email\"].widget.input_type = \"email\"<nl><nl><tab><tab>self.helper.layout = Layout(<nl><tab><tab><tab>Field('email', placeholder=\"Enter Email\", autofocus=\"\"),<nl><tab><tab><tab>Field('name', placeholder=\"Enter Full Name\"),<nl><tab><tab><tab>Field('password1', placeholder=\"Enter Password\"),<nl><tab><tab><tab>Field('password2', placeholder=\"Re-enter Password\"),<nl><tab><tab><tab>Field('gender', placeholder=\"Gender\"),<nl><tab><tab><tab>Field('captcha ', placeholder=\"Enter captcha\"),<nl><tab><tab><tab>Submit('sign_up', 'Sign up', css_class=\"btn-warning\"),<nl><tab><tab><tab>)","out":"How to add a CaptchaField() in a Crispy Form in Django?"}
{"in":"lastItems = [int(i[-1]) for i in yourList[2:]]","out":"Python - get last item in a list, using a file"}
{"in":"import subprocess<nl>out, err = subprocess.Popen([\"pdftotext\", \"-\", \"-\"], stdout=subprocess.PIPE).communicate(pdf_data)","out":"Running a command line from python and piping arguments from memory"}
{"in":"import httplib<nl>from socket import error<nl><nl>with open(\"in.txt\") as f, open(\"out.txt\",\"a\") as out: # change to w if you want to overwrite each time<nl><tab>for line in f:<nl><tab><tab>try:<nl><tab><tab><tab>conn = httplib.HTTPConnection(line.rstrip())<nl><tab><tab><tab>conn.request(\"HEAD\", \"\/index.php\")<nl><tab><tab><tab>r1 = conn.getresponse()<nl><tab><tab><tab>print(r1.reason)<nl><tab><tab><tab>if r1.reason == \"OK\":<nl><tab><tab><tab><tab>out.write(line)<nl><tab><tab>except error as e:<nl><tab><tab><tab>print(e)","out":"How to to do a index.php check for each IP in text file"}
{"in":"from SimpleCV import *<nl>from imagegtk import DisplayImage<nl><nl>im = Image(\"Lenna\")<nl>image = im.toRGB.getBitmap()<nl><nl>d = DisplayImage(title=\"iamgegtk\")<nl><nl>label = gtk.Label(\"Lenna\")<nl>d.box.pack_start(label,False,False,0)<nl><nl>but1 = gtk.Button(\"Quit\")<nl>but1.connect(\"clicked\",d.leave_app)<nl>d.box.pack_end(but1,False,False,2)<nl><nl>d.show(image)","out":"How to extend SimpleCV with GUI"}
{"in":"print (r.data.decode('utf-8'))","out":"How to print raw html string using urllib3???"}
{"in":"class Game(db.Model):<nl>  players = db.ListProperty()<nl><nl>game1.players = ['tom', 'bob']<nl>game2.players = ['joe', 'tom']<nl><nl># this query will match all games where tom is one of the players<nl>query = Game.all().filter('players =', 'tom')","out":"Google app engine gql query two properties with same string"}
{"in":"import os<nl><nl>os.system('export http:\/\/<your proxy>:<your port>\/')<nl>os.system('export https:\/\/<your proxy>:<your port>\/')","out":"Change browser proxy settings from Python in Ubintu?"}
{"in":"import re<nl><nl>regex = '''<item><nl><obj1>grab1<\/obj1><nl><obj2>text<obj2><nl>...<nl><\/item>'''<nl><nl>pattern = re.compile(regex)<nl><nl>with open('data.dat') as searchfile:<nl><tab>filetext = searchfile.read()<nl><tab>text = pattern.findall(filetext)<nl><tab>print text","out":"Using regex to grab values from a multi-line string in python"}
{"in":"import codecs<nl>f=codecs.open(\"test.html\", 'r')<nl>print f.read()","out":"How to open html file?"}
{"in":"import re<nl>import xml.sax.saxutils<nl><nl>def anchor_from_email_address_match(match):<nl><tab>address = match.group(0)<nl><tab>return \"<a href=%s>%s<\/a>\" % (<nl><tab><tab>xml.sax.saxutils.quoteattr(\"mailto:\" + address),<nl><tab><tab>xml.sax.saxutils.escape(address))<nl><nl>def replace_email_addresses_with_anchors(text):<nl><tab>return re.sub(\"\\w+@(?:\\w|\\.)+\", anchor_from_email_address_match, text)<nl><nl>print replace_email_addresses_with_anchors(<nl><tab>\"An address: bob@example.com, and another: joe@example.com\")","out":"Python: Convert email address to HTML link"}
{"in":"sys.stdout.flush()","out":"In Python, why won't something print without a newline?"}
{"in":"userWantToContinue = True<nl>while aqpool[0] and userWantToContinue:<nl><tab>shuffle (aqpool)<nl><tab>numRight = 0<nl><nl><tab>for question, rightAnswer in aqpool:<nl><tab><tab>answer = raw_input(question + \" \")<nl><nl><tab><tab>if answer == rightAnswer:<nl><tab><tab><tab>print (\"R?TT SVAR!\")<nl><nl><tab><tab><tab>numRight = numRight + 1<nl><nl><tab><tab>else:<nl><tab><tab><tab>print(\"FEL SVAR! R?tta svaret ?r: \" + rightAnswer + \"<nl>\")<nl><nl><nl><tab><tab>print(\"Vill du f?rs?tta spela? (ja eller nej)\")<nl><tab><tab>userWantToContinue = str(raw_input()) not in ('n', 'nej')<nl><tab><tab>if not userWantToContinue:<nl><tab><tab><tab>break<nl><nl><tab>total = numRight \/ len(aqpool) * 100<nl><tab>print (\"Du hade %s%% r?tt!\" % total)","out":"Python programing - exiting the loop and displaying score"}
{"in":"from gevent import monkey<nl>monkey.patch_all()<nl><nl>import urllib2<nl>from gevent.pool import Pool<nl><nl><nl>def download(url):<nl><tab>return urllib2.urlopen(url).read()<nl><nl><nl>if __name__ == '__main__':<nl><tab>urls = ['http:\/\/httpbin.org\/get'] * 100<nl><tab>pool = Pool(20)<nl><tab>print pool.map(download, urls)","out":"Python - getting multiple URLs"}
{"in":"from scipy import stats<nl>import numpy as np<nl>np.random.seed(2015)<nl><nl>x = [ stats.t.rvs(9) for i in range(250)]<nl>stats.t.fit(x)","out":"Is there a way to automatically estimate the best degree of freedoms for a t-distribution using Scipy?"}
{"in":"import re<nl>s = '<table style=\"width: 100%%\" bgcolor=\"%s\"><tr><td><font color=\"%s\"><b>1.23<\/b><\/td><\/tr><\/table>'<nl>result = float(re.sub(r\"<.?table[^>]*>|<.?t[rd]>|<font[^>]+>|<.?b>\", \"\", s))","out":"Removing specific html tags with python"}
{"in":"my_list = [l[0] for l in list]","out":"Remove brackets from list in Python"}
{"in":"import sys<nl>getattr(sys.modules[__name__], 'A')","out":"How can I dynamically get the set of classes from the current python module?"}
{"in":"import wx<nl><nl>class MyPanel(wx.Panel):<nl><tab>\"\"\" class MyPanel creates a panel to draw on, inherits wx.Panel \"\"\"<nl><tab>def __init__(self, parent, id):<nl><tab><tab># create a panel<nl><tab><tab>wx.Panel.__init__(self, parent, id)<nl><tab><tab>self.SetBackgroundColour(\"white\")<nl><tab><tab>self.Bind(wx.EVT_PAINT, self.OnPaint)<nl><nl><tab>def OnPaint(self, evt):<nl><tab><tab>\"\"\"set up the device context (DC) for painting\"\"\"<nl><tab><tab>self.dc = wx.PaintDC(self)<nl><tab><tab>self.dc.BeginDrawing()<nl><tab><tab>self.dc.SetPen(wx.Pen(\"grey\",style=wx.TRANSPARENT))<nl><tab><tab>self.dc.SetBrush(wx.Brush(\"grey\", wx.SOLID))<nl><tab><tab># set x, y, w, h for rectangle<nl><tab><tab>self.dc.DrawRectangle(250,250,50, 50)<nl><tab><tab>self.dc.EndDrawing()<nl><tab><tab>del self.dc<nl><nl>app = wx.PySimpleApp()<nl># create a window\/frame, no parent, -1 is default ID<nl>frame = wx.Frame(None, -1, \"Drawing A Rectangle...\", size = (500, 500))<nl># call the derived class, -1 is default ID<nl>MyPanel(frame,-1)<nl># show the frame<nl>frame.Show(True)<nl># start the event loop<nl>app.MainLoop()","out":"wxPython - Drawing an unfilled rectangle with the DC"}
{"in":"#!\/usr\/bin\/env python<nl># -*- coding: utf-8 -*-<nl><nl>import pygtk<nl>pygtk.require(\"2.0\")<nl>import gtk<nl>import gtk.glade<nl><nl>class HellowWorldGTK:<nl><nl><tab>def __init__(self):<nl><tab><tab>self.gladefile = \"helloworld.glade\" <nl><tab><tab>self.glade = gtk.Builder()<nl><tab><tab>self.glade.add_from_file(self.gladefile)<nl><tab><tab>self.glade.connect_signals(self)<nl><tab><tab>self.glade.get_object(\"MainWindow\").show_all()<nl><nl><tab>def on_MainWindow_delete_event(self, widget, event):<nl><tab><tab>gtk.main_quit()<nl><nl>if __name__ == \"__main__\":<nl><tab>try:<nl><tab><tab>a = HellowWorldGTK()<nl><tab><tab>gtk.main()<nl><tab>except KeyboardInterrupt:<nl><tab><tab>pass","out":"putting glade interface in python"}
{"in":"import Tkinter as tk<nl><nl>def key_press(event):<nl><tab>print event.char<nl><tab>return event.char<nl><tab># Or whatever processing you might want.<nl><nl>tk_app = tk.Tk()<nl>tk_app.bind('<KeyPress>', key_press)<nl>tk_app.mainloop()","out":"How do you map a keyboard key in Python 2.7?"}
{"in":"query = '''INSERT INTO cheese (data) VALUES (%s)'''<nl>cur.execute(query, (bd,))","out":"Insert python binary string object in MySQL blob"}
{"in":"def dfunc(ipees, portees):<nl><tab>for (ip, port) in zip(ipees, portees):<nl><tab><tab>try:<nl><tab><tab><tab>s = socket.create_connection((ip, port), timeout=10)<nl><tab><tab><tab>s.send('GET \/ HTTP\/1.0\\r<nl>\\r<nl>')<nl><tab><tab><tab>buf = s.recv(1000)<nl><tab><tab><tab>print buf<nl><tab><tab>except socket.error:<nl><tab><tab><tab>print 'Could not connect to ({0}, {1})'.format(ip, port)","out":"No output from python script"}
{"in":"self.builder.get_object(\"boxWelcome\").set_text(\"Welcome %s!\" % (username.get_text()))","out":"Exporting data from python to glade gui"}
{"in":"driver.find_element_by_xpath(\"\/\/input[@placeholder='Select month']\").click()<nl>driver.find_element_by_xpath(\"\/\/*[contains(text(), '09')]\").click()","out":"Setting the value of an <input> dropdown in Selenium with Python"}
{"in":"def change(self, event):<nl><tab>myobject = event.GetEventObject()<nl><tab>myobject.Disable()","out":"wxPython, Disabling buttons?"}
{"in":"import pygraphviz as pgv<nl>from PIL import Image<nl><nl>d={'1': {'2': None}, '2': {'1': None, '3': None}, '3': {'2': None}}<nl>A=pgv.AGraph(d)<nl>A.node_attr['style']='filled'<nl>n = A.get_node('1')<nl>n.attr['fillcolor']=\"#CCCCFF\"<nl>n.attr['label'] = 'MY LOVELY LABEL'<nl>A.layout() # default to neato<nl>A.layout(prog='dot') # use dot<nl>A.draw('file.png')<nl>img = Image.open('file.png')<nl>img.show()","out":"Setting colour of nodes in pyGraphViz"}
{"in":"sum(sum(b) for b in a)","out":"Finding the sum of a nested list without using itertools"}
{"in":"def refresh(self):<nl><tab>if (self.nbfig > 0): #meaning the c++ app already plotted a figure<nl><tab><tab>plt.ioff()<nl><tab><tab>plt.close()","out":"plotting a new graph after closing a first one in matplotlib"}
{"in":"for i in range(0,11):<nl><tab>if i % 3 == 0 and i != 0:<nl><tab><tab>continue<nl><tab>print(i)<nl><nl><nl>1<nl>2<nl>4<nl>5<nl>7<nl>8<nl>10","out":"skip every nth value when looping over a range - python"}
{"in":"with open(keywords_file, 'r') as f:<nl><tab> keywords = \",\".join(line.strip() for line in f)","out":"Join strings skips first line"}
{"in":"session.query(func.max(Table.title), Table.slug).group_by(Table.slug).all()","out":"sqlalchemy: distinct only on one column"}
{"in":"import base64<nl><nl>with open('input.zip', 'rb') as fin, open('output.zip.b64', 'w') as fout:<nl><tab>base64.encode(fin, fout)","out":"base64 encode a zip file in Python"}
{"in":"print datetime.strptime(mylist[4], '%Y%m')","out":"Extracting an element and converting it to datetime"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl>def myhist(ax, color):<nl><tab>ax.hist(np.log(np.arange(1, 10, .1)), facecolor=color)<nl><nl>def say_something(ax, words):<nl><tab>t = ax.text(.2, 20., words)<nl><tab>make_a_dim_yellow_bbox(t)<nl><nl>def make_a_dim_yellow_bbox(txt):<nl><tab>txt.set_bbox(dict(facecolor='yellow', alpha=.2))<nl><nl>fig = plt.figure()<nl>ax0 = fig.add_subplot(1,2,1)<nl>ax1 = fig.add_subplot(1,2,2)<nl><nl>myhist(ax0, 'blue')<nl>myhist(ax1, 'green')<nl><nl>say_something(ax0, 'this is the blue plot')<nl>say_something(ax1, 'this is the green plot')<nl><nl>plt.show()","out":"Python with matplotlib - reusing drawing functions"}
{"in":"def runbg(cmd, sockname=\"dtach\"):<nl><tab>return run('dtach -n `mktemp -u \/tmp\/%s.XXXX` %s'  % (sockname,cmd))","out":"start a background process with nohup using fabric"}
{"in":"myDict.pop(key, None)","out":"Python del if in dictionary in one line"}
{"in":"r'T.{18}(?:TT|AA|CC|GG)'","out":"python regular expression repeated characters"}
{"in":"import collections<nl><nl>class Coffee():<nl><tab>def __init__(self, name='', color='', taste=''):<nl><tab><tab>self.name = name<nl><tab><tab>self.color = color<nl><tab><tab>self.taste = taste<nl><nl><tab>def __repr__(self):<nl><tab><tab>return '{0} {1} {2}'.format(self.name, self.color, self.taste)<nl><nl>prompt = \"Enter name,color,taste or ctrl-d when done: \"<nl>coffees = collections.defaultdict(Coffee)<nl><nl>while True:<nl><tab>try:<nl><tab><tab>name, color, taste = input(prompt).split(',')<nl><tab><tab>coffees[name].name = name<nl><tab><tab>coffees[name].color = color<nl><tab><tab>coffees[name].taste = taste<nl><tab>except ValueError:<nl><tab><tab>print(\"Try again!\")<nl><tab>except EOFError:<nl><tab><tab>print()<nl><tab><tab>break<nl><nl><nl>print(coffees)","out":"Elegant and Pythonic Approach to Changing List of Objects"}
{"in":"import urllib.request<nl>from bs4 import BeautifulSoup<nl><nl>url_to_parse = 'http:\/\/www.myfxbook.com\/members\/fxgrowthbot\/forex-growth-bot\/71611'<nl>response = urllib.request.urlopen(url_to_parse)<nl>html = response.read()<nl>soup = BeautifulSoup(html)<nl>a = soup.find(id='history').find_all('td')<nl><nl>print(len(a))  # 300","out":"Parse table <td> from remote HTML with BS4"}
{"in":"import random<nl>import urllib<nl>import urllib2<nl><nl>url = 'https:\/\/www.interactivebrokers.com\/java\/classes\/latest.jnlp?counter=' + str(random.random())<nl><nl>def download_file_1(url):<nl><tab>urllib.urlretrieve(url + \".jnlp\", \"latest.jnlp\")<nl><nl>def download_file_2(url):<nl><tab>jnlpfile = urllib2.urlopen(url + \".jnlp\")<nl><tab>output = open('test.jnlp','wb')<nl><tab>output.write(jnlpfile.read())<nl><tab>output.close()","out":"How to open Interactive Brokers' TWS from within Python"}
{"in":"for s in mylist:<nl><tab>if 'item' in s:<nl><tab>   print(s)","out":"NameError when searching for substring in Python list"}
{"in":"return list_a[:-1] + list_b[1:]","out":"Returning a sliced list"}
{"in":"Arguments = 1, 2, 3<nl>SumOf(*Arguments)","out":"How to use a single variable instead of passing multiple Arguments in Python"}
{"in":"#!\/usr\/bin\/env python<nl>import getpass<nl>import sys<nl>import telnetlib<nl><nl>HOST = \"localhost\"<nl>user = raw_input(\"Enter your remote account: \")<nl>password = getpass.getpass()<nl><nl>tn = telnetlib.Telnet(HOST)<nl><nl>tn.read_until(\"login: \")<nl>tn.write(user + \"<nl>\")<nl>if password:<nl><tab>tn.read_until(\"Password: \")<nl><tab>tn.write(password + \"<nl>\")<nl><nl>tn.write(\"ls<nl>\")<nl>tn.write(\"exit<nl>\")<nl><nl>print tn.read_all()","out":"Writing a telnet client"}
{"in":"v = float(input('start vlocity m\/s: '))<nl>a = float(input('start angle : '))<nl>p = v*math.sin(math.radians(a))<nl>g = 9.81<nl>equ = p*p\/(2*g)  <nl>print(str(equ) + ' M')","out":"Python How To Square Sin For The Height Equation"}
{"in":"import os<nl>import pygame<nl><nl>images = {str(i)[:-4]:pygame.image.load(\"images\/\"+i) for i in os.listdir(\"images\") if os.path.isfile(\"images\/\"+i)}","out":"How do I load a folder of images in automatically?"}
{"in":"def my_function(f, value):<nl>  yield value<nl>  while True:<nl><tab>value = f(value)<nl><tab>yield value","out":"yield python add previous function result"}
{"in":"B= np.split(A, np.where(A[:, 0]== 0.)[0][1:])","out":"Split array at value in numpy"}
{"in":"from mako.template import Template<nl><nl>mydata = {'foo': 'bar', 'better foo': 'beach bar'}<nl>working_template = Template(\"Let's go to the ${foo}\")<nl>fail_template = Template(\"Let's go to the ${mydata['better foo']}\")<nl><nl>print working_template.render(**mydata)<nl>print fail_template.render(mydata=mydata)","out":"How to reference multi-word dictionary key in mako?"}
{"in":"from docx import Document<nl><nl>document = Document()<nl>r = 2 # Number of rows you want<nl>c = 2 # Number of collumns you want<nl>table = document.add_table(rows=r, cols=c)<nl>table.style = 'LightShading-Accent1' # set your style, look at the help documentation for more help<nl>for y in range(r):<nl><tab>for x in range(c):<nl><tab><tab>cell.text = 'text goes here'<nl>document.save('demo.docx') # Save document","out":"how to create docx files with python"}
{"in":"turtle.begin_fill() # Begin the fill process.<nl>turtle.down() # \"Pen\" down?<nl>for i in range(squares):  # For each edge of the shape<nl><tab>turtle.forward(40) # Move forward 40 units<nl><tab>turtle.left(angle) # Turn ready for the next edge<nl>turtle.up() # Pen up<nl>turtle.end_fill() # End fill.","out":"How Can I Fill These Squares in Turtle - Python"}
{"in":"host, aliaslist, lan_ip = socket.gethostbyname_ex(socket.gethostname())<nl>print host<nl>print aliaslist<nl>print lan_ip[0]","out":"In need of a python script to upload a file with IP address every few minutes"}
{"in":"sizer = wx.BoxSizer(wx.VERTICAL)<nl>sizer.Add(self.canvas, 1, wx.EXPAND)<nl>self.SetSizer(sizer)","out":"wxPython: Making something expand"}
{"in":"import matplotlib.pyplot as plt<nl><nl>def read_data(f, num_lines=1, split_on=':'):<nl><tab>lines = (f.next() for i in range(num_lines))<nl><tab>pieces = (line.split(split_on) for line in lines)<nl><tab>data = ((a,float(b)) for a,b in pieces)<nl><tab>return zip(*data)<nl><nl>with open(\"xx.txt\") as inf:<nl><tab>amino_names, amino_values = read_data(inf, 4)<nl><tab>ph_names, ph_values = read_data(inf, 2)<nl><nl>fig = plt.figure(figsize=(2,1))<nl>p1 = fig.add_subplot(1,2,1)<nl>p1.pie(amino_values, labels=amino_names)<nl>p2 = fig.add_subplot(1,2,2)<nl>p2.pie(ph_values, labels=ph_names)<nl>fig.show()","out":"pie plot in matplotlib in Python"}
{"in":"included_clients = clientData.objects.values_list('client', flat=True)<nl><nl>excluded_clients = Client.objects.exclude(id__in=included_clients)","out":"Filter data from models based on some condition"}
{"in":"if os.system(\"\/usr\/libexec\/oah\/translate > \/dev\/null 2>&1\"):<nl>  print \"Not installed\"<nl>else:<nl>  print \"Installed\"","out":"How to tell if rosetta is installed? --MacPython"}
{"in":"def cmpdirs(dir_cmp):<nl><tab># make copies of the comparison results<nl><tab>left   = dir_cmp.left_only[:]<nl><tab>right  = dir_cmp.righ_only[:]<nl><tab>common = dir_cmp.common_files[:]<nl><nl><tab>for sub_dcmp in dir_cmp.subdirs.values():<nl><tab><tab>sub_left, sub_right, sub_common = cmpdirs(sub_dcmp)<nl><nl><tab><tab># join the childrens results<nl><tab><tab>left   += sub_left<nl><tab><tab>right  += sub_right<nl><tab><tab>common += sub_common<nl><nl><tab># return the merged results<nl><tab>return (left, right, common)<nl><nl>if __name__ == '__main__':<nl><tab>dcmp   = dircmp('dir1', 'dir2')<nl><tab>result = cmpdirs(dcmp)","out":"Creating a flat list from return values of a recursive python function"}
{"in":"from sqlalchemy import create_engine, Column, Integer, String, DateTime, Float, UnicodeText, VARCHAR, NVARCHAR, TEXT, DATE, distinct, ForeignKey, Table<nl>import sqlalchemy<nl>from sqlalchemy.orm import sessionmaker, relationship<nl>from sqlalchemy.ext.declarative import declarative_base<nl>engine = create_engine(\"sqlite:\/\/\/.\/P_case.db\", <nl><tab><tab><tab><tab><tab>   echo=False)<nl><nl>Session = sessionmaker( bind=engine )<nl>session = Session()<nl><nl>Base = declarative_base()<nl>metadata = Base.metadata #########################<nl>class Bus(Base):<nl><nl><tab>__tablename__ = \"bus_info\"<nl><tab>id = Column( Integer, primary_key = True )<nl><nl><tab>## Bus<nl><tab>number = Column( Integer)<nl><nl>metadata.create_all( engine )<tab>######################","out":"SQL Alchemy Building an ORM"}
{"in":"from PySTAF import * <nl><nl>filename = 'C:\\\\Users\\\\NET\\\\2.png'<nl>destination = '192.168.1.139'<nl>copy_cmd =  \"COPY FILE {} TODIRECTORY c:\\Temp TOMACHINE {}\".format(STAFWrapData(filename),STAFWrapData(destination))<nl>result = handle.submit(\"local\", \"FS\",copy_cmd)<nl>print result.result<nl>assert result.rc == STAFResult.Ok","out":"How to copy a file on remote machine using PySTAF"}
{"in":"from datetime import datetime<nl>from datetime import timedelta<nl><nl>now = datetime.now()<nl>time_changed_state = now - timedelta(hours=2)<nl>time_delay = 0<nl>time_arrival = time_changed_state + timedelta(minutes=time_delay)<nl><nl>if now < time_arrival:<nl>   print 'something'<nl>elif now >= time_arrival:<nl>   print 'something different'","out":"Datetime comparison behavior in python"}
{"in":"# views.py<nl><nl>part_list = product.buildpart.all().order_by('family__type')","out":"Django getting related items in self-referential ManyToManyField in view"}
{"in":"def lineWhiteness(line, image):<nl><tab>(pt1, pt2) = lineParams(line, len(image))<nl><tab>count = 0<nl><tab>li = cv.InitLineIterator(cv.fromarray(image), pt1, pt2)<nl><tab>for (r, g, b) in li:<nl><tab><tab>if (r or g or b):<nl><tab><tab><tab>count += 1<nl><tab>return count","out":"Count number of white pixels along a line in OpenCV"}
{"in":"def test_testing(self):<nl>  url = self.base + str(gameid)  #the base ends with '\/v2\/game\/'<nl>  headers = {'content-type': 'application\/json'}<nl>  r = requests.post(url,headers=headers)","out":"Python Requests to access flask route with url variable"}
{"in":"Class._get_collection().aggregate([<nl><tab>{ '$group': {<nl><tab><tab>'_id': {<nl><tab><tab><tab>'year': { '$year': '$utc_timestamp' },<nl><tab><tab><tab>'month': { '$month': '$utc_timestamp' },<nl><tab><tab><tab>'day': { '$dayOfMonth': '$utc_timestamp' },<nl><tab><tab>},<nl><tab><tab>'defects': {<nl><tab><tab><tab>'$sum': { '$cond': [<nl><tab><tab><tab><tab>{ '$eq': [ '$status', 'defect' ] },<nl><tab><tab><tab><tab>1,<nl><tab><tab><tab><tab>0<nl><tab><tab><tab>]}<nl><tab><tab>},<nl><tab><tab>'totalCount': { '$sum': 1 }<nl><tab>}},<nl><tab>{ '$project': {<nl><tab><tab>'defect_rate': {<nl><tab><tab><tab>'$cond': [<nl><tab><tab><tab><tab>{ '$eq': [ '$defects', 0 ] },<nl><tab><tab><tab><tab>0,<nl><tab><tab><tab><tab>{ '$divide': [ '$defects', '$totalCount' ] }<nl><tab><tab><tab>]<nl><tab><tab>}<nl><tab>}}<nl>])","out":"How to run this MongoDB query using MongoEngine"}
{"in":"# emails is a set of emails<nl>for line in fileinput.input(\"csvfile.csv\",inplace =1):<nl><tab>parts = line.split(',')<nl><tab>if parts[3] not in emails:<nl><tab><tab>print line","out":"How to get the difference between two list based on substrings withing each string in the seperate lists"}
{"in":"d = fits.getdata('data.fit')<nl>df=pd.DataFrame(np.array(d).byteswap().newbyteorder())","out":"Creating pandas DataFrame from numpy array leads to strange errors"}
{"in":"from django import db<nl>db.close_connection()","out":"django transaction.commit_manually leads to 'MySQL server has gone away'"}
{"in":"def check_file_ready(self, path):<nl><tab>'''Check if file is not opened by another process.'''<nl><tab>handle = None<nl><tab>try:<nl><tab><tab>handle = win32file.CreateFile(<nl><tab><tab><tab>path,<nl><tab><tab><tab>win32file.GENERIC_WRITE,<nl><tab><tab><tab>0,<nl><tab><tab><tab>None,<nl><tab><tab><tab>win32file.OPEN_EXISTING,<nl><tab><tab><tab>win32file.FILE_ATTRIBUTE_NORMAL,<nl><tab><tab><tab>None)<nl><tab><tab>return True<nl><tab>except pywintypes.error, e:<nl><tab><tab>if e[0] == winerror.ERROR_SHARING_VIOLATION:<nl><tab><tab><tab># Note: other possible error codes include<nl><tab><tab><tab>#  winerror.ERROR_FILE_NOT_FOUND<nl><tab><tab><tab>#  winerror.ERROR_PATH_NOT_FOUND<nl><tab><tab><tab>#  winerror.ERROR_ACCESS_DENIED.<nl><tab><tab><tab>return False<nl><tab><tab>raise<nl><tab>finally:<nl><tab><tab>if handle:<nl><tab><tab><tab>win32file.CloseHandle(handle)","out":"How to check a file saving is complete using Python?"}
{"in":"common_words = frozenset((\"if\", \"but\", \"and\", \"the\", \"when\", \"use\", \"to\", \"for\"))<nl>title = \"When to use Python for web applications\"<nl>title_words = set(title.lower().split())<nl>keywords = title_words.difference(common_words)<nl>print(keywords)","out":"How to efficiently filter a string against a long list of words in Python\/Django?"}
{"in":"from kivy.uix.popup import Popup<nl>from kivy.uix.textinput import TextInput<nl>from kivy.uix.boxlayout import BoxLayout<nl>from kivy.uix.label import Label<nl><nl>box = BoxLayout()<nl>box.add_widget(Label(text='Hello world'))<nl>box.add_widget(TextInput(text='Hi'))<nl><nl>popup = Popup(title='Test popup', content=box, size_hint=(None, None), size=(400, 400))","out":"Kivy: Multiple items in a popup wont work"}
{"in":"import win32gui<nl><nl>def enumerationCallaback(hwnd, results):<nl><tab>text = win32gui.GetWindowText(hwnd)<nl><tab>if text.find(\"Mozilla Firefox\") >= 0:<nl><tab><tab>results.append((hwnd, text))<nl><nl>mywindows = []<tab><nl>win32gui.EnumWindows(enumerationCallaback, mywindows)<nl>for win, text in mywindows:<nl><tab>print text<nl><nl>def recurseChildWindow(hwnd, results):<nl><tab>win32gui.EnumChildWindows(hwnd, recurseChildWindow, results)<nl><tab>print hwnd<nl><tab># try to get window class, text etc using SendMessage and see if it is what we want<nl><nl>mychildren = []<nl>recurseChildWindow(mywindows[0][0], mychildren)","out":"how to get firefox address bar url for python (pywin32)"}
{"in":"import collections<nl>import random<nl><nl>cnt = collections.Counter()<nl>for i in range(101):<nl>  number = random.randint(1, 100)<nl>  if number % 2 == 0:<nl><tab>cnt['even'] += 1<nl>  else:<nl><tab>cnt['odd'] += 1<nl>print(cnt)","out":"Can someone help me with my program keeping a counter in python"}
{"in":"import pandas as pd<nl>import numpy as np<nl>import io<nl><nl>#original data<nl>temp=u\"\"\"col1,col2,col3,col4,col5<nl>1,2,3,4,5<nl>3,4,-5,6,7<nl>5,6,-7,8,9\"\"\"<nl><nl>df1 = pd.read_csv(io.StringIO(temp))<nl>print df1<nl>#   col1  col2  col3  col4  col5<nl>#0<tab> 1<tab> 2<tab> 3<tab> 4<tab> 5<nl>#1<tab> 3<tab> 4<tab>-5<tab> 6<tab> 7<nl>#2<tab> 5<tab> 6<tab>-7<tab> 8<tab> 9<nl><nl>#copy data for next processing<nl>df = df1.copy()<nl><nl>#set data by conditions<nl>df1['col1'] = np.where(df1['col3'] > 0,  df1['col1'] + df1['col3'], np.NaN)<nl>df1['col5'] = np.where(df1['col3'] > 0,  'blah', np.NaN)<nl><nl>#drop rows with NaN<nl>df1 = df1.dropna()<nl><nl>#append to original df<nl>result = pd.concat([df, df1], ignore_index=True)<nl>print result<nl>#   col1  col2  col3  col4  col5<nl>#0<tab> 1<tab> 2<tab> 3<tab> 4<tab> 5<nl>#1<tab> 3<tab> 4<tab>-5<tab> 6<tab> 7<nl>#2<tab> 5<tab> 6<tab>-7<tab> 8<tab> 9<nl>#3<tab> 4<tab> 2<tab> 3<tab> 4  blah","out":"How to speed up append to an existing dataframe"}
{"in":"from numpy import *<nl>from matplotlib.pyplot import *<nl>from math import *<nl><nl>t=arange(0,4*pi\/2,0.0001)<nl>print(t)<nl>#first set of parameters<nl>A=1<nl>B=1<nl>a1=1<nl>b1=2<nl>d=pi\/2<nl>#second set of parameters<nl>a2=2<nl>b2=3<nl>X1=[]<nl>Y1=[]<nl>Y2=[]<nl>X2=[]<nl>for i in range(len(t)):<nl><tab>x1=A*sin(a1*t[i]+d)<nl><tab>y1=B*sin(b1*t[i])<nl><tab>x2=A*sin(a2*t[i]+d)<nl><tab>y2=B*sin(b2*t[i])<nl><tab>X1=append(X1,x1)<nl><tab>Y1=append(Y1,y1)<nl><tab>X2=append(X2,x2)<nl><tab>Y2=append(Y2,y2)<nl>figure()<nl>plot(t,X1, color='blue')<nl>plot(t,Y1, color='pink')<nl>plot(t,X2, color='purple')<nl>plot(t,Y2, color='green')<nl>show()","out":"(Python) Trouble displaying a graph of a Lissajous curve"}
{"in":"import urllib<nl>urllib.urlretrieve('http:\/\/python.org\/images\/python-logo.gif', '\/tmp\/foo.gif')","out":"How to Download a file to a specific path in the server : Python"}
{"in":"Clock.schedule_once(partial(durclock.update, str(i)), 10-i)","out":"How to schedule event with Kivy Clock.schedule_once"}
{"in":"def reverse(data_list):<nl><tab>length = len(data_list)<nl><tab>s = length<nl><nl><tab>new_list = [None]*length<nl><nl><tab>for item in data_list:<nl><tab><tab>s = s - 1<nl><tab><tab>new_list[s] = item<nl><tab>return new_list","out":"creating a reverse method for a python list from scratch"}
{"in":"list=['L:', 'JM6', 'jm6', 'test', 'turb', 'results', 'v6.2', 'examples']<nl>os.path.join(*list)","out":"Join elements of a list into a path"}
{"in":"class B(A):<nl><tab> __init__ = my_init","out":"How do I override init?"}
{"in":"for i, item in enumerate(test):<nl><tab>if i and i % 4 == 0:<nl><tab><tab>f.write(\"<nl>\")<nl><tab>f.write(\"%-9s|   \" % item)","out":"Formatting\/Displaying list in python"}
{"in":"formatter = logging.Formatter('[%(asctime)s] p%(process)s {%(pathname)s:%(lineno)d} %(levelname)s - %(message)s','%m-%d %H:%M:%S')","out":"Extend standard python logging, to include the line number where a log method was invoked"}
{"in":"class Test(object): # make sure you inherit from object<nl><tab>@property<nl><tab>def x(self):<nl><tab><tab>return 4<nl><nl>p = Test()<nl>p.x # returns 4","out":"Python: How to make object attribute refer call a method"}
{"in":"driver.find_element_by_xpath(\"\/\/li\/label\/input[contains(..,'polishpottery')]\")","out":"Selecting Element followed by text with Selenium WebDriver"}
{"in":"rst_epilog = \"\"\"<nl>.. _CC-BY: https:\/\/creativecommons.org\/licenses\/by\/3.0\/<nl>.. _MIT: http:\/\/opensource.org\/licenses\/MIT<nl>\"\"\"","out":"Common link targets in Sphinx"}
{"in":"class MakeSlots(type):<nl><nl><tab>def __new__(cls, name, bases, attrs):<nl><tab><tab>attrs['__slots__'] = attrs.keys()<nl><nl><tab><tab>return super(MakeSlots, cls).__new__(cls, name, bases, attrs)<nl><nl>class A(object):<nl><tab>one = 1<nl><tab>two = 2<nl><nl><tab>__metaclass__ = MakeSlots","out":"Finding the static attributes of a class in Python"}
{"in":"result = [] # final result<nl>for i in range(len(A)):<nl><nl><tab>row = [] # the new row in new matrix<nl><tab>for j in range(len(B)):<nl><nl><tab><tab>product = 0 # the new element in the new row<nl><tab><tab>for v in range(len(A[i])):<nl><tab><tab><tab>product += A[i][v] * B[v][j]<nl><tab><tab>row.append(product) # append sum of product into the new row<nl><nl><tab>result.append(row) # append the new row into the final result<nl><nl><nl>print(result)","out":"How to multiply matrixes using for loops - Python"}
{"in":"vals = [random.choice(integers) for _ in range(num_ints)]","out":"How to generate list of random integers, but only using specified integers? (Python)"}
{"in":"class Tutor:<nl><tab>firstName = \"\"<nl><tab>lastName = \"\"<nl><tab>age = 0<nl><tab>primarySubjects = []<nl><tab>secondarySubjects = []","out":"Creating a Class with variable properties"}
{"in":"from multiprocessing import Process<nl>import time<nl>import threading <nl><nl>def f(name):<nl><tab>time.sleep(100)<nl><tab>print 'hello', name<nl><nl>def run_process_with_timeout(timeout, target, args):<nl><tab>p = Process(target=target, args=args)<nl><tab>p.start()<nl><tab>time.sleep(timeout)<nl><tab>p.terminate()<nl><nl>if __name__ == '__main__':<nl><tab>t = threading.Thread(target=run_process_with_timeout, args=(5,f,('bob',)))<nl><tab>t.start()<nl><tab>print \"This Needs to be Printed Immediately\"","out":"Terminate Python Process in a Limited Time"}
{"in":"def invert_tag(self, start, end=None, tag=SEL, w=None):<nl><tab>if w==None:<nl><tab><tab>w=self.cur_scroll() #This is my current text widget<nl><tab>i=0<nl><tab>while w.compare(start+\"+\"+str(i)+\"c\", \"<\", end):<nl><tab><tab>if \"sel\" in w.tag_names(start+\"+\"+str(i)+\"c\"):<nl><tab><tab><tab>w.tag_remove(tag, start+\"+\"+str(i)+\"c\")<nl><tab><tab>else:<nl><tab><tab><tab>w.tag_add(tag, start+\"+\"+str(i)+\"c\")<nl><tab><tab>i+=1","out":"Tkinter: inverting what text has a tag in a range of two indexes"}
{"in":"import tkFileDialog<nl><nl>def open_it():<nl><tab>filename = tkFileDialog.askopenfilename()<nl><tab>print filename  # test<nl><nl>def save_it():<nl><tab>filename = tkFileDialog.askopenfilename()<nl><tab>print filename  # test<nl><nl>def save_as():<nl><tab>filename = tkFileDialog.asksaveasfilename()<nl><tab>print filename  # test","out":"Python save as\/open"}
{"in":"def myfunc(w):<nl><tab>y = [el[:] for el in w]<nl><tab>y[0].append('What do I need to do to get this to work here?')<nl><tab>y[0].append('When I search for the manual, I get pointed to python.org, but I can\\'t find the answer there.')<nl><tab>return y<nl><nl>x = [[]]<nl>z = myfunc(x)<nl>print(x)","out":"How do I stop a Python function from modifying its inputs?"}
{"in":"N = 3 # for 3 lines of output<nl>p = subprocess.Popen(['\/path\/to\/external-app.sh'], <nl><tab>stdout=subprocess.PIPE, stderr=subprocess.PIPE)<nl>stdout, stderr = p.communicate()<nl><nl>if p.returncode != 0:<nl><tab>print (\"ERROR: External app did not complete successfully \"<nl><tab><tab>   \"(error code is %s)\" % p.returncode)<nl><tab>print \"Error\/failure details: \", '<nl>'.join(stderr.splitlines()[-N:])<nl><tab>status = False<nl>else:<nl><tab>status = True","out":"How to get the last N lines of a subprocess' stderr stream output?"}
{"in":"lastforlevel[n-1]","out":"Python xml creation from list with element levels"}
{"in":"#Open the document<nl>document = Document(args.inputFile)<nl><nl>#changing the page margins<nl>sections = document.sections<nl>for section in sections:<nl><tab>section.top_margin = Cm(margin)<nl><tab>section.bottom_margin = Cm(margin)<nl><tab>section.left_margin = Cm(margin)<nl><tab>section.right_margin = Cm(margin)<nl><nl>document.save(args.outputFile)","out":"Modify docx page margins with python-docx"}
{"in":"list_acciones=Accion.objects.filter(proyectos__id__in=ids_Proyecto)","out":"Django Model filters"}
{"in":"class myClass:<nl><tab>proxies = []<nl><tab>def doIt(self):<nl><tab><tab>myClass.proxies.append(1)","out":"How to use static variables inside functions?"}
{"in":"errs = dict((f.auto_id, f.errors) for f in form if f.errors)","out":"How can this be written on a single line?"}
{"in":"from win32com.client import Dispatch<nl><nl>auto = Dispatch(\"AutoItX3.Control\")<nl>auto.WinActivate(\"The window's title\", \"\")<nl>auto.WinWaitActive(\"The window's title\", \"\", 10)<nl><nl>auto.Send(\"The input\")","out":"Controlling a Windows Console App w\/ stdin pipe"}
{"in":"w, h = draw.textsize(text, font)","out":"Cannot align text with PIL textsize correctly"}
{"in":"import re<nl>exp = 'qty * price - discount + 100'<nl>exp = re.sub('(qty|price|discount)','%(\\\\1)f', exp)%vars(obj)","out":"python string conversion for eval"}
{"in":"import itertools<nl>with open(filename) as fin:<nl><tab>ilines = itertools.islice(fin, 2, None) #this throws away the first 2 lines<nl><tab>lines = sorted(ilines, key=lambda x: x.split()[0])  #sort lexicographically on first column<nl><nl>with open('header') as header, open('%s.header'%filename) as fout:<nl><tab>fout.writelines(header) #write the header<nl><tab>fout.writelines(lines) #write the data","out":"remove header and add another one"}
{"in":"chart = pygal.StackedLine(width=1000, height=800)","out":"How to limit the width\/height of svg in pygal"}
{"in":"def onListView1ListItemSelected(self, event):<nl><tab>obj<tab> = event.GetEventObject()<nl><tab>index   = event.GetIndex()<nl><tab>columns = obj.GetColumnCount()<nl><tab>data<tab>= []<nl><nl><tab>for i in range(columns):<nl><tab><tab>item = obj.GetItem(index, i)<nl><tab><tab>data.append(item.GetText())<nl><nl><tab>print(data)","out":"How do you get the list data from a wxpyton gui click event?"}
{"in":"{<nl>\"query\": {<nl><tab>\"function_score\": {<nl><tab><tab>\"query\": {  <nl><tab><tab><tab>\"match\": {<nl><tab><tab><tab><tab>\"text\": \"how now brown cow\"<nl><tab><tab><tab>}<nl><tab><tab>},<nl><tab><tab>\"functions\": [{<nl><tab><tab><tab>\"script_score\": { <nl><tab><tab><tab><tab>\"script\": \"doc['weight'].value\"<nl><tab><tab><tab>}<nl><tab><tab>}],<nl><tab><tab>\"score_mode\": \"multiply\"<nl><tab>}<nl>}<nl>}","out":"How to query Elasticsearch to boost by specific field"}
{"in":"for obj in objs:<nl><tab>obj.send(gateway)<nl>Message.objects.bulk_create(objs)","out":"bulk_create how to call function on each object"}
{"in":"import sys<nl><nl>print('Name of the script: {0}'.format(sys.argv[0]))<nl><nl>if len(sys.argv) == 3:<nl><tab>inputfile_path = sys.argv[1]<nl><tab>dictionary_path = sys.argv[2]<nl><tab>print('First parameter: {0}'.format(inputfile_path))<nl><tab>print('Second parameter: {0}'.format(dictionary_path))","out":"How to make my python script accepts multiple positional arguments?"}
{"in":"from polls.models import Poll, Choice","out":"Django database tables made but cannot import models from it"}
{"in":"size = sum(1 for _ in bucket.objects.all())","out":"How do I get the size of a boto3 Collection?"}
{"in":"iframe = self.driver.find_element_by_css_selector(\"#webcam-container\")<nl>self.driver.switch_to_frame(iframe)<nl>record = self.driver.find_element_by_css_selector(\"#record-button > span.yt-uix-button-content\")<nl>record.click()","out":"How to automate webpage button control using Selenium?"}
{"in":"n, k = int(input()), int(input())<nl>num = sorted([ int(input()) for i in range(0,n) ])<nl>min_unfairness = min( max_value - min_value for min_value, max_value in<tab>zip(num, num[k-1:]) )<nl>print(min_unfairness)","out":"Performance Improvement Basics in Python"}
{"in":"[f() for f in flist]","out":"Map function application over a list of functions without lambda in python"}
{"in":"def f(ls):<nl><tab>ct = 0<nl><tab>for x in ls:<nl><tab>#<tab>   ^<tab> Do not call the method, but just parse through the list  <nl><tab><tab>if x % 2 == 1:<nl><tab><tab><tab>ct += x<nl><tab>return(ct)<nl><tab>#<tab> ^  ^ parenthesis are not necessary <nl><nl>print(f([2,5,4,6,7,8,2]))<nl>#<tab>  ^<tab><tab><tab>   ^<tab>Missing paranthesis","out":"Trouble with for loops"}
{"in":"placeholders = ','.join('%s' for col in columns)<nl>query_string = \"INSERT INTO `{}` {} VALUES ({})\".format(table, columns, placeholders)<nl>query.execute(query_string, values)","out":"Python MySQLdb cursor.execute() insert with varying number of values"}
{"in":"from nose.tools import *<nl>class Test_mysim():<nl><tab>def setup(self):<nl><tab><tab>self.ans = calculate_it_once()<nl><nl><tab>def test_sync(self):<nl><tab><tab>ans=calculate_it_sync()<nl><tab><tab>assert_equal(ans,self.ans)<nl><nl><tab>def test_async(self):<nl><tab><tab>ans=calculate_it_async()<nl><tab><tab>assert_equal(ans,self.ans)","out":"Python unit-testing with nose: Making sequential tests"}
{"in":"if int(list[0][11:13])>=17 and int(list[0][11:13])<=19:<nl><tab>#This is the correct way of printing for aggregate library<nl><tab>#Print all as a string.<nl><tab>print  \"LongValueSum:\" + \"Express\" + \"\\t\" + list[3]","out":"Using Hadoop in python to process a large csv file"}
{"in":"import json<nl><nl>#jstr = \"... that thing above ...\"<nl># This line only decodes the JSON into a structure in memory:<nl>obj = json.loads(jstr)<nl># obj, in this case, is a dictionary, a built-in Python type.<nl><nl># These lines just iterate over that structure.<nl>for ka, va in obj.iteritems():<nl><tab>print ka<nl><tab>for kb, vb in va.iteritems():<nl><tab><tab>print '  ' + kb<nl><tab><tab>for key, string in vb.iteritems():<nl><tab><tab><tab>print '<tab>' + repr((key, string))","out":"Python decodes JSON"}
{"in":"L = [['Text', 'Count']]<nl>for line in inputFile:<nl><tab>L.append([var, var5])","out":"Transform list output from for loop"}
{"in":"import re<nl>valid = re.match('^[\\w-]+$', str) is not None","out":"How do I check if a string only contains alphanumeric characters and dashes?"}
{"in":"class DictionayModelForm(ModelForm):<nl><tab><tab>def __init__(self, *largs, **kwargs):<nl><tab><tab><tab>super(DictionayModelForm, self).__init__(*largs, **kwargs)<nl><tab><tab><tab>if self.instance and self.instance.pk is not None:<nl><tab><tab><tab><tab>for f in self.instance._meta.fields:<nl><tab><tab><tab><tab><tab>if isinstance(f, models.ForeignKey) and issubclass(f.rel.to, Dictionary):<nl><tab><tab><tab><tab><tab><tab>model_field = self.fields[f.name]<nl><tab><tab><tab><tab><tab><tab>value = getattr(self.instance, f.name, None)<nl><tab><tab><tab><tab><tab><tab>if value and value not in model_field.choices:<nl><tab><tab><tab><tab><tab><tab><tab>model_field.queryset = Dictionary.objects.filter(Q(**f.rel.limit_choices_to) | Q(id = value.id))","out":"How to modify field rendering behaviour based on state of other fields of model in django"}
{"in":"def midnights(dt1, dt2):<nl><tab>dt1 = dt1.replace(hour=0, minute=0, second=0, microsecond=0)<nl><tab>dt2 = dt2.replace(hour=0, minute=0, second=0, microsecond=0)<nl><tab>return (dt2 - dt1).days","out":"Count occurrences of midnight between datetimes"}
{"in":"import pdb<nl>pdb.set_trace()","out":"How do I programmatically stop execution of a python script, without closing python and maintaining the variables?"}
{"in":"line = line.rstrip()","out":"Python: Unable to remove newline from str"}
{"in":"from multiprocessing import Process, Queue<nl>import time<nl>def consumer(q):<nl><tab><tab> while(True):<nl><tab><tab><tab>data=q.get()<nl><tab><tab><tab>if (data[0]==False):<nl><tab><tab><tab><tab>print(\"Killing\")<nl><tab><tab><tab><tab>return<nl><tab><tab><tab>print((data[1]))<nl><tab><tab><tab>time.sleep(1)<nl><nl>if __name__ == '__main__':<nl><tab>maxitems=3<nl><tab>q = Queue(maxitems)<nl><tab>p = Process(target=consumer, args=(q,))<nl><tab>p.start()<nl><tab>for idx in range(0,10):<nl><tab><tab>q.put((True,idx))<nl><tab><tab>#Where idx would normally be a chunk of data<nl><tab>q.put((False,False))<nl><tab>p.join()","out":"Producer consumer in python locks on get"}
{"in":"Y = Y[random.choice(Y.keys())]","out":"Networkx node traversal"}
{"in":"import seaborn as sns<nl>import matploltlib.pyplot as plt<nl><nl>tips = sns.load_dataset(\"tips\")<nl><nl>ax = sns.pointplot(x=\"day\", y='total_bill', hue=\"smoker\",<nl><tab><tab><tab>  data=tips, dodge=0.3, join=False, palette=['white'])<nl>plt.setp(ax.lines, zorder=100)<nl>plt.setp(ax.collections, zorder=100, label=\"\")<nl><nl>sns.violinplot(x=\"day\", y=\"total_bill\", hue=\"smoker\", data=tips,<nl><tab><tab><tab>   split=True, inner='stick', ax=ax)","out":"Using Seaborn, how do I get all the elements from a pointplot to appear above the elements of a violoinplot?"}
{"in":"dict1 = { <nl>  'D1K1': ('v1', 'v2'),<nl>  'D1K2': ('v3', 'v4')<nl>}<nl><nl>dict2 = { <nl>  'D2K1': ('v1', 'v2'),<nl>  'D2K2': ('v3', 'v4')<nl>}<nl><nl># reverse dict2. this randomly chooses one of the possible mappings<nl># if there are more than one key with the same value..<nl>inv2 = dict((v, k) for k, v in dict2.items())<nl><nl># this assumes that there will always be a reverse mapping in dict2 <nl># for all values in dict1 (use inv2.get(v, default_value) if that is<nl># not the case).<nl>print dict((k, inv2[v]) for k, v in dict1.items())","out":"python 2 dictionaries into 1 dictionary join based on their values"}
{"in":"sql=\"select value from table where name='aaaa'\"<nl>cursor.execute(sql)<nl>results=cursor.fetchall() # changed to results to better reflect the list structure<nl>count = len(results)<nl>for i in range(0, count):<nl>  for j in range (i+1, count):<nl><tab>print results[i][0], results[j][0]","out":"how to compare the rows of a table using python"}
{"in":"import signal<nl>dict((k, v) for v, k in reversed(sorted(signal.__dict__.items()))<nl><tab> if v.startswith('SIG') and not v.startswith('SIG_'))","out":"Get signal names from numbers in Python"}
{"in":"y = a + bx + c*exp(-d*x)","out":"How to calculate estimation for monotonically growing sequence in python?"}
{"in":"message = (<nl><tab>'From: me@yahoo.com <nl>'<nl><tab>'To: %s <nl>'<nl><tab>'Subject: Data saved successfully <nl>'<nl><tab> '%s' %(args.r,TEXT)<nl>)","out":"Emails generated in loop not sending subject"}
{"in":"for index in range(len(listOne)):<nl><tab>listThree.append((listOne[index],listTwo[index]))","out":"nested lists and for loops program in python gives me a crazy result"}
{"in":"def was_published_today(self):<nl><tab>return (self.pub_date.date() == datetime.date.today())","out":"django datetime.datetime error"}
{"in":"def joinSegments( s ):<nl><tab>if s[0][0] == s[1][0] or s[0][0] == s[1][-1]:<nl><tab><tab>s[0].reverse()<nl><tab>c = s[0][:]<nl><tab>for x in s[1:]:<nl><tab><tab>if x[-1] == c[-1]:<nl><tab><tab><tab>x.reverse()<nl><tab><tab>c += x<nl><tab>return c","out":"Ordering linestring direction algorithm"}
{"in":"class ProbSVC(SVC):<nl><tab>def predict(self, X):<nl><tab><tab>return super(ProbSVC, self).predict_proba(X)","out":"grid search cross-validation on SVC probability output in sci-kit learn"}
{"in":"USE_PYTHON=yes<nl>USE_PYDISTUTILS=yes","out":"Creating a new Freebsd port"}
{"in":"class Friendship(models.Model):<nl>  from_friend = models.ForeignKey(<nl><tab>User, related_name='friend_set'<nl>  )<nl>  to_friend = models.ForeignKey(<nl><tab>User, related_name='to_friend_set'<nl>  )<nl>  def __unicode__(self):<nl><tab>return u'%s, %s' % (<nl><tab>  self.from_friend.username,<nl><tab>  self.to_friend.username<nl><tab>)<nl>  class Meta:<nl><tab>unique_together = (('to_friend', 'from_friend'), )","out":"How to write this \"model\" in Django?"}
{"in":"def setup_cookie():<nl><tab># try\/except to read the cookie<nl><tab>return cookie<nl><nl>def headers(cookie):<nl><tab># print a set-cookie header if needed<nl><tab>return \"SetCookie: etc\"<nl><nl>def page_content(cookie):<nl><tab># maybe you want to alter the page content with a regex or something based on the cookie value<nl><tab>return html<nl><nl>cookie = setup_cookie()<nl>print headers( cookie )<nl>print \"\"<nl>print page_content( cookie )","out":"Adding cookie to webpage, with python CGI"}
{"in":"import lxml.html<nl>doc = lxml.html.parse(url_to_site)<nl>feeds = doc.xpath('\/\/link[@type=\"application\/rss+xml\"]\/@href') # list feed urls","out":"Feed URL from HTML using Python"}
{"in":"3.907985046680551e-14","out":"What is the best method to read a double from a Binary file created in C?"}
{"in":"from suds.client import Client<nl>from suds.transport.http import HttpAuthenticated<nl><nl>t = HttpAuthenticated(username='liferayuser', password='liferaypassword')<nl>c = Client('http:\/\/liferay62instance.domain.com\/api\/axis\/Portal_UserService?wsdl', transport=t)<nl>result = c.service.getUserByScreenName(companyId=10154, screenName='user')","out":"liferay 6.2GA2 soap authentication with python suds client"}
{"in":"with open('some_file_1.txt', 'r') as file1:<nl><tab>with open('some_file_2.txt', 'r') as file2:<nl><tab><tab>same = set(file1).intersection(file2)<nl><nl>same.discard('<nl>')<nl><nl>with open('some_output_file.txt', 'w') as file_out:<nl><tab>for line in same:<nl><tab><tab>file_out.write(line)","out":"Compare two different files line by line in python"}
{"in":"from django.db.models import Q<nl><nl>threshold = {<nl><tab>'hot': Q(post_upvotes__gt=50),<nl><tab>'trending': Q(post_upvotes__range=(20,50)),<nl><tab>'new': Q(post_upvotes__lt=20)<nl>}<nl><nl>return Post.objects.filter(threshold[section])","out":"Django orm filter is an element of dict"}
{"in":"request.FILES['file_pm']","out":"python-django file upload 'key error'"}
{"in":"x = csr_matrix(np.random.rand(1000) > 0.99).T<nl>print x.shape   # (1000, 1)","out":"Sparse-Dense multiplication in Python"}
{"in":"imagelist[pagenumber: pagenumber+16]","out":"How to do implement a paging solution with a dict object in Python"}
{"in":"from bs4 import BeautifulSoup<nl><nl>page = \"<span>Hello world<\/span><h1>Nice to see you<\/h1><span>no<\/span><span>Hello babe<\/span>\"<nl><nl>soup = BeautifulSoup(page)<nl><nl>while len(soup.find_all('span')) > 0:<nl><tab>soup.span.extract()<nl>print soup","out":"Remove certain type of tag from HTML (without string operations) with Python and BeautifulSoup"}
{"in":"l = [a, b, c, d, e]<nl>c_index = l.index(\"c\")<nl>l2 = l[:c_index]","out":"Python: Split a list into sub-lists based on index ranges"}
{"in":"def inplace_unique_latest(L, key=None):<nl>  if key is None:<nl><tab>def key(x):<nl><tab>  return x<nl>  seen = set()<nl>  n = iter(xrange(len(L) - 1, -2, -1))<nl>  for x in xrange(len(L) - 1, -1, -1):<nl><tab>item = L[x]<nl><tab>k = key(item)<nl><tab>if k not in seen:<nl><tab>  seen.add(k)<nl><tab>  L[next(n)] = item<nl>  L[:next(n) + 1] = []","out":"Most efficient way to remove duplicates from Python list while preserving order and removing the oldest element"}
{"in":"dither=\"yes\"","out":"Pocketsphinx decoder adds words of its own"}
{"in":"import xlsxwriter<nl><nl>workbook  = xlsxwriter.Workbook('file.xlsx')<nl>worksheet = workbook.add_worksheet()<nl><nl>data = [13, 24, 15]<nl><nl>for row_num, value in enumerate(data):<nl><tab>worksheet.write(row_num, 0, value)<nl><nl>row_num += 1<nl>worksheet.write(row_num, 0, '=SUM(A1:A{})'.format(row_num))<nl><nl>workbook.close()","out":"How to determine last row populated for a certain column in xlsxwriter?"}
{"in":"from openerp.addons.web import http<nl>from openerp.addons.web.http import request<nl><nl>class Book(http.Controller):<nl><tab>@http.route('\/page\/getjson\/', type='http', auth='public', website=True)<nl><tab>def index(self, **kw):<nl><tab><tab>Books = request.env['x_book.book']<nl><tab><tab>return request.render('book.index', {<nl><tab><tab>'books': Books.search([])<nl>   })","out":"How to retrive data from database in Odoo 8"}
{"in":"class ItemLoader(ItemLoader):<nl><nl><tab>default_output_processor = MapCompose(unicode.strip)","out":"Iterating over a dictionary in python and stripping white space"}
{"in":"row[2] == day","out":"Python - If statement"}
{"in":"process.terminate()","out":"Kill a Python process if it doesn't finish in a certain time?"}
{"in":"class escapeMode(object):<nl><tab>'''<nl><tab>Enum to represent the escape mode.<nl><tab>'''<nl><tab>## Escape all values<nl><tab>ALLWAYS<tab> = 1<nl><tab>## Escape only values containing seperators or starting with quotation<nl><tab>NECESSARY   = 2","out":"Documentation after members in python (with doxygen)"}
{"in":"import uuid <nl>uuid.uuid4().hex[:6].upper()","out":"Generate a Unique String in Python\/Django"}
{"in":"body = str(\"The following items are in the list: \")<nl>items = [\"a\", \"b\", \"c\", \"d\"]  # list of strings<nl>for i in items:<nl><tab>body = body.__add__(i + \",\")<nl>print(body)","out":"How do I add all of the items from a list to a variable?"}
{"in":"values = [l[3] for l in data[:100]]","out":"Accessing a list of lists"}
{"in":"import filename","out":"How do I use a previous program that I've written in a new program that I am currently writing?"}
{"in":"rxSetting = re.compile('((?:\/\\w+:[^\/]+){3})')","out":"Python RegEx match results are too minimal, please advise"}
{"in":"connecting = ClientCreator(reactor, RedisListenerProtocol).connectTCP(HOST, PORT)<nl>def connected(listener):<nl><tab>listener.subscribe(\"newChannelName\")<nl><tab>listener.unsubscribe(\"channelName\")<nl>connecting.addCallback(connected)","out":"Subscribe and unsubscribe to channels after the connection has been made with txredisapi"}
{"in":"{} and {}.format(\"string\", 1)","out":"Concatenating string and integer in python"}
{"in":"sys.stdout.write(stdout_data)<nl>sys.stderr.write(stderr_data)","out":"Redirection of stdout and stderr to two different log files"}
{"in":"print(name + ', you won.')","out":"How to remove whitespace from end of string in Python?"}
{"in":"start = new_programme.get('start')<nl>start_time = datetime.datetime.strptime(start, '%Y%m%d%H%M%S -0000')<nl>print(type(start_time))<nl>seven_weeks = datetime.datetime.now() - datetime.timedelta(weeks=7)<nl>print(type(seven_weeks))<nl>is_more_than_7_weeks = start_time < seven_weeks","out":"How to compare time_struct with datetime.datetime in python?"}
{"in":"response = opener.open(self.__url, data)<nl>if response.info().get('Content-Encoding') == 'gzip':<nl><tab>buf = StringIO.StringIO( response.read())<nl><tab>gzip_f = gzip.GzipFile(fileobj=buf)<nl><tab>content = gzip_f.read()<nl>else:<nl><tab>content = response.read()","out":"urllib2 opener providing wrong charset"}
{"in":"import matplotlib<nl>if matplotlib.rcParams['backend'] == 'module:\/\/my_backend':<nl><tab>from IPython.lib.inputhook import enable_gui<nl><tab>enable_gui('qt4')","out":"Matplotlib: Customizing Qt4Agg Backend"}
{"in":"def generate(ysize, xsize, ycenter, xcenter, radius):<nl><tab>x = np.arange(xsize)[None,:]<nl><tab>y = np.arange(ysize)[:,None]<nl><tab>return ((xcenter - x) ** 2 + (ycenter - y) ** 2 <= radius ** 2) * 1<nl><nl><nl>generate(10,8,4,3,2)<nl><nl><nl>array([[0, 0, 0, 0, 0, 0, 0, 0],<nl><tab>   [0, 0, 0, 0, 0, 0, 0, 0],<nl><tab>   [0, 0, 0, 1, 0, 0, 0, 0],<nl><tab>   [0, 0, 1, 1, 1, 0, 0, 0],<nl><tab>   [0, 1, 1, 1, 1, 1, 0, 0],<nl><tab>   [0, 0, 1, 1, 1, 0, 0, 0],<nl><tab>   [0, 0, 0, 1, 0, 0, 0, 0],<nl><tab>   [0, 0, 0, 0, 0, 0, 0, 0],<nl><tab>   [0, 0, 0, 0, 0, 0, 0, 0],<nl><tab>   [0, 0, 0, 0, 0, 0, 0, 0]])","out":"generate a patterned numpy matrix"}
{"in":"Discount.objects.filter(discount_store__store_city__city_name=\"bursa\")","out":"Django Span Filter in View"}
{"in":"self.ToggleTool(self.add_points_id, True)","out":"wxpython: how to programmatically select a radio tool?"}
{"in":"Button.invoke()","out":"Is there a way to press a button without touching it on tkinter \/ python?"}
{"in":"package_dir = {'': 'src'},","out":"how can I make pip\/setuptools understand that my package is in .\/src?"}
{"in":"self.b_set.last().name","out":"(Django) define `__str__` in a model with attributes of other model not yet defined"}
{"in":"from urllib import quote_plus as urlquote<nl>from sqlalchemy.engine import create_engine<nl>engineString = 'postgresql:\/\/wberg:%s@localhost\/mydatabase' % urlquote('pass\/word')<nl>engine = create_engine(engineString)","out":"SQLAlchemy ValueError for slash in password for create_engine()"}
{"in":"def initialize_function(num,instruction,emplacement1,emplacement2,current_pipeline):<nl><tab>function_mapping={<nl><tab>\"LOAD\" : LOAD,<nl><tab>\"STORE\" : STORE,<nl><tab>\"MOVE\" : MOVE_IADD,<nl><tab>\"IADD\" : MOVE_IADD,<nl><tab>\"FADD\" : FADD<nl><tab>}<nl><tab>current_pipeline=function_mapping[instruction](num,emplacement1,emplacement2,current_pipeline)<nl><tab>return(current_pipeline)","out":"How to cancel the dictionary to initialize ? python3.3"}
{"in":"max_value = max(foo.value for foo in foos)<nl># instead of:<nl># max_value = max([foo.value for foo in foos])","out":"max-Function for attributes of objects"}
{"in":"kwargs = {filter_field: filter_value}<nl>Alert.objects.filter(**kwargs)","out":"How do I pass in a field to filter a Django model?"}
{"in":"for sub_list in my_list:<nl><tab>for dx in (0, -1):<nl><tab><tab>while sub_list and sub_list[dx] == 0:<nl><tab><tab><tab>sub_list.pop(dx)","out":"Remove leading and trailing zeros from multidimensional list in Python"}
{"in":"def groupByPrefix(strings):<nl><tab>stringsByPrefix = {}<nl><tab>for string in strings:<nl><tab><tab><tab>prefix, suffix = map(str.strip, string.split(\"\/\", 1))<nl><tab><tab><tab>group = stringsByPrefix.setdefault(prefix, [])<nl><tab><tab><tab>group.append(suffix)<nl><tab>return stringsByPrefix","out":"Finding multiple common starting strings"}
{"in":"def get_queryset(self, *args, **kwargs):<nl><tab>\"\"\"<nl><tab>Checks if currentuser = true is in the URL and filters this it.<nl><tab>\"\"\"<nl><tab>queryset = super(FilterMixin, self).get_queryset(*args, **kwargs)<nl><nl><tab>currentuser = self.request.QUERY_PARAMS.get('currentuser')<nl><tab>project = self.request.QUERY_PARAMS.get('project')<nl><nl><tab>if currentuser == \"true\":<nl><tab><tab>queryset = queryset.filter(user=self.request.user)<nl><nl><tab>if project:<nl><tab><tab>queryset = queryset.filter(project=project)<nl><nl><tab>return queryset","out":"How to chain filters together using Django Rest Framework filters"}
{"in":"from random import choice<nl>random_function_selector = [foo, foobar, fudge]<nl><nl>print choice(random_function_selector)()","out":"Choosing a function randomly"}
{"in":"import string<nl>chars = string.lowercase + string.uppercase<nl><nl>def identifier(x, chars):<nl><tab>output = []<nl><tab>base = len(chars)<nl><tab>while x:<nl><tab><tab>output.append(chars[x % base])<nl><tab><tab>x \/= base<nl><tab>return ''.join(reversed(output))<nl><nl>print identifier(1, chars)","out":"python unique string creation"}
{"in":"python-ttk","out":"Putting images in a Tkinter"}
{"in":"xx[xx['Business']==\"1\"]['Label'].tolist()","out":"How to extract a list from pandas?"}
{"in":"ticks = ax.get_xticks()<nl>ticks = np.union1d(ticks, [0.7])<nl>ax.set_xticks(ticks)<nl>ax.set_xticklabels(newlabels)","out":"Tick label modification; How to add an arbitrary tick on the label:"}
{"in":"dicResults =  {}<nl>for row in results:<nl><tab>dicResults[row[1]] = [row[0], row[2], row[3]]","out":"Python mysqldb data"}
{"in":"ResultObj(*args)","out":"Design pattern for combining objects"}
{"in":"from Package import specific_submodule","out":"Preferred way to import multiple modules from package"}
{"in":"foo = '\"MARY\",\"PATRICIA\",\"LINDA\",\"BARBARA\",\"ELIZABETH\",\"JENNIFER\",\"MARIA\",\"SUSAN\",\"MARGARET\",\"DOROTHY\",\"LISA\",\"NANCY\",\"KAREN\",\"BETTY\",\"HELEN\",\"SANDRA\",\"DONNA\",\"CAROL\"'<nl>output = foo.replace('\"','').split(\",\")","out":"Python: Splitting a string into elements and adding them in a list"}
{"in":"re.sub(\"[^a-zA-Z0-9 -]\",\"\",'SEGA E-r. Ata{{r}}i<nl>')","out":"Using regular expressions to exclude non-alphanumeric characters"}
{"in":"import urllib, urllib2, cookielib<nl><nl># cookie storage<nl>cj = cookielib.CookieJar()<nl>opener = urllib2.build_opener(<nl><tab>urllib2.HTTPCookieProcessor(cj),<nl><tab>urllib2.HTTPRedirectHandler<nl><tab>)<nl># Useragent<nl>opener.addheaders.append(('User-agent','Mozilla\/4.0'))<nl><nl>url = 'http:\/\/www.okcupid.com\/login'<nl>login_data = urllib.urlencode({<nl><tab>'username':'myusername',<nl><tab>'password':'mypassword',<nl><tab>})<nl><nl>req = urllib2.Request(url,login_data)<nl>resp = opener.open(req)<nl>the_page = resp.read()<nl><nl>print the_page","out":"Programmatically login to OKC"}
{"in":"import BeautifulSoup<nl><nl>fname = r'c:\\mydir\\beautifulSoup.html'<nl>soup = BeautifulSoup.BeautifulSoup(open(fname, 'r'))<nl><nl>items = []<nl>last_seen_date = None<nl>for el in soup.findAll('tr'):<nl><tab>daterow = el.find('td', {'class':'date'})<nl><tab>if daterow is None:<tab> # not a date - get headline and link<nl><tab><tab>headline = el.find('td', {'class':'headline'}).text<nl><tab><tab>link = el.find('a').get('href')<nl><tab><tab>items.append((last_seen_date, headline, link))<nl><tab>else:<tab><tab><tab><tab>   # get new date<nl><tab><tab>last_seen_date = daterow.text","out":"How to loop through a html-table-dataset in Python"}
{"in":"import sys<nl><nl>class Borg(object):<nl><tab>__shared_state = {}<nl><tab>def __init__(self, nombre):<nl><tab><tab>self.__dict__ = self.__shared_state<nl><tab><tab>self.nombre = nombre <nl><nl><tab>def instance_method_1(self):<nl><tab><tab>print 'my instance vr::', self.nombre<nl><tab><tab>panga = 'pangas'<nl><tab><tab>print 'te copio con  ' <nl><tab><tab>print panga<nl><tab><tab>print self.nombre<nl><nl><nl>pingus = Borg('varString')<nl><nl><nl>print pingus.nombre<nl>pingus.instance_method_1()","out":"Accessing a Python instance var from that class"}
{"in":"import subprocess <nl>try:<nl><tab>import nltk<nl><tab>nltkv = '{}.'.format(nltk.__version__)<nl><tab>print \"nltk is already installed, V : <nl>\", nltkv # mind the escape sequence<nl>except ImportError:<nl><tab>print \"Nltk is not installed, Let's start installing ...<nl>\"<nl><tab>subprocess.call('sudo pip install -U nltk', shell = True)<nl><tab>#sudo easy_install pip<nl>except:<nl><tab>print \"Some error occurred!<nl>\"","out":"Verify installation, print version if already installed otherwise install that package"}
{"in":"from datetime import datetime<nl><nl>fmt = '%Y-%m-%d %H:%M:%S'<nl>d1 = datetime.strptime('2010-01-01 17:31:22', fmt)<nl>d2 = datetime.strptime('2010-01-03 17:31:22', fmt)<nl><nl>print (d2-d1).days * 24 * 60","out":"python date difference in minutes"}
{"in":"sc = (\"\\x31\\xdb\"<tab>  # xor %ebx, %ebx<nl><tab>  \"\\x31\\xc9\"<tab>  # xor %ecx, %ecx<nl><tab>  \"???\")","out":"How to add inline comments to multiline string assignments in python"}
{"in":"lst = [['a', 'b', 'a'], ['a', 'b', 'c'], ['a']]<nl><nl>def count(lst):<nl><tab># declare dictionary that we are going to return<nl><tab>foo = {}<nl><tab># iterate sublist<nl><tab>for sublist in lst:<nl><tab><tab># make sublist into unique element list<nl><tab><tab>sublist = list(set(sublist))<nl><tab><tab>for element in sublist:<nl><tab><tab><tab># if element found in foo dic, increment<nl><tab><tab><tab>if element in foo:<nl><tab><tab><tab><tab>foo[element] += 1<nl><tab><tab><tab># else, init with 1<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>foo[element] = 1<nl><tab>return foo<nl><nl>res = count(lst)<nl>print res","out":"count sublists that has a specific term in python"}
{"in":"hint = random.choice(list({a, b, c, d, e, f} - {killer, previous_guess}))","out":"Giving Exceptions to a Random Choice"}
{"in":"from IPython import get_ipython<nl>ipython = get_ipython()<nl><nl>if '__IPYTHON__' in globals():<nl><tab>ipython.magic('load_ext autoreload')<nl><tab>ipython.magic('autoreload 2')","out":"How to use IPython magic within a script to auto reload modules?"}
{"in":"butn.onClick.AddListener(lambda item=item: dicbrowser(holderdict[item],0))","out":"Delegate in Python in combination with unity"}
{"in":"sorted(results.iteritems(), key=lambda x: x[1]['Rating'])","out":"How to Optimally Save Data in Python as Data Structure"}
{"in":"import wx<nl>from wx.lib.iewin import IEHtmlWindow<nl>a = wx.App(redirect=False)<nl>f = wx.Frame(None,-1,\"My Desktop Application\")<nl>browser = IEHtmlWindow(f)<nl>browser.Navigate(\"http:\/\/google.com\")<nl>f.Show()<nl>a.MainLoop()","out":"Implement web based desktop application with python"}
{"in":"# Converts something like \"14\/Nov\/2012:09:32:46\"<nl># to \"2012-11-14:09:32:46\"<nl>_MONTHS = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]<nl>def convert(s):<nl>  p = s.split(':', 1)<nl>  t = p[0].split('\/')<nl>  return \"%s-%02d-%02d:\" % (t[2], _MONTHS.index(t[1]) + 1, int(t[0])) + p[1]","out":"how to switch strings from 14\/Nov\/2012 into 2012\/11\/14 without converting to datetime in Python?"}
{"in":"from django.contrib import admin<nl><nl>from models import News, NewsLang<nl><nl>class NewsLangInline(admin.TabularInline):<nl><tab>model = NewsLang<nl><nl>class NewsAdmin(admin.ModelAdmin):<nl><tab>inlines = [NewsLangInline]<nl>admin.site.register(News, NewsAdmin)","out":"Multiple model edition in django-admin"}
{"in":"strQuery = \"<queryxml><entity>Ticket<\/entity><query>\" + \\<nl><tab><tab><tab><tab><tab><tab>\"<condition><field>id<expression op=\"\"greaterthan\"\">\" + strCurrentID + \"<\/expression><\/field><\/condition>\" + strCriteria + \\<nl><tab><tab><tab><tab><tab><tab>\"<condition><field>EstimatedHours<expression op=\"\"isnull\"\"><\/expression><\/field><\/condition>\" + \\<nl><tab><tab><tab><tab><tab><tab>\"<\/query><\/queryxml>\"","out":"Using QueryXML with SUDS and Python"}
{"in":"import subprocess<nl>subprocess.call([\"ssconvert\",\"sample.xlsx\",\"sample.csv\"],cwd=\"pathtoyourfile\") # pathtoyourfile must contain the xlsx and csv files","out":"How to execute ssconvert command using subprocess in python"}
{"in":"import os<nl>if os.fork() == 0: exit()","out":"Display objects within a function, how to NOT terminate the program after close the display?"}
{"in":"wavFile.writeframes(voiceSample.tostring())","out":"How to save trimmed wave file in python?"}
{"in":"def get_context_data(self,**kwargs):<nl><tab>context = super(DvStringUpdateView, self).get_context_data(**kwargs)<nl><tab>semlinks = []<nl><tab>obj = get_object_or_404(DvString,pk=context['object'].id)<nl><tab>if obj.resource_uri:<nl><tab><tab>urilist = obj.resource_uri.splitlines()<nl><tab><tab>attrlist = obj.sem_attr.splitlines()<tab><tab><nl><tab><tab>for n in range(0,len(urilist)):<nl><tab><tab><tab>semlinks.append(attrlist[n] + ' = ' + unquote(urilist[n]))<nl><nl><tab>context['semlinks'] = semlinks<nl><tab>context['ct_id'] = obj.ct_id<nl><tab>return context","out":"UUIDField from django-extensions is not available in Class Based Views"}
{"in":"# python startup file <nl>import readline <nl>import rlcompleter <nl>import atexit <nl>import os <nl># tab completion <nl>readline.parse_and_bind('tab: complete') <nl># history file <nl>histfile = os.path.join(os.environ['HOME'], '.pythonhistory') <nl>try: <nl><tab>readline.read_history_file(histfile) <nl>except IOError: <nl><tab>pass <nl>atexit.register(readline.write_history_file, histfile) <nl>del os, histfile, readline, rlcompleter","out":"How to repeat last command in python interpreter shell?"}
{"in":"similar_posts=qs.filter(state=post.state)","out":"NameError In Django View"}
{"in":"STATIC_ROOT = os.path.join(PROJECT_DIR, 'static')","out":"Unable to perform collectstatic"}
{"in":"person = db.ReferenceProperty(Person, collection_name=\"cars\")","out":"google-app-engine: How can I have a list of objects as property in another class?"}
{"in":"import logging<nl>from google.appengine.ext import ereporter<nl><nl>ereporter.register_logger()","out":"GAE Python - Ereporter doesn't send email"}
{"in":"import win32com.client<nl>import sys # <- obsolete not used<nl>import os<nl>import glob # style guide one import per line<nl><nl><nl>Application = win32com.client.Dispatch(\"PowerPoint.Application\")<nl>Application.Visible = True<nl><nl>ppt_files = glob.glob('*.ppt')<nl><nl>for file in ppt_files:<nl><tab>file = os.path.abspath(file)<nl><tab>Presentation = Application.Presentations.Open(file)<nl><tab>for Slide in Presentation.Slides:<nl><tab><tab>for Shape in Slide.Shapes:<nl><tab><tab><tab>try:<nl><tab><tab><tab><tab>Shape.TextFrame.TextRange.Font.Name = \"Arial\"<nl><tab><tab><tab><tab>Shape.TextFrame.TextRange.Font.Size = \"12\"<nl><tab><tab><tab><tab>Shape.TextFrame.TextRange.Font.Color.RGB = \"000000\"<nl><tab><tab><tab>except:<nl><tab><tab><tab><tab>pass<nl><tab>Presentation.Save()<nl><tab>Presentation.Close()<nl><nl>Application.Quit()","out":"Python: Pause for-loop while application closes"}
{"in":"sniff(filter = 'dst port 5555')","out":"sniff traffic on a particular port using scapy"}
{"in":"import pygame as pg<nl>from pygame.locals import *<nl><nl>SIZE = (800, 600)<nl>BGCOL = (128, 128, 128)<nl>STIMCOL = (80, 255, 80)<nl><nl>screen = pg.display.set_mode((SIZE), HWSURFACE | DOUBLEBUF)<nl>screen.fill(BGCOL)<nl><nl>surf = pg.Surface((200, 200), flags=HWSURFACE)<nl>surf.fill(BGCOL)<nl><nl>pg.draw.rect(surf, STIMCOL, (10, 20, 40, 50))<nl>pg.draw.rect(surf, STIMCOL,  (60, 70, 80, 90))<nl><nl>screen.blit(surf, (100, 100))<nl><nl>pg.display.flip()<nl><nl>running = True<nl>while running:<nl><tab>surf = pg.transform.rotate(surf, -1) # updating rotation on the surface<nl><tab>screen.blit(surf, (100, 100)) #bliting the resulting image every frame<nl><tab>pg.display.flip()","out":"How can I rotate a group of pygame objects (either rects or images)"}
{"in":"import sys, os<nl><nl>file_list = []<nl><nl>for f in os.listdir(sys.argv[1]):<nl><tab>file_list.append(f)<nl><nl>for i in range(len(file_list)):<nl><tab>prevName = file_list[i]<nl><tab>if prevName != 'stackoverflow.py':  # Mention .py file so that it doesnt get renamed<nl><tab><tab>newName = '00' + file_list[i]<nl><tab><tab>os.rename(prevName, newName)","out":"How does one rename multiple files using python?"}
{"in":"p=subprocess.Popen('du -sh \/tmp\/*', shell=True)","out":"du -sh behaviour in terminal and from an python script?"}
{"in":"{{thing['attr'] if defined('thing') else ''}}","out":"handling undefined values in bottle's SimpleTemplate Engine templates"}
{"in":"a.count(\"__TEXT__\")","out":"Get a count for a pattern using python"}
{"in":"class PublicationAdmin(admin.ModelAdmin):<nl><tab>list_display = ('title',)<nl><tab>search_fields = ('tags__title',)","out":"Reverse Relation Search Django Admin Interface"}
{"in":"def __init__(self):<nl><tab>for parent_klass in inspect.getmro(self.__class__):<nl><tab><tab>_d.update(getattr(parent_klass, 'd', {}))<nl><tab>_d.update(self.d)<nl><tab>self.d = _d","out":"Dictionary in a child class to update the dictionary with same name defined in parent class instead of over-riding"}
{"in":"mylist = range(0,20+1,5)<nl>f = open(\"test.txt\", \"w\")<nl>f.writelines(' '.join(map(str, mylist)))<nl>f.close()","out":"Python syntax with for loop and lists, exporting to text file"}
{"in":"import urllib2<nl><nl>url = \"http:\/\/www.cmegroup.com\/CmeWS\/mvc\/ProductSlate\/V1\/List\/500\/1?sortField=oi&sortAsc=false&venues=3&page=1&cleared=1&group=1&r=eSxQS2SI\"<nl>user_agent = 'Mozilla\/4.0 (compatible; MSIE 5.5; Windows NT)'<nl>headers = { 'User-Agent' : user_agent }<nl><nl>req = urllib2.Request(url, headers=headers)<nl><nl>response = urllib2.urlopen(req)<nl><nl>your_json = response.read()<nl>response.close()","out":"Python access server urlopen()"}
{"in":"sum(my_counter.itervalues())","out":"Sum all values of a counter in Python"}
{"in":"class Manager(object):<nl><tab>def new_thread(self):<nl><tab><tab>return MyThread(parent=self)<nl><tab>def on_thread_finished(self, thread, data):<nl><tab><tab>print thread, data<nl><nl>class MyThread(Thread):<nl><tab>def on_thread_finished(self, thread, data):<nl><tab><tab>pass<nl><tab>def __init__(self, parent=None):<nl><tab><tab>self.parent = parent<nl><tab>def run(self):<nl><tab><tab># ...<nl><tab><tab>self.parent and self.parent.on_thread_finished(self, 42)<nl><nl>mgr<tab>= Manager()<nl>thread = mgr.new_thread()<nl>thread.run()","out":"Python: How to pass and run a callback method in Python"}
{"in":"from Tkinter import *<nl>from tkFileDialog import askopenfilename<tab>  <nl><nl>value_list = []<nl><nl>def callback():<nl><tab>name = askopenfilename() <nl><tab>value_list.append(name)<nl><tab>print name<nl><nl>Button(text='File Open', command=callback).pack(fill=X)<nl>mainloop()<nl><nl># value_list[0] is filename","out":"Passing a variable from Tkinter to main program"}
{"in":"Toy.objects.filter(toy_owners__parents=parent)","out":"Django ORM way of going through multiple Many-to-Many relationship"}
{"in":"import matplotlib.pyplot as plt<nl>import numpy as np<nl><nl>length = np.random.random(10)<nl>length.sort()<nl>time = np.random.random(10)<nl>time.sort()<nl>slope, intercept = np.polyfit(np.log(length), np.log(time), 1)<nl>print(slope)<nl>plt.loglog(length, time, '--')<nl>plt.show()","out":"Python: How to find the slope of a graph drawn using matplotlib?"}
{"in":"def equal_float(a, b):<nl><tab>#return abs(a - b) <= sys.float_info.epsilon<nl><tab>return abs(a - b) <= chosen_value #see edit below for more info","out":"Checking if float is equivalent to an integer value in python"}
{"in":"def outer():<nl><tab>a = [1]<nl><tab>def inner():<nl><tab><tab>a[0] += 1<nl><tab><tab>print a[0]","out":"Modify the function variables from inner function in python"}
{"in":"class ClassB(gtk.Window):<nl><tab>def __init__(self, variable):<nl><tab><tab>#Your code<nl><tab><tab>self.variable = variable","out":"How to pass a variable from class in python\/gtk?"}
{"in":"import tkFileDialog<nl>import os<nl>import os.path<nl>import re<nl><nl>directory = tkFileDialog.askdirectory()<nl><nl>for dirpath, dirnames, filenames in os.walk(directory):<nl><tab>for filename in filenames:<nl><tab><tab>path = os.path.join(dirpath, filename)<nl><nl><tab><tab>with open(path) as file:<nl><tab><tab><tab>contents = file.read()<nl><nl><tab><tab><tab>print path[:30], contents.count('Tmp'), re.findall('Tmp\\d{5}', contents)","out":"Counting \"something\" in multiple text files in one folder"}
{"in":"scipy.misc.imread()","out":"Convert image to a matrix in python"}
{"in":"frame = MyFrame(logger)","out":"How to report errors early in a py2app-frozen wxpython app on OSX,"}
{"in":"start()","out":"Issue with setting value for Python class inherited from multiprocessing.Process"}
{"in":"Entry.objects.all()[0].image.thumbnail.relative_url","out":"Django - sorl-thumbnail - accessing thumbnail image from view functions"}
{"in":"from twisted.internet.protocol import ServerFactory<nl><nl>class LocalOnlyFactory(ServerFactory):<nl><tab>def buildProtocol(self, addr):<nl><tab><tab>if addr.host == \"127.0.0.1\":<nl><tab><tab><tab>return ServerFactory.buildProtocol(self, addr)<nl><tab><tab>return None","out":"Python Twisted: restricting access by IP address"}
{"in":"dataInSocket, _, _ = socket.select.select([sock], [], [])<nl>if dataInSocket:<nl><tab>data, addr = sock.recvfrom(MAX_MESS_LEN)<nl><tab>thread.start_new_thread(message_handler, (data, addr,))","out":"How can I interrupt a recvfrom() call in Python with keyboard?"}
{"in":"new_word = word[1:] + word[0] + pyg","out":"Confused about order for processes"}
{"in":"def delete(head, value):<nl><tab>curr = head<nl><tab>prev = curr.next<nl><tab>while prev.next != head:<nl><tab><tab>prev = prev.next<nl><nl><tab>if curr.value == value:<nl><tab><tab>prev.next = curr.next<nl><nl><tab>curr = curr.next<nl><tab>prev = prev.next<nl><tab>while curr.value != value and curr != head:<nl><tab><tab>curr = curr.next<nl><tab><tab>prev = prev.next<nl><nl><tab>if curr.value == value:<nl><tab><tab>prev.next = curr.next","out":"Alternate way to delete a node in circular linked in python"}
{"in":"os.system('ssh [...]')","out":"Start interactive SSH session from Python script"}
{"in":"submenus = mainwindow.menuBar().findChildren(QAction)","out":"Export QT Menu to text"}
{"in":"data[i, :, :, :] = arr.transpose(2, 1, 0)","out":"Store an image in an array using Python"}
{"in":"import sqlite3 as sq<nl>connection = sq.connect(\"test.db\")<nl>cursor = connection.cursor()<nl>cursor.execute(\"DROP TABLE IF EXISTS test\")<nl>cursor.execute(\"CREATE TABLE test (st TEXT)\")<nl>cursor.execute(\"INSERT INTO test VALUES ('testing')\")<nl>connection.commit() # !!!<nl>cursor.execute(\"SELECT * FROM test\")<nl>print(cursor.fetchall())<nl>cursor.close()<nl>connection.close()<nl>connection2 = sq.connect(\"test.db\")<nl>cursor2 = connection2.cursor()<nl>cursor2.execute(\"SELECT * FROM test\")<nl>print(cursor2.fetchall())","out":"SQLite not saving data between uses"}
{"in":"shared_items = set(x.items()) & set(y.items())<nl>print len(shared_items)","out":"Comparing two dictionaries in Python"}
{"in":"maxval = max(dict.iteritems(), key=operator.itemgetter(1))[1]<nl>keys = [k for k,v in dict.items() if v==maxval]","out":"Get the Key correspond to max(value) in python dict"}
{"in":"for page in data[\"query\"][\"pages\"].values():<nl><tab>title = page[\"title\"]<nl><tab>langlinks = page[\"langlinks\"]<nl><tab># do something with langlinks...","out":"Reach a string behind unknown value in JSON"}
{"in":"format(number, '03')","out":"convert number to formatted string in python with prefix 0s"}
{"in":"url = 'https:\/\/www.googleapis.com\/appsmarket\/v2\/upgradableApp\/oldlisting\/newlisting\/mybeacon.biz'<nl><nl>consumer_key = 'key'<nl>consumer_secret = 'secret'<nl><nl>consumer = oauth.Consumer(consumer_key, consumer_secret)<nl><nl>client = oauth.Client(consumer)<nl><nl># Step 1: Get a request token. This is a temporary token that is used for<nl># having the user authorize an access token and to sign the request to obtain<nl># said access token.<nl><nl>resp, content = client.request(url, \"PUT\")","out":"Calling Google Apps Marketplace UpgradeableApp API with Python Appengine App"}
{"in":"import numpy as np<nl>a = np.ones((3,4,5))<nl>b = np.ones((3,4,5))<nl>c = np.concatenate((a[...,np.newaxis],b[...,np.newaxis]),axis=3)","out":"Concatenate two numpy arrays in the 4th dimension"}
{"in":"from django.db.models import Count<nl><nl>Product.objects.get(pk=1).offer_set.all().values('price').annotate(total=Count('price')).order_by('price')","out":"How to count how many records have minimum value in field? (Django)"}
{"in":"import re<nl>sentence = \"You are my favorite. Are you my friend? Are you an elephant?\"<nl>items = []<nl>for item in re.finditer(\"[Aa]re\", sentence, ):<nl><tab>items.append(item.start())","out":"python choose one object from array"}
{"in":"temp_list = []<nl>prev_value = original_list[0][1]<nl><nl>for key, value in original_list:<nl><tab>if value == prev_value:<nl><tab><tab>temp_list.append(key)<nl><tab>else:<nl><tab><tab>do_something(temp_list)<nl><tab><tab>print temp_list<nl><tab><tab>temp_list = [key]<nl><tab>prev_value = value<nl><nl>do_something(temp_list)<nl>print temp_list<nl><nl># prints ['4', '3', '2']<nl># prints ['1', '6']","out":"Iterating over a Python 2D list to find the value"}
{"in":"test_dict = dict((x, dict()) for x in ['k1', 'k2'])","out":"Passing in a new value to each key using Python's `dict.fromkeys`"}
{"in":"for x_entry, y_entry, label in zip(x,y,labels):<nl><tab><tab>print label<nl><tab><tab>self.map.plot(x_entry, y_entry, 'bo', markersize=10, picker=5, label=label)","out":"Labels with list in matplotlib"}
{"in":"#!\/usr\/bin\/env python<nl><nl>import sys,os,re<nl><nl>print ('Searcing for a line in \/etc\/pam.d\/common-password<nl>')<nl><nl>pass_file = open('\/root\/p_file\/common-password', 'r').readlines()<nl><nl>for i in pass_file:<nl><nl><tab>if re.search(r\"password<tab><tab>required<tab><tab>pam_unix2.so use_authok<nl>\", i):<nl><nl><tab><tab>sys.exit(\"Sending exit code 0\")<nl><nl><tab>else:<nl><nl><tab><tab>sys.exit(2)<nl><nl>if __name__=='__main__':<nl><tab>main(sys.argv)","out":"Match multiple lines in a file using python"}
{"in":"NRZ = [0,0,1,0,1,1,0,1]<nl>NRZS = []<nl><nl>state = NRZ[0]<nl>for bit in NRZ:<nl><tab>state ^= bit ^ 1<nl><tab>NRZS.append(state)","out":"NRZ-S with Python"}
{"in":"# Read rawImage from a file, but in reality will have it from TCPServer<nl>f = open('frame.png', \"rb\")<nl>rawImage = f.read()<nl>f.close()<nl><nl># Convert rawImage to Mat<nl>pilImage = Image.open(StringIO(rawImage));<nl>npImage = np.array(pilImage)<nl>matImage = cv.fromarray(npImage)<nl><nl>#show it<nl>cv.NamedWindow('display')<nl>cv.MoveWindow('display', 10, 10)<nl>cv.ShowImage('display', matImage)<nl>cv. WaitKey(0)","out":"How to read raw png from an array in python opencv?"}
{"in":"data = INPUT_LIST<nl><nl>class Item:<nl><tab>def __init__(self, _id, name, type, parent):<nl><tab><tab>self._id = _id<nl><tab><tab>self.name = name<nl><tab><tab>self.type = type<nl><tab><tab>self.parent = parent<nl><tab><tab>self.children = []<nl><nl><tab>def get_dict(self):<nl><tab><tab>return {<nl><tab><tab><tab>'id': self._id,<nl><tab><tab><tab>'name': self.name,<nl><tab><tab><tab>'type': self.type,<nl><tab><tab><tab>'children': [child.get_dict() for child in self.children]<nl><tab><tab>}<nl><nl><nl>lookup = dict((item['id'], Item(item['id'], item['name'], item['type'], item['parent'] if 'parent' in item else None)) for item in data)<nl><nl>root = []<nl><nl>for _id, item in lookup.items():<nl><tab>if not item.parent:<nl><tab><tab>root.append(item)<nl><tab>else:<nl><tab><tab>lookup[item.parent].children.append(item)<nl><nl>dict_result = [item.get_dict() for item in root]","out":"Looping through a JSON array and sorting it"}
{"in":"filename = os.path.join(\"C:\\path\\to\\Sales Packs\", filename)<nl>os.rename(filename, filename[0:11]+accName+\".xlsx\")","out":"Renaming all files in a folder based on the filenames they already have"}
{"in":"os.system('clear')","out":"clear screen returning 256 in python"}
{"in":"import re<nl><nl>st='''\\<nl>The ancient Romans influenced countries and civilizations in the following centuries.  <nl>Their language, Latin, became the basis for many other European languages. They stayed in Roma for 3 month.'''<nl><nl>deletions=('and','in','the')<nl>repl={\"ancient\": \"old\", \"month\":\"years\", \"centuries\":\"years\"}<nl><nl>tgt='|'.join(r'\\b{}\\b'.format(e) for e in deletions)<nl>st=re.sub(tgt,'',st)<nl>for word in repl:<nl><tab>tgt=r'\\b{}\\b'.format(word)<nl><tab>st=re.sub(tgt,repl[word],st)<nl><nl><nl>print st","out":"Remove some words replace some other words from a txt file"}
{"in":"import bs4<nl>import requests <nl><nl>response = requests.get('http:\/\/my.gwu.edu\/mod\/pws\/courses.cfm?campId=1&termId=201501&subjId=ACCY')<nl>soup = bs4.BeautifulSoup(response.text)  <nl><nl>for tr in soup.findAll('tr')[11:]:<nl><tab>stack = []<nl><tab>for td in tr.findAll('td'):<nl><tab><tab>stack.append(td.text.strip())<nl><tab>print(\",\".join(stack))","out":"Extract html cell data with BeautifulSoup and Requests"}
{"in":"L = L[-100:]","out":"Trim a list to a maximum number of elements"}
{"in":"for i in p:<nl>   print i.ip()","out":"how to get the peer list of a torrent using python-libtorrent?"}
{"in":"both = [ random.randint(0, 500) for i in range(100) ]<nl>odd = [ x for x in both if x % 2 == 1 ]<nl>even = [ x for x in both if x % 2 == 0 ]","out":"Generating random values in python"}
{"in":"import numpy as np<nl>from enthought.mayavi import mlab<nl><nl>x, y, z = np.ogrid[-10:10:20j, -10:10:20j, -10:10:20j]<nl>s = np.sin(x*y*z)\/(x*y*z)<nl><nl>src = mlab.pipeline.scalar_field(s)<nl>mlab.pipeline.iso_surface(src, contours=[s.min()+0.1*s.ptp(), ], opacity=0.3)<nl>mlab.pipeline.iso_surface(src, contours=[s.max()-0.1*s.ptp(), ],)<nl><nl>mlab.show()","out":"How to display a 3D plot of a 3D array isosurface in matplotlib mplot3D or similar?"}
{"in":"import numpy as np<nl>from matplotlib import pylab as plt<nl><nl>A = np.fromfile(filename, dtype='int16', sep=\"\")<nl>A = A.reshape([1024, 1024])<nl>plt.imshow(A)","out":"Read in Raw Binary Image in Python"}
{"in":"import pylab as plt<nl>a=[0,1]<nl>b=[0,1]<nl>plt.plot(a,b,'g',linewidth=3.5, label = 'a')<nl>plt.rc('text', usetex=True)<nl>plt.legend(labelspacing = 1.0,loc=1,prop={'size':40})<nl><nl>plt.text(0.45,-0.08,'a',fontsize=50)<nl>plt.text(0.53,-0.08, 'N',fontsize = 20)","out":"Multiple fontsize in same label Matplotlib"}
{"in":"from datetime import datetime, tzinfo, timedelta<nl><nl>timestamp = \"1322485986.672901000\"<nl><nl>class UTC(tzinfo):<nl><tab>def utcoffset(self, dt):<nl><tab><tab> return timedelta(0)<nl><tab>def tzname(self, dt):<nl><tab><tab>return \"UTC\"<nl><tab>def dst(self, dt):<nl><tab><tab>return timedelta(0)<nl><nl><nl>d1 = datetime.fromtimestamp(float(timestamp), UTC())<nl>print d1","out":"Converting string timestamp to Python datetime (was: how to properly convert char into float or double in Python)"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl># Specify data \/ labels<nl>y = [3198293, 189910]<nl>xlabels = ['transactional','promotional']<nl>bar_width = 0.90<nl><nl>x = np.arange(len(y))<nl><nl>fig, ax = plt.subplots()<nl>ax.bar(x, y, width=bar_width)<nl>ax.set_xticks(x + (bar_width\/2.0))<nl>ax.set_xticklabels(xlabels)<nl>plt.show()","out":"how to draw a simple bar chart with labels in python using matplotlib in python?"}
{"in":"y = [x[x[:,3]==k] for k in np.unique(x[:,3])]","out":"How to split a numpy array based on a column?"}
{"in":"url_list = [\"cat\", \"dog\", \"mouse\"]<nl><nl>for url in url_list:<nl><tab>driver.get(\"https:\/\/www.google.com\/webhp?hl=en#hl=en&q=\" + url)<nl><tab># do stuff","out":"Insert different variable (pulled from dictionary) into URL within a loop"}
{"in":"def ons():<nl><tab>cs=StringVar<nl><tab>cs=\"\"<nl><tab>a=''<nl><tab>for i in range(listbox.size()):<nl><tab><tab>if listbox.select_includes(i):<nl><tab><tab><tab>cs +=listbox.get(i)+' ' #adding words ending with whitespace<nl><tab>listbox.delete(0,END) #deleting all the listbox content<nl><tab>for item in cs:<nl><tab><tab>a=a+item<nl><tab><tab>if item==' ': #full string passed<nl><tab><tab><tab>listbox.insert(END,a) #insert selected item into listbox<nl><tab><tab><tab>a=''#delete the string buffer","out":"tkinter delete multiple unselected items of a listbox"}
{"in":"def transform(s):<nl><tab>''' Receives a GeoNode structure as nested lists and returns a Mesh.<nl><tab>'''<nl><tab>if isinstance(s, list):<nl><tab>   return merge_meshes([transform(e) for e in s])<nl><tab>else:<nl><tab>   assert isinstance(s, GeoNode)<nl><tab>   return geonode_to_mesh(s)","out":"Parsing Tree of python classes and applying a grammar"}
{"in":"with open('test.csv', 'r') as file:<nl><tab>data = file.read().split('<nl>')<nl><nl>for row in range(1, len(data)):<nl><tab>third_col= data[x].split(',')<nl><tab>with open('t' + str(x) + '.txt', 'w') as output:<nl><tab><tab>output.write(third_col[2])","out":"How to extract data from rows in .csv file into separate .txt files using python?"}
{"in":"#you need to explicitly name the columns of the incoming parameter in the append statement<nl>df = DataFrame(columns=['col1', 'col2'])<nl>print df.append(Series([None]*2, index=['col1','col2']), ignore_index=True)<nl><nl><nl>#as an aside<nl><nl>df = DataFrame(np.random.randn(8, 4), columns=['A','B','C','D'])<nl>dfRowImproper = [1,2,3,4]<nl>#dfRowProper = DataFrame(arange(4)+1,columns=['A','B','C','D']) #will not work!!! because arange returns a vector, whereas DataFrame expect a matrix\/array#<nl>dfRowProper = DataFrame([arange(4)+1],columns=['A','B','C','D']) #will work<nl><nl><nl>print df.append(dfRowImproper) #will make the 0 named column with 4 additional rows defined on this column<nl><nl>print df.append(dfRowProper) #will work as you would like as the column names are consistent<nl><nl>print df.append(DataFrame(np.random.randn(1,4))) #will define four additional columns to the df with 4 additional rows<nl><nl><nl>print df.append(Series(dfRow,index=['A','B','C','D']), ignore_index=True) #works as you want","out":"Appending row to Pandas DataFrame adds 0 column"}
{"in":"import sys<nl>states = []<nl>cities = []<nl>fname = sys.argv[1]<nl>f = open(fname, 'r')<nl>for line in f:<nl><tab>line = line.rstrip() # This will remove all the whitespaces at the end of the line<nl><tab>line = line.split(',')<nl><tab>states.append(line[0])<nl><tab>cities.append(line[1])<nl><nl>print states<nl>print cities<nl>f.close()","out":"Convert text file into list"}
{"in":"# Read file <nl>f = open('path_to_file.json')<nl>json_string = f.read()<nl>f.close()<nl><nl># Convert json string to python object<nl>import json<nl>data = json.loads(json_string)<nl><nl># Create model instances for each item<nl>items = []<nl>for item in data:<nl>   # create model instances...<nl>   item = YourModel(*item)<nl>   items.append(item)<nl><nl># Create all in one query<nl>YourModel.objects.bulk_create(items)","out":"JSON file reading by Django"}
{"in":"import numpy as np<nl>from matplotlib import pyplot as plt<nl>x = np.random.random(50)<nl>y = np.random.random(50)<nl>a = np.random.random(50)<nl>b = np.random.random(50)<nl>s = c=zip(a, b, np.zeros(50))<nl>ax = plt.gca()<nl>print ax.get_position()<nl>plt.scatter(x,y,c = s)<nl>#adjust limits to make room for inset axes<nl>plt.xlim(xmax = 1.5)<nl>plt.ylim(ymax = 1.5)<nl>#create inset axes<nl>ax = plt.axes([.7, .675, .2, .2], axisbg='y')<nl>n = 20<nl>red = np.linspace(min(a), max(a), n)<nl>green = np.linspace(min(b), max(b), n)<nl>floats = np.linspace(0, 1, n)<nl>#make arrays of all possible values between 0 and 1<nl>X, Y = np.meshgrid(floats, floats)<nl>#stack the arrays with a third array of zeros<nl>Z = np.dstack((X, Y, np.zeros(X.shape)))<nl>Z = np.rot90(Z)<nl>red = np.round(red[::-1], 2)<nl>green = np.round(green, 2)<nl>plt.imshow(Z)<nl>ticks = np.arange(0, n, 6)<nl>plt.yticks(ticks, [red[i] for i in ticks])<nl>plt.xticks(ticks, [green[i] for i in ticks], rotation = 'vertical')<nl>plt.xlabel('Green')<nl>plt.ylabel('Red')<nl>plt.show()","out":"matplotlib scatter plot colour as function of third and fourth variable"}
{"in":"dic = {m : my_function(m) for m in my_list}","out":"Joining dictionaries in a for loop"}
{"in":"def json_equal(json1,json2):<nl><nl>   number_of_items = len(json1)<nl>   for item in json1:<nl><tab>   for item2 in json2:<nl><tab><tab>   if item[\"address\"] == item2[\"address\"]:<nl><tab><tab><tab>   if item[\"amount\"] == item2[\"amount\"]:<nl><tab><tab><tab><tab>   number_of_items -= 1<nl><tab><tab><tab><tab>   break<nl><tab><tab>   else:<nl><tab><tab><tab>   continue<nl>   if number_of_items == 0:<nl><tab>   return True<nl>   else:<nl><tab>   return False","out":"Python Check if two list of jsons are equal"}
{"in":"a = [1,2,3,4]<nl>b = [1,2]<nl><nl>print any(x in a for x in b)<nl>True","out":"Most efficient way of checking list membership of more that one value"}
{"in":"a = wd.execute_script(\"return checkdata('\" + code + \"');\")","out":"How to execute a Javascript function in python with selenium"}
{"in":"data= csv.reader(open('outfile.tsv','rb'), delimiter = \"\\t\")<nl>fields=data.next()<nl>for row in data:<nl><tab><tab> tsid=row[0]<nl><tab><tab> full_list.append(tsid)<nl>print [(g[0],len(list(g[1]))) for g in itertools.groupby(full_list)]","out":"remove first line of tsv using sniffer"}
{"in":"import subprocess<nl>subprocess.Popen(\"C:\\ThisIsTheFolderIWantToNavigateTo\")","out":"Any way to open a local folder in myComp\/explorer programmatically using Python?"}
{"in":"re.sub(r\"[0-9]+[a-z]+\",\"\",str)","out":"how to remove tokens that contains number followed by character using regular expression in python?"}
{"in":"conn_string = \"host='localhost' dbname='my_database' user='postgres' password='secret'\"<nl>conn = psycopg2.connect(conn_string)","out":"equivalent connection for postgres and sqlite"}
{"in":"print sys.exc_info()[1]","out":"Python Azure SDK Uploading a Blob"}
{"in":"namedict = ({\"first_name\":\"Joshua\", \"last_name\":\"Drake\"},<nl><tab><tab><tab>{\"first_name\":\"Steven\", \"last_name\":\"Foo\"},<nl><tab><tab><tab>{\"first_name\":\"David\", \"last_name\":\"Bar\"})<nl><nl>cur = conn.cursor()<nl>cur.executemany(\"\"\"INSERT INTO bar(first_name,last_name) VALUES (%(first_name)s, %(last_name)s)\"\"\", namedict)","out":"Read real-time data inserted as chunks"}
{"in":"pygame.time.delay()","out":"how can I play a sound with pygame while the system is waiting?"}
{"in":"cursor.execute('INSERT INTO actors(name,age) VALUES(%s, %s)' ,row)","out":"data is not inserting in my table"}
{"in":"from django.db import models<nl>from django.contrib.contenttypes.models import ContentType<nl><nl>class BaseModel(models.Model):<nl><tab>type = models.ForeignKey(ContentType,editable=False)<nl><tab># other base fields here<nl><nl><tab>def save(self,force_insert=False,force_update=False):<nl><tab><tab>if self.type_id is None:<nl><tab><tab><tab>self.type = ContentType.objects.get_for_model(self.__class__)<nl><tab><tab>super(BaseModel,self).save(force_insert,force_update)<nl><nl><tab>def get_instance(self):<nl><tab><tab>return self.type.get_object_for_this_type(id=self.id)","out":"Making a multi-table inheritance design generic in Django"}
{"in":"#!\/usr\/bin\/env python<nl>import json<nl>import urllib2<nl><nl>try:<nl><tab>r = urllib2.urlopen(\"https:\/\/push.geckoboard.com\/v1\/send\/\" + widget_key,<nl><tab><tab><tab><tab><tab><tab>json.dumps(nested_dict))<nl>except IOError as e:<nl><tab>if hasattr(e, 'reason'):<nl><tab>   print \"connection error:\", e.reason<nl><tab>elif hasattr(e, 'code'):<nl><tab>   print \"http error:\", e.code<nl><tab>   print e.read()<nl><tab>else:<nl><tab>   print \"error:\", e<nl>else: # success<nl><tab>assert json.load(r)[\"success\"]","out":"How to output JSON in python so it can be used for Geckoboard's Highcharts plugin"}
{"in":"app.add_url_rule('\/example', view_func = example.Index.as_view('example_index'))<nl>app.add_url_rule('\/example\/<string:example_key>', view_func = example.Show.as_view('example_show'), methods=['GET'])","out":"Flask route query parameter"}
{"in":"output = np.empty(indices[0].shape)<nl>x_indices = indices[0]<nl>y_indices = indices[1]<nl>z_indices = indices[2]<nl><nl>x0 = x_indices.astype(np.integer)<nl>y0 = y_indices.astype(np.integer)<nl>z0 = z_indices.astype(np.integer)<nl>x1 = x0 + 1<nl>y1 = y0 + 1<nl>z1 = z0 + 1<nl><nl>#Check if xyz1 is beyond array boundary:<nl>x1[np.where(x1==input_array.shape[0])] = x0.max()<nl>y1[np.where(y1==input_array.shape[1])] = y0.max()<nl>z1[np.where(z1==input_array.shape[2])] = z0.max()<nl><nl>x = x_indices - x0<nl>y = y_indices - y0<nl>z = z_indices - z0<nl>output = (input_array[x0,y0,z0]*(1-x)*(1-y)*(1-z) +<nl><tab><tab><tab> input_array[x1,y0,z0]*x*(1-y)*(1-z) +<nl><tab><tab><tab> input_array[x0,y1,z0]*(1-x)*y*(1-z) +<nl><tab><tab><tab> input_array[x0,y0,z1]*(1-x)*(1-y)*z +<nl><tab><tab><tab> input_array[x1,y0,z1]*x*(1-y)*z +<nl><tab><tab><tab> input_array[x0,y1,z1]*(1-x)*y*z +<nl><tab><tab><tab> input_array[x1,y1,z0]*x*y*(1-z) +<nl><tab><tab><tab> input_array[x1,y1,z1]*x*y*z)<nl><nl>return output","out":"3D interpolation of NumPy arrays without SciPy"}
{"in":"from formencode import FancyValidator, Invalid<nl>from formencode.validators import Email<nl><nl>class EmailList(FancyValidator):<nl><tab>\"\"\" Takes a delimited (default is comma) string and returns a list of validated e-mails<nl><tab><tab>Set the delimiter by passing delimiter=\"A_DELIMITER\" to the constructor.<nl><tab><tab>Also takes all arguments a FancyValidator does.  <nl><tab><tab>The e-mails will always be stripped of whitespace.<nl><tab>\"\"\"<nl><tab>def _to_python(self, value, state):<nl><tab><tab>try:<nl><tab><tab><tab>values = str(value).split(self.delimiter)<nl><tab><tab>except AttributeError:<nl><tab><tab><tab>values = str(value).split(',')<nl><tab><tab>validator = formencode.ForEach(validators.Email())<nl><tab><tab>validator.to_python(values, state)<nl><tab><tab>return [value.strip() for value in values]","out":"Chain FormEncode Validators"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl># random data to stand in<nl>x1 = 0.8+0.1*np.random.rand(25)<nl>x2 = 0.3+0.2*np.random.rand(25)<nl># customise the marker properties<nl>plt.plot(x1, color='g', marker='s', mec='w', mfc='g', mew='3', ms=8)<nl>plt.plot(x2, color='b', marker='s', mec='w', mfc='b', mew='3', ms=8)<nl>plt.show()","out":"Matplotlib: Markers surrounded by white space"}
{"in":"undoicon = QIcon.fromTheme(\"edit-undo\")","out":"Are there default icons in PyQt\/PySide?"}
{"in":"def readMatrix(file):<nl><tab>with open(file) as contents:<nl><tab><tab>return [[int(item) for item in line.split()] for line in contents]","out":"Trying to use list comprehension to convert list of strings to integers?"}
{"in":"urlpatterns = patterns('',<nl><tab># ... the rest of your URLconf goes here ...<nl>) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)","out":"Can't display images on html page from database"}
{"in":"import matplotlib.pyplot as plt<nl>import numpy as np<nl><nl>grid = np.random.rand(4, 4)<nl>x = ['P0', 'P1', 'P2', 'P4']<nl>y = ['C0', 'C1', 'C2', 'C4']<nl>plt.imshow(grid, interpolation='none')<nl>plt.xticks(range(len(x)), x, fontsize=12)<nl>plt.yticks(range(len(y)), y, fontsize=12)","out":"Plot matrix data with custom tick labels"}
{"in":"import socket<nl>import sys<nl>import time<nl><nl>class Tek_scope(object):<nl><nl><tab>def __init__(self, IPaddress, PortNumber = 4000):<nl><tab><tab>self.s = socket.socket(socket.AF_INET , socket.SOCK_STREAM)<nl><tab><tab>self.s.connect((IPaddress, PortNumber))<nl><tab><tab>self.s.setblocking(True)<nl><tab><tab>print \"Scope opened Successfully\"<nl><nl>scope1 = Tek_scope(\"10.1.10.15\") #Connects to the scope<nl><nl>scope1.s.send('*IDN?<nl>') #Sends the *IDN? command to the scope. <nl><nl>print scope1.s.recv(1024)","out":"Python: Receiving Data through Sockets - [Errno 11] Resource temporarily unavailable"}
{"in":"def cb_check():<nl><tab>if random_cards.get():<nl><tab><tab>randomize_stacks_checkbutton.config(state=DISABLED)<nl><tab>else:<nl><tab><tab>randomize_stacks_checkbutton.config(state=NORMAL)<nl><nl>top=Tk()<nl>random_cards = IntVar() <nl>random_stacks = IntVar() <nl>flip_cards = IntVar() <nl>wildcard = IntVar()<nl><nl>randomize_cards_checkbutton = Checkbutton(top, text=\"Randomize cards\",<nl><tab><tab><tab><tab><tab><tab><tab>  variable=random_cards, command=cb_check)<nl>randomize_cards_checkbutton.grid(row=0, column=0, sticky=W)<nl><nl>randomize_stacks_checkbutton = Checkbutton(top, text=\"Randomize stacks\",<nl><tab><tab><tab><tab><tab><tab><tab>   variable=random_stacks, bg=\"lightblue\",<nl><tab><tab><tab><tab><tab><tab><tab>   disabledforeground=\"gray\")<nl>randomize_stacks_checkbutton.grid(row=1, column=0, sticky=W)<nl><nl>top.mainloop()","out":"Disable checkboxes by other checkboxes in Tkinter"}
{"in":"conn = sqlite3.connect('databaza.db')<nl>c = conn.cursor()<nl>conn.text_factory = str<tab><nl>data3 = str(input('Please enter name: '))<nl>query = \"DELETE FROM Zoznam WHERE Name = '%s';\" % data3.strip()<nl>print(query)<nl>mydata = c.execute(query)","out":"How to delete record from table?"}
{"in":"import datetime<nl>from dateutil.parser import parse as parse_date<nl>from pandas import DataFrame<nl><nl>df = DataFrame([['2009-01-04 - 2009-01-10','Some Data'], <nl><tab><tab><tab><tab>['2009-01-11 - 2009-01-17','Some Data']])<nl>df.columns = ['week','data']<nl><nl>def generate_dates(date_range):<nl><tab>day1_str, day2_str = date_range.split(' - ')<nl><tab>day1, day2 = parse_date(day1_str), parse_date(day2_str)<nl><tab>delta = day1 - day2<nl><tab>return [day1 + datetime.timedelta(days=x) for x in range(0, abs(delta.days + 1))]<nl><nl>def create_rows_from_row(row):<nl><tab>dates = generate_dates(row['week'])<nl><tab>return [[d, row['data']] for d in dates]<nl><nl>def create_new_df(df):<nl><tab>rows = []<nl><tab>for idx in range(len(df)):<nl><tab><tab>rows.extend(create_rows_from_row(df.ix[idx]))<nl><nl><tab>new_df = DataFrame(rows)<nl><tab>new_df.columns = ['week','data']<nl><tab>return new_df<nl><nl>create_new_df(df)","out":"Generate days row on the basis of date range column"}
{"in":"def derivs(l):<nl>  return [l[i + 1] - l[i] for i in range(len(l) - 1)]","out":"How to calculate numerical trend lines in python"}
{"in":"self.request.headers","out":"How do I check HTTP headers of an incoming request to Google Appengine in Python?"}
{"in":"requests.get()","out":"How to retrieve a Youtube page without starting to stream the video?"}
{"in":"from django.db import DatabaseError<nl>from django.test import TestCase<nl>from django.test.client import Client<nl>import mock<nl><nl>class NoDBTest(TestCase):<nl><tab>cursor_wrapper = mock.Mock()<nl><tab>cursor_wrapper.side_effect = DatabaseError<nl><nl><tab>@mock.patch(\"django.db.backends.util.CursorWrapper\", cursor_wrapper)<nl><tab>def test_no_database_connection(self):<nl><tab><tab>response = self.client.post('\/signup\/', form_data)<nl><tab><tab>self.assertEqual(message, 'An error occured with the DB')","out":"django unittest without database connection"}
{"in":"import win32api<nl>from time import sleep<nl><nl>count = 0<nl>savedpos = win32api.GetCursorPos()<nl>while(True):<nl><tab>if count>20*5: # break after 5sec<nl><tab><tab>break<nl><nl><tab>curpos = win32api.GetCursorPos()<nl><tab>if savedpos != curpos:<nl><tab><tab>savedpos = curpos<nl><tab><tab>print \"moved to \" + str(savedpos)<nl><nl><tab>sleep(0.05)<nl><tab>count +=1","out":"In python, on windows, how to wait until mouse moves?"}
{"in":"[z0] * len(seconds)","out":"Python list with constant value"}
{"in":"from dateutil.parser import parse<nl><nl>latest = max(data['posts'], key=lambda x: parse(x['date']))","out":"Extract only the latest one (by date) from a json\/dict using Python"}
{"in":"poi_id = serializers.UUIDField(format='hex_verbose')","out":"Django Rest Framework: How to manipulate value of one field of the model inside view class?"}
{"in":"import csv<nl><nl>csv_file = open('D:\\eggs2.csv','rb')<nl>csv_reader = csv.reader(csv_file)<nl>for row in csv_reader:<nl><tab>print row[0]<nl><nl>csv_file.close()","out":"How to read single values that contains commas in csv file using python"}
{"in":"data = ['K:C:192.168.1.3:myusername:mypassword', 'M:N:192.168.3.2:root:toor']<nl>for i in data:<nl><tab>r = str(i).strip(\":\")<nl><tab>if len(r) == 4:<nl><tab><tab>print r[0] + \"   ||\" + ((28 - len(r[1])) \/ 2) * \" \" + r[1] + ((28 - len(r[1])) \/ 2) * \" \" + \"||\" + ((22 - len(r[2])) \/ 2) * \" \" + r[2] + ((22 - len(r[2])) \/ 2) * ' ' + \"||\" + ((22 - len(r[3])) \/ 2) * \" \" + r[3] + ((22 - len(r[3])) \/ 2) * \" \"<nl><tab>elif len(r) == 3:<nl><tab><tab>print r[0] + \"   ||\" + ((28 - len(r[1])) \/ 2) * \" \" + r[1] + ((28 - len(r[1])) \/ 2) * \" \" + \"||\" + ((22 - len(r[2])) \/ 2) * \" \" + r[2] + ((22 - len(r[2])) \/ 2) * ' ' + \"||\"","out":"SyntaxError invalid syntax"}
{"in":"graph = facebook.GraphAPI(access_token)<nl>profile = graph.get_object('me')<nl>args = {'fields' : 'id,name,email', }<nl>profile = graph.get_object('me', **args)","out":"Facebook SDK for Python - Get user email"}
{"in":"attrs_list = Entity.objects.filter(**filters).distinct().values_list('someattr', flat=True)<nl>a = Character.objects.filter(someotherattr__in=attrs_list)","out":"Comparing two QuerySets in Python\/Django"}
{"in":"offset = -0<nl>print (\"In Command 3 - Brute force\")<nl>string = input(\"Please enter a string to Brute Force:\")<nl>while offset > -26:<nl><tab>offset = offset - 1<nl><tab>word = \"\"<nl><tab>for letter in string:<nl><tab><tab>letter = (ord(letter))<nl><tab><tab>letter = letter + offset<nl><tab><tab>if letter > 126:<nl><tab><tab><tab>letter - 95<nl><tab><tab>elif letter < 32:<nl><tab><tab><tab>letter + 32<nl><tab><tab>output = (chr(letter))<nl><tab><tab>word = word + output<tab><tab><tab><nl><tab><tab>choice = 0<nl><tab>print(\"Decryption: \"+word)","out":"Appending to the front of for statement output"}
{"in":"Timestaken4={}<nl><nl>for key,value in zip(NumberPlates,Timestaken2):<nl><tab>Timestaken4[key]=value<nl><nl>print(Timestaken4)","out":"key and value in zip"}
{"in":"def OnInit(self):<nl><tab># Check for a running instance for this user.  Do not instantiate if found.<nl><tab>if self.checkInstance():<nl><tab>  dbcon.cursor().callproc('post_mutex', (self.mutexname,))<nl><tab>  dbcon.commit()<nl><tab>  self.Cleanup()<nl><tab>  return False<nl><nl><tab># Register for database events.<nl><tab>DataCache['dbListener'] = dbListener()<nl><nl><tab>return True","out":"Is there a wxpython event like program_start?"}
{"in":"import os, shutil<nl><nl>dir1 = r'\/path\/to\/dir\/1'<nl>dir2 = r'\/path\/to\/dir\/2'<nl>copy_dest = r'\/path\/to\/copy\/dirs\/to'<nl><nl>dir1_folders = [dir for dir in os.listdir(dir1) if os.path.isdir(os.path.join(dir1, dir))]<nl>dir2_folders = [dir for dir in os.listdir(dir2) if os.path.isdir(os.path.join(dir2, dir))]<nl><nl>for dir in dir1_folders:<nl><tab>if dir in dir2_folders:<nl><tab><tab>shutil.copytree(os.path.join(dir1, dir), os.path.join(copy_dest, dir))","out":"find match folders then copy files and subfolders"}
{"in":"l1 = ['a', 'b', 'c', 'd']<nl>l2 = ['c', 'd', 'e']<nl>set(l1).intersection(l2)<nl>set(['c', 'd'])","out":"in Python find number of same elements in 2 lists"}
{"in":"djang-nested-inline","out":"In Django-admin, how to show foreignkey's foreignkey in the same page?"}
{"in":"from bs4 import BeautifulSoup as Soup<nl><nl>with open(\"sample.xml\", \"r\") as f:<nl><tab>target_xml = f.read()<nl><nl># create a `Soup` object<nl>soup = Soup(target_xml, \"xml\")<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><nl><nl># loop through all <driver> returned as a list and prints all <nl>for d in soup.find_all(\"driver\"):<nl><tab>print(d)","out":"printing child nodes along with their xml tags in python"}
{"in":"re.search(r'\\b' + re.escape(' '.join(query)) + r'\\b', ' '.join(line)) is not None","out":"python - string match only whole words"}
{"in":"import pygit2<nl>repo = pygit2.Repository('.git')<nl>branch = repo.lookup_branch('new')<nl>ref = repo.lookup_reference(branch.name)<nl>repo.checkout(ref)","out":"How do you checkout a branch with pygit2?"}
{"in":"itemlist = dom.getElementsByTagName('filter-name')<nl>for item in itemlist:<nl><tab>if \"Filter1\" == item.childNodes[0].nodeValue:<nl><tab><tab>#need to comment the whole node containing the filter-name<nl><tab><tab>comment_node(item.parentNode)<nl>print dom.toxml() # verif","out":"Comment xml sections in Python"}
{"in":"#!\/usr\/bin\/python2.x","out":"Python - Can't import with_statement from __future__"}
{"in":"for i in range(len(a)):<nl><tab>if a[i] > max:<nl><tab><tab>max = a[i]<nl><tab><tab>maxIndex = i","out":"Python Finding Index of Maximum in List"}
{"in":"names = list()<nl>a = open(sf, 'r')<nl>for row in a:<nl><tab>place = row.find(',')<nl><tab>names.append(row[:place])<nl>print(names)","out":"How to take a specific string from a csv file into a list - python 3.4"}
{"in":"import numpy as np<nl>x = np.random.rand(4)<nl>x = x.reshape(-1,1)<nl>xij = np.matrix(x.T - x)","out":"compute a xi-xj matrix in numpy without loops (by api calls)"}
{"in":"args = {'fields' : 'birthday,name' }<nl>friends = graph.get_object(\"me\/friends\",**args)","out":"facebook get friends' birthdays using python"}
{"in":"global lat, lon, speed","out":"Variables not updated from within baseHTTPserver class"}
{"in":"if request.method == \"POST\":<nl><tab><tab>form = XXXXForm(request.POST,request.FILES)<nl><tab><tab>if form.is_valid():<nl><tab><tab><tab>docfile=request.FILES['docfile']<nl><nl><tab><tab>if isinstance(docfile, (InMemoryUploadedFile, TemporaryUploadedFile)):<nl><tab><tab><tab>book = xlrd.open_workbook(file_contents=docfile.read(), formatting_info=True, on_demand=True)<nl><tab><tab>else:<nl><tab><tab><tab>book = xlrd.open_workbook(filename=docfile, formatting_info=True, on_demand=True)<nl><nl><tab><tab>sheet = book.sheet_by_index(0)<nl><tab><tab>new_csv_file = csv.writer(open('new_filename', 'w'))<nl><tab><tab># read file<nl><tab><tab>for line in range(1, sheet.nrows):<nl><tab><tab><tab>new_row = [request.session.get('uploader'), request.session.get('date')]<nl><tab><tab><tab>new_row.extend(sheet.row_values(line))<tab><tab><tab><tab><nl><tab><tab><tab>new_csv_file.writerow(new_row)","out":"django1.8- how to append information manually when uploading Excel and inserting into database"}
{"in":"if x % 3 == 0:<nl><tab>print 'x is divisible by 3'","out":"Determining whether an value is a whole number in Python"}
{"in":"for m in modules:<nl><tab>globals()[m] = __import__(m)","out":"How do I import modules from an array in python?"}
{"in":"print sorted(student_tuples, key=lambda t: (-t[2], t[0]))<nl># [('john', 'A', 15), ('dave', 'C', 12), ('peter', 'B', 12)]","out":"How to sort in decreasing value first then increasing in second value"}
{"in":"EdgeFaces = {} # mapping from edge to adjacent faces<nl>for ThisFace in TheMesh.faces :<nl><tab>for ThisEdge in ThisFace.edge_keys :<nl><tab><tab>if not ThisEdge in EdgeFaces :<nl><tab><tab><tab>EdgeFaces[ThisEdge] = []<nl><tab><tab>#end if<nl><tab><tab>EdgeFaces[ThisEdge].append(ThisFace.edge_keys)<nl><tab>#end for<nl>#end for","out":"Detecting border of plane in Blender Python API"}
{"in":"connect.execute(tobeexec, params);<nl>connect.commit()<nl>connect.close()","out":"Python sqlite3 saving data"}
{"in":"if x[3] is x[4]:<nl><tab>print \"What's the difference?\"","out":"Python - How do I differentiate between two list elements that point to the same object?"}
{"in":"title, author, news_id<nl>hi   ,<tab>max,<tab>   1<nl>hello,<tab>max,<tab>   1<nl>world,<tab> me,<tab>   1<nl>sup  ,<tab> me,<tab>   2","out":"Multiple field names in appengine search"}
{"in":"import datetime as dt<nl><nl>d = {0: \"(oh)\",<nl><tab> 1: \"one\",<nl><tab> 2: \"two\",<nl><tab> 3: \"three\",<nl><tab> 4: \"four\",<nl><tab> 5: \"five\",<nl><tab> 6: \"six\",<nl><tab> 7: \"seven\",<nl><tab> 8: \"eight\",<nl><tab> 9: \"nine\",<nl><tab> 10: \"ten\",<nl><tab> 11: \"eleven\",<nl><tab> 12: \"twelve\",<nl><tab> 13: \"thirteen\",<nl><tab> 14: \"fourteen\",<nl><tab> 15: \"fifteen\",<nl><tab> 16: \"sixteen\",<nl><tab> 17: \"seventeen\",<nl><tab> 18: \"eighteen\",<nl><tab> 19: \"nineteen\",<nl><tab> 20: \"twenty\",<nl><tab> 30: \"thirty\",<nl><tab> 40: \"forty\",<nl><tab> 50: \"fifty\",<nl><tab> 60: \"sixty\"}<nl><nl>def display_time(t):<nl><tab>Hour = d[int( t[0:2])] if t[0:2] != \"00\" else d[12]<nl><tab>Suffix = 'a.m.' if d[int( t[7:9])] == Hour else 'p.m.'<nl><nl><tab>if  t[3] == \"0\":<nl><tab><tab>if  t[4] == \"0\":<nl><tab><tab><tab>Minute = \"\"<nl><tab><tab>else:<nl><tab><tab><tab>Minute = d[0] + \" \" + d[int(t[4])]<nl><tab>else:<nl><tab><tab>Minute = d[int(t[3])*10] + '-' + d[int(t[4])]<nl><tab>print 'The time is', Hour, Minute, Suffix<nl><nl>display_time(dt.datetime.now().strftime('%I %M %H'))<nl>display_time(\"07 45 19\")<nl>display_time(\"11 06 23\")<nl>display_time(\"00 00 00\")","out":"Python Current Time in English Sentence"}
{"in":"def getBlocks(filepath):<nl><tab>with open(filepath) as f:<nl><tab><tab>blocks = []<nl><tab><tab>go = False<nl><tab><tab>for line in f:<nl><tab><tab><tab>if line.strip() == startDelimiter:<nl><tab><tab><tab><tab>block = ''<nl><tab><tab><tab><tab>go = True<nl><tab><tab><tab>if go:<nl><tab><tab><tab><tab>block += line<nl><tab><tab><tab>if line.strip() == endDelimiter:<nl><tab><tab><tab><tab>blocks.append(block)<nl><tab><tab><tab><tab>block = ''<nl><tab><tab><tab><tab>go = False<nl><tab><tab>if block:<nl><tab><tab><tab>blocks.append(block)<nl><tab>return blocks","out":"Python read specific lines of text"}
{"in":"from django.core.urlresolvers import reverse<nl>from django.http import Http404<nl><nl>class RestrictStaffToAdminMiddleware(object):<nl><tab>\"\"\"<nl><tab>A middleware that restricts staff members access to administration panels.<nl><tab>\"\"\"<nl><tab>def process_request(self, request):<nl><tab><tab>if request.path.startswith(reverse('admin:index')):<nl><tab><tab><tab>if request.user.is_authenticated():<nl><tab><tab><tab><tab>if not request.user.is_staff:<nl><tab><tab><tab><tab><tab>raise Http404<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>raise Http404","out":"How do I restrict access to admin pages in Django?"}
{"in":"import csv<nl>log=open(\"sync_de.log\",'r')<nl>out=open(\"fn.csv\",'w')<nl>csv = csv.writer(out)<nl><nl>#  to store the list<nl>out_list = []<nl><nl>for eachline in log:<nl>   # your code<nl>   if blabla:<nl><tab>  out_list.append([filename, start, end])<nl><nl># write the csv<nl>csv.writerows(out_list)","out":"BitTorrent Sync log parsing using Python"}
{"in":"csfont = {'fontname':'Comic Sans MS'}<nl>hfont = {'fontname':'Helvetica'}<nl><nl>plt.title('title',**csfont)<nl>plt.xlabel('xlabel', **hfont)<nl>plt.show()","out":"How to change fonts in matplotlib (python)?"}
{"in":"def foo(**kwargs):<nl><tab>pass<nl><nl>foo(**{ 'foo' : 123, 'bar' : 456 })","out":"How to generate a `kwargs` list?"}
{"in":"def replace_all(text, dic):<nl><tab>for i, j in dic.iteritems():<nl><tab><tab>text = text.replace(i, j)<nl><tab>return text<nl><nl>f_dic = {'a':'d'}<nl>s_dic = {'1':'x'}<nl><nl>with open('file1.csv','r') as f:<nl><tab>text=f.read()<nl><tab>with open('file2.csv','w') as w:<nl><tab><tab>text=replace_all(text,f_dic)<nl><tab><tab>text=replace_all(text,s_dic)<nl><tab><tab>print text<nl><tab><tab>w.write(text)","out":"Replace multiple strings in csv file"}
{"in":"from collections import defaultdict<nl><nl>def ordered(data, N):<nl><tab>edges = defaultdict()<nl><tab>for v1, v2 in data:<nl><tab><tab>edges.setdefault(v1, []).append(v2)<nl><tab><tab>edges.setdefault(v2, []).append(v1)<nl><nl><tab>visited = [False] * N<nl><tab>path = None<nl><tab>for v in range(N):<nl><tab><tab>if not visited[v]:<nl><tab><tab><tab>path = dfs(edges, visited, v)<nl><tab><tab><tab>if path is not None: break<nl><tab>if path is not None:<nl><tab><tab>return [[path[i], path[i + 1]] for i in range(len(path) - 1)]<nl><nl><nl>def dfs(edges, visited, v1, vp=None):<nl><tab>path = [v1]<nl><tab>if visited[v1]: return path<nl><tab>visited[v1] = True<nl><tab>for v2 in edges[v1]:<nl><tab><tab>if v2 == vp: continue<nl><tab><tab>path_child = dfs(edges, visited, v2, v1)<nl><tab><tab>if path_child is not None: return path + path_child<nl><tab>return None<nl><nl>data = [[0, 7], [1, 8], [2, 9], [3, 0], [4, 1], [5, 2], [6, 3], [4, 7], [8, 5], [9, 6]]<nl>N = 10<nl>ord = ordered(data, N)<nl><nl>[[0, 7], [7, 4], [4, 1], [1, 8], [8, 5], [5, 2], [2, 9], [9, 6], [6, 3], [3, 0]]","out":"Efficient grouping of rows from Nx2 integer numpy array to match sequential elements in rows"}
{"in":"for image in soup.findAll(\"img\"):<nl><tab><tab>print \"Old Image Path: %(src)s\" % image<nl><tab><tab>#Get file name<nl><tab><tab>filename = image[\"src\"].split(\"\/\")[-1]<nl><tab><tab>#Get full path name if url has to be parsed<nl><tab><tab>parsedURL[2] = image[\"src\"]<nl><tab><tab>image[\"src\"] = '%s\\%s' % (phonepath,filename)<nl><tab><tab>#Old File path (local to computer)<nl><tab><tab>#image[\"src\"] = '%s\\%s' % (out,filename)<nl><tab><tab>print 'New Path: %s' % image[\"src\"]<nl><tab><tab>#<tab>   print image<nl><tab><tab>outpath = os.path.join(out, filename)<nl><nl><tab><tab>#retrieve images<nl><tab><tab>if parsedURL[2].lower().startswith(\"http\"):<nl><tab><tab><tab>#urlretrieve(image[\"src\"], outpath)<nl><tab><tab><tab>urlretrieve(parsedURL[2], outpath)<nl><tab><tab><tab>print image[\"src\"].lower()<nl><tab><tab>else:<nl><tab><tab><tab>print \"HTTP INFO \" + urlparse.urlunparse(parsedURL)<nl><tab><tab><tab>print \"HTTP INFO \" + image[\"src\"].lower()<nl><tab><tab><tab>urlretrieve(urlparse.urlunparse(parsedURL), outpath) #Constructs URL from tuple (parsedURL)<nl><tab><tab><tab>#print image[\"src\"].lower()","out":"Unable to open images downloaded using beautiful soup library"}
{"in":"import csv<nl><nl>with open('filename.csv', 'rb') as f:<nl><tab>reader = csv.reader(f)<nl><tab>counter = 0<nl><tab>for row in reader:<nl><tab><tab>if len(row) == 0:<nl><tab><tab><tab>counter += 1<nl><tab><tab><tab>print counter, row","out":"Getting a specific column in a CSV file using Python"}
{"in":"df[1] = df[0].dt.to_period('M')","out":"Convert a column of timestamps into periods in pandas"}
{"in":"from itertools import izip_longest<nl>def grouper(iterable, n, fillvalue=None):<nl><tab>\"Collect data into fixed-length chunks or blocks\"<nl><tab># grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx<nl><tab>args = [iter(iterable)] * n<nl><tab>return izip_longest(fillvalue=fillvalue, *args)<nl><nl><nl>with open('z.t') as f:<nl><tab>d = grouper(f, 4)<nl><tab>for x in d:<nl><tab><tab><tab>print ','.join(y.rstrip() for y in x) <nl><nl>a,b,c,d,e,f,g,h<nl>i,j,k,l,m,n,o,p","out":"Reading data file with varying number of columns python"}
{"in":"import csv<nl>with open(\"input.csv\", \"rb\") as input, open(\"output.csv\", \"wb\") as output:<nl><tab>w = csv.writer(output)<nl><tab>for record in csv.reader(input):<nl><tab><tab>w.writerow(tuple(s.remove(\"<nl>\") for s in record))","out":"How could I remove newlines from all quoted pieces of text in a file?"}
{"in":"#!\/usr\/bin\/python<nl># -*- coding: utf-8 -*-<nl><nl>import serial<nl>import sys<nl>import time<nl><nl>port = \"\/dev\/serial\/by-id\/usb-FTDI_FT232R_USB_UART_AE01J6GZ-if00-port0\"<nl><nl>baudrate = 115200<nl><nl>if len(sys.argv) == 3:<nl><tab>ser = serial.Serial(sys.argv[1], sys.argv[2])<nl>else:<nl><tab>print \"# Please specify a port and a baudrate\"<nl><tab>print \"# using hard coded defaults \" + port + \" \" + str(baudrate)<nl><tab>ser = serial.Serial(port, baudrate)<nl><nl># enforce a reset before we really start<nl>#ser.setDTR(1)<nl>#time.sleep(0.25)<nl>#ser.setDTR(0)<nl><nl>while 1:<nl><tab>sys.stdout.write(ser.readline())<nl><tab>sys.stdout.flush()","out":"Reading serial data from Arduino project (pySerial)"}
{"in":"import urllib<nl>import json<nl><nl>response = urllib.urlopen(\"http:\/\/sncf.mobi\/infotrafic\/iphoneapp\/transilien\/?gare=BEC\")<nl>if response.getcode() == 200:<nl><tab>data = json.load(response)<nl><tab>for train in data[\"D\"]:<nl><tab><tab>print \"Train number\", train[\"numerotrain\"], \"code\", train[\"codevoyageur\"]<nl>else:<nl><tab>print \"Failed to load data:\", response.getcode()","out":"Mixed-characters strings to ordered list"}
{"in":"cursor.rowcount","out":"How do I determine if a Python sqlite UPDATE worked?"}
{"in":"#!\/usr\/bin\/env python3<nl><nl>import re<nl><nl>str=\"[class,'STOCK'],[symbol,'AAII'],[open,2.60],[high,2.70],[low,2.53],[close,2.60],[volume,458500],[date,'21-Dec-04'],[openClosePDiff,0.0],[highLowPDiff,0.067],[closeEqualsLow,'false'],[closeEqualsHigh,'false']\"<nl>str = re.sub('^\\[','',str)<nl>str = re.sub('\\]$','',str)<nl>array = str.split(\"],[\")<nl>for line in array:<nl><tab>print(line)","out":"Split stock quote to tokens in Python"}
{"in":"for k in myDict:<nl><tab>myDict[k] \/= 2","out":"For each value in dict?"}
{"in":"from pdb import set_trace<nl>driver = webdriver.Firefox()<nl>driver.get(\"google.com\")<nl>set_trace()<nl>driver.find_element_by_xpath(\"\/\/input[@id='gbqfq']\").send_keys(\"cats\" + Keys.RETURN)","out":"Python with selenium: rerun on pre-existing browser"}
{"in":"import numpy as np<nl>row, col = 10, 5<nl>matrix = np.random.randint(2, size=(row,col))","out":"NUMPY create, fill with random binary data"}
{"in":"import sys<nl><nl>if len(sys.argv) != 2:<nl><tab>print 'Add an input file as parameter'<nl><tab>sys.exit(1)<nl><nl>print 'opening file: %s' % sys.argv[1]<nl><nl>with open(sys.argv[1]) as input, open('output', 'w+') as output:<nl><tab>for line in input:<nl><tab><tab>if line is not None:<nl><tab><tab><tab>if line == '<nl>':<nl><tab><tab><tab><tab>pass<nl><tab><tab><tab>elif 'OK' in line:<nl><tab><tab><tab><tab>pass<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>new_line = line.split(' ', 7)<nl><tab><tab><tab><tab>output.write('%s,%s,%s,%s \/ %s<nl>' % (new_line[1], new_line[2], new_line[3], new_line[4], new_line[6]))<nl><tab><tab><tab><tab># just for checking purposes let's print the lines<nl><tab><tab><tab><tab>print '%s,%s,%s,%s \/ %s' % (new_line[1], new_line[2], new_line[3], new_line[4], new_line[6])","out":"Python - Formatting specific data within text files"}
{"in":"data['extras'] = base64.b64encode(zlib.compress(\"My string\".encode(\"utf-8\")))","out":"How to dump compressed strings in json?"}
{"in":"word.ActiveDocument.Sections(1).Headers(win32.constants.wdHeaderFooterPrimary).Range.Text='test text'","out":"Editing MS Word header with win32com"}
{"in":"class FavoriteEnroledTrainee(SessionMixin, View):<nl><tab>def get(self, request, *args, **kwargs):<nl><tab><tab>print 'here'<nl>favorite_enroled_trainee = dajaxice_register(method='GET', name='company.favorite')(FavoriteEnroledTrainee.as_view())","out":"Dajaxice with Class Based View"}
{"in":"from pylab import *<nl><nl>L1 = ['London', 'Paris', 'Tokio', 'Berlin', 'Barcelona', 'Reykjavik']<nl>pos = arange(len(L1))<nl>yticks(pos, L1)<nl><nl>I1 = [['London',0],['Paris',10],['Barcelona',23]]<nl>I2 = [['Paris',10],['Tokio',19],['Berlin',21],['Reykjavik',23]]<nl><nl>I1_y = [L1.index(el[0]) for el in I1]<nl>I1_x = [el[1] for el in I1]<nl><nl>I2_y = [L1.index(el[0]) for el in I2]<nl>I2_x = [el[1] for el in I2]<nl><nl>plot(I1_x, I1_y, 'o-')<nl>plot(I2_x, I2_y, 'x-')<nl>grid(True)<nl>savefig('countries.png')<nl>show()","out":"Pyplot Mapping <string,number> pairs on graph matrix"}
{"in":"from math import log10, floor<nl><nl>def convert(self, x, ROUND=0):<nl><nl><tab>conv = []<nl><nl><tab>for _ in range(x.size[0]):<nl><tab><tab>lst = x._data[_::x.size[0]].tolist()<nl><nl><tab><tab>if ROUND is not 0:<nl><tab><tab><tab>lst = [self.round_sig(elem, ROUND) if elem != 0 and<nl><tab><tab><tab><tab>   elem == elem else elem for elem in lst]<nl><nl><tab><tab>conv.append(lst)<nl><nl><tab>return conv<nl><nl>def round_sig(self, x, sig=2):<nl><tab>return round(x, sig-int(floor(log10(abs(x))))-1)","out":"Convert matlab.double array to python array"}
{"in":"VideoData.objects.annotate(<nl><tab><tab>watches_count=models.Count('user_set')<nl><tab>).order_by('-watches_count')[:10]","out":"Annotate many to many relation in Django"}
{"in":"myapp.show()<nl>print myapp.x<nl>if myapp.x == 1:<nl><tab>try :<nl><tab><tab>s.connect((myapp.ip, myapp.port))<nl><tab><tab>print 'connected'<nl><tab><tab>myapp.x = 0<nl><tab>except :<nl><tab><tab>print 'Unable to connect'<nl><tab><tab>myapp.x = 0","out":"Not receiving information from function"}
{"in":"while True:<nl><tab>ans = input('Prompt ')<nl><tab>if ans:<nl><tab><tab>break<nl><tab>print ('You need to type something')","out":"Python How to make it so entering no input prints you failed to input"}
{"in":"shutil.copy(__file__, \"new_destination.py\")","out":"How do I use shutil to make a python file copy itself after doing a calculation?"}
{"in":"def main():<nl><tab>q = Queue.Queue()<nl><tab>for i in range(3):<nl><tab><tab>t = threading.Timer(1, run_function, [q, i])<nl><tab><tab>t.start()<nl><nl><tab>while True:<nl><tab><tab>item = q.get()<nl><tab><tab>save_to_disk(item)<nl><tab><tab>q.task_done()<nl><nl>def run_function(q, i):<nl><tab>t = threading.Timer(1, run_function, [q, i])<nl><tab>t.start()<nl><tab>q.put(function_with_delay(i))","out":"Run multiple functions every second, write result to file"}
{"in":"title = u\"Kl?ft skr?ms inf?r p? f?d?ral ?lectoral gro?e\"<nl>import unicodedata<nl>unicodedata.normalize('NFKD', title).encode('ascii','ignore')<nl>'Kluft skrams infor pa federal electoral groe'","out":"Convert a Unicode string to a string in Python (containing extra symbols)"}
{"in":"b = ['cat', 'dog', 'god', 'star', 'lap', 'act']<nl>array = []<nl>t = 0<nl>for i, value in enumerate(b):<nl><tab>t = i+1<nl><tab>while t<len(b):<nl><tab><tab>if ''.join(sorted(value))==''.join(sorted(b[t])):<nl><tab><tab><tab>array.extend([value, b[t]])<nl><tab><tab>t+=1<nl>print array<nl>['cat', 'act', 'dog', 'god']","out":"Filter Anagram in Array in Python"}
{"in":"for y in range(10):<nl><tab>print<nl><tab>i = 10 - y<nl><tab>print ' ' * (y * 2),  # whitespaces<nl><tab>for x in range(i):<nl><tab><tab>print x,<nl><tab><tab>i = i - 1","out":"python for loop to print multiple lines of a descending range"}
{"in":"with open(r'C:\\path\\to\\logons.txt', 'r') as f:<nl><tab>for line in f:<nl><tab><tab>data = line.split()<tab># Splits on whitespace<nl><tab><tab>print '{0[0]:<15}{0[1]:<15}{0[2]:<5}{0[3]:<15}{0[4]:>15}'.format(data)","out":"Align columns in a text file"}
{"in":"import pandas as pd<nl><nl>result = []<nl><nl>for i in range(1,31):<nl><tab>result.append(pd.DataFrame((find_peaks(df1['R'], df1['I {}'.format(i)])), index = None))<nl><tab>df2 = pd.concat(result)<nl><nl>print df2.head()<nl>df2.to_csv('Output.csv')","out":"exporting a list of lists to csv in python"}
{"in":"import scipy.io<nl>import numpy as np<nl>my_list = np.zeros((3,), dtype=np.object)<nl>my_list[:] = ['abc', 'def', 'ghi']<nl>scipy.io.savemat('test.mat', mdict={'my_list': my_list})","out":"Python to MATLAB: exporting list of strings using scipy.io"}
{"in":"try:<nl>  new_list1.append(float(item))<nl>except (ValueError, TypeError):<nl>  pass","out":"What to code to delete any item in a list that can not be converted into a float?"}
{"in":"input='adId:4028cb901dd9720a011e1160afbc01a3;siteId:8a8ee4f720e6beb70120e6d8e08b0002;userId:5082a05c-015e-4266-9874-5dc6262da3e0'<nl><nl>result={}<nl>for pair in input.split(';'):<nl><tab>(key,value) = pair.split(':')<nl><tab>result[key] = value<nl><nl>print result['adId']<nl>print result['siteId']<nl>print result['userId']","out":"parsing in python"}
{"in":"rfile.close()","out":"Python: How to shutdown a threaded HTTP server with persistent connections (how to kill readline() from another thread)?"}
{"in":"CYGWIN_KEY = \"SOFTWARE\\\\Cygwin\\\\setup\"<nl>hk_user = winreg.HKEY_CURRENT_USER<nl>key = winreg.OpenKey(hk_user, CYGWIN_KEY)<nl>root = winreg.QueryValueEx(key, \"rootdir\")[0]","out":"Get Cygwin installation path in a Python script"}
{"in":"import threading,time<nl>def play1():<nl><tab>while time.time() <= start_time:<nl><tab><tab>pass<nl><tab>threading.Thread(target=listen_to_audio).start()<nl>def play2():<nl><tab>while time.time() <= start_time:<nl><tab><tab>pass<nl><tab>threading.Thread(target=play_audio).start()<nl>start_time=time.time()+20<nl>threading.Thread(target=play1).start()<nl>threading.Thread(target=play2).start()","out":"Starting two methods at the same time in Python"}
{"in":"model = QSqlQueryModel()<nl>model.setQuery(\"select some stuff\", db)<nl>while model.canFetchMore():<nl><tab>model.fetchMore()<nl>tableView.setModel(model)","out":"Qt - Normal vertical scrollbar handle behavior in QTableView"}
{"in":"entry = [VC_s, VC_i, VT_s]<nl>rowAdd = tempfile.next()<nl>ofile.writerow(rowAdd + entry)","out":"Python: Write list to individual columns in each row"}
{"in":"class LoginHandler(tornado.web.RequestHandler):<nl><tab>def post(self):<nl><tab><tab>email_address = self.get_argument('email', '')<nl><tab><tab>password = self.get_argument('password', '')<nl><nl><tab><tab>if not email_address:<nl><tab><tab><tab>login_response = {<nl><tab><tab><tab><tab>'error': True, <nl><tab><tab><tab><tab>'msg': 'Please enter your email address.'<nl><tab><tab><tab>}<nl><tab><tab>elif not password:<nl><tab><tab><tab>login_response = {<nl><tab><tab><tab><tab>'error': True, <nl><tab><tab><tab><tab>'msg': 'Please enter your password.'<nl><tab><tab><tab>}<nl><tab><tab>else:<nl><tab><tab><tab>login_response = {<nl><tab><tab><tab><tab>'error': True, <nl><tab><tab><tab><tab>'msg': 'Thank You.'<nl><tab><tab><tab>}<nl><nl><tab><tab>self.write(login_response)","out":"Post to Tornado server"}
{"in":"firststring = \"aaccddee\"<nl>secondstring = \"bb\"<nl>combinedstring = firststring[:2] + secondstring + firststring[2:]<nl>print(combinedstring)","out":"how to append a smaller string in between a larger string in python?"}
{"in":"from bson.objectid import ObjectId<nl>[i for i in dbm.neo_nodes.find({\"_id\": ObjectId(obj_id_to_find)})]","out":"search by ObjectId in mongodb with pymongo"}
{"in":"print ', '.join(jvm)","out":"output format in python"}
{"in":"import requests<nl>response = requests.get('https:\/\/docs.google.com\/spreadsheet\/ccc?key=0ArM5yzzCw9IZdEdLWlpHT1FCcUpYQ2RjWmZYWmNwbXc&output=csv')<nl>assert response.status_code == 200, 'Wrong status code'<nl>print response.content","out":"Download google docs public spreadsheet to csv with python"}
{"in":"self.fields['author'].queryset = choices","out":"How to Modify Choices of ModelMultipleChoiceField"}
{"in":"im0 = ax0.imshow(im2, aspect='auto',extent=[-0.15,0.15,0,4])","out":"Matplotlib - two different colormaps with different ranges"}
{"in":"from fabric.context_managers import settings<nl>from fabfile import deployFiles, deployConfiguration<nl><nl>with settings(host_string='user@192.168.xx.xx'):<nl><tab>deployFiles()<nl><tab>deployConfiguration('master', 7)","out":"Launch Fab File inside a python script"}
{"in":"df.C[df.B == 'x'] = df.C.shift(-1)","out":"Can I set dataframe values without using iterrows()?"}
{"in":"def build_tree(nodes):<nl><tab># create empty tree to fill<nl><tab>tree = {}<nl><nl><tab># fill in tree starting with roots (those with no parent)<nl><tab>build_tree_recursive(tree, None, nodes)<nl><nl><tab>return tree<nl><nl>def build_tree_recursive(tree, parent, nodes):<nl><tab># find children<nl><tab>children  = [n for n in nodes if n.parent == parent]<nl><nl><tab># build a subtree for each child<nl><tab>for child in children:<nl><tab># start new subtree<nl><tab>tree[child.name] = {}<nl><nl><tab># call recursively to build a subtree for current node<nl><tab>build_tree_recursive(tree[child.name], child, nodes)","out":"Converting tree list to hierarchy dict"}
{"in":"line = line.rstrip(\"<nl>\")","out":"Unexpected newlines being printed in Python"}
{"in":"def isCellNeighbor(c1, c2):<nl>   if abs(c1.x - c2.x) == 1: return True<nl>   if abs(c1.y - c2.y) == 1: return True<nl>   return False","out":"DFS Graph Generation in Python"}
{"in":"wx.EVT_ERASE_BACKGROUND","out":"Put image for background in wxpython panel"}
{"in":"x=['#%d' % i for i in range(10)]<nl>['Hey!' if i%3 == 0 else b for  i,b in enumerate(x)]","out":"assigning every Nth element in a list in python"}
{"in":"from django.db.models import Q<nl>from isbnlib import get_isbnlike, is_isbn10, is_isbn13, to_isbn10, to_isbn13<nl><nl>class Question_Admin(admin.ModelAdmin):<nl><tab>def get_search_results(self, request, queryset, search_term):<nl><tab><tab>queryset, use_distinct = super(Question_Admin, self).get_search_results(request, queryset, search_term)<nl><tab><tab>isbn = get_isbnlike(search_term, level='normal')<nl><tab><tab>if isbn:<nl><tab><tab><tab>if is_isbn10(isbn[0]):<nl><tab><tab><tab><tab>converted = to_isbn13(isbn[0])<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>converted = to_isbn10(isbn[0])<nl><tab><tab><tab>queryset |= self.model.objects.filter(Q(isbn=isbn[0]) | Q(isbn=converted))<nl><tab><tab>return queryset, use_distinct","out":"Implement custom function on Django search_fields"}
{"in":"def f(x,y):<nl><tab>return np.minimum(np.minimum(np.minimum(x,x-y),x**2),y+1)<nl><nl>plt.figure()<nl><nl>x_ = np.linspace(-180, 180, num=200)<nl>y_ = np.linspace(-180, 180, num=200)<nl>x,y = np.meshgrid(x_, y_)<nl><nl>levels = f(x, y)<nl><nl>c = plt.contour(x, y, levels, 50)<nl>plt.colorbar()","out":"Level sets of a function using \"min\""}
{"in":"typ, data = imap_server.search(None, '(SUBJECT \"Whatever you are searching for\")')","out":"python imaplib parsing gmail"}
{"in":"post.user_key = shuffle(users)[0].key","out":"How to set an ndb keyProperty"}
{"in":"scikits.timeseries","out":"How do you represent na in a Pandas DataFrame?"}
{"in":"from swab import Swab<nl>s = Swab('\/tmp\/.swab-test-data')<nl>s.addexperiment('button-size', ['default', 'larger'], 'order-completed')","out":"What resources are there for A\/B split-testing in Python?"}
{"in":"from selenium.webdriver.common.action_chains import ActionChains<nl><nl><nl>def hover(self):<nl><tab>wd = webdriver_connection.connection<nl><tab>element = wd.find_element_by_link_text(self.locator)<nl><tab>hov = ActionChains(wd).move_to_element(element)<nl><tab>hov.perform()","out":"How to mouseover in python Webdriver "}
{"in":"def addAction(self, action):<nl><tab># set the Choice in the cell<nl><tab>index = self.list.InsertStringItem(sys.maxint, '')<nl><tab>self.list.SetStringItem(index, self.columns['#'], str(index))<nl><tab>self.list.SetStringItem(index, self.columns['Action'], '')<nl><tab>self.list.SetStringItem(index, self.columns['Parameters'], '')<nl><nl><tab>item = self.list.GetItem(index, self.columns['Action'])<nl><tab>choice = wx.Choice(self.list, -1, name=action.name,<nl><tab><tab><tab> choices=[availableAction.name for availableAction in self.availableActions])<nl><tab>choice.SetClientData(0, index)<nl><tab>choice.Bind(wx.EVT_CHOICE, self.onActionChange)<nl><tab>item.SetWindow(choice, expand=True)<nl><tab>self.list.SetItem(item)<nl><nl><tab># set the third column's widgets<nl><tab>self.setItemParameters(index, action)<nl><nl><nl>def onActionChange(self, event):<nl><tab>action = copy.deepcopy(self.availableActionsDict[event.GetString()])<nl><tab>self.setItemParameters(event.GetEventObject().GetClientData(0), action)","out":"Using a choice widget with ultimatelistctrl (wxpython)"}
{"in":"forms.py","out":"How a django form is passed to a html template"}
{"in":"import module1<nl>import unittest<nl><nl>class MyTest(unittest.TestCase):<nl><tab>def setUp(self):<nl><tab><tab># Replace othermod.function with our own mock<nl><tab><tab>self.old_func1 = module1.func1<nl><tab><tab>module1.func1 = self.my_new_func1<nl><nl><tab>def tearDown(self):<nl><tab><tab>module1.func1 = self.old_func1<nl><nl><tab>def my_new_func1(self, x):<nl><tab><tab>\"\"\"A mock othermod.function just for our tests.\"\"\"<nl><tab><tab>return True<nl><nl><tab>def test_func1(self):<nl><tab><tab>module1.func1(\"arg1\")","out":"How do I redefine functions in python?"}
{"in":"class NoValue:<nl><tab>pass<nl><nl>if someValue is NoValue:<nl><tab>doSomething()","out":"How can you define a variable that will never be matched in Python?"}
{"in":"ser.baudrate = 115200","out":"Change baudrate in pySerial while connected to device?"}
{"in":"import subprocess<nl>script = \"~\/full_path_to_your_bash_script.sh\"<nl># Uncomment following line to ensure execution by bash and remove potential problems with permissions.<nl>#script = \"bash \"+script<nl># Commands to call (add some more if you remember any):<nl>commands = [<nl><tab>['gnome-terminal', '-x', script],<nl><tab># xterm is usually present:<nl><tab>['xterm', '-e', script],<nl><tab>['rxvt', '-e', script]<nl><tab>]<nl>ok = 0<nl>for command in commands:<nl><tab>try:<nl><tab><tab>subprocess.call(command)<nl><tab><tab>ok = 1; break<nl><tab>except OSError, e:<nl><tab><tab>if e.errno==2: continue # No such file or directory - skip non-existing terminal and try another<nl><tab><tab>raise # Some other OSError occurred<nl><tab>except: raise<nl>if not ok: raise RuntimeError, \"No terminal available!\"","out":"Python subprocess.call runs bash script if run from terminal, but not from debian menu"}
{"in":"def zip2tar(zipname, tarname):<nl><tab>zipf = zipfile.ZipFile(zipname, 'r')<nl><tab>tarf = tarfile.TarFile(tarname, 'w')<nl><tab>timeshift = int((datetime.datetime.now() -<nl><tab><tab><tab><tab><tab> datetime.datetime.utcnow()).total_seconds())<nl><tab>for zipinfo in zipf.infolist():<nl><tab><tab>tarinfo = tarfile.TarInfo()<nl><tab><tab>tarinfo.name = zipinfo.filename<nl><tab><tab>tarinfo.size = zipinfo.file_size<nl><tab><tab>tarinfo.mtime = calendar.timegm(zipinfo.date_time) - timeshift<nl><tab><tab>if zipinfo.internal_attr & 1:<nl><tab><tab><tab>tarinfo.mode = 0666<nl><tab><tab><tab>tarinfo.type = tarfile.REGTYPE<nl><tab><tab>else:<nl><tab><tab><tab>tarinfo.mode = 0777<nl><tab><tab><tab>tarinfo.type = tarfile.DIRTYPE <nl><tab><tab>infile = zipf.open(zipinfo.filename)<nl><tab><tab>tarf.addfile(tarinfo, infile)<nl><tab>zipf.close()<nl><tab>tarf.close()","out":"python convert compressed zip to uncompressed tar"}
{"in":"import networkx as nx<nl><nl># one of your examples<nl>g1 = nx.Graph([(1,3), (15,21), (1,10), (57,66), (76,85), (66,76)])<nl>print nx.connected_components(g1) # [[57, 66, 76, 85], [1, 10, 3], [21, 15]]<nl><nl># my own test case<nl>g2 =  nx.Graph([(1,2),(2,10), (20,3), (3,4), (4,10)])<nl>print nx.connected_components(g2) # [[1, 2, 3, 4, 10, 20]]","out":"python: how to merge a list into clusters?"}
{"in":"tag_dic[i] = None","out":"How to add items to dictionary in a for loop in Python?"}
{"in":"data1 = u'NAME: abc<nl>School Name: CD<nl>________________<nl>ENG: B   <nl>Mat: B   '<nl><nl>import re<nl>from itertools import izip<nl>data2 = re.split(r'[:<nl>________________]+',data1)<nl>i = iter(data2)<nl>ans = dict(izip(i, i))","out":"python Unicode string splitting\/ to json conversion"}
{"in":"next_page_number = '1'<nl>print(next_page_number, type(next_page_number))  #output: 1, <class 'str'><nl># set str explicit or call int(next_page_number)<nl>if next_page_number == '1': <nl><tab>print('yes')<nl>else:<nl><tab>print('no')","out":"Select text in href"}
{"in":"newlist = []<nl><nl>for i in filter_words:<nl><tab>if i not in skip_words:<nl><tab><tab>newlist.append(i)","out":"Comparing 2 lists to remove unwanted words"}
{"in":"np.fft.ifft(x, axis=1)","out":"Inverse discrete Fourier transform of across specified dimension in Python\/Numpy"}
{"in":"data = \"\"\"<nl>1100.21 57.66   1.8<nl>1157.88 57.79   1.7<nl>1272.85 58.03   1.67<nl>1330.34 58.22   1.67<nl>1389.   57.69   1.7<nl>1590.   57.01   1.67<nl>1820.   55.42   1.6<nl>2049.   59.35   1.5<nl>2308.   58.32   1.56<nl>2596.   57.28   1.6<nl>2711.   57.13   1.368<nl>2826.   55.61   1.33<nl>2883.   54.79   1.315<nl>2940.   53.78   1.325<nl>3001.   54.41   1.3<nl>3117.   55.93   1.2495<nl>3291.   57.15   1.28<nl>3377.   58.05   1.25<nl>3522.   58.41   1.31<nl>3725.   57.61   1.31<nl>3899.   53.55   1.195<nl>4015.   51.22   1.178<nl>4188.   50.89   1.185\"\"\"<nl>data = np.array([line.split() for line in data.strip().split('<nl>')], dtype='f8')<nl>x, y, z = data[:, 0], data[:, 1], data[:, 2]<nl><nl>def obj(a):<nl><tab>z_hat = a[0]*y**a[1]*x**a[2]+a[3]*x**a[4]<nl><tab>return ((z-z_hat)**2).sum()<nl><nl>import scipy.optimize as opt<nl>print opt.minimize(obj, np.ones(5))","out":"How to apply CMA-ES optimization to an arbitrary user defined objective function in Python?"}
{"in":"#! \/usr\/bin\/python<nl><nl>import sys<nl>import pycurl<nl><nl>class Test:<nl><tab>def __init__(self):<nl><tab><tab>self.contents = ''<nl><nl><tab>def body_callback(self, buf):<nl><tab><tab>self.contents = self.contents + buf<nl><nl>sys.stderr.write(\"Testing %s<nl>\" % pycurl.version)<nl><nl>t = Test()<nl>c = pycurl.Curl()<nl>c.setopt(c.URL, 'http:\/\/curl.haxx.se\/dev\/')<nl>c.setopt(c.WRITEFUNCTION, t.body_callback)<nl>c.perform()<nl>c.close()<nl><nl>print(t.contents)","out":"How to achieve CURL equivalent python code"}
{"in":"textfile=open('somefile.txt','r')<nl>text_list=[line.split(' ') for line in textfile]<nl>unique_words=[word for word in text_list if word not in unique_words]<nl>print(len(unique_words))","out":"how do I count unique words of text files in specific directory with Python?"}
{"in":"def get_vlan_iface():<nl><tab>while True:<nl><tab><tab>vlan = raw_input (\"what VLAN ID do you want to add? \"),<nl><tab><tab>iface = raw_input(\"what interface do you want to add the VLAN to? (e.g. eth10)\")<nl><tab><tab>print \"So we are adding VLAN %r to interface %r\" % (vlan, interface)<nl><nl><tab><tab>if raw_input(\"Are the details above correct? (Yes\/No)>\")[0].lower() == \"y\":<nl><tab><tab><tab> return vlan,iface<nl><tab><tab>print \"Please Fix Your Entries!\"<nl><nl>vlan,iface = get_vlan_iface()","out":"Python while loop back to specific point in code"}
{"in":"import subprocess<nl><nl>cmd = subprocess.Popen(['cd', '\/home\/time\/tmprcc;', 'ino', 'build;',<nl><tab><tab><tab><tab><tab><tab>'ino', 'upload;'], stdout=subprocess.PIPE)<nl><nl>while cmd.poll() is None:<nl><tab>new_output = cmd.stdout.readline()<nl><tab>do_something_function(new_output)","out":"Sending output of os.system to web app"}
{"in":"scipy.signal.deconvolve()","out":"deconvolve 2D array"}
{"in":"d = g.degree_property_map(\"out\", weight)   # weight is an edge property map<nl>bins = linspace(d.a.min(), d.a.max(), 40)  # linear bins<nl>h = vertex_hist(g, d, bins)","out":"Weighted Degree Distribution in Python's graph_tool"}
{"in":"if len(x) == len(set(x)):<nl><tab>print \"all elements are unique\"<nl>else:<nl><tab>print \"elements are not unique\"","out":"What's the most pythonic way to ensure that all elements of a list are different?"}
{"in":"import re<nl><nl>BAD_WORDS = [\"spam\", \"ham\"]<nl>BAD_WORDS_RE = re.compile(r\"\\b(%s)\\b\" % \"|\".join(BAD_WORDS))<nl><nl>for i, line in enumerate(open(\"file.txt\").readlines()):<nl><tab>words = set(BAD_WORDS_RE.findall(line))<nl><tab>if words:<nl><tab><tab>print \"Found the following words on line %i: %s\" % (i + 1, \", \".join(words))<nl><tab><tab>print line","out":"python django analyze a file for a list of keywords"}
{"in":"from PIL import Image<nl>import images2gif as i2g<nl>images = i2g.readGif('Animated.gif', False)<nl>watermark = Image.open(\"Watermark.gif\")<nl>for i in images: i.paste(watermark, (1, 1))<nl><nl>i2g.writeGif('Out.gif', images, 0.5) # You may wish to play with the timing, etc.<nl>exit()","out":"Watermark GIF with Python PIL"}
{"in":"with open('your_file', 'rt') as filehandle:<nl>  lines = filehandle.readlines()[4:]<nl><nl>for line in lines:<nl><tab>print line<nl><tab>#do something","out":"Reading from a certain line onwards in python"}
{"in":"file = tkFileDialog.askopenfile(parent=root,mode='rb',filetypes=[('Subrip Subtitle File','*.srt')],title='Choose a subtitle file')<nl>abs_path = os.path.abspath(file.name)","out":"How to get the absolute path of a file using tkFileDialog?"}
{"in":"def getDocPrefixes(self, deviceId):<nl><tab>f = sq.sql.func.doc_codes(deviceId, type_=types.String)<nl><nl><tab>columns = [<nl><tab><tab>sq.Column('name', types.String),<nl><tab><tab>sq.Column('sufix', types.String)<nl><tab>]<nl><nl><tab>with self.con.begin():<nl><tab><tab>return [dict(x.items()) for x in self.con.execute<nl><tab><tab><tab>(<nl><tab><tab><tab><tab>select(columns).<nl><tab><tab><tab><tab>select_from(f)<nl><tab><tab><tab>).fetchall()]","out":"I'm getting a 'ghost' ROLLBACK from sqlalchemy but not when use psql with postgres"}
{"in":"def Main():<nl><tab>Class_A_Input = int(raw_input('Enter Class A tickets sold: '))<nl><tab>total_profit(Class_A_Input)<nl><nl>def total_profit(Class_A_Tickets):<nl><tab>print (Class_A_Tickets * 15)<nl><tab>a = Class_A_Tickets * 15<nl><tab>b = str(a)<nl><tab>text_file = open('test.txt', 'w')<nl><tab>text_file.write(b)<nl><tab>text_file.close()<nl><nl>Main()","out":"Python - Send Function Into Text Document"}
{"in":"def fchar(ch,mi):<nl><tab>global numLi<nl><tab>fc=ch<nl><tab>li=\"\"<nl><tab>for c in infected[mi:]:<nl><tab><tab>if fc==c :<nl><tab><tab><tab>li+=fc<nl><tab><tab><tab>mi = mi+1<nl><tab><tab>else:<nl><tab><tab><tab>break<nl><nl><tab>if mi<len(infected) :<nl><tab><tab>return li+\" \"+fchar(infected[mi],mi)<nl><tab>else:<nl><tab><tab>return li<nl><nl>infected =input(\"Enter DNA sequence<nl>\") ;#\"AAATTTTTTTTGCCCCCCA\"<nl>x=fchar(infected[0],0)<tab><tab> <nl>newSet = x.split(' ')<nl>print(newSet)","out":"How to split a string into parts that each part contains only same characters in python"}
{"in":"option = 0<nl>comicdb = []<nl><nl>while option != 3:<nl><tab>print \"--------------------------\"<nl><tab>print \"1. Add a New Comic Book\"<nl><tab>print \"2. Print the Database\"<nl><tab>print \"3. Quit\"<nl><tab>option = int(raw_input(\"Pick an Option: \"))<nl><tab>if option == 1:<nl><tab><tab>title = raw_input(\"Comic Book Title: \")<nl><tab><tab>issue = int(raw_input(\"Issue Number: \"))<nl><tab><tab>publisher = raw_input(\"Publisher: \")<nl><tab><tab>temp_list = []<nl><tab><tab>temp_list.append(title)<nl><tab><tab>temp_list.append(issue)<nl><tab><tab>temp_list.append(publisher)<nl><tab><tab>comicdb.append(temp_list)<nl><tab><tab>print comicdb","out":"Adding values to a list"}
{"in":"pycassa.connect_thread_local()","out":"How to connect to Cassandra inside a Pylons app?"}
{"in":"auth_token_key = request.get('auth_token_key')","out":"Parsing Information from redirect URL"}
{"in":"def somestring(**kwargs):<nl>  return ', '.join('%s=%r' % x for x in kwargs.iteritems())","out":"how can I convert a dictionary to a string of keyword arguments?"}
{"in":"new_col_list = ['city','state','regions','country']<nl>for n,col in enumerate(new_col_list):<nl><tab>df[col] = df['location'].apply(lambda location: location[n])<nl><nl>df = df.drop('location',axis=1)","out":"From tuples to multiple columns in pandas"}
{"in":"for file in list_file:<nl>  outStat=\"path_for_sum_output\"<nl>  arcpy.Statistics_analysis(file,outStat, [[\"field_value\", \"SUM\"]])<nl>  rowsStat = arcpy.SearchCursor(outStat)<nl>  for row in rowsStat:<nl><tab> sum=row.getValue('Sum_field_value')<nl><nl>  #formate name of file so the format match with field ID_old of the feature class<nl>  namelist=file.split('_')<nl>  myname=' '.join(namelist)<nl>  print myname <nl><nl>  fc='big_file'<nl>  cursor=arcpy.da.UpdateCursor(fc,['Sum_value'], \"ID_old = '\" +myname+ \"'\")<nl>  for row in cursor:<nl><tab>  row[0]= sum<nl><tab>  cursor.updateRow(row)<nl><tab>  print row","out":"python-in-arcmap, how to query using row ID and look for field values from another feature class"}
{"in":"datetime.strptime(str(newdate),\"%Y-%m-%d %H:%M:%S\")","out":"replace hours in a datetime type python"}
{"in":"class ProductFactory(factory.django.DjangoModelFactory):<nl><tab>FACTORY_FOR = Product <nl><nl><tab>name = \"test product\"<nl><tab>offer1 = factory.RelatedFactory(OfferFactory, 'product')<nl><tab>offer2 = factory.RelatedFactory(OfferFactory, 'product') # add a second offer<nl><tab>offer3 = factory.RelatedFactory(OfferFactory, 'product') # add a third offer<nl><tab>merchant1 = factory.RelatedFactory(MerchantFactory, 'product')<nl><tab>merchant2 = factory.RelatedFactory(MerchantFactory, 'product') # add a second merchant<nl><tab>merchant3 = factory.RelatedFactory(MerchantFactory, 'product') # add a third\"","out":"factory_boy: add several dependent objects"}
{"in":"if not os.path.exists(os.path.join(template_path, page)): <nl><tab>self.abort(404)","out":"Show 404 when specific route matches"}
{"in":"super()","out":"python multiple inheritance from different paths with same method name"}
{"in":"return Dept.objects.filter(employees_set__name='XYZ')","out":"Reverse lookup of foreign key in python django"}
{"in":"from BeautifulSoup import BeautifulStoneSoup<nl>soup = BeautifulStoneSoup(xml_string)<nl>whatyouwant = soup.find('second-tag')['status']","out":"XML Python Choosing one of numerous attributes using ElementTree"}
{"in":"def download_paper(request, paper_pk):<nl><tab> paper = get_object_or_404(Paper, pk=paper_pk) # get your model instance<nl><tab> # also check permissions on paper, if necessary<nl><tab> with paper.pdf_file_field.open(\"r\") as fd:<nl><tab><tab> response = HttpResponse(fd.read(), content_type=\"application\/pdf\")<nl><tab><tab> response['Content-Disposition'] = 'attachment; filename=\"%s\"' % paper.pdf_file_field.name<nl><tab><tab> return response","out":"I need to be able to redownload a document that was submitted onto my django website"}
{"in":"[i['x'] for i in a]","out":"best way to get right thing using python "}
{"in":"import matlplotlib<nl>matplotlib.use('TkAgg')","out":"Create a gray scale colormap with colorbar on Python"}
{"in":"from logging import Handler<nl><nl>class DBHandler(Handler,object):<nl><tab>model_name = None<nl><nl><tab>def __init__(self, model=\"\"):<nl><tab><tab>super(DBHandler,self).__init__()<nl><tab><tab>self.model_name = model<nl><nl><tab>def emit(self,record):<nl><tab><tab># instantiate the model<nl><tab><tab>try:<nl><tab><tab><tab>model = self.get_model(self.model_name)<nl><tab><tab>except:<nl><tab><tab><tab>from logger.models import GeneralLog as model<nl><nl><tab><tab>log_entry = model(level=record.levelname, message=self.format(record))<nl><nl><nl><tab><tab>log_entry.save()<nl><nl><tab>def get_model(self, name):<nl><tab><tab>names = name.split('.')<nl><tab><tab>mod = __import__('.'.join(names[:-1]), fromlist=names[-1:])<nl><tab><tab>return getattr(mod, names[-1])","out":"Custom python database logger, having circular import"}
{"in":"driver.find_element_by_xpath(\"\/\/option[@value='\" + state + \"']\").click()","out":"Using a variable in xpath in Python Selenium"}
{"in":"import curses<nl>oScreen = curses.initscr()<nl>curses.noecho()<nl>curses.curs_set(0)<nl>oScreen.keypad(1)<nl>oScreen.addstr(\"Woooooooooooooo<nl><nl>\",curses.A_BOLD)<nl>while True:<nl><tab>oEvent = oScreen.getch()<nl><tab>if oEvent == ord(\"q\"):<nl><tab><tab>break<nl>curses.endwin()","out":"Python terminal application with interface like nano"}
{"in":"ylabel('Soil Moisture Sensitivity,<nl>(0.01 K m$^3$ m$^{-3}$)', multialignment='center')","out":"Centering line-broken axis label in matplotlib"}
{"in":"import sqlite3 as sql<nl><nl>con = sql.connect(r\"E:\\Users.db\")<nl>c = con.cursor()<nl>con.row_factory = sql.Row<nl>username = input(\"What is your username: \")<nl><nl>readdata = input(\"Select the message you wish to read: \")<nl>c.execute(\"SELECT Sender, Recipient, Subject, Message FROM Mail WHERE (Subject LIKE ?) AND   (Recipient LIKE ?)\", (readdata, username))<nl><nl>component = c.fetchall()<nl><nl>for row in component:<nl><tab>(sent, rec, subject, msg) = tuple(row)<nl><tab>print()<nl><tab>print(\"Sender: \" + sent)<nl><tab>print(\"Recipient: \" + rec)<nl><tab>print(\"Subject: \" + subject)<nl><tab>print()<nl><tab>print(\"Message: \" + msg)","out":"Reading raw data from an sqlite table in python"}
{"in":"from OpenGL.GL import *<nl>from OpenGL.GLUT import *<nl>from OpenGL.GLU import *<nl><nl>import math<nl><nl>def initFun():<nl><tab>glClearColor(1.0,1.0,1.0,0.0)<nl><tab>glColor3f(0.0,0.0, 0.0)<nl><tab>glMatrixMode(GL_PROJECTION)<nl><tab>glLoadIdentity()<nl><tab>gluOrtho2D(0,700,0,700)<nl><nl>def displayFun():<nl><tab>glClear(GL_COLOR_BUFFER_BIT)<nl><tab>glColor3f(0.0,0.0,1.0)<nl><tab>xpts=[]<nl><tab>ypts=[]<nl><tab>N=len(newlist)<nl><tab>for i in range(0,N):<nl><tab><tab>xpts.append(700+100-float(newlist[i][4])*20)<nl><tab><tab>ypts.append(700+1300-float(newlist[i][5])*20)<nl><nl><tab>glBegin(GL_POINTS)<nl><tab>for j in range(0,N):<tab><tab><nl><tab><tab>glVertex2f(xpts[j],ypts[j])<nl><nl><tab>glEnd()<nl><tab>glFlush()<nl><nl>if __name__ == '__main__':<nl><tab>glutInit()<nl><tab>glutInitWindowSize(700,700)<nl><tab>glutCreateWindow(\"My Display\")<nl><tab>glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB)<nl><tab>glutDisplayFunc(displayFun)<nl><tab>initFun()<nl><tab>glutMainLoop()","out":"How do I resize,scale or magnify the distances between points plotted in OpenGl"}
{"in":"s = raw_input(\"Octal?  \")<nl>digits = map(int, s)<nl>lookup = ['','x','w','wx','r','rx','rw','rwx']<nl>perms = [lookup[d] for d in digits]<nl>rights = ['{}={}'.format(*x) for x in zip('ugo', perms)]<nl>print ','.join(rights)","out":"How simplify list processing in Python?"}
{"in":"import numpy as np<nl>import sklearn.tree<nl>clf = sklearn.tree.DecisionTreeClassifier()<nl>clf.fit(X,y)<nl>clf.tree_.apply(np.asfortranarray(X.astype(sklearn.tree._tree.DTYPE)))","out":"Using scikit-learn DecisionTreeClassifier to cluster"}
{"in":"yy = numpy.tan(2*(x - numpy.pi\/2))<nl>threshold = 10000<nl>yy[yy>threshold] = numpy.inf<nl>yy[yy<-threshold] = numpy.inf<nl>ax.plot(x, yy, linewidth=1.2, color=\"black\")","out":"Graphing tan in matplotlib"}
{"in":"if 1: import views","out":"Prevent PyDev from moving specific imports"}
{"in":"imgsize = (int(self.viewport.cget('width')) - 1,int(self.viewport.cget('height')) - 1)<nl># limit the draggable mouse area to just the image dimensions<nl>if event.x < 4:<nl><tab>currentx = 4<nl>elif event.x > imgsize[0]:<nl><tab>currentx = imgsize[0]<nl>else:<nl><tab>currentx = event.x<nl>if event.y < 4:<nl><tab>currenty = 4<nl>elif event.y > imgsize[1]:<nl><tab>currenty = imgsize[1]<nl>else:<nl><tab>currenty = event.y","out":"Python tkinter: how to restrict mouse cursor within canvas?"}
{"in":"d = defaultdict(int)<nl>for lst in lists:<nl>   d[len(lst)] += 1","out":"How to get statistic of a list of lists in python?"}
{"in":"c_solutions = [sol[c] for sol in solutions]","out":"Sympy - get access to the single parts of the solution of solve()"}
{"in":"from django.contrib.auth.decorators import login_required<nl>from django.shortcuts import render<nl><nl>from your_app.models import ToDo<nl><nl>@login_required<nl>def todos_for_user(request):<nl><tab>todos = ToDo.objects.filter(user=request.user)<nl><tab>return render(request, 'todos\/index.html', {'todos' : todos})","out":"django: keep each users data separate"}
{"in":"L = [1,2,3,4,5,6,7,8,9,0]<nl>a = np.random.ranint(0,50,(35,10))<nl><nl># identify location of value in array that are in L<nl>ix = np.in1d(a.ravel(), L).reshape(a.shape)","out":"Python: fast way to get position of all the element in a list in different lists given"}
{"in":"import subprocess<nl><nl>hostname = \"192.168.1.4\"<nl>output = subprocess.Popen([\"ping\",\"-c\",\"5\", hostname],stdout = subprocess.PIPE).communicate()[0]<nl><nl>if ('100% packet loss' in output):<nl><tab>print(\"Offline\")","out":"How to ping in local network using python?"}
{"in":"from Tkinter import *<nl><nl>root = Tk()<nl>t = Text(root)<nl>t.pack()<nl>t.insert(END, '''\\<nl>blah blah blah Failed blah blah<nl>blah blah blah Passed blah blah<nl>blah blah blah Failed blah blah<nl>blah blah blah Failed blah blah<nl>''')<nl>t.tag_config('failed', background='red')<nl>t.tag_config('passed', background='blue')<nl><nl>def search(text_widget, keyword, tag):<nl><tab>pos = '1.0'<nl><tab>while True:<nl><tab><tab>idx = text_widget.search(keyword, pos, END)<nl><tab><tab>if not idx:<nl><tab><tab><tab>break<nl><tab><tab>pos = '{}+{}c'.format(idx, len(keyword))<nl><tab><tab>text_widget.tag_add(tag, idx, pos)<nl><nl>search(t, 'Failed', 'failed')<nl>search(t, 'Passed', 'passed')<nl><nl>#t.tag_delete('failed')<nl>#t.tag_delete('passed')<nl><nl>root.mainloop()","out":"Tkinter text highlight specific lines using keyword"}
{"in":"def f(s, n):<nl><tab>return ' '.join(s.split()[:n])","out":"How do I trim the number of words in Python?"}
{"in":"print sum(map(len,dic.itervalues()))","out":"Is there a pythonic way to grab the total amount of variables within lists inside a dict?"}
{"in":"searchindexnodes = {}<nl>searchindexnodes[1036592] = 'Apparel'<nl>searchindexnodes[672123011] = 'Apparel'<nl>searchindexnodes[165796011] = 'Baby'","out":"How can I define an array in Python with undefined keys?"}
{"in":"s = Sound() <nl>s.read('sound.wav') <nl>s.play()","out":"Play a Sound with Python"}
{"in":"numpy.random.seed(42)","out":"Consistenly create same random numpy array"}
{"in":"M = 20<nl>N = 20<nl><nl>a = np.random.normal(0, 1, (N, M))<nl>b = np.random.normal(0, 3, N)[:, None]<nl><nl>print np.var(a + b, axis=0)<nl>print np.var(a + b, axis=1)","out":"How to generate a random gaussian matrix with different variance along each axis"}
{"in":"if charint >= 65 and charint <=90:<nl><tab><tab>cipher_int = ((charint-65 + k) % 26)+65<nl><tab><tab>code_char = chr(cipher_int)<nl><tab><tab>print code_char,<nl><nl>elif charint >= 97 and charint <=122:<nl><tab>cipher_int = ((charint-97 + k) % 26)+97<nl><tab>code_char = chr(cipher_int)<nl><tab>print code_char,<nl><nl><nl>else:<nl><tab>print char,","out":"Python: Caesar Cipher, If statement and else statement both True at the same time?"}
{"in":"boto.s3.key.Key","out":"How to store boto key object as Django's Model field?"}
{"in":"import win32api<nl>import win32con<nl>import ctypes<nl><nl>ctypes.windll.gdi32.AddFontResourceA(\"C:\\\\Users\\\\Username\\\\Desktop\\\\fontname.ttf\")<nl>win32api.SendMessage(win32con.HWND_BROADCAST, win32con.WM_FONTCHANGE)","out":"Installing TTF fonts on windows with python"}
{"in":"df.groupby(['tags_0', 'gender']).gender.count().unstack().plot(kind='barh', legend=False, color=['r', 'g', 'b'])","out":"How can I change the color of a grouped bar plot in Pandas?"}
{"in":"from numpy import array, dot<nl>dot(array([0.5, -1]), array([[1, 2, 3], [4, 5, 6]]))<nl># array([-3.5 -4. -4.5])","out":"Numpy- weight and sum rows of a matrix"}
{"in":"# METHOD 1<nl>FA_dict1 = {d:2 for v in FA[0][u'child'] for d in v.values()}<nl>FA_dict1.update({FA[0][u'pdesc']: 2})<nl><nl><nl># METHOD 2<nl>from itertools import chain<nl>FA_dict = {d:2 for v in FA[0][u'child'] for d in chain(v.values(), [FA[0][u'pdesc']])}<nl><nl><nl># METHOD 3<nl>FA_DICT = {d:2 for v in FA[0][u'child'] for d in list(v.values())+[FA[0][u'pdesc']]}","out":"Nested loops in dictionary comprehension"}
{"in":"text = \"\"\" name = Kurradu<nl> image =<nl> image_size =<nl> producer = P. Kiran<nl> writer =<nl> starring = Varun Sandesh,Neha Sharma<nl> music = Achu<nl> cinematography = Sarvesh Murari<nl> editing =<nl> distributor =<nl> released = 12 November 2009<nl> studio =<nl> country = IND\"\"\"<nl><nl><nl>d = dict(map(str.strip, line.split('=', 1)) for line in text.splitlines())<nl><nl><nl># d is now:<nl><nl>{'cinematography': 'Sarvesh Murari',<nl> 'country': 'IND',<nl> 'distributor': '',<nl> 'editing': '',<nl> 'image': '',<nl> 'image_size': '',<nl> 'music': 'Achu',<nl> 'name': 'Kurradu',<nl> 'producer': 'P. Kiran',<nl> 'released': '12 November 2009',<nl> 'starring': 'Varun Sandesh,Neha Sharma',<nl> 'studio': '',<nl> 'writer': ''}","out":"Convert text into dict"}
{"in":"text = 'According to James, \"we do not know\" the source of the problem, \"we are clueless\".'<nl>re.sub('\".+?\"', '', text)","out":"Python Reg expression to delete all text inside quotation marks"}
{"in":"L = [('a', [[0],[1]]), ('b', [[2],[3]]), ('c', [[4],[5]])]<nl>prev = []<nl>for i,el in enumerate(L):<nl><tab>el_new = (el[0], prev + el[1])<nl><tab>prev += el[1]<nl><tab>L[i] = el_new","out":"python - forward iteration \/ extending list of tuples"}
{"in":"class Nationality:<nl><tab><tab>Poland='PL'<nl><tab><tab>Germany='DE'<nl><tab><tab>France='FR'<nl><nl><tab><tab>def convertToCodeFromName(name):<nl><tab><tab><tab><tab>return getattr( Nationality, name )<nl><nl><tab><tab>def convertToNameFromCode(code):<nl><tab><tab><tab><tab>lookFor = None<nl><nl><tab><tab><tab><tab>for member in dir( Nationality ):<nl><tab><tab><tab><tab><tab><tab>if ( getattr( Nationality, member ) == code ):<nl><tab><tab><tab><tab><tab><tab><tab><tab>lookFor = member<nl><tab><tab><tab><tab>return lookFor<nl><nl>print( Nationality.convertToCodeFromName( \"Poland\" ) )<nl>print( Nationality.convertToNameFromCode( \"PL\" ) )","out":"Enum converter in python"}
{"in":"return ['']","out":"close connection with uwsgi and websockets"}
{"in":"#!\/usr\/bin\/python26\/python","out":"Changing Fast CGI to run a different version of python"}
{"in":"x = column_width - image_width<nl><nl>sheet.insert_bitmap(filepath_to_bmp, row, col, x)","out":"Python XLWT - Insert Image aligned to top-right corner of cell"}
{"in":"# reset the `totalintron` for the current `exonnumber`<nl>totalintron = 0<nl><nl># only iterate `exonnumber - 1` (which is guaranteed to be len(y) - 1 at max)<nl>for index in range(exonnumber - 1):<nl><tab>first_max = max(y[index])<nl><tab>second_min = min(y[index + 1])<nl><tab>intron = second_min - first_max<nl><tab># don???t print `intron`, we only care about the total<nl><tab>totalintron = totalintron + intron<nl><nl>print totalintron","out":"Specifying amount of numbers to sum in loop"}
{"in":"import re<nl>import json<nl>for line in logs:<nl><tab>for t in re.finditer(r\"\\{.*\\}\", line):<nl><tab><tab>try:<nl><tab><tab><tab>json.loads(t.group())<nl><tab><tab>except ValueError:<nl><tab><tab><tab>pass","out":"how to read JSON object from raw text file using python"}
{"in":"import parms<nl><nl>parms.foo<nl>parms.bar<nl>parms.baz","out":"Import a bunch of parameters as a dictionary?"}
{"in":"class TaskForm(forms.ModelForm):<nl>   class Meta:<nl><tab>  model = Task<nl><nl>   def __init__(self, *args, **kwargs):<nl><tab>  super(TaskForm, self).__init__(*args, **kwargs)<nl><tab>  self.fields['prerequisites'].queryset = Task.objects.filter(job=self.instance.job)","out":"Django: apply \"same parent\" constraint to ManyToManyField mapping to self"}
{"in":"__init__.py","out":"Importing from models.py"}
{"in":"# reading from file:<nl>with open('cities.txt') as f:<nl><tab>lines = f.readlines()<nl><nl># pre-processing<nl>indices = {line.split()[0]: i for i, line in enumerate(lines)}<nl>distances = [line.split()[1:] for line in lines]<nl><nl>#user input:<nl>start = input(\"Please enter starting point: \")<nl>end = input(\"Now please enter ending point: \")<nl><nl># evaluation:<nl>distance = distances[indices[start]][indices[end]]<nl><nl># output:<nl>print(\"Distance between {start} and {end} is {distance} km.\".format(**locals()))","out":"Python 3: Getting information from list in list"}
{"in":"v = 8.836333333333339<nl>s = str(v)<nl>print s[:s.find('.')+3]<nl><nl># prints 8.83","out":"How can limit a certain number of decimal places being shown without rounding?"}
{"in":"def checkJson(jsonContents):<nl><tab>bodyFlag = True if \"body\" in jsonContents[\"objects\"][0][\"data\"] and jsonContents[\"objects\"][0][\"data\"][\"body\"] == \"Present\" else False<nl><tab>codeFlag = True if \"code\" in jsonContents[\"objects\"][0][\"data\"] and jsonContents[\"objects\"][0][\"data\"][\"code\"] == 200 else False<nl><nl><tab>return bodyFlag or codeFlag<nl><nl>print checkJson(result)","out":"Check if key\/value is in JSON"}
{"in":"check = \"asdf\"<nl>checkLower = check.lower()<nl><nl>print any(checkLower == val.lower() for val in [\"qwert\", \"AsDf\"])<nl><nl># prints true","out":"Python: check if value is in a list no matter the CaSE"}
{"in":"from BeautifulSoup import BeautifulSoup<nl>soup = BeautifulSoup(open(\"file.html\",'r').read())<nl>cols = [header.string for header in soup.find('thead').findAll('th')]<nl>col_idx = cols.index('Username')<nl>col_values = [td[col_idx].string for td in [tr.findAll('td') for tr in soup.find('tbody').findAll('tr')]]<nl>print col_values","out":"BeautifulSoup get all the values of a particular column"}
{"in":"segment='sessions::condition::ga:pagePath=@error=PAYPAL'","out":"How to set up this Google analytics segment in Python API"}
{"in":"import os<nl>import sys<nl><nl><nl>def main():<nl><tab>if os.getpgrp() == os.tcgetpgrp(sys.stdout.fileno()):<nl><tab><tab>print 'Running in foreground.'<nl><tab>else:<nl><tab><tab>print 'Running in background.'<nl><nl><nl>if __name__ == '__main__':<nl><tab>main()","out":"How to detect if python script is being run as a background process"}
{"in":"x=int(a,2)<nl>num_bits = 10<nl>print x - (1 << num_bits)","out":"Python - Most effective way to implement two's complement?"}
{"in":"import csv<nl><nl>dictionary = {}<nl>with open('data.csv', 'r') as f:<nl><tab>reader = csv.DictReader(f)<nl><tab>for row in reader:<nl><tab><tab>dictionary[row['Key']] = row['Value']","out":"Python dictionary from excel"}
{"in":"res = {}<nl>for item in l:<nl><tab>res.setdefault(item['a'], []).append(item)","out":"Python: group list items in a dict"}
{"in":"import sys<nl>import time<nl><nl>def spinning_cursor():<nl><tab>while True:<nl><tab><tab>for cursor in '|\/-\\\\':<nl><tab><tab><tab>yield cursor<nl><nl>spinner = spinning_cursor()<nl>for _ in range(50):<nl><tab>sys.stdout.write(spinner.next())<nl><tab>sys.stdout.flush()<nl><tab>time.sleep(0.1)<nl><tab>sys.stdout.write('\\b')","out":"How to create a spinning command line cursor using python?"}
{"in":"import urllib2<nl>import lxml.etree<nl><nl>url = \"http:\/\/weather.yahooapis.com\/forecastrss?w=24260013&u=c\"<nl>doc = lxml.etree.parse( urllib2.urlopen(url) ).getroot()<nl>conditions = doc.xpath('*\/*\/yweather:condition',<nl><tab><tab><tab><tab><tab>   namespaces={'yweather': 'http:\/\/xml.weather.yahoo.com\/ns\/rss\/1.0'})<nl>try:<nl><tab>condition=conditions[0]<nl>except IndexError:<nl><tab>print('yweather:condition not found')<nl>print(condition.items())<nl># [('text', 'Fair'), ('code', '33'), ('temp', '16'), ('date', 'Wed, 19 May 2010 9:55 pm EDT')]","out":"python feedparser with yahoo weather rss"}
{"in":"def get_line(x1, y1, x2, y2):<nl><tab>points = []<nl><tab>issteep = abs(y2-y1) > abs(x2-x1)<nl><tab>if issteep:<nl><tab><tab>x1, y1 = y1, x1<nl><tab><tab>x2, y2 = y2, x2<nl><tab>rev = False<nl><tab>if x1 > x2:<nl><tab><tab>x1, x2 = x2, x1<nl><tab><tab>y1, y2 = y2, y1<nl><tab><tab>rev = True<nl><tab>deltax = x2 - x1<nl><tab>deltay = abs(y2-y1)<nl><tab>error = int(deltax \/ 2)<nl><tab>y = y1<nl><tab>ystep = None<nl><tab>if y1 < y2:<nl><tab><tab>ystep = 1<nl><tab>else:<nl><tab><tab>ystep = -1<nl><tab>for x in range(x1, x2 + 1):<nl><tab><tab>if issteep:<nl><tab><tab><tab>points.append((y, x))<nl><tab><tab>else:<nl><tab><tab><tab>points.append((x, y))<nl><tab><tab>error -= deltay<nl><tab><tab>if error < 0:<nl><tab><tab><tab>y += ystep<nl><tab><tab><tab>error += deltax<nl><tab># Reverse the list if the coordinates were reversed<nl><tab>if rev:<nl><tab><tab>points.reverse()<nl><tab>return points","out":"Get all points of a straight line in python"}
{"in":"unknown = list(\"46X90157\")<nl>unknown = ''.join(unknown)<nl>for i in range(10):<nl><tab>print([int(i) for i in unknown.replace(\"X\", str(i))])","out":"How to insert integers into a list without indexing using python?"}
{"in":"root = etree.fromstring(xmlstr)","out":"python : how to parse zipped xml file?"}
{"in":"if batch:<nl><tab><tab>key =\"\"<nl><tab><tab>key = '({})'.format(','.join(elem for elem in batch[0]))<nl><tab><tab>print key<nl><tab><tab>value ='({})'.format(','.join(\"'\"+str(eleme)+\"'\" for eleme in batch[0].values()))<nl><tab><tab>print value<nl><tab><tab>sqlWrite = []<nl><tab><tab>sqlWrite.append(\"INSERT IGNORE INTO %s \" %writeTable)<nl><tab><tab>sqlWrite.append(\"\".join(key))<nl><tab><tab>sqlWrite.append(\" VALUES \")<nl><tab><tab>sqlWrite.append(\"\".join(value))<nl><tab><tab>sql=\"\".join(sqlWrite)<nl><tab><tab>print sql<nl><tab><tab>if batch:<nl><tab><tab><tab>writeCur.executemany(sql, batch)<nl><tab><tab><tab>cnx2.commit()","out":"How to build dynamic sql query in python and use executemany() to insert?"}
{"in":"blobs = BlobInfo.all().fetch(500)<nl>for blob in blobs:<nl>  if not MyModel.all().filter(\"blob_ref =\", blob.key()).count(1):<nl><tab>blob.delete()","out":"Is it possible to find and delete orphaned blobs in the app engine blobstore?"}
{"in":"import wx<nl><nl>def set_frame_display(frame, display_index):<nl><tab>display = wx.Display(display_index)<nl><tab>x, y, w, h = display.GetGeometry()<nl><tab>frame.SetPosition((x, y))<nl><nl>def main():<nl><tab>app = wx.PySimpleApp()<nl><tab>count = wx.Display_GetCount()<nl><tab>for index in range(count):<nl><tab><tab>frame = wx.Frame(None, -1, 'Display %d of %d' % (index + 1, count))<nl><tab><tab>set_frame_display(frame, index)<nl><tab><tab>frame.Center()<nl><tab><tab>frame.Show()<nl><tab>app.MainLoop()<nl><nl>if __name__ == '__main__':<nl><tab>main()","out":"How can I choose the default wx.Display in wxpython?"}
{"in":"list_of_objects = [Object_1, Object_2, Object_3]<nl>[x.time for x in list_of_objects]","out":"Create list of object attributes in python"}
{"in":"car1 = []<nl>car2 = []<nl>car3 = []<nl>car4 = []<nl>car5 = []<nl>cars = [car1,car2,car3,car4,car5]<nl>for i in range(5):<nl><tab>rand0m = randint(1,5)<nl><tab>cars[i].append(rand0m)","out":"How to change multiple variables ever iteration of a for loop"}
{"in":"example_instance = example(**{var_under_study: value})","out":"Assign value to a string that is the same as a variable name in Python"}
{"in":"if not (args.process or args.upload):<nl><tab>parser.error('No action requested, add -process or -upload')","out":"Python argparse: Make at least one argument required"}
{"in":"import random<nl>def rand_sum(i, j):<tab><nl><tab>sum_list = []<nl><tab>for rand_num in range(i, j+1):<nl><tab><tab>sum_list.append(random.random()) # Check random docs for a function that returns<nl><tab>return sum(sum_list)<tab><tab><tab><tab> # a different set of randoms if this isn't <nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> # appropriate","out":"How to generate random variables and sum all them in python"}
{"in":"import pyodbc<nl><nl>DBfile = 'Exam_BackUp.mdb'<nl>conn = pyodbc.connect('FILEDSN='+DBfile)<nl>cursor = conn.cursor()<nl><nl># Do whatever you want with SQL selects, etc<nl><nl>cursor.close()<nl>conn.close()","out":"open access file in python"}
{"in":"from models import MyModel<nl>try:<nl><tab>max_length = MyModel._meta.get_field('source_url').max_length<nl>except:<nl><tab>max_length = None","out":"Reading a Django model's field options"}
{"in":"verb, title, definition = myString.split (' ', 2)","out":"Need some help with python string \/ slicing operations"}
{"in":"inds = {'EUR': [whatever],<nl><tab><tab>'AFR': [foo],<nl><tab><tab>'ASN': [other]}<nl><nl>foos = inds['EUR']","out":"Set string as variable name"}
{"in":"import sqlalchemy.types as types<nl><nl>class ChoiceType(types.TypeDecorator):<nl><nl><tab>impl = types.String<nl><nl><tab>def __init__(self, choices, **kw):<nl><tab><tab>self.choices = dict(choices)<nl><tab><tab>super(ChoiceType, self).__init__(**kw)<nl><nl><tab>def process_bind_param(self, value, dialect):<nl><tab><tab>return [k for k, v in self.choices.iteritems() if v == value][0]<nl><nl><tab>def process_result_value(self, value, dialect):<nl><tab><tab>return self.choices[value]","out":"SQLAlchemy - How to make \"django choices\" using SQLAlchemy?"}
{"in":"currentCommand = \"cmd \/c \" & Chr(34) & source_code_path & \" \" & variable1 & \" \" & variable2 & Chr(34)","out":"Calling Python script with arguments from VBscript"}
{"in":"plt.close()","out":"Matplotlib suptitle printed over old suptitle"}
{"in":"popen = Popen(command_args, stdout=PIPE, stderr=PIPE)<nl>body_contents = popen.stdout().read()<nl>popen.terminate()<nl>popen.wait()<nl>r = HttpResponse(body_contents, mimetype='application\/pdf')","out":"return pdf response from stdout with Django"}
{"in":"requests.get(\"https:\/\/api.helpscout.net\/v1\/conversations\/{id}.json\", auth=('{API_KEY}','X'))","out":"GET .json from Helpscout API using Python"}
{"in":"import re <nl><nl>def find_subs(line):<nl><tab>match = re.findall(\">([aA-zZ\\s]*)<\",line)<nl><tab>if len(match) != 0:<nl><tab><tab>new_line = '<ul class=\"bar\">'<nl><tab><tab>for m in match:<nl><tab><tab><tab>new_line += \"<li>\"+m+\"<\/li>\"<nl><tab><tab>new_line += \"<\/ul>\"<nl><tab><tab>return new_line<nl><tab>else:<nl><tab><tab>return None<nl><nl>line = \"<stats>Some line<br>Other line<\/stats>\"<nl>new = find_subs(line)<nl>print new","out":"How to replace XML with sub-elements"}
{"in":"d = {}<nl>d['a']=[1,2,3]<nl>d['b']=[2,4,6]<nl><nl>zipped_list = zip(d['a'],d['b'])<nl>print map(lambda x: sum(x), zipped_list)","out":"summing elements of multiple dictionary lists with zip"}
{"in":"platform.get_devices(device_type=cl.device_type.ALL)","out":"Sailfish: how to run on computer without gpu"}
{"in":"import socket<nl><nl>UDP_IP = \"127.0.0.1\"<nl>UDP_PORT = 5005<nl><nl>sock = socket.socket(socket.AF_INET, # Internet<nl><tab><tab><tab><tab> socket.SOCK_DGRAM) # UDP<nl>sock.bind((UDP_IP, UDP_PORT))<nl><nl>while True:<nl><tab>data, addr = sock.recvfrom(1024) # buffer size is 1024 bytes<nl><tab>print \"received message:\", data","out":"Using netcat redirection in python to get data, after sending Ctrl C command"}
{"in":"def perms(word):<nl><tab>stack = list(word)<nl><tab>results = [stack.pop()]<nl><tab>while len(stack) != 0:<nl><tab><tab>c = stack.pop()<nl><tab><tab>new_results = []<nl><tab><tab>for w in results:<nl><tab><tab><tab>for i in range(len(w)+1):<nl><tab><tab><tab><tab>new_results.append(w[:i] + c + w[i:])<nl><tab><tab>results = new_results<nl><tab>return results","out":"Iterative solution for :- Finding String permutations"}
{"in":"for alb in l.songs:<nl>   if alb.album not in song_database:<nl><tab>   song_database[alb.album] = [alb.name]<nl>   else:<nl><tab>   song_database[alb.album].append(alb.name)","out":"How to build a python dictionary in a loop?"}
{"in":"if length > 1: <nl><tab>listPlace = overlap[1] - 3<nl><tab>brick = bricklist[listPlace]<nl><tab># Get the coordinates<nl><tab>bx1,by1,bx2,by2 = drawpad.coords(brick)<nl><tab># Now delete it<nl><tab>drawpad.delete(brick)<nl><tab>if x1 <= bx1 or x2 >= bx2:<nl><tab><tab>angle = -angle<nl><tab>if y1 <= by1 or by2 >= y2:<nl><tab><tab>direction = -direction","out":"Unpack Coordinates of Variable"}
{"in":"from django_extensions.db.fields.json import JSONField","out":"Convert Django models to normal objects"}
{"in":"# create item widget<nl>item = QListWidgetItem()<nl>w = CustomItemWidget()<nl>w.setTitle = \"Title\"<nl>w.setDescription = \"Blah blah\"<nl># would have a QPixmap already cached<nl>w.setBadgeImage = preCreatedPixmaps['thisBadge']  <nl>listWidget.insertItem(item)<nl>listWidget.setItemWidget(item, w)","out":"Custom Items in QListView"}
{"in":"def prog_callback(param, current, total):<nl><tab>pct = 100 - ((total - current ) *100 )\/ (total) <nl><tab>print \"Progress: %s \" % pct<tab><nl><nl><nl>datagen, headers = multipart_encode({<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab>\"post\": \"1\",<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab>\"skin\": \"xmlhttprequest\",<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab>\"userlogin\": \"%s\" % username,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab>\"password\": \"%s\" % password,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab>\"item_type\": \"file\",<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab>\"title\": \"%s\" % title.encode(\"utf-8\"),<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab>\"description\": \"%s\" % description.encode(\"utf-8\"),<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> <nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> \"file\": filename<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> }, cb=prog_callback)<tab><nl><nl>opener = register_openers()<nl><nl>req = urllib2.Request(UPLOAD_URL, datagen, headers)<nl>response = urllib2.urlopen(req)<nl>return response.read()","out":"Python HTTPConnection file send with httplib, retrieving progress"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt <nl>from mpl_toolkits.mplot3d import Axes3D<nl>import matplotlib.tri as mtri<nl><nl>X = np.load('.\/mydatars.npy')<nl># My data points are strictly positive. This doesn't work if I don't center about the origin.<nl>X -= X.mean(axis=0)<nl><nl>rad = np.linalg.norm(X, axis=1)<nl>zen = np.arccos(X[:,-1] \/ rad)<nl>azi = np.arctan2(X[:,1], X[:,0])<nl><nl>tris = mtri.Triangulation(zen, azi)<nl><nl>fig = plt.figure()<nl>ax  = fig.add_subplot(111, projection='3d')<nl>ax.plot_trisurf(X[:,0], X[:,1], X[:,2], triangles=tris.triangles, cmap=plt.cm.bone)<nl>plt.show()","out":"Delaunay Triangulation of points from 2D surface in 3D with python?"}
{"in":"sorted_items = sorted(d.items(), key = lambda item : len(item[1]))<nl>newd = dict(sorted_items[-2:])","out":"Sort a dictionary by length of the value"}
{"in":"def __init__(self, master, number_of_people, node_size):<nl><tab>a = 350<nl><tab>b = 140<nl><tab>ellipsePoints = [(a * cos(theta), b * sin(theta))<nl><tab><tab><tab><tab><tab> for theta in (pi*2 * i\/number_of_people for i in range(number_of_people))]<nl><tab>DisplayFrame = Canvas(root, bg=\"white\", width=725, height=320)<nl><tab>DisplayFrame.grid(row=0, columnspan=7, column=0, sticky='W', padx=5, pady=5)<nl><tab>for i in range(number_of_people):<nl><tab><tab><tab>DisplayFrame.create_oval(ellipsePoints[i][0]+355, ellipsePoints[i][1]+155,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> ellipsePoints[i][0]+355+node_size, ellipsePoints[i][1]+155+node_size, fill=\"red\")","out":"How to place evenly spaced circles on an elliptical path?"}
{"in":"key = \"testtest12\"<nl>mapping = range(256)<nl><nl>keylen = len(key)<nl>maplen = len(mapping)<nl><nl>for i, v in enumerate(mapping):<nl><tab>c = ord(key[i % keylen])<nl><tab>t = (i + c) % maplen<nl><tab>mapping[i] = mapping[t]<nl><tab>mapping[t] = v","out":"Create a pseudo random table based on user input"}
{"in":"import sys<nl>sys.exit(\"Your error message\")","out":"Exit Python while loop with error"}
{"in":"param_table.write(param.h5, format='hdf5')","out":"How do I write a 3d astropy table to a file"}
{"in":"lxml.html","out":"Get results of autocompletion search"}
{"in":"post_save.connect(create_user_profile, sender=User, <nl><tab><tab><tab><tab><tab>dispatch_uid=\"user_create_profile\")","out":"User signup leads to IntegrityError"}
{"in":"start_times = node.xpath(\"\/\/t:chapter\/start_time\/text()\", <nl><tab><tab><tab><tab>   namespaces={'t':'http:\/\/example.com\/namespace'})","out":"Find XPATH with namespace and based on parent element"}
{"in":"# change variable name and values to what you need<nl>connection.execute(\"SET SESSION query_cache_type = OFF\")","out":"SQLAlchemy: How to change a MySQL server system variable using SQLAlchemy?"}
{"in":"user_agent_string = self.request.headers['user-agent']","out":"Python\/AppEngine: Get client browser information"}
{"in":"def _free_places(self):<nl><tab>places = 0<nl><tab>for r in self.rooms:<nl><tab><tab>x = r.beds - ((r.tenant).size())<nl><tab><tab>places = places + x<nl><tab>return places<nl>free_places = property(_free_places)","out":"How to declare and call a model method navigating through relations in django?"}
{"in":"for c in cols:<nl><tab>if not re.match(r'^[A-Za-z][A-Za-z0-9$_-]+$', c):<nl><tab><tab><tab>print \"Argument is not a valid column name :\", c<nl><tab><tab><tab>sys.exit()","out":"Proper SQL request with psycopg2 in Python"}
{"in":"top_score_id = sorted_tuple[0][0]","out":"Python - Dictionnary and tuples, retrieving key after sorted()"}
{"in":"def pictures_2png(file):<nl><tab>buffer = StringIO()<nl><tab>Image.open(file).save(buffer, \"PNG\")<nl><tab>return InMemoryUploadedFile(buffer, None, 'test.png', 'image\/png', buffer.len, None)","out":"Upload image to png"}
{"in":"gurl = 'http:\/\/toolbarqueries.google.com\/tbr?client=navclient-auto&ch=%s&features=Rank&q=info:%s' % (hsh,urllib.quote(URL))","out":"Pagerank for locally stored google search results"}
{"in":"d = collections.defaultdict(list)<nl>for element in rootElement.iter():<nl><tab>d[element.tag].append(element.text)","out":"Parsing XML data with nested tags in Python"}
{"in":"class Episode(models.Model):<nl><tab>episode_num = models.IntegerField()<nl><tab>def __unicode__(self):<nl><tab><tab>return 'episode {}'.format(self.episode_num)<nl><nl>Episode.objects.order_by('episode_num')","out":"Sorting by name in django"}
{"in":"def fetchFuction():<nl><tab>QtGui.QApplication.setOverrideCursor(QtGui.QCursor(QtCore.Qt.WaitCursor))<nl><tab># if incase function failed then restore it<nl><tab>try:<nl><tab><tab>yourFetchFucn()<nl><tab><tab>QtGui.QApplication.restoreOverrideCursor()<nl><tab>except:<nl><tab><tab>QtGui.QApplication.restoreOverrideCursor()","out":"How to disable button(or whole main window) in PyQt4 until the function returns 0"}
{"in":"import requests<nl><nl>url = 'http:\/\/url.com'<nl>query = {'field': value}<nl>res = requests.post(url, data=query)<nl>print(res.text)","out":"Using Python Script to post data to web server"}
{"in":"from random import randint<nl>from time import sleep<nl><nl>sleep(randint(10,100))","out":"How to add random delays between the queries sent to Google to avoid getting blocked in python"}
{"in":"from django.db.models import Count<nl>Image.objects.annotate(Count(\"person\")).order_by(\"person__count\")","out":"Django queryset ordering by _set"}
{"in":"import os<nl>for i in \"abc\":<nl><tab>os.system (\"mkdir \"+i)<nl><tab>for j in range (5):<nl><tab><tab><tab>os.system (\"touch \"+str(i)+\"\/\"+str(j)+\".txt\")","out":"creating file and folder loop"}
{"in":"from contextlib import closing<nl>with closing( conn.cursor() ) as cursor:<nl><tab>cursor.execute(\"INSERT INTO...\")","out":"Multiple executions using MySQLdb"}
{"in":"querystring['param2']","out":"How do I get the values of a parsed query string in python?"}
{"in":"import random<nl><nl>def WeightedPick(d):<nl><tab>r = random.uniform(0, sum(d.itervalues()))<nl><tab>s = 0.0<nl><tab>for k, w in d.iteritems():<nl><tab><tab>s += w<nl><tab><tab>if r < s: return k<nl><tab>return k<nl><nl>def Test():<nl><tab>k = {'A': 68, 'B': 62, 'C': 47, 'D': 16, 'E': 81}<nl><tab>results = {}<nl><tab>for x in xrange(10000):<nl><tab><tab>p = WeightedPick(k)<nl><tab><tab>results[p] = results.get(p, 0) + 1<nl><tab>print results<nl><nl>Test()","out":"(Python) algorithm to randomly select a key based on proportionality\/weight"}
{"in":"response=self.app.post('\/test_function', <nl><tab><tab><tab><tab><tab>   data=json.dumps(dict(foo='bar')),<nl><tab><tab><tab><tab><tab>   content_type = 'application\/json')","out":"How to send requests with JSONs in unit tests"}
{"in":"site-packages\/reportlab\/platypus\/doctemplate.py","out":"Draw images with canvas and use SimpleDocTemplate"}
{"in":"count = len(set(d[\"code\"] for d in li))","out":"How do I most efficienty check the unique elements in a list?"}
{"in":"scipy.io.wavfile","out":"Writing to a .wav file"}
{"in":"df1['age'] = now - datetime.strptime(df1['dob'], \"%m%d%Y\")","out":"Pandas calculating age from a date"}
{"in":"key=lambda x: abs(x._norm - number)","out":"sorting a list of object based on an instance that is nearest to a number python"}
{"in":"yourstring= '\"ABC\", \"XYZ,MNO\", \"KLM\"<nl>\"ABC\", \"MN\"<nl>\"ABC\", \"123\", \"10\", \"OPPA GANGNAM STYLE\", \"LADY\"'<nl><nl>import csv<nl>import StringIO<nl><nl>class MyDialect(csv.Dialect):<nl><tab>strict = True<nl><tab>skipinitialspace = True<nl><tab>quoting = csv.QUOTE_ALL<nl><tab>delimiter = ','<nl><tab>quotechar = '\"'<nl><tab>lineterminator = '<nl>'<nl><nl><nl>b=StringIO.StringIO(yourstring)<nl>r=csv.reader(b,MyDialect())<nl><nl>for i in r:<nl><tab>print len(i), ':',' @ '.join(i)","out":"Python - how to read\/parse csv like line?"}
{"in":"# Create a temporary list to hold new x values<nl>result = []<nl><nl>for x, y in zip(list_x, list_y):<nl><tab> # Populate the new list<nl><tab> result.append(f(x, y))<nl><nl># Name your new list same as the old one<nl>list_x = result","out":"Python list initialization in for loop"}
{"in":"CACHES = {<nl><tab>'default': {<nl><tab><tab>'BACKEND': 'django.core.cache.backends.dummy.DummyCache',<nl>   }<nl>}","out":"how to disable cache for development in django?"}
{"in":"import re<nl>testString = r'this, is a test \"one\" it should only return the first item \\\"two\\\" and not the second'<nl>pattern = r'(?<!\\\\)\"([^\"]*)(?<!\\\\)\"'<nl><tab><tab>  # ^^^^^^^<tab><tab>^^^^^^^<nl>print re.findall(pattern, testString)","out":"Finding items in quotes, but not escaped quotes, in python using re"}
{"in":"from datetime import date<nl>import random<nl><nl>start_date = date.today().replace(day=1, month=1).toordinal()<nl>end_date = date.today().toordinal()<nl>random_day = date.fromordinal(random.randint(start_date, end_date))","out":"Python select random date in current year"}
{"in":"with open('file') as f:<nl><tab>print(f.read().count(sequence))","out":"Finding number of exact matches of string in file python"}
{"in":"import re<nl>reValidIPv4 = re.compile(r\"\"\"<nl><tab># Match a valid IPv4 in the wild.<nl><tab>(?:<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> # Group two start-of-IP assertions.<nl><tab>  ^<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> # Either the start of a line,<nl><tab>| (?<=\\s)<tab><tab><tab><tab><tab><tab><tab><tab>   # or preceeded by whitespace.<nl><tab>)<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>   # Group two start-of-IP assertions.<nl><tab>(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)<tab># First number in range 0-255 <nl><tab>(?:<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> # Exactly 3 additional numbers.<nl><tab>  \\.<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab># Numbers separated by dot.<nl><tab>  (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)  # Number in range 0-255 .<nl><tab>){3}<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab># Exactly 3 additional numbers.<nl><tab>(?=$|\\s)<tab><tab><tab><tab><tab><tab><tab><tab><tab># End IP on whitespace or EOL.<nl><tab>\"\"\", re.VERBOSE | re.MULTILINE)<nl><nl>text = \"10.0.0.1.1 but 127.0.0.256 1.1.1.1\"<nl>l = reValidIPv4.findall(text)<nl>print(l)","out":"Finding valid IP addresses with regex"}
{"in":"import os<nl>open(os.path.join(os.path.dirname(__file__), 'Directory', 'input.txt'))","out":"How to get text file from a relative path?"}
{"in":"from twisted.web.util import Redirect<nl>fooDotComResource.putChild(\"bar\", Redirect(\"http:\/\/foobar.com\/bar\"))","out":"Twisted redirect subdirectory to another domain"}
{"in":"print('<tab><tab>%-40s%s' % (self.serverrqs()*int(self.nbpro), self.servernbrqs()))","out":"python how to align data with pprint or another module"}
{"in":"import web<nl><nl>urls = (<nl><tab>'\/(.*)', 'hello'<nl>)<nl>app = web.application(urls, globals())<nl><nl>class hello:<tab><tab><nl><tab>def GET(self, name):<nl><tab><tab>if not name: <nl><tab><tab><tab>name = 'world'<nl><tab><tab>return 'Hello, ' + name + '!'<nl><nl>if __name__ == \"__main__\":<nl><tab>app.run()","out":"Python web framework with low barrier to entry"}
{"in":"os.system(\"cat * | grep -r -i -c 'Error' '%s' > '%s'\" % (dir, errors_file))","out":"What is the best way of writing the number of occurrences of a word in a file for multiple files and writing the results to another file"}
{"in":"pt = (2, 2)<nl>distance = 1<nl>mask = (indices[0] - pt[0]) ** 2 + (indices[1] - pt[1]) ** 2 <= distance ** 2<nl>result = my_array[mask]","out":"How to filter a numpy array based on indices?"}
{"in":"line1 = file1.readline()<nl>line2 = file2.readline()<nl>while file1_not_at_end and file2_not_at_end:<nl><tab>if line1 < line2:<nl><tab><tab>file3.write(line1)<nl><tab><tab>line1 = file1.readline()<nl><tab>else:<nl><tab><tab>file3.write(line2)<nl><tab><tab>line2 = file2.readline()<nl><nl> # merge file 1 into file 3<nl> # merge file 2 into file 3","out":"Python - reading and deleting the top line of a file without loading it into memory"}
{"in":"import unittest<nl>class TestNothing(unittest.TestCase):<nl><tab>def test_0010_test_nothing(self):<nl><tab><tab>self.assertEqual(200, 200)","out":"unittest- TypeError: this constructor takes no arguments"}
{"in":"a=2<nl>s = np.random.zipf(a, 1000)<nl>result = (s\/float(max(s)))*1000<nl><nl>print min(s), max(s)<nl>print min(result), max(result)","out":"How to create values from Zipf Distribution with range n in Python?"}
{"in":"get_by_id()","out":"use standard datastore index or build my own"}
{"in":"sizer = wx.BoxSizer(wx.VERTICAL)<nl>sizer.Add(widget1, 0, wx.EXPAND)<nl>sizer.Add(widget2, 1)","out":"wxPython: Items in BoxSizer don't expand horizontally, only vertically"}
{"in":"dict['a'][:,1]","out":"How to use columns of a key in a dict in Python?"}
{"in":"from chef import autoconfigure, Client<nl>api = autoconfigure()<nl>Client.delete('notcool.my.com')<nl>Client.create('cool.my.com')","out":"how to do 'knife client delete' and 'knife client create' using PyChef?"}
{"in":"def update_weights(w,x,y, learning_rate):<nl><tab>inner_product = 0.0<tab><nl><tab>for f_ in range(len(x)):<nl><tab><tab>inner_product += (w[f_] * x[f_])<nl><tab>dloss = inner_product - y<nl><tab>for f_ in range(len(x)):<nl><tab><tab>w[f_] += (learning_rate * (-x[f_] * dloss))<nl><tab>return w","out":"SGD - loss starts increasing after some iterations"}
{"in":"import matplotlib.pyplot as plt<nl><nl>fig, ax = plt.subplots()<nl>x = [0, 0.2, 0.4, 0.6, 0.8]<nl>y = [0, 0.5, 1, 1.5, 2.0]<nl>colors = ['k']*len(x)<nl>ax.scatter(x, y, c=colors, alpha=0.5)<nl>ax.set_xlim((0,2))<nl>ax.set_ylim((0,2))<nl>x0,x1 = ax.get_xlim()<nl>y0,y1 = ax.get_ylim()<nl>ax.set_aspect(abs(x1-x0)\/abs(y1-y0))<nl>ax.grid(b=True, which='major', color='k', linestyle='--')<nl>fig.savefig('test.png', dpi=600)<nl>plt.close(fig)","out":"How do I make a matplotlib scatter plot square?"}
{"in":"def partitionIndexes(totalsize, numberofpartitions):<nl><tab># Compute the chunk size (integer division; i.e. assuming Python 2.7)<nl><tab>chunksize = totalsize \/ numberofpartitions<nl><tab># How many chunks need an extra 1 added to the size?<nl><tab>remainder = totalsize - chunksize * numberofpartitions<nl><tab>a = 0<nl><tab>for i in xrange(numberofpartitions):<nl><tab><tab>b = a + chunksize + (i < remainder)<nl><tab><tab># Yield the inclusive-inclusive range<nl><tab><tab>yield (a, b - 1)<nl><tab><tab>a = b","out":"Get indices of roughly equal sized chunks"}
{"in":"age = int(input(\"Thank you \" + name + \", please enter your name to continue.\"))","out":"Syntax error in a Python program"}
{"in":"import os<nl>import sys<nl><nl><nl>filename = 'logo.txt'<nl># Use join instead of hard-coding file separators<nl>path = os.path.join(os.getcwd(), filename)<nl># You need to specify some kind of delimiter so you know<nl># where the logo ends. I couldn't think of a better way to<nl># only print part of the file.<nl>delimiter = '------'<nl><nl><nl>with open(path, 'r') as f:<nl><tab>for line in f:<nl><tab><tab>if delimiter in line:<nl><tab><tab><tab>sys.stdout.write('Press any key to continue...')<nl><tab><tab><tab>raw_input()<nl><tab><tab>else:<nl><tab><tab><tab>sys.stdout.write(line)","out":"How to open a text file in python and write only the first visible portion to the screen?"}
{"in":"import wx<nl><nl>TIMER_ID = 100<nl><nl>class Frame(wx.Frame):<nl><tab>def __init__(self, title):<nl><tab><tab>wx.Frame.__init__(self, None, title=title, size=(350,200))<nl><tab><tab>self.timer = None<nl><tab><tab>self.Bind(wx.EVT_LEFT_DCLICK, self.OnDoubleClick)<nl><tab><tab>self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)<nl><nl><tab>def OnDoubleClick(self, event):<nl><tab><tab>self.timer.Stop()<nl><tab><tab>print(\"double click\")<nl><nl><tab>def OnSingleClick(self, event):<nl><tab><tab>print(\"single click\")<nl><tab><tab>self.timer.Stop()<nl><nl><tab>def OnLeftDown(self, event):<nl><tab><tab>self.timer = wx.Timer(self, TIMER_ID)<nl><tab><tab>self.timer.Start(200) # 0.2 seconds delay<nl><tab><tab>wx.EVT_TIMER(self, TIMER_ID, self.OnSingleClick)<nl><nl><nl><nl>app = wx.App(redirect=True)<nl>top = Frame(\"Hello World\")<nl>top.Show()<nl>app.MainLoop()","out":"How to distinguish the double click and single click of mouse in wxpython"}
{"in":"with open (\"my.ini\", \"r\") as myfile:<nl><tab>my_config = myfile.read()<nl><nl>lines = my_config.splitlines(True)<nl>replacements = {\"path_jamjs\": {\"changeUsername\": \"Te\"},<nl><tab><tab><tab><tab>\"path_php\": {\"changeUsername\": \"TeS\"}}<nl><nl>for path, reps in replacements.items():<nl><tab>for i, line in enumerate(lines):<nl><tab><tab>if line.startswith(path + ':'):<nl><tab><tab><tab>for key, value in reps.items():<nl><tab><tab><tab><tab>line = line.replace('[' + key + ']', value)<nl><tab><tab><tab>lines[i] = line<nl><nl>result = ''.join(lines)","out":"how to apply a specific regex to a specific line"}
{"in":"recordList = []","out":"Create a list of defaultdict in python"}
{"in":"import win32com.client<nl>objShell = win32com.client.Dispatch(\"WScript.Shell\")<nl>allUserDocs = objShell.SpecialFolders(\"AllUsersDesktop\")<nl>print allUserDocs","out":"Find system folder locations in Python"}
{"in":"sysconfig.get_config_var('SO')","out":"python distutils: access to name of compiled extension"}
{"in":"import math<nl>import pygame<nl>from pygame.locals import *<nl><nl>radar = (100,100)<nl>radar_len = 50<nl>x = radar[0] + math.cos(math.radians(angle)) * radar_len<nl>y = radar[1] + math.sin(math.radians(angle)) * radar_len<nl><nl># then render the line radar->(x,y)<nl>pygame.draw.line(screen, Color(\"black\"), radar, (x,y), 1)","out":"pygame rotating a line"}
{"in":"import re<nl>f=open('test.file.here', 'r')<nl><nl>pattern = re.compile(\"^[^\\s]*ello[^\\s]*\\sWorld[^\\s]*$\")<nl><nl>for line in f:<nl>  if pattern.match(line):<nl><tab>print line,<nl><nl>f.close()","out":"How can I create search terms with wildcards in Python?"}
{"in":"def f(x,y):<nl><tab>'...some code...'<nl><tab>single_value = array[x,y] # = dependent array (e.g. DEM)<nl><tab>'...some code...'<nl><tab>return z<nl><nl>x = np.arange(array.shape[0])<nl>y = np.arange(array.shape[1])<nl>xx, yy = np.meshgrid(x,y, sparse=True)<nl><nl>f_vec = np.vectorize(f) # vectorization of function f<nl><nl>tp_vec = f_vec(xx,yy).T","out":"Updated: Apply (vectorized) function on each cell to interpolate grid"}
{"in":"one = np.ascontiguousarray(a['one'])<nl>one.ctypes.data_as(ctypes.POINTER(ctypes.c_double))","out":"ctypes pointer to numpy array with custom dtype"}
{"in":"from sklearn.cluster import KMeans<nl>import numpy as np<nl>x = np.random.random(13876)<nl><nl>km = KMeans()<nl>km.fit(x.reshape(-1,1))  # -1 will be calculated to be 13876 here","out":"Scikit-learn: How to run KMeans on a one-dimensional array?"}
{"in":"'^(aby|xyz)_.*?(?<!_Result)\\.csv$'","out":"Match files if it not ends with particular string"}
{"in":"axs = df_month.plot(secondary_y=['C'], mark_right=False)<nl><nl>for ax in axs:<nl><tab>ax.right_ax.set_ylim((0,50)) # Set the y limits to 0 to 50","out":"Secondary_y range in a Pandas groupby function"}
{"in":"time.struct_time","out":"How to get RSS date using Universal Feed Parser"}
{"in":"class ProducerProcess(Process):<nl><nl><tab>def __init__(self, q, **kwargs):<nl><tab><tab>Process.__init__(self,)<nl><tab><tab>self.q = q<nl><nl><tab>def run():<nl><tab><tab>res = do_stuff()<nl><tab><tab>q.put(res)<nl><nl>class ConsumerProcess(Process):<nl><nl><tab>def __init__(self, q, **kwargs):<nl><tab><tab>Process.__init__(self,)<nl><tab><tab>self.q = q<nl><nl><tab>def run():<nl><tab><tab>while True:<nl><tab><tab><tab>args = q.get(block=True) # wait until there is an item in the queue<nl><tab><tab><tab>do_stuff(*args) # do stuff here<nl><nl><nl>q = Queue()<nl>p1 = ProducerProcess(q, **your_args)<nl>p2 =ConsumerProcess(q, **extra_args)<nl>p2.start()<nl>p1.start()<nl># join the processes p1.join() p2.join() or use JoinableQueue depending what you need","out":"Keep a process listening for intercommunication"}
{"in":"subprocess.call('echo -e \"root (hd0,1)<nl>find \/boot\/grub\/menu.lst<nl>setup (hd0)<nl>quit\" | grub --batch', shell=True)","out":"How to execute long bash sequence with Python subprocess"}
{"in":"mystring = \"a1234f\"<nl>data = list(mystring)","out":"Reading bytes from Python String"}
{"in":"sql.execute(connection, \"\"\"<nl>INSERT INTO blah VALUES %s;\"\"\" % (<nl><tab>\", \".join(\"(%d)\" % hid for hid in hids)))","out":"create temporary table from cursor"}
{"in":"columns = ['Facility', 'Category', 'ID', 'Part', 'Text']<nl><nl># It's always a good idea to sort after creating a MultiIndex like this<nl>df = df.set_index(columns).sortlevel()<nl>df1 = df1.set_index(columns).sortlevel()<nl><nl># You don't have to use Yes here, anything will do<nl># The boolean True might be more appropriate<nl>df['MatchingFlag'] = \"Yes\"<nl>df1['MatchingFlag'] = \"Yes\"<nl><nl># Add them together, matching rows will have the value \"YesYes\"<nl># Non-matches will be nan<nl>result = df + df1<nl><nl># If you'd rather not have NaN's <nl>result.loc[:,'MatchingFlag'] = result.loc[:,'MatchingFlag'].replace('YesYes','Yes')<nl>result.loc[:,'MatchingFlag'] = result['MatchingFlag'].fillna('No')","out":"Pandas Compare between Two DataFrames, flag what matches"}
{"in":"import os<nl><nl>sep = \" \"<nl><nl>with open(\"inline-t.txt\", \"rb+\") as fd:<nl><tab>seekpos = fd.tell()<nl><tab>line = fd.readline()<nl><tab>while line:<nl><tab><tab>print line<nl><tab><tab>next = raw_input(\">>> \")<nl><tab><tab>if next == \":q\":<nl><tab><tab><tab>break<nl><tab><tab>if next:<nl><tab><tab><tab>values = line.split(sep)<nl><tab><tab><tab>newval = values[0] + sep + next + '<nl>'<nl><tab><tab><tab>if len(newval) == len(line):<nl><tab><tab><tab><tab>fd.seek(seekpos)<nl><tab><tab><tab><tab>fd.write(newval)<nl><tab><tab><tab><tab>fd.flush()<nl><tab><tab><tab><tab>os.fsync(fd)<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>remaining = fd.read()<nl><tab><tab><tab><tab>fd.seek(seekpos)<nl><tab><tab><tab><tab>fd.write(newval + remaining)<nl><tab><tab><tab><tab>fd.flush()<nl><tab><tab><tab><tab>os.fsync(fd)<nl><tab><tab><tab><tab>fd.seek(seekpos)<nl><tab><tab><tab><tab>line = fd.readline()<nl><tab><tab>seekpos = fd.tell()<nl><tab><tab>line = fd.readline()","out":"edit a file line by line interactively from user input in python"}
{"in":"from django.test.client import Client<nl>client = Client()<nl>resp = client.put('\/employee\/2\/', data={'email': 'here@there.com'}, follow=True)<nl>#... etc","out":"Django REST browser interface"}
{"in":"for key1 in dict:<nl><tab>for key2 in dict[key1]:<nl><tab>   dict[key1][key2]['time'] = 'newTime'","out":"Iterating through the same key in different items python dictionary"}
{"in":"comma_separated_float_list_re = re.compile('^([-+]?\\d*\\.?\\d+[,\\s]*)+$')<nl>validate_comma_separated_float_list = RegexValidator(<nl><tab><tab><tab>  comma_separated_float_list_re, <nl><tab><tab><tab>  _(u'Enter only floats separated by commas.'), 'invalid')<nl><nl>class CommaSeparatedFloatField(CharField):<nl><tab>default_validators = [validators.validate_comma_separated_float_list]<nl><tab>description = _(\"Comma-separated floats\")<nl><nl><tab>def formfield(self, **kwargs):<nl><tab><tab>defaults = {<nl><tab><tab><tab>'error_messages': {<nl><tab><tab><tab><tab>'invalid': _(u'Enter only floats separated by commas.'),<nl><tab><tab><tab>}<nl><tab><tab>}<nl><tab><tab>defaults.update(kwargs)<nl><tab><tab>return super(CommaSeparatedFloatField, self).formfield(**defaults)","out":"Django: Model field for storing a list of floats?"}
{"in":"from pyramid.wsgi import wsgiapp<nl><nl># Enable TileStache tile server<nl>import TileStache<nl>tile_app = TileStache.WSGITileServer('tilestache\/tilestache.cfg', autoreload=False)<nl><nl>@wsgiapp<nl>def tileserver(environ, start_response):<nl><nl><tab>return tile_app(environ, start_response)","out":"How to serve a wsgi app from within Pyramid?"}
{"in":"wd = webdriver.Firefox()<nl>wd.implicitly_wait(3)<nl><nl>def get_items(items):<nl><tab>print len(items)<nl><tab>wd.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")<nl><tab># len(items) and len(wd.find_elements-by...()) both always seem to return the same number<nl><tab># if I were to start the loop with while True: it would work, but of course... never end<nl><nl><tab>sleep(5) #seconds<nl><tab>while len(wd.find_elements_by_class_name('stream-item')) > len(items):<nl><tab><tab>items = wd.find_elements_by_class_name('stream-item')<nl><tab><tab>print items<nl><tab><tab>wd.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")<nl><tab>return items<nl><nl>def test():<nl><tab>get_page('http:\/\/twitter.com\/')<nl><tab>get_items(wd.find_elements_by_class_name('stream-item'))","out":"Selenium: retrieve data that loads while scrolling down"}
{"in":"def foo(vals):<nl><tab>def f(p,x):<nl><tab><tab>result=0<nl><tab><tab>for i,(av,ap) in enumerate(zip(vals,p)):<nl><tab><tab><tab>result+=av*ap*(x**i)<nl><tab><tab>return result<nl><tab>return f<nl><nl>print(foo([50])([2],3))<nl># f(p,x)=50*2<nl># 100<nl>print(foo([50,60])([2,3],4))<nl># f(p,x)=50*2+60*3*x<nl># 820","out":"Dynamic function building in Python"}
{"in":"print [procinfo for procinfo in procinfos]","out":"I have a simple python dict why is a generator reference printed instead of the dict"}
{"in":"dataset = mydata['data']<nl>for data in dataset:<nl>   url = data['images']['standard_resolution']['url']","out":"Iterating over Instagram json"}
{"in":"import numpy as np<nl>import matplotlib<nl>import mplh5canvas<nl><nl>matplotlib.use('module:\/\/mplh5canvas.backend_h5canvas')<nl><nl>import matplotlib.cbook as cbook<nl>import matplotlib.image as image<nl>import matplotlib.pyplot as plt<nl><nl><nl>fig = plt.figure()<nl><nl>ax = fig.add_subplot(111)<nl><nl>ax.plot(np.random.rand(20), '-o', ms=20, lw=2, alpha=0.7, mfc='orange')<nl><nl>ax.grid()<nl><nl>plt.show(open_plot=True)","out":"How to embed python tkinter window into a browser?"}
{"in":"import lxml.html<nl>page = lxml.html.parse('http:\/\/www.google.com').getroot()<nl>print page.xpath('\/\/a\/@href')","out":"How to run an xpath over html page in python?"}
{"in":"a=input('Enter the list of tuples')<nl>b=[]<nl>for i in range(len(a)):<nl><tab>b.append(sum(a[i]))","out":"In Python, Given a list of tuple, generate a list whose elements are sum of elements of contained tuples"}
{"in":"try:<nl><tab>return self.object[row][column]<nl>except IndexError:<nl><tab>return \"error\"","out":"2D Lists in python"}
{"in":"with open('test.txt') as infile, open('test_2.txt', 'w') as outfile:<nl>  for line in infile:<nl><tab>if not line.startswith(\"I want\"):<nl><tab>  outfile.write(line.strip())","out":"Can't properly remove line from text file"}
{"in":"faces[:,:,0,4] = 1<nl><nl>faces[:,:,0,4] = (1, 1, 1)","out":"Python\/Numpy: Setting values to index ranges"}
{"in":"for r in Table1.objects.using('schema1').filter(column1=val1,column2=val2).values('column3').distinct('column3'):<nl><tab>ltest.append(r['column3'])<nl>for r in lookupTable(type).objects.using('schema1').filter(column3__in=ltest).values('column4').distinct('column4'):<nl><tab>lTemp.append(r['column4'])","out":"Django, Truncated incorrect DOUBLE value: '\\x00' in ValueQuerySet"}
{"in":"django.db.transaction.enter_transaction_management(using='primary')<nl>django.db.transaction.managed(True, using='primary')<nl><nl>i = 0 <nl>for record in records:<nl><tab>i += 1<nl><tab>r = PrimaryDBModel(**record)<nl><tab>r.save() # This will no be committed until the end.<nl><tab>if not i % 100:<nl><tab><tab>SecondaryDBModel.update()<nl><tab><tab>status = SecondaryDBModel(id=123)<nl><tab><tab>status.current_row = i<nl><tab><tab>status.save() # This will committed immediately.<nl><nl>django.db.transaction.commit(using='primary')<nl>django.db.transaction.leave_transaction_management(using='primary')","out":"Selective Transaction Management with Django ORM"}
{"in":"class WNode(object):<nl><nl><tab>def __init__(self,w):<nl><tab><tab>self._w=w<nl><tab><tab>self._content=[]<nl><nl><tab>def find(self, x):<nl><tab><tab>if self._w == x:<nl><tab><tab><tab>return self<nl><tab><tab>else:<nl><tab><tab><tab>y = None<nl><tab><tab><tab>for i in self._content:<nl><tab><tab><tab><tab>y = i.find(x)<nl><tab><tab><tab><tab>if y:<nl><tab><tab><tab><tab><tab>break<nl><tab><tab><tab>return y<nl><tab><tab>return None<nl><nl>if __name__ == '__main__':<nl><tab>r = WNode(1)<nl><tab>r._content = [WNode(2), WNode(3), WNode(4)]<nl><tab>for i in xrange(1, 6):<nl><tab><tab>print('find({}) = {}'.format(i, r.find(i)))","out":"find and return a node from a tree in Python"}
{"in":"datelist =  ['2014-05-06', '2014-05-07', '2014-05-08', '2014-05-09', '2014-05-10',<tab>'2014-05-11', '2014-05-12', '2014-05-13']<nl><nl>import matplotlib<nl>from matplotlib import pyplot<nl>from matplotlib import dates<nl>import datetime<nl><nl>converted_dates = map(datetime.datetime.strptime, datelist, len(datelist)*['%Y-%m-%d'])<nl>x_axis = (converted_dates)<nl>formatter = dates.DateFormatter('%Y-%m-%d')<nl><nl><nl>y_axis = range(0,8)<nl>pyplot.plot( x_axis, y_axis, '-' )<nl>ax = pyplot.gcf().axes[0] <nl>ax.xaxis.set_major_formatter(formatter)<nl>pyplot.gcf().autofmt_xdate(rotation=25)<nl>pyplot.show()","out":"matplotlib string to dates"}
{"in":"A = [100,100,100,100]<nl>Scale = 1<nl><nl>B= []<nl>for idx, val in enumerate(A):<nl><tab>B.append( (val*idx)\/(len(A)-1) * Scale)","out":"Points on line with Python"}
{"in":"browser.execute_script(<nl><tab>\"arguments[0].style.setProperty('display', 'block', 'important');\",<nl><tab>browser.find_element_by_xpath(\"\/\/div\")<nl><tab>)","out":"python selenium send css with !important"}
{"in":"def process_element(catalog, *args, **kwargs):<nl><tab>for child in catalog.getchildren():<nl><tab><tab>print(child.text)","out":"Python xml : list all elements in item"}
{"in":"filehandle = open(PATH)<nl><nl>r = session.post(URL_IMPORT, data={},files = {'sync_config_import':filehandle})","out":"Python requests api"}
{"in":"df.loc[[i for j, i in enumerate(df.index) if j % 10 == 0]]","out":"Pandas Python: how to get values on data frame every 10 steps?"}
{"in":"class DBExamplestart(Examplestart):<nl><tab>variable = ndb.KeyProperty(kind=DBUser, default=ndb.Key(DBUser, 776))<nl><tab>statement = ndb.StringProperty(indexed=False, default='First')","out":"Hardcoding values into ndb model"}
{"in":"COLUMN_VARIABLES = ['provider', 'language','subtype']<nl>data = {}<nl><nl>for variable in COLUMN_VARIABLES:<nl><tab>data[variable] = node.xpath(\"\/\/%s\/text()\"%variable)[0]","out":"Define a long list of variables in python"}
{"in":"def SAD_singleton(cls):<nl><tab>class tmp(object):<nl><tab><tab>def __init__(self):<nl><tab><tab><tab>self.c = None<nl><tab>instances = tmp()<nl><tab>def getinstance():<nl><nl><tab><tab>if instances.c is None:<nl><tab><tab><tab>instances.c = cls()<nl><nl><tab><tab>return instances.c<nl><tab>return getinstance","out":"python closure local variables"}
{"in":"def weightedL2(a,b,w):<nl><tab>q = a-b<nl><tab>return np.sqrt((w*q*q).sum())","out":"Euclidean distance with weights"}
{"in":"if button.CanSetTransparent():<nl><tab>button.SetTransparent(100)","out":"Opacity of individual widgets in WXPython"}
{"in":"sys.modules","out":"Find which python modules are being imported"}
{"in":"import math<nl><nl>def getDistance(lat1,lon1,lat2,lon2):<nl><tab># This uses the haversine formula, which remains a good numberical computation,<nl><tab># even at small distances, unlike the Shperical Law of Cosines.<nl><tab># This method has ~0.3% error built in.<nl><tab>R = 6371 # Radius of Earth in km<nl><nl><tab>dLat = math.radians(float(lat2) - float(lat1))<nl><tab>dLon = math.radians(float(lon2) - float(lon1))<nl><tab>lat1 = math.radians(float(lat1))<nl><tab>lat2 = math.radians(float(lat2))<nl><nl><tab>a = math.sin(dLat\/2) * math.sin(dLat\/2) + \\<nl><tab><tab>math.cos(lat1) * math.cos(lat2) * math.sin(dLon\/2) * math.sin(dLon\/2)<nl><nl><tab>c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))<nl><nl><tab>d = R * c * 0.621371 # Converting km to miles with \"* 0.621371\"<nl><nl><tab>return d","out":"Calculating distance travelled from gps track points using python"}
{"in":"from string import ascii_lowercase<nl>for character in ascii_lowercase:<nl><tab>c = character","out":"Using the For statement in python 3x"}
{"in":"import sys<nl>from cx_Freeze import setup, Executable<nl><nl># Dependencies are automatically detected, but it might need fine tuning.<nl>build_exe_options = {\"includes\": [\"tkinter\"]}<nl><nl># GUI applications require a different base on Windows (the default is for a<nl># console application).<nl>base = None<nl>if sys.platform == \"win32\":<nl><tab>base = \"Win32GUI\"<nl><nl>setup(<nl><tab>name = \"simple_Tkinter\",<nl><tab>version = \"0.1\",<nl><tab>description = \"Sample cx_Freeze Tkinter script\",<nl><tab>options = {\"build_exe\": build_exe_options},<nl><tab>executables = [Executable(\"the timer.py\", base = base)])<nl><nl>setup(  name = \"guifoo\",<nl><tab><tab>version = \"0.1\",<nl><tab><tab>description = \"My GUI application!\",<nl><tab><tab>options = {\"build_exe\": build_exe_options},<nl><tab><tab>executables = [Executable(\"guifoo.py\", base=base)])","out":"creating .exe file with cx_freeze for a tkinter interface"}
{"in":"def gettext(request):<nl>  if request.method == 'POST':<nl><tab>form = UploadFileForm(request.POST, request.FILES)<nl><tab>if form.is_valid():<nl><tab><tab>f = request.FILES['file']<nl><tab><tab>for chunk in f.chunks():<nl><tab><tab><tab>text = chunk<nl><tab><tab><tab>text = preprocessing(text)<nl><tab><tab>return render(request, 'ecs\/index.html', {'text': text, 'form': form})<tab>  <nl><tab>else:<nl><tab><tab>form = UploadFileForm()<nl>return render_to_response('ecs\/index.html', {'form': form})","out":"Q: Django - how to return data from other function on views.py"}
{"in":"raw_input()","out":"my program wont run from command prompt"}
{"in":"import csv<nl><nl>with open(\"organizationTest.txt\",\"rU\") as f:<nl><tab><tab>reader = csv.reader(f)<nl><tab><tab>for row in reader:<nl><tab><tab><tab>_, created = Company.objects.get_or_create(<nl><tab><tab><tab><tab>Name=row[0].decode('latin-1').encode('utf8'),<nl><tab><tab><tab><tab>Site=row[1].decode('latin-1').encode('utf8'),<nl><tab><tab><tab><tab>)","out":"Switch Application to Unicode"}
{"in":"const.py","out":"How can I define a constant for model and view in Django"}
{"in":"TK.Tk()","out":"How do I use PIL with Tkinter?"}
{"in":"entry_count = Topic.objects.values('title').annotate(Count('entry')).order_by('-entry__count')","out":"Annote and count posts related to a specific class, in Django"}
{"in":"import cv<nl><nl>capture = cv.CaptureFromFile(filename)<nl>while Condition1:<nl><tab># Need a frame to get the output video dimensions<nl><tab>frame = cv.RetrieveFrame(capture) # Will return None if there are no frames<nl><tab># New video file<nl><tab>video_out = cv.CreateVideoWriter(output_filenameX, CV_FOURCC('M','J','P','G'), capture.fps, frame.size(), 1)<nl><tab># Write the frames<nl><tab>cv.WriteFrame(video_out, frame)<nl><tab>while Condition2:<nl><tab><tab>frame = cv.RetrieveFrame(capture) # Will return None if there are no frames<nl><tab><tab>cv.WriteFrame(video_out, frame)","out":"python library for splitting video"}
{"in":"b = [range(x) for x in a]","out":"List of lists based on numbers in another list"}
{"in":"subprocess.call(['lp', 'foo.png'])","out":"how to connect to a printer and print a png image using python and PIL library in Ubuntu"}
{"in":"a=np.zeros((982,5)) <nl>b=np.random.randint(0,100,(491,5)) # your 491 row matrix<nl>a[::2] = b","out":"Numpy array, insert alternate rows of zeros"}
{"in":"from flask import Flask<nl>app = Flask(__name__)<nl>data_loader = lambda: range(10) # this function should load your data from some external store<nl>@app.route(\"\/\")<nl>def main():<nl><tab>body = \"<nl>\".join([\"<p>%s<\/p>\" % datum for datum in data_loader()])<nl><tab>page = \"\"\"<html><body>%s<nl><tab><tab><tab>  <script>setTimeout(function(){<nl><tab><tab><tab><tab> window.location.reload(1);<nl><tab><tab><tab>}, 5000);<\/script><\/body><\/html>\"\"\" % body<nl><tab>return page<nl><nl><nl>if __name__ == \"__main__\":<nl><tab>app.run()","out":"Pass data from python script to HTML"}
{"in":"import gdb<nl><nl>res = []<nl>res.append(gdb.execute(\"call factorial(4)\", False, True))<nl>res.append(gdb.execute(\"call factorial(5)\", False, True))<nl>print res","out":"GDB, python scripting to get return values from a function"}
{"in":"from PIL import Image<nl><nl>im = Image.open(\"test.png\")<nl>im.save(\"test-600.png\", dpi=(600,600) )","out":"Programmatically change image resolution"}
{"in":"from user.models import *<nl>for u in User.query.all():<nl><tab># \\u2013 is unicode for en-dash<nl><tab>if u\"\\u2013\" in u.occupation:<nl><tab><tab># replace with normal hyphen<nl><tab><tab>u.occupation = u.occupation.replace(u\"\\u2013\", \"-\")<nl><tab><tab>db.session.commit()","out":"Replace Character For All Rows using SQLAlchemy on Flask"}
{"in":"SELECT {} FROM a_table.format(','.join(parameter_list))","out":"How to use a parameter to select one or more columns in a SELECT statement"}
{"in":"def flip_member(x):<nl><tab>if x == 1:<nl><tab><tab>x += 1<nl><tab>else:<nl><tab><tab>x -= 1<nl><tab>return x","out":"Reuse specific lines of code"}
{"in":"word = 'lake1!'<nl>new_word = ''<nl>for char in word:<nl><tab>if char.isalpha():<nl><tab><tab>new_word += char","out":"Remove nonalphabet characters from a string"}
{"in":"C = [ A[x] for x in range(len(A)) if B[x] ]","out":"list comprenhension using two list"}
{"in":"print \"%.2f\" % (99990 \/ 100.0)","out":"Place decimal before last two digits for an integer"}
{"in":"def ints(filename):<nl><tab><tab>\"\"\"A function that takes the filename of a file as an input arguement, computs and returns a list of<nl><tab><tab>integers of all the numbers in the file.\"\"\"<nl><tab><tab>a = []<nl><tab><tab>f = open(filename, \"r\")<nl><tab><tab>lines = f.readlines()<nl><tab><tab>f.close()<nl><tab><tab>for line in lines:<nl><tab><tab><tab>for character in line:<nl><tab><tab><tab><tab>try:<nl><tab><tab><tab><tab><tab>a.append(int(character))<nl><tab><tab><tab><tab>except ValueError:<nl><tab><tab><tab><tab><tab>pass<nl><tab><tab>return a","out":"Reading and manipulating a file in python"}
{"in":"#my python3 script<nl>import subprocess<nl>subprocess.call([\"python2\", \"python2scipt.py\"])","out":"How to run python script from python with different interpreter version?"}
{"in":"from bs4 import BeautifulSoup<nl>soup = BeautifulSoup('<html><body><a>bbb<\/a><\/body><\/html')<nl>soup.find('a')","out":"Extracting HTML data fields with Python"}
{"in":"from subprocess import *<nl>from time import sleep<nl><nl>for i in range(2, 4):<nl><tab>x = Popen('python' + str(i) + ' --version', shell=True, stdout=PIPE, stdin=PIPE, stderr=STDOUT)<nl><tab>while x.poll() == None:<nl><tab><tab>sleep(0.025)<nl><tab>print('Exit code of ' + str(i) + ' is:',x.poll())<nl><tab>x.stdout.close()<nl><tab>x.stdin.close()","out":"How to list all Python versions installed in the system?"}
{"in":"def accuracy(classifier, gold):<nl><tab>results = classifier.classify_many([fs for (fs,l) in gold])<nl><tab>correct = [l==r for ((fs,l), r) in zip(gold, results)]<nl><tab>if correct:<nl><tab><tab>return float(sum(correct))\/len(correct)<nl><tab>else:<nl><tab><tab>return 0","out":"aspect based sentiment using NLTK?"}
{"in":"with open('newfile.txt','w') as fileinput:<nl><tab>for start, end in searchPFAM(fname):<nl><tab><tab>print start, end  <nl><tab><tab>if start <= end:<nl><tab><tab><tab>while start <= end:<nl><tab><tab><tab><tab>result = makeList[start]<nl><tab><tab><tab><tab>fileinput.write(result)<nl><tab><tab><tab><tab>start += 1","out":"data in my outputfile didn't print all result it should have"}
{"in":"output=subprocess.Popen((\"certutil.exe -view -restrict  \\\"NotAfter<=now+30:00,NotAfter>=now+00:00\\\"\" ),stdout=subprocess.PIPE).stdout","out":"How to call from within Python an application with double quotes around an argument using subprocess?"}
{"in":"def get_number(values):<nl><tab>total = 0<nl><tab>for val in reversed(values):<nl><tab><tab>total = (total << 8) + val<nl><tab>return total","out":"converting python list of integers to a hex number"}
{"in":"from PySide import QtGui<nl>fname, _ = QtGui.QFileDialog.getOpenFileName(None, 'Choose file','.')","out":"Need file dialog for code running in Enthought Canopy"}
{"in":"ff = webdriver.Firefox()<nl>ff.implicitly_wait(10) # seconds","out":"Selenium webdriver find_element_by_xpath takes time"}
{"in":"(input_img == 255).all(axis=2)","out":"Using opencv \/ Numpy to find white pixels in a color image using python"}
{"in":"from django.db import models<nl>from django.contrib import admin<nl><nl>class Employee(models.Model):<nl><tab>lastname = models.CharField(\"Last\", max_length=64)<nl><tab>firstname = models.CharField(\"First\", max_length=64)<nl><tab>middlename = models.CharField(\"Middle\", max_length=64)<nl><tab>clocknumber = models.CharField(max_length=16)<nl><nl><tab>def _get_full_name(self):<nl><tab><tab>\"Returns the person's full name.\"<nl><tab><tab>return '%s, %s %s' % (self.lastname, self.firstname, self.middlename)<nl><tab>full_name = property(_get_full_name)<nl><nl><nl><tab>class Meta:<nl><tab><tab>ordering = ['lastname','firstname', 'middlename']<nl><nl>class EmployeeAdmin(admin.ModelAdmin):<nl><tab>list_display = ('clocknumber','full_name')<nl><tab>fieldsets = [(\"Name\", {\"fields\":((\"lastname\", \"firstname\", \"middlename\"), \"clocknumber\")}),<nl>]<nl><nl>admin.site.register(Employee, EmployeeAdmin)","out":"How to add a calculated field to a Django model"}
{"in":"import random<nl><nl>lst = ['!','-','=','~','|']<nl>string = 'Hello world. Hello world.'<nl><nl><nl>print ''.join('%s%s' % (x, random.choice(lst) if random.random() > 0.5 else '') for x in string)","out":"Python: Inserting characters between other characters at random points"}
{"in":"for i in data['topartists']['artist']:<nl><tab>print (i['name'])","out":"Python Print all from json"}
{"in":"hasht = \\<nl>{<nl><tab>\"A\" : [\"B\", \"D\", \"E\"],<nl><tab>\"B\" : [\"C\"],<nl><tab>\"C\" : [\"D\", \"E\"], <nl><tab>\"D\" : [\"C\", \"E\"], <nl><tab>\"E\" : [\"B\"]<nl>}<nl><nl>def recursive(start, finish):<nl><tab>paths=[]<nl><tab>def recursive_helper(path, finish):<nl><tab><tab>for i in hasht[path[-1]]:<nl><tab><tab><tab>if i == finish:<nl><tab><tab><tab><tab>paths.append(path + [i])<nl><tab><tab><tab><tab>continue<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>recursive_helper(path + [i], finish)<nl><tab>recursive_helper([start], finish)<nl><tab>return paths<nl><nl>print recursive(\"C\", \"C\")","out":"Generating a graph recursively - Python"}
{"in":"cursor.execute(\"update Gps_table set longitude=?,latitude=? where gps_id=1\", s1, s2)","out":"Unable to update Multiple cloums in a sql database table using pyodbc"}
{"in":"print root11.__repr__()","out":"python complex number print result different from shell output"}
{"in":"comment = Comment.objects.create(**params)","out":"how to post a new comment through a method in django?"}
{"in":"import fileinput<nl><nl>for fl, line in zip(li, fileinput.input(['a.txt'], inplace=True)):<nl><tab>print(line.strip() + '\\t' + str(fl))","out":"Python - add a column to an existing tab separated file"}
{"in":"print \"<tr><td>Review <\/td><td><input type=\\\"textarea\\\" name=\\\"Review\\\" cols=\\\"50\\\" rows=\\\"5\\\" \/>\"<nl>print \"\"\"<nl><tab>Enter some text...<nl><tab><\/textarea><nl><tab><br \/><nl><nl>\"\"\"","out":"HTML Python Correct Syntax"}
{"in":"# weapon.py<nl>class Weapon:<nl><tab>def __init__(self, name, dmg):<nl><tab><tab>self.name = name<nl><tab><tab>self.dmg  = dmg<nl><nl><tab>def attack(self, target):<nl><tab><tab>target.health -= self.dmg<nl><nl># fighter.py<nl>class Fighter:<nl><tab>def __init__(self, name, weapon=None):<nl><tab><tab>self.name   = name<nl><tab><tab>self.weapon = weapon<nl><nl><tab>def attack(self, target):<nl><tab><tab>if self.weapon is None:<nl><tab><tab><tab># punch him<nl><tab><tab><tab>target.health -= 2<nl><tab><tab>else:<nl><tab><tab><tab>self.weapon.attack(target)","out":"Calling a method from another class in Python"}
{"in":"class Category(models.Model):<nl>   name = models.CharField(max_length=30, unique=True)<nl><nl>   def __unicode__(self):<nl><tab><tab>return self.name","out":"How can I change name of option in django select box"}
{"in":"plt.savefig('test.png',  bbox_inches='tight', pad_inches=0.1)","out":"Python - Size problems with subplots in matplotlib"}
{"in":"import pandas as pd<nl><nl>data = []<nl>for line in open('temp.text'):<nl><tab>if line.startswith('\/media\/'):<nl><tab><tab>path = line[:-1]<nl><tab>else:<nl><tab><tab>rights = line.split()[1]<nl><tab><tab>owner = re.match('.*.CN=([^.]+).*', line).groups()[0]<nl><tab><tab>row = {'path': path, 'right': rights, 'owner': owner}<nl><tab><tab>data.append(row)<nl>df = pd.DataFrame(data)<nl>df[df.owner=='Dog']","out":"Pandas DF and RE - Find a match Y. Then find the last occurence of X"}
{"in":"data = request.body.read()","out":"bottle python put equivalent to post for data"}
{"in":"fin = open(\"foo1.txt\")<nl>G={}<nl>for line in fin: # load data, create adj lists<nl><tab>lst = line.split()<nl><tab>lst = [int(x) for x in lst]<nl><tab>G[lst[0] ]=lst[1:]<nl>print(G)","out":"Reading a file in python and creating a list turns out to an empty list"}
{"in":"def range_sum(nums, sum=0):<nl><tab>if not nums:<nl><tab><tab>return sum<nl><tab>sum += nums.pop()<nl><tab>return range_sum(nums, sum)","out":"Python - Creating a list of intergers and using recursion to add them up"}
{"in":"from sklearn.metrics import f1_score","out":"Biasing Sklearn toward positives For MultinomialNB"}
{"in":"for node in entry:<nl><tab>video_title = node.getElementsByTagName('title')[0].firstChild.nodeValue<nl><tab>print video_title","out":"How to parse YouTube XML using Python?"}
{"in":"def get_name(line):<nl><tab>return line[1:].rsplit('|', 1)[-1].strip()<nl><nl>with open('input.txt') as f, open('output.txt', 'w') as fout:<nl><tab>name = ''<nl><nl><tab># Phase 1: Find unavailable sequence<nl><tab>unavailable = set()<nl><tab>for line in f:<nl><tab><tab>if line.startswith('>'):<nl><tab><tab><tab>name = get_name(line)<nl><tab><tab>else:<nl><tab><tab><tab>if 'Sequence unavailable' in line:<nl><tab><tab><tab><tab>unavailable.add(name)<nl><nl><tab># Phase 2: Filter avilable sequence<nl><tab>f.seek(0)<nl><tab>keep = False<nl><tab>for line in f:<nl><tab><tab>if line.startswith('>'):<nl><tab><tab><tab>name = get_name(line)<nl><tab><tab><tab>keep = name not in unavailable<nl><tab><tab>if keep:<nl><tab><tab><tab>fout.write(line)","out":"Deleting specific lines from text file"}
{"in":"[Toplevel][1]","out":"Checkbuttons with Multiple Tkinter Windows"}
{"in":"# Get a cursor for the entire collection<nl>docs = db.collection.find()<nl><nl>for doc in docs:<nl><tab># Get all documents that have a common element<nl><tab>related_docs = db.collection.find({\"$or\": [<nl><tab><tab>{\"color\": doc[\"color\"]},<nl><tab><tab>{\"name\": doc[\"name\"]},<nl><tab><tab>{\"age\": doc[\"age\"]},<nl><tab><tab>]})<nl><nl><tab># Record the relationships in whatever structure you're using<nl><tab>for related_doc in related_docs:<nl><tab><tab>store_relationship(doc, related_doc)","out":"Getting all relations in DB by using rdflib"}
{"in":"from math import sqrt<nl>from joblib import Parallel, delayed<nl>import multiprocessing<nl><nl>if __name__ == '__main__':<nl><tab>test = Parallel(n_jobs=2)(delayed(sqrt)(i ** 2) for i in range(10))<nl><tab>print(test)","out":"python simple parallel computation with joblib"}
{"in":"re.findall(r\"vcxproj.*?\\{(.*?)\\}\", text)","out":"match pattern between symbols, after given pattern"}
{"in":"num = 12345678<nl>first_four = int(str(num)[:4])<nl>last_four = int(str(num)[4:])<nl>middle_two = int(str(num)[3:5])","out":"How do I get the last numbers of a number variable?"}
{"in":"if user not in data:<nl><tab>data[user] = []<nl>data[user].append({'item': row[0], 'time': row[1]})","out":"Appending associative arrays in Python"}
{"in":"def makePlayFair(key, alpha):<nl><nl><nl><tab>letters = []<nl><tab>for letter in key + alpha:<nl><tab><tab>if letter not in letters:<nl><tab><tab><tab>letters.append(letter)<nl><nl><tab>box = []<nl><tab>for line_number in range(5):<nl><tab><tab>box.append( letters[line_number * 5: (line_number+1) * 5])","out":"My python method isn't working correctly, skipping items in a list (playfair cipher)"}
{"in":"def right_justify(s):<nl><tab>print \"%70s\" % s","out":"prints the string with enough leading spaces?"}
{"in":"def depluralise(plurals, plural_endings):<nl><tab>new_list = []<nl><tab>for plural, plural_ending in zip(plurals, plural_endings):<nl><tab><tab>if plural.endswith(plural_ending):<nl><tab><tab><tab>if plural_ending == '':<nl><tab><tab><tab><tab>new_list.append(plural)<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>new_list.append(plural[:-len(plural_ending)])<nl><tab>return new_list <nl><nl><nl>plural_string = \"cell phones|sheep|oxen\"<nl>plurals = plural_string.split('|')<nl>plural_endings_string = \"s,,en\"<nl>plural_endings = plural_endings_string.split(',')<nl><nl>print depluralise(plurals, plural_endings)<nl><nl>plurals = ['children', 'brothers', 'fish', 'penguins']<nl>plural_endings = ['ren', 's', '', 's']<nl><nl>print depluralise(plurals, plural_endings)","out":"Python - 'Subtract' Elements in 1 List From The End of The Elements in 2nd List. Elements are strings not integers"}
{"in":"hour_list = [int(t[:2]) for t in time_new]","out":"TypeError histogram of time"}
{"in":"for i in tree.get_children():<nl><tab>tree.delete(i)","out":"How to clear an entire Treeview with Tkinter"}
{"in":"import glob<nl>import pandas as pd<nl><nl>combined = []<nl>for filepath in glob.glob('path\/to\/your\/files\/*.exp'):<nl><tab>combined.append(pd.read_table(filepath, sep='\\t', header=None))<nl>combined = pd.concat(combined, ignore_index=True)","out":"Variable number of columns in Python data, multiple .exp files"}
{"in":"line = 5<nl>print (line-1) * \" \" + \"* \"<nl>for i in xrange(1,line-1):<nl><tab>print (line-i-1)* \" \" +  \"*\" + (2*i -1)*\" \" + \"* \"<nl>print (line) * \"* \"","out":"how to make triangle using python 2.7"}
{"in":"#!\/usr\/bin\/env python<nl><nl>import re<nl><nl>if __name__ == \"__main__\":<nl><tab>lines = {' foo<tab>  (bar)<tab>'}<nl><tab>parens_regex = re.compile(r'\\(.*?\\)')  # Non-greedy<nl><tab>space_regex =  re.compile(r'\\s+')<nl><nl><tab>for line in lines:<nl><tab><tab>print 'Before: \"%s\"' % line<nl><tab><tab>line_tmp = parens_regex.sub('', line)  # Before space-regex so we also collapse space around parens<nl><tab><tab>line_tmp = space_regex.sub(' ', line_tmp)<nl><tab><tab>line_tmp = line_tmp.strip()<nl><tab><tab>print 'After: \"%s\"' % line_tmp  # Prints: \"foo\"","out":"Removal of whitespace and text in brackets - make my working code more elegant"}
{"in":"import pyPdf<nl><nl>def getPDFContent(path):<nl><tab>content = \"\"<nl><tab># Load PDF into pyPDF<nl><tab>pdf = pyPdf.PdfFileReader(file(path, \"rb\"))<nl><tab># Iterate pages<nl><tab>for i in range(0, pdf.getNumPages()):<nl><tab><tab># Extract text from page and add to content<nl><tab><tab>content += pdf.getPage(i).extractText() + \"<nl>\"<nl><tab># Collapse whitespace<nl><tab>content = \" \".join(content.replace(\"\\xa0\", \" \").strip().split())<nl><tab>return content<nl><nl>for f in filelist:<nl><tab>print keyword in getPDFContent(f)","out":"How to search keywords in 400+ PDF files?"}
{"in":"import urllib2<nl>req = urllib2.urlopen(\"http:\/\/en.wikipedia.org\/w\/api.php?action=parse&page=China&format=json&prop=text\")<nl>content = req.read()<nl># content in json - use json or simplejson to get relevant sections.","out":"How to parse a wikipedia page in Python?"}
{"in":"create_upload_url()","out":"How can I get a user's IP from a Blobstore upload handler?"}
{"in":"newlist = [sublist[:2] for sublist in mylist]","out":"Return a range of elements of each list inside a list of lists"}
{"in":"print \"mysqldump database\",<nl>for i in range(n):<nl><tab>print \"shard_\"+str(2*i),","out":"How to automatically move specific MySQL tables from one machine to another?"}
{"in":"df.index = df.index.to_datetime()","out":"Dataframe Row Selection by Weekday of Index in Python"}
{"in":"#!\/usr\/bin\/env python<nl>from pylab import *<nl><nl>def f(t):<nl><tab>s1 = cos(2*pi*t)<nl><tab>e1 = exp(-t)<nl><tab>return multiply(s1,e1)<nl><nl>t1 = arange(0.0, 5.0, 0.1)<nl>t2 = arange(0.0, 5.0, 0.02)<nl>t3 = arange(0.0, 2.0, 0.01)<nl><nl>figure(figsize=(4, 4))<nl>sub1 = subplot(211)<nl>l = plot(t1, f(t1), 'bo', t2, f(t2), 'k--', markerfacecolor='green')<nl>grid(True)<nl>title('A tale of 2 subplots')<nl>ylabel('Damped oscillation')<nl><nl>## I ADDED THIS<nl>autoAxis = sub1.axis()<nl>rec = Rectangle((autoAxis[0]-0.7,autoAxis[2]-0.2),(autoAxis[1]-autoAxis[0])+1,(autoAxis[3]-autoAxis[2])+0.4,fill=False,lw=2)<nl>rec = sub1.add_patch(rec)<nl>rec.set_clip_on(False)<nl><nl>subplot(212)<nl>plot(t3, cos(2*pi*t3), 'r.')<nl>grid(True)<nl>xlabel('time (s)')<nl>ylabel('Undamped')<nl><nl>savefig('test.png')","out":"draw a border around subplots in matplotlib"}
{"in":"# define a class object (your class may be more complicated than this...)<nl>class A(object):<nl><tab>pass<nl><nl># a class method takes the class object as its first variable<nl>def func(cls):<nl><tab>print 'I am a class method'<nl><nl># you can just add it to the class if you already know the name you want to use<nl>A.func = classmethod(func)<nl><nl># or you can auto-generate the name and set it this way<nl>the_name = 'other_func' <nl>setattr(A, the_name, classmethod(func))","out":"How can I dynamically create class methods for a class in python"}
{"in":"if m:  #only execute this if a match was found<nl>   print m.group()  #m.group() is the portion of the string that matches your regex.","out":"get first digit in a string in python"}
{"in":"import shutil<nl><nl>path = input(\"Enter path to delete\")<nl><nl>shutil.rmtree(path);","out":"I am trying to make a file delete program"}
{"in":"class RegisterView(generic.CreateView):<nl><tab>model = User<nl><tab>form_class = forms.RegisterForm<nl><tab>template_name = 'register.html'<nl><tab>success_url = reverse_lazy('platforms')<nl><nl><tab>def get(self, request, *args, **kwargs):<nl><tab><tab>if request.user is not None:<nl><tab><tab><tab>return redirect('home')<nl><tab><tab># register logic<nl><tab><tab>return render(request, 'register.html', data)<nl><nl><tab>def form_valid(self, form):<nl><tab><tab>response = super(RegisterView, self).form_valid(form)<nl><tab><tab>user = authenticate(username=form.instance.username, password=form.cleaned_data['password'])<nl><tab><tab>login(self.request, user)<nl><tab><tab>return response","out":"How to add logic to classview"}
{"in":"[x[1] for x in elements]","out":"How to extract the n-th elements from a list of tuples in python?"}
{"in":"test_rec[(test_rec.age==1) & (test_rec.sex==1)]","out":"Using multiple indicies for arrays in python"}
{"in":"temp_input=raw_input()  #taking the input<nl>lst=temp_input.split(\";\") # splitting the input and saving in a list<nl>for i in lst: # iterating through the list<nl><tab>parse(i) # calling parse() with single list element","out":"Sending a list's values through a function"}
{"in":"import os<nl><nl>direc = os.getcwd() # Get current working directory<nl>ext = '.txt' # Select your file delimiter<nl><nl>file_dict = {} # Create an empty dict<nl><nl># Select only files with the ext extension<nl>txt_files = [i for i in os.listdir(direc) if os.path.splitext(i)[1] == ext]<nl><nl># Iterate over your txt files<nl>for f in txt_files:<nl><tab># Open them and assign them to file_dict<nl><tab>with open(os.path.join(direc,f)) as file_object:<nl><tab><tab>file_dict[f] = file_object.read()<nl><nl># Iterate over your dict and print the key\/val pairs.<nl>for i in file_dict:<nl><tab>print i, file_dict[i]","out":"Python ??? files from folder to a dict"}
{"in":"import cgi<nl>escaped = cgi.escape(unescaped)","out":"Converting to and from '<' and '>' automatically with Python"}
{"in":"def find_convergence(iterable, count):<nl><tab>current_count = 0<nl><tab>last = None<nl><nl><tab>for i, x in enumerate(iterable):<nl><tab><tab>if x == last:<nl><tab><tab><tab>current_count += 1<nl><nl><tab><tab><tab>if current_count == count:<nl><tab><tab><tab><tab>return i - count + 1<nl><tab><tab>else:<nl><tab><tab><tab>last = x<nl><tab><tab><tab>current_count = 1","out":"python - the index of the item where the next 10 items starts repeating"}
{"in":"from multiprocessing import Pool<nl>from multiprocessing import cpu_count<nl><nl><nl>def handle_tiff(some_file):<nl><tab>data_open = gdal.Open(some_file)<nl><tab>data_array = data_open.ReadAsArray().astype(np.float32) <nl><tab>return data_array<nl><nl>tiff_files = glob.glob('*.tif') <nl>p = Pool(cpu_count()- an_integer)<nl>all_data = p.map(handle_tiff, tiff_files)","out":"Any solution for accelerating the reading of data from disk and converting them into numpy array for further processing?"}
{"in":"import active_directory<nl><nl>homeMDB = \"CN=UBER MAILBOX,CN=InformationStore,CN=UBERMAILSERVER,\"\\<nl><tab><tab>\"CN=Servers,CN=Administrative Groups,CN=UBERORG,\"\\<nl><tab><tab>\"CN=Microsoft Exchange,CN=Services,CN=Configuration,\"\\<nl><tab><tab>\"DC=uber,DC=org,DC=uk\"<nl><nl>user=active_directory.find_user(\"captain.awesomeface\")<nl>user.CreateMailbox(homeMDB)<nl><nl><nl>user.Properties[\"mail\"].Value = \"captain.awesomeface@uberorg.com\";<nl><nl>user.SetInfo()","out":"Create exchange Mailbox from python"}
{"in":"# Import pyplot and dates from matplotlib<nl>import matplotlib.pyplot as plt<nl>import matplotlib.dates as mdates<nl># Set date format and major locator of x-axis<nl>plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y%m%d'))<nl>plt.gca().yaxis.set_major_locator(mdates.DayLocator())<nl># Actually plot the data<nl>plt.plot([x[0] for x in rows],[y[1] for y in rows])<nl># Fix ticklabels so they don't overlap in the figure<nl>plt.gcf().autofmt_xdate()","out":"How to parse datetime.date object into a float"}
{"in":"import subprocess<nl>sp = subprocess.Popen(['ls', '-l'], stdout=subprocess.PIPE)<nl>output, _ = sp.communicate()<nl>print \"Status:\", sp.wait()<nl>print \"Output:\"<nl>print output","out":"Redirect an output command to a variable or file?"}
{"in":"def checkNextID(ID):<nl><tab>global numOfRuns, curRes, lastResult<nl><tab>while ID < lastResult:<nl><tab><tab>try:<nl><tab><tab><tab>numOfRuns += 1<nl><tab><tab><tab>if numOfRuns % 10 == 0:<nl><tab><tab><tab><tab>time.sleep(3) # sleep every 10 iterations<nl><tab><tab><tab>if isValid(ID + 8):<nl><tab><tab><tab><tab>parseHTML(curRes)<nl><tab><tab><tab><tab>ID = ID + 8<nl><tab><tab><tab>elif isValid(ID + 18):<nl><tab><tab><tab><tab>parseHTML(curRes)<nl><tab><tab><tab><tab>ID = ID + 18<nl><tab><tab><tab>elif isValid(ID + 7):<nl><tab><tab><tab><tab>parseHTML(curRes)<nl><tab><tab><tab><tab>ID = ID + 7<nl><tab><tab><tab>elif isValid(ID + 17):<nl><tab><tab><tab><tab>parseHTML(curRes)<nl><tab><tab><tab><tab>ID = ID + 17<nl><tab><tab><tab>elif isValid(ID+6):<nl><tab><tab><tab><tab>parseHTML(curRes)<nl><tab><tab><tab><tab>ID = ID + 6<nl><tab><tab><tab>elif isValid(ID + 16):<nl><tab><tab><tab><tab>parseHTML(curRes)<nl><tab><tab><tab><tab>ID = ID + 16<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>ID = ID + 1<nl><tab><tab>except Exception, e:<nl><tab><tab><tab>print \"somethin went wrong: \" + str(e)","out":"Python: maximum recursion depth exceeded while calling a Python object"}
{"in":"def get_ffmpeg_bin():<nl><tab>ffmpeg_dir = helper_functions.get_ffmpeg_dir_path()<nl><tab>FFMPEG_BIN = os.path.join(ffmpeg_dir, \"ffmpeg.exe\")<nl><tab>return FFMPEG_BIN<nl><nl><nl>def split_vid_from_path(video_file_path, start_time, end_time):<nl><tab>ffmpeg_binary =  get_ffmpeg_bin()<nl><tab>output_file_name = get_next_file_name(video_file_path)<nl><tab>pipe = sp.Popen([ffmpeg_binary,\"-v\", \"quiet\", \"-y\", \"-i\", video_file_path, \"-vcodec\", \"copy\", \"-acodec\", \"copy\",<nl><tab><tab><tab><tab> \"-ss\", start_time, \"-t\", end_time, \"-sn\", output_file_name ])<nl><nl><nl><tab>pipe.wait()<nl><tab>return True<nl><nl><nl>sample_vid = os.path.join(get_sample_vid_dir_path(), \"Superman-01-The_Mad_Scientist.mp4\")<nl>split_vid_from_path(sample_vid, \"00:00:00\", \"00:00:17\")","out":"Python video editing -- How to trim videos"}
{"in":"import os<nl>os.path.abspath(file_csv.name)","out":"get local path of an uploaded file in django"}
{"in":"arrow.get(s, 'YYYY\/M\/D HH:mm:ss').replace(tzinfo=dateutil.tz.gettz(tz))","out":"Parse date and time from string with time zone using Arrow"}
{"in":"random.randint(a, b)","out":"How can i make sprites spawn on random locations using pygame?"}
{"in":"layout = g.layout_reingold_tilford(mode=\"in\", root=0)","out":"Plot a tree-like graph with root node at the top"}
{"in":"{{ some_date|date:\"j-M\" }}","out":"django template date filter format string question"}
{"in":"class Blog(Module):<nl><tab>def _get_posts(self):<nl><tab><tab>return Post.objects.filter(module=self)<nl><tab>posts = property(_get_posts)","out":"How do I override related_name in inherited\/child objects?"}
{"in":"for (name, amount) in cursor: <nl><tab>print(\"{}\".format(name)+ \"\\t\\t\\t\" + \"{:>5}\".format(\"$\"+ \"{:.0f}\".format(amount).strip()))","out":"How do I right align monetary values with the \"$\" next to each number, not just at the margin?"}
{"in":"for x in xrange(5):<nl><tab>item = QTableWidgetItem()<nl><tab>item.setText(\"blah blah\")<nl><tab>self.tableWidget.setItem(n, 0, item)","out":"PyQt - setText method of QTableWidget gets AttributeError"}
{"in":"import scipy.cluster.vq as spa<nl>print spk.kmeans2(dataset, 5)[0]  # for code<nl>print spk.kmeans2(dataset, 5)[1]  # for label","out":"how to print return function in Python"}
{"in":"import ctypes<nl>from ctypes import *<nl><nl>winmm= windll.winmm<nl>print 'waveInGetNumDevs=',winmm.waveInGetNumDevs()","out":"How to see if there is one microphone active using python?"}
{"in":"from scipy import linalg, mat, dot<nl>a = mat([-0.711,0.730])<nl>b = mat([-1.099,0.124])<nl><nl>c = dot(a,b.T)\/linalg.norm(a)\/linalg.norm(b)","out":"Calculate cosine similarity of two matrices - Python"}
{"in":"from itertools import groupby<nl>from operator import itemgetter<nl>dict(((u, sum(row['score'] for row in rows)) for u, rows in<nl><tab>groupby(sorted(d, key=itemgetter('alias')), key=itemgetter('alias'))))<nl># {'2133232': 158, 'u234243': 416}","out":"How can I do comparison in List of dictionaries for key values?"}
{"in":"import csv<nl><nl>bottle_list = []<nl><nl># Read all data from the csv file.<nl>with open('a.csv', 'rb') as b:<nl><tab>bottles = csv.reader(b)<nl><tab>bottle_list.extend(bottles)<nl><nl># data to override in the format {line_num_to_override:data_to_write}. <nl>line_to_override = {1:['e', 'c', 'd'] }<nl><nl># Write data to the csv file and replace the lines in the line_to_override dict.<nl>with open('a.csv', 'wb') as b:<nl><tab>writer = csv.writer(b)<nl><tab>for line, row in enumerate(bottle_list):<nl><tab><tab> data = line_to_override.get(line, row)<nl><tab><tab> writer.writerow(data)","out":"Overwriting a specific row in a csv file using Python's CSV module"}
{"in":"user.save()","out":"Inheritance in django models and saving data"}
{"in":"import re<nl>pattern = re.compile('prod\/([\\d_]+)\/x\/blah')<nl>query   = \"http:\/\/www.example.com\/blah\/prod\/4_2343_234\/x\/blah.html\"<nl>result  = pattern.search(query).group(1)<nl>print result","out":"Get value from a dynamic url"}
{"in":"import urllib2<nl>import time<nl>url = 'Roblox url'<nl>data = urllib2.urlopen(url)<nl>time.sleep(10)<nl>data = data.read()","out":"Python - Urllib2 Wait for page to load to scrape data"}
{"in":"import serial, time, struct<nl><nl>ser = serial.Serial(\"\/dev\/ttyAMA0\", 9600)<nl><nl><nl><nl>while True:<nl><nl><tab>count = 0<nl><tab>AValue = []<nl><tab>for ch in ser.read():<nl><tab><tab>if ch == \"<nl>\":<nl><tab><tab><tab>AValue = []<nl><tab><tab><tab>time.sleep(0.1)<nl><nl><tab>while count < 4:<nl><tab><tab>for ch in ser.read():<nl><tab><tab><tab>AValue.append(ch)<nl><tab><tab><tab>count += 1","out":"how to show UART received data (on PIN 10, RX) of Raspberry pi on Tkinter Window"}
{"in":"print \"text : \", repr(singleTweetJson[index])","out":"parsing unicoded tweet using json python"}
{"in":"class MySpinBox(QtGui.QSpinBox):<nl><tab>def __init__(self, *args):<nl><tab>   QtGui.QSpinBox.__init__(self, *args)<nl><nl><tab>   self.setRange(0,9999)<nl><nl><tab>def textFromValue(self, value):<nl><tab>   return \"%04d\" % value","out":"PyQt4 QSpinBox value format"}
{"in":"import pandas as pd<nl>s = pd.Series({'a':1, 'b':2, 'c':3})<nl>s.values # a numpy array","out":"Pythonic way to convert a dictionary to a numpy array"}
{"in":"import json <nl>payload = json.dumps({\"on\":True})","out":"Using python 'requests' to send JSON boolean"}
{"in":"from subprocess import Popen<nl>Popen('gdb a.out', shell=True).communicate()<nl>print 'test'","out":"Passing control of console window to subprocess"}
{"in":"bufsize = 0<nl>f = open('file.txt', 'w', bufsize)","out":"How often does python flush to a file?"}
{"in":"def load_binary(file):<nl><tab>with open(file, 'rb') as file:<nl><tab><tab>return file.read()","out":"How to encode image to send over Python HTTP server?"}
{"in":"for book in books:<nl><tab><tab>print \"%d\/%d\" % (curr, total)<nl><tab><tab>if book.cover_url != \"\":<nl><tab><tab><tab>new_path = string.replace(book.cover_url.path, \"app-old\/\", \"\")<nl><tab><tab><tab>book.cover_url = new_path<nl><tab><tab><tab>book.save()<nl><tab><tab>curr+=1","out":"Set new `path` value for ImageField"}
{"in":"os.path.dirname(__file__)","out":"Reference where a python script is located if being run from another location"}
{"in":"f = open('your_file.txt')<nl>lines = f.readlines()<nl>res = [x for x in lines if str(year) in x.split()[1]]<nl>print res","out":"Using a function to retrieve specific data from text file. Python 3"}
{"in":"frame = wx.Frame( None, title=\"Hello wxPython\", style = wx.CLOSE_BOX | wx.CAPTION | wx.RESIZE_BORDER )","out":"wxpython : Add Background picture and buttons"}
{"in":"threads = Thread.objects.all()[:30]<nl>threads_by_pk = dict((t.pk, t) for t in threads)<nl># Extra info about threads that the user have visited<nl>visited_threads = VisitedThread.objects.filter(pk__in=threads_by_pk.keys(), user=request.user)<nl><nl># I want to loop the visited_threads and add info to thread in threads with new info<nl>for visited_thread in visited_threads:<nl><tab>thread = threads_by_pk[visited_thread.pk]<nl><tab>thread.has_unread_post = thread.post_count > visited_thread.post_count","out":"Best way to loop\/change some objects in object_list"}
{"in":"dont_start_with_these = ('10.', '172.16.', '172.31.', '192.168')<nl><nl>filtered_ip = [ip for ip in fil2 if not ip[0].startswith(dont_start_with_these)]","out":"Filterig\/removing\/excluding private IPs with port from a nested list"}
{"in":"# Safe since everything in the namespace begins with 'Q'<nl>from PyQt4.QtGui import *<nl><nl>class MyMessageBox(QMessageBox):<nl><nl><tab># This is a much better way to extend __init__<nl><tab>def __init__(self, *args, **kwargs):<tab><tab><tab><nl><tab><tab>super(MyMessageBox, self).__init__(*args, **kwargs)<nl><tab><tab># Anything else you want goes below<nl><nl><tab># We only need to extend resizeEvent, not every event.<nl><tab>def resizeEvent(self, event):<nl><nl><tab><tab>result = super(MyMessageBox, self).resizeEvent(event)<nl><nl><tab><tab>details_box = self.findChild(QTextEdit)<nl><tab><tab># 'is not' is better style than '!=' for None<nl><tab><tab>if details_box is not None:<nl><tab><tab><tab>details_box.setFixedSize(details_box.sizeHint())<nl><nl><tab><tab>return result","out":"How to allow resizing of QMessageBox in PyQt4"}
{"in":"def repeat(x,Y):<nl><tab>A = list(str(x)) #makes a list, A, of each digit: 101 becomes ['1','0','1']<nl><tab>A = map(int,A)  #converts each value of the new list to integers<nl><tab>print 'Proceessing', x<nl><tab>for i in range(0,10):  <nl><tab><tab>b = A.count(i) #counts how many times each digit is present<nl><tab><tab>if b>1:<tab><tab> #if there is repetition<nl><tab><tab><tab>print 'Removed', x<nl><tab><tab><tab>Y.remove(x)<nl><nl><nl>B = []<nl>for i in range(100,1000):   #needs to be a 3 digit number (100 until 999)<nl><tab>if i%17 == 0:<nl><tab><tab>B.append(i)<tab><tab> #creates list of factors of 17<nl>print B<nl><nl>for j in B:<tab><tab><tab><tab> #removes any values that have digits that occur more than once<nl><tab>repeat(j,B)<nl><nl>print B","out":"Function used to remove numbers with a repeating integer skips one entry and i dont know why"}
{"in":"x=np.array([6,3,5,2,1,4,9,7,8])<nl>y=np.array([2,1,3,5,7,9,8,10,7])<nl><nl>sort_idx = np.argsort(x)<nl>y=y[sort_idx]<nl>x=x[sort_idx]<nl>minm=np.array([],dtype=int)<nl>maxm=np.array([],dtype=int)<nl>length = y.size<nl>i=0<nl><nl>while i < length-1:<nl><tab>if i < length - 1:<nl><tab><tab>while i < length-1 and y[i+1] >= y[i]:<nl><tab><tab><tab>i+=1<nl><nl><tab><tab>if i != 0 and i < length-1:<nl><tab><tab><tab>maxm = np.append(maxm,i)<nl><nl><tab><tab>i+=1<nl><nl><tab>if i < length - 1:<nl><tab><tab>while i < length-1 and y[i+1] <= y[i]:<nl><tab><tab><tab>i+=1<nl><nl><tab><tab>if i < length-1:<nl><tab><tab><tab>minm = np.append(minm,i)<nl><tab><tab>i+=1<nl><nl><nl>print minm,maxm","out":"How to find all maximas if x and y values of the function are given as np.array"}
{"in":"from xgoogle.search import GoogleSearch, SearchError<nl>try:<nl>  page = 1<nl>  gs = GoogleSearch(\"foo bar\")  <nl>  gs.results_per_page = 100<nl>  results = []<nl>  while page < 10:<nl><tab>  gs.page = page<nl><tab>  results += gs.get_results()<nl><tab>  page += 1<nl>except SearchError, e:<nl>  print \"Search failed: %s\" % e<nl>for res in results:<nl><tab>print res.url","out":"problem with python xgoogle library. How to increase the limit of 10 results?"}
{"in":"import nltk<nl>nltk.download()","out":"How can I get the stanford NLTK python module?"}
{"in":"[logger_root]<nl>level=DEBUG<nl>handlers=screen,file","out":"Configuring logging level in python"}
{"in":"from win32com.client import Dispatch<nl><nl>excel = Dispatch('Excel.Application')<nl>wb = excel.Workbooks.Open(\"D:\\\\output.xlsx\")<nl><nl>#Activate second sheet<nl>excel.Worksheets(2).Activate()<nl><nl>#Autofit column in active sheet<nl>excel.ActiveSheet.Columns.AutoFit()<nl><nl>#Save changes in a new file<nl>wb.SaveAs(\"D:\\\\output_fit.xlsx\")<nl><nl>#Or simply save changes in a current file<nl>#wb.Save()<nl><nl>wb.Close()","out":"Using Python To Autofit All Columns of an Excel Sheet"}
{"in":"nums = [3,51,34]<nl>reduce(lambda x, y: [y] if not x else x + [y + x[-1]], nums, None)<nl># [3, 54, 88]","out":"how can i do math operation on list elements in python?"}
{"in":"box_top = (0, 0, x, y \/ 2)<nl>top_part = im1.crop(box_top)<nl>result = im2.copy()<nl>result.paste(top_part, box_top)","out":"paste parts of picture - python, PIL module"}
{"in":"import psycopg2<nl>from psycopg2.extensions import AsIs<nl><nl>column_list = ['id','name']<nl>columns = ', '.join(column_list)<nl><nl>cursor.execute(\"SELECT %s FROM table\", (AsIs(columns),))","out":"Passing parameter in psycopg2"}
{"in":"ships.update(<nl>  {'_id': 1}, <nl>  {\"$set\": {'staff': staff}},<nl>  false,true<nl>)","out":"pymongo: Add field containing a dict"}
{"in":"from bs4 import BeautifulSoup<nl><nl>soup = BeautifulSoup(html)<nl><nl>table = soup.find('table', id='test_table')<nl>for anchor in table.find_all('a'):<nl><tab>print anchor['href'], anchor.string","out":"Python regex match in matched elements with one regex"}
{"in":"total = value[c1-1]+value[c2-1]","out":"summing string and integers in list in python"}
{"in":"from django.utils import simplejson<nl><nl>def post(self, request, *args, **kwargs):<nl><tab>isUpvote = simplejson.loads(request.POST.get('isUpvote'))","out":"Converting Boolean value from Javascript to Django?"}
{"in":"s = s.extra(track_scores=True)","out":"How to enable track_scores in elasticsearch-dsl python"}
{"in":"self.spawnPoint = [1, 0]<nl>self.vel = self.spawnPoint # Does not make a copy!<nl>self.vel[0] += 0.1<nl>self.vel[1] += 0.2","out":"Python changes Integer in Float by itself"}
{"in":"def my_reverser(x):<nl>  try:<nl><tab>x_ = x[::-1]<nl>  except TypeError:<nl><tab>return x<nl>  else:<nl><tab>return x if len(x) == 1 else tuple(my_reverser(e) for e in x_)","out":"Reversing a nested tuple in python using the function reversed"}
{"in":"string = r\"asdasd\\asdasd\"<nl>lhs, rhs = string.split(\"\\\\\")<nl>print rhs","out":"Unable to split a string with a back slash despite using escape character"}
{"in":"pattern = r'(?<=X)([a-z])X'","out":"Regex: how to match overlapping patterns (maybe Python specific)"}
{"in":"value = raw_input('Please enter a value between 10 and' + str(max) + 'for percentage')","out":"Python use raw_input with a variable"}
{"in":"import requests<nl>import BeautifulSoup as bs<nl><nl>URL = \"page to get\"<nl>pg = requests.get(URL).content<nl>pg = bs.BeautifulSoup(pg)<nl><nl>scripts = bs.findAll('script')<nl><nl>for sc in scripts:<nl><tab>try:<nl><tab><tab>print(\"External code at {}\".format(sc['src']))<nl><tab>except KeyError:<nl><tab><tab>print(\"Inline code:\")<nl><tab><tab>print(sc.getText())","out":"How to export javascript from html using python"}
{"in":"import os<nl>import tarfile<nl><nl>home = '\/home\/'<nl>backup_dir = '\/backup\/'<nl><nl>home_dirs = [ name for name in os.listdir(home) if os.path.isdir(os.path.join(home, name)) ]<nl><nl>for directory in home_dirs:<nl><tab>full_dir = os.path.join(home, directory)<nl><tab>tar = tarfile.open(os.path.join(backup_dir, directory+'.tar.gz'), 'w:gz')<nl><tab>tar.add(full_dir)<nl><tab>tar.close()","out":"How to make tar backup using python"}
{"in":"import numpy as np<nl>import pylab as pl<nl><nl>Y, X = np.mgrid[-10:10:100j, -10:10:100j]<nl><nl>def f(x):<nl><tab>return x**3 -3*x + 5<nl><nl>px = -2.0<nl>py = -np.sqrt(f(px))<nl><nl>qx = 0.5<nl>qy = np.sqrt(f(qx))<nl><nl>k = (qy - py)\/(qx - px)<nl>b = -px*k + py <nl><nl>poly = np.poly1d([-1, k**2, 2*k*b+3, b**2-5])<nl><nl>x = np.roots(poly)<nl>y = np.sqrt(f(x))<nl><nl>pl.contour(X, Y, Y**2 - f(X), levels=[0])<nl>pl.plot(x, y, \"o\")<nl>pl.plot(x, -y, \"o\")<nl><nl>x = np.linspace(-5, 5)<nl>pl.plot(x, k*x+b)","out":"Python -- Matplotlib for elliptic curve with sympy solve()"}
{"in":"file = open(\"dizionario_della_vela.txt\", \"r\")<nl>data = file.read()<nl>file.close()<nl>data = data.split(\"<nl>\") # getting every line as seperate list<nl>myDict = {}<nl>for line in data:<nl><tab>line = line.split(\":\")<nl><tab>key = line[0] # getting first element as key<nl><tab>value = \":\".join(line[1:]) # joins elements (starting with second) with <nl><tab><tab><tab><tab><tab><tab><tab>   # \":\". We need this because previous line <nl><tab><tab><tab><tab><tab><tab><tab>   # was splitted by \":\" to get your key. This<nl><tab><tab><tab><tab><tab><tab><tab>   # is where \"string\" value is produced.<nl><tab>myDict[key] = value<nl><nl>for key in myDict.keys():<nl><tab>print(myDict[key])","out":"Python splitting text returns a str and a list of str"}
{"in":"a, b, c = (1, 2, 3)","out":"python: use tuples to re-arrange the contents of a list"}
{"in":"#!\/usr\/bin\/env python<nl># encoding: utf-8<nl>\"\"\"<nl>logClient2.py<tab><nl>Created by Allister on 2010-11-30.<nl>\"\"\"<nl><nl>import wx<nl>import sqlite3<nl><nl>WINDOW_SIZE = (900,400)<nl><nl>class logClient(wx.Frame):<nl><tab>def __init__(self, parent, id, title):<nl><nl><tab><tab>wx.Frame.__init__(self, parent, id, title, size=WINDOW_SIZE)<tab><tab><nl><nl><tab><tab>self.toolbar = self.CreateToolBar()<nl><tab><tab>self.startLiveUpdate(None)<nl><nl><tab><tab>self.Show(True)<nl><nl><tab>def startLiveUpdate(self, event):<nl><tab><tab>self.createToolbarItem(\"Refresh\", \"refresh.jpg\", self.stopLiveUpdate)<nl><nl><tab>def stopLiveUpdate(self, event):<nl><tab><tab>self.createToolbarItem(\"Stop\", \"refresh2.jpg\", self.startLiveUpdate)<nl><nl><nl><tab>def createToolbarItem(self, label, imageName, method):<nl><tab><tab>self.toolbar.RemoveTool(1)<nl><tab><tab>self.toolbar.AddLabelTool(1, label, wx.Bitmap(imageName))<nl><tab><tab>self.toolbar.Realize()<nl><tab><tab>self.Bind(wx.EVT_TOOL, method, id=1)<nl><nl><nl>if __name__ == '__main__':<nl><tab>app = wx.App(False)<nl><tab>logClient(None, -1, \"Log Event Viewer\")<nl><tab>app.MainLoop()","out":"Changing Label in toolbar using wxPython"}
{"in":"import os<nl><nl>os.system(\"my_util some_file.txt | grep 'Some data1' | awk '{print $2}'\" )","out":"Grabbing the output from the terminal"}
{"in":"(Person, Date, Comment)","out":"django join-like expansion of queryset"}
{"in":"config.get('pylons.app_globals') or config.get('pylons.g')","out":"Creating a Pylons Thread with Access to app_globals"}
{"in":"import xml.etree.ElementTree as ET<nl><nl>def sortchildrenby(parent, attr):<nl><tab>parent[:] = sorted(parent, key=lambda child: child.get(attr))<nl><nl>tree = ET.parse('input.xml')<nl>root = tree.getroot()<nl><nl>sortchildrenby(root, 'NAME')<nl>for child in root:<nl><tab>sortchildrenby(child, 'NAME')<nl><nl>tree.write('output.xml')","out":"Sorting XML in python etree"}
{"in":"cm2 = compute_confusion_matrix(truth_dict,pred_dict,pos_tag='SPAM',neg_tag='OK')<nl>return quality_score(cm2.tp,cm2.tn,cm2.fp,cm2.fn)","out":"how can i define variables in my function?"}
{"in":"item['a'] = x<nl>item['_junk'] = {}<nl>item['_junk']['b'] = y<nl>item['_junk']['c'] = z","out":"Scrapy with a nested array"}
{"in":"from TwitterAPI import TwitterAPI<nl><nl>TWEET_TEXT = 'some tweet text'<nl>IMAGE_PATH = '.\/some_image.png'<nl><nl>api = TwitterAPI(CONSUMER_KEY,CONSUMER_SECRET,ACCESS_TOKEN_KEY,ACCESS_TOKEN_SECRET)<nl><nl># STEP 1 - upload image<nl>file = open(IMAGE_PATH, 'rb')<nl>data = file.read()<nl>r = api.request('media\/upload', None, {'media': data})<nl>print('UPLOAD MEDIA SUCCESS' if r.status_code == 200 else 'UPLOAD MEDIA FAILURE')<nl><nl># STEP 2 - post tweet with a reference to uploaded image<nl>if r.status_code == 200:<nl><tab>media_id = r.json()['media_id']<nl><tab>r = api.request('statuses\/update', {'status':TWEET_TEXT, 'media_ids':media_id})<nl><tab>print('UPDATE STATUS SUCCESS' if r.status_code == 200 else 'UPDATE STATUS FAILURE')","out":"Add multiple images to a tweet with python and twitterApi?"}
{"in":"import numpy as np<nl><nl>def split_into_quadrants(points, idx=0):<nl><tab>if idx < points.shape[-1]:<nl><tab><tab>positive = points[points[:, idx] >= 0]<nl><tab><tab>negative = points[points[:, idx] < 0]<nl><tab><tab>return (split_into_quadrants(positive, idx+1) +<nl><tab><tab><tab><tab>split_into_quadrants(negative, idx+1))<nl><tab>else:<nl><tab><tab>return [points]<nl><nl>b = np.round(np.random.random((30,3))*20)<nl>b = b - b.mean(axis=0)<nl>print(split_into_quadrants(b))","out":"Dividing point clouds into quadrants in python"}
{"in":"portnumber = int(portnumber.strip('\\x00'))","out":"Conversion of null terminated string to Int in Python"}
{"in":"help('modules')","out":"How do I get a list of python libraries I've installed?"}
{"in":"class A:<nl><nl><tab>def x(self):<nl><tab><tab>#do stuff and call Class B<nl><tab><tab>n = 1<nl><tab><tab>n += B().y() #Instance B and call y method<nl><tab><tab>print n<nl><nl>class B:<nl><tab>def y(self):<nl><tab><tab>#do stuff get results and pass results to Class A<nl><tab><tab>x = 10<nl><tab><tab>return x<nl><nl>a = A() #create a object with type A<nl>a.x() #call x method of A class","out":"How to use method results from one class in another"}
{"in":"text.replace(\"<\", \"\")","out":"Python reportlab paragraph function only draws a third of the input text to a pdf file"}
{"in":"end_trimm = 3<nl>myList = myList[:-end_trimm]","out":"How to delete a fixed number of items from end of list in python"}
{"in":"amount = 250000<nl><nl>thousands = amount % 100000<nl>lakhs = amount - thousands","out":"Python : Split Amount into Thousands and Lakhs"}
{"in":"self.label.show()","out":"creating widgets in user defined slots"}
{"in":"def remove_section(alist, start, end):<nl><tab>return alist[:start] + alist[end+1:]","out":"How to remove a range from start to end enclusive from a list"}
{"in":"import os, pymunk<nl>pymunk_dir = os.path.dirname(pymunk.__file__)<nl>chipmunk_libs = [<nl><tab>('chipmunk.dll', os.path.join(pymunk_dir, 'chipmunk.dll'), 'DATA'),<nl>]<nl>#... <nl>coll = COLLECT(exe,<nl><tab><tab><tab>   a.binaries + chipmunk_libs,<nl><tab><tab><tab>   a.zipfiles,<nl><tab><tab><tab>   a.datas,<nl><tab><tab><tab>   strip=None,<nl><tab><tab><tab>   upx=True,<nl><tab><tab><tab>   name=os.path.join('dist', 'basic_test'))","out":"Using Pymunk with Pyinstaller"}
{"in":"choice1 = Button(master, text=question1[1].text, command=lambda : check(question1[1].value))","out":"tkinter button command runs function without clicking?"}
{"in":"keyVal = map(str.strip,line.split('=')) #this will remove extra whitespace","out":"How to use key\/value pairs in a Python dictionary"}
{"in":"import urllib<nl>data = urllib.urlencode({\"postField1\" : \"postValue1\", \"postField2\" : \"postValue2\", \"etc\" : \"etc\"})<nl>f = urllib.urlopen(\"http:\/\/www.domain.com\/storePostData.php\", data)<nl># At this point your storePostData.php file stores all the post <nl># info in either an sql DB or temporary file so this can accessed later on and<nl># an uuid is passed back which we now read below. In may case I store all post<tab><tab><nl># fields in a sql DB and each column represents each post field.<nl>uuid = f.read()<nl># the uuid is the sql table id field which is auto_incremented.<nl># SO now we load the default browser below and send it the uuid so the php script<nl># can access the sql data. Once it has been accessed and the form fields have been <nl># received then we delete that row as the information is useless to us now that we <nl># have filled in the forms fields<nl>import webbrowser<nl>webbrowser.open_new(\"http:\/\/www.domain.com\/someOtherUrl?uuid=\" + uuid)","out":"How can I use python to load a browser session that posts values to a url?"}
{"in":"cutoff = 0.00694444444444444<nl>filtered_list = [ dt for dt in dtime_list if dt <= cutoff ]","out":"Python - Comparing 2 floats"}
{"in":"import matplotlib.pyplot as plt<nl>import numpy as np<nl>from bubblegum.backend.mpl.cross_section_2d import CrossSection<nl>fig= plt.figure()<nl>cs= CrossSection(fig)<nl>img= np.random.rand(100,100)<nl>cs.update_image(img)<nl>plt.show()","out":"matplotlib interactive plot with slices of image"}
{"in":"passwd = getpass.getpass()<nl>pid = os.fork()<nl>if pid:<nl>  print 'Parent thinks passwd is', passwd<nl>else:<nl>  print 'Child thinks passwd is', passwd","out":"start python program in the background that can prompt the user for password"}
{"in":"db.commit()","out":"Get updated MySQL table entries in python without closing connection"}
{"in":"import boto<nl>import boto.dynamodb2<nl>from boto.dynamodb2.table import Table<nl>from boto.dynamodb2.fields import HashKey, RangeKey<nl><nl>drivers = Table('current_fhv_drivers')<nl>rowcountquery = drivers.query(<nl>   number__eq = 'blah',<nl>   expiration__eq = 'foo',<nl>   count__eq = True,<nl>  )<nl>for x in rowcountquery:<nl> print x['Count']","out":"dynamodb row count via python, boto query"}
{"in":"for node in (n for n in nodelist if condition):<nl><tab>node.x += 1","out":"Cleaner assignment in for loop (python)"}
{"in":"class Task(Base):<nl><tab>__tablename__ = 'tasks'<nl><tab>id = Column(Integer, primary_key=True)<nl><tab>hostID = Column(Integer, ForeignKey('hosts.id'))<nl><tab>name = Column(String)<nl><tab>host = relationship(\"Host\", backref=backref(\"tasks\", cascade_backrefs=False))<nl><nl><tab>def __init__(self, host, name):<nl><tab><tab>self.host = host<nl><tab><tab>self.name = name","out":"Creating non persistent objects with SQLAlchemy: wrong employment of backref in a relationship?"}
{"in":"from facebookads.objects import AdImage<nl><nl>image = AdImage(parent_id='act_<AD_ACCOUNT_ID>')<nl>image[AdImage.Field.filename] = '.\/test.zip'<nl>image.remote_create(batch=True)<nl><nl># Output image hash.<nl>print image[AdImage.Field.hash]","out":"Empty response body with POST requests to Facebook Ads API"}
{"in":"template = '<input name=\"#key#\" value=\"#value#\">'<nl>html = template<nl>data = {key:value,key:value}<nl>for key in data.keys():<nl><tab>html = html.replace(\"#key#\", key).replace(\"#value#\", data[value]) + \"<nl>\"<nl><tab>html = html + template<nl>#there's an extra template line here that you'll have to get rid of.<nl>html = \"<nl>\".join(html.split(\"<nl>\")[0:-1])","out":"Creating a form from an object in python"}
{"in":"def op(self):<nl><tab><tab>self.start()<nl><tab><tab>while True:<nl><tab><tab><tab>time.sleep(self.waiting_time)<nl><tab><tab><tab>if not self.q.empty():<nl><tab><tab><tab><tab>print(\"Outputting: \", self.q.get())<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>break","out":"Producer-Consumer algorithm in python"}
{"in":"import sys<nl>from PyQt4 import QtGui<nl><nl>app = QtGui.QApplication(sys.argv)<nl>widget = QtGui.QWidget()<nl><nl>unicode_font = QtGui.QLabel(u\"Unicode Font: H\\u2082O\")<nl>unicode_font.setStyleSheet(\"font-family: 'Arial Unicode MS', Arial, sans-serif; font-size: 15px;\") <nl><nl>normal_font = QtGui.QLabel(u\"Normal Font: H\\u2082O\")<nl>normal_font.setStyleSheet(\"font-family: Arial, sans-serif; font-size: 15px;\")<nl><nl><nl>layout = QtGui.QVBoxLayout()<nl>layout.addWidget(unicode_font)<nl>layout.addWidget(normal_font)<nl>widget.setLayout(layout)<nl>widget.show()<nl>sys.exit(app.exec_())","out":"Can't display unicode character for subscript 2 on Windows"}
{"in":"import datetime<nl><nl>if __name__ == \"__main__\":<nl><tab>d1 = datetime.datetime.now()<nl><tab>data = port.read()<nl><tab># Do more things ...<nl><tab>tdelta = datetime.datetime.now() - d1<nl><tab>print(tdelta.total_seconds()) # This is your answer","out":"How to count elapsed time on Python"}
{"in":"import matplotlib.pyplot as plt<nl>import numpy as np<nl><nl>x = np.arange(10)<nl>np.random.seed(101)<nl>y = np.random.rand(10)<nl><nl>small = [i for i in range(len(x)) if y[i] < .5 ]<nl>big = [i for i in range(len(x)) if y[i] > .5 ]<nl><nl>fig = plt.figure()<nl>ax = fig.add_subplot(111)<nl><nl>ax.scatter(x,y)<nl># user wants to plot lines connecting big values (>.5)<nl>ax.plot(x[big],y[big])<nl><nl>#plt.show()<nl># now user wants to delete the first (and only) line<nl>del ax.lines[0]<nl><nl># so that they can plot a line only showing small values<nl>ax.plot(x[small],y[small])<nl><nl>plt.show()","out":"Erase previously drawn content from a pyplot drawing"}
{"in":"stop_words_lst = ['yo', 'so', 'well', 'um', 'a', 'the', 'you know', 'i mean']<nl>s = \"you know what i mean so just turn the lights on\"<nl><nl>import re<nl>for w in stop_words_lst:<nl><tab>pattern = r'\\b'+w+r'\\b'<nl><tab>s = re.sub(pattern, '', s)<nl><tab>print (s)","out":"removing custom stop words form a phrase in python"}
{"in":"#!\/usr\/local\/bin\/python3<nl><nl>print('Content-type: text\/html<nl>')<nl><nl>def fib(n):<nl><tab>a, b = 0, 1<nl><tab>for i in range(n):<nl><tab><tab>a, b = b, a + b<nl><tab>return a<nl><nl>print('''<nl><tab><table><nl><tab><tab><tr><nl><tab><tab><th>Index Number<\/th><nl><tab><tab><th>Decimal<\/th><nl><tab><tab><th>Hexadecimal<\/th><nl><tab><tab><th>Octadecimal<\/th><nl><tab><tab><th>float<\/th><nl><tab><\/tr><nl>''')<nl><nl>for i in range (0, 51):<nl><tab>print('''<nl><tab><tr><nl><tab><tab><td>{0}<\/td><nl><tab><tab><td>{1}<\/td><nl><tab><tab><td>{1:x}<\/td><nl><tab><tab><td>{1:o}<\/td><nl><tab><tab><td>{1:.2f}<\/td><nl><tab><\/tr>'''.format(i, fib(i)))<nl><nl>print('<\/table>')","out":"Python HTML Table"}
{"in":"google = oauth.remote_app('google',<nl><tab><tab><tab><tab><tab>  base_url='https:\/\/www.google.com\/accounts\/',<nl><tab><tab><tab><tab><tab>  authorize_url='https:\/\/accounts.google.com\/o\/oauth2\/auth',<nl><tab><tab><tab><tab><tab>  request_token_url=None,<nl><tab><tab><tab><tab><tab>  request_token_params={'scope': 'https:\/\/www.googleapis.com\/auth\/userinfo.email',<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>'response_type': 'code',<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>'hd':'domain.com'},<nl><tab><tab><tab><tab><tab>  access_token_url='https:\/\/accounts.google.com\/o\/oauth2\/token',<nl><tab><tab><tab><tab><tab>  access_token_method='POST',<nl><tab><tab><tab><tab><tab>  access_token_params={'grant_type': 'authorization_code'},<nl><tab><tab><tab><tab><tab>  consumer_key=GOOGLE_CLIENT_ID,<nl><tab><tab><tab><tab><tab>  consumer_secret=GOOGLE_CLIENT_SECRET)","out":"Google Oauth2.0 with Python: How do I limit access to a specific domain?"}
{"in":"views\/debug.py","out":"How to override the stack trace template in django?"}
{"in":"df[df['date_time'].str.startswith('2014-02-21')]","out":"Pandas get date from datetime stamp"}
{"in":"grouped = [list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[2])]","out":"How to group related .tif files?"}
{"in":"#!\/usr\/bin\/python<nl>filename='thefile.txt'<nl>search=\"class Parking(models.Model):\"<nl>add=\"<nl><tab>layer_id= models.ForeignKey('sdr_layer.id')\"<nl>content=open(filename,'r').read()<nl>content=content.replace(search,search+add)<nl>fp=open(filename,'w')<nl>fp.write(content)<nl>fp.close()","out":"How to insert a string of characters into a text file using python?"}
{"in":"import requests<nl>import cookielib<nl><nl><nl>URL = '...whatever...'<nl>jar = cookielib.CookieJar()<nl>r = requests.get(URL, cookies=jar)<nl>r = requests.get(URL, cookies=jar)","out":"Putting a `Cookie` in a `CookieJar`"}
{"in":"import csv<nl><nl>with open('\/Users\/stephan\/Desktop\/cities.csv', \"r\") as f:<nl><tab>mycsv = csv.DictReader(f)<nl><tab>for row in mycsv:<nl><tab><tab>for col in FIELDS:<nl><tab><tab><tab>try:<nl><tab><tab><tab><tab>print(row[col])<nl><tab><tab><tab>except KeyError:<nl><tab><tab><tab><tab>pass","out":"Extracting Columns of a .csv file and finding their index"}
{"in":"foo, bar, baz == (list(a) + [None]*3)[:3]","out":"How to unpack optional items from a tuple?"}
{"in":"f = open('apple.txt')<nl>lines = f.readlines()<nl>f.close()<nl>things = []<nl>printtofile = []<nl>for i in lines:<nl><tab>things.append(i)<nl><tab>if i.startswith('date'):<nl><tab><tab>things.pop()<nl><tab><tab>for x in things:<nl><tab><tab><tab>if i[:-1] == '<nl>':<nl><tab><tab><tab><tab>printtofile.append(x[:-1]+'|'+i[:-1])<nl><tab><tab><tab>else: <nl><tab><tab><tab><tab>printtofile.append(x[:-1]+'|'+i)<nl><tab><tab>things = []<nl>print printtofile<nl>writefile = open('file.txt', 'w')<nl>writefile.writelines(printtofile)<nl>writefile.close()","out":"Python textfile formatting"}
{"in":"finaldict = {}<nl>for key in dict1.keys():<nl><tab>finaldict[key] = {}<nl><tab>for key2 in dict1[key]:<nl><tab><tab>finaldict[key][key2] = {}<nl><tab><tab>for key3 in dict2[key2]:<nl><tab><tab><tab>finaldict[key][key2][key3] = dict3[key3]<nl>print finaldict","out":"Combine three Python dictionaries together"}
{"in":"np.rec.fromrecords(tab)<nl><nl>rec.array([('a', 1), ('b', 2)], <nl><tab><tab>  dtype=[('f0', '|S1'), ('f1', '<i4')])","out":"List of tuples to Numpy recarray"}
{"in":"activate_this = '\/path\/to\/env\/bin\/activate_this.py'<nl>execfile(activate_this, dict(__file__=activate_this))","out":"Running Python from a virtualenv with Apache\/mod_wsgi, on Windows"}
{"in":"def print_table(lines, col_num, col_width):<nl><tab>for line_ix in range(0, len(lines), col_num):<nl><tab><tab>print ' -- '.join([line.strip().ljust(col_width) for line in lines[line_ix:line_ix+col_num]])","out":"How do I format text from a file in Python?"}
{"in":"\/ .join([item for sublist in list1 for item in sublist])","out":"Python - Remove square brackets from list"}
{"in":"with open(\"tmp.json\") as json_file:<nl><tab>json_data = json.load(json_file)<nl><tab>for i, data_item in enumerate(json_data['data']):<nl><tab><tab>fname = 'data_%s' % i<nl><tab><tab>with open(fname, 'w') as outfile:<nl><tab><tab><tab>json.dump(data_item, outfile)","out":"Python program to extract data from JSON files"}
{"in":"import pandas as pd<nl>df = pd.DataFrame({<nl><tab>'A': [['a','b','c','d'],['a','b','c'],['x','y','z','q'],['x','l']],<nl><tab>'B': [12,7,2,9]<nl><tab>})<nl>print(df)<nl><nl>#<tab><tab><tab>   A   B<nl># 0  [a, b, c, d]  12<nl># 1<tab> [a, b, c]   7<nl># 2  [x, y, z, q]   2<nl># 3<tab><tab>[x, l]   9<nl><nl>def cumulative_frequence(df, nodes):<nl><tab>nodes = set(nodes)<nl><tab>mask = df['A'].apply(lambda group: not nodes.isdisjoint(group))<nl><tab>return df.ix[mask, ['B']].sum().item()<nl><nl>print(cumulative_frequence(df, ['a']))<nl>print(cumulative_frequence(df, ['a','b']))<nl># 19<nl># 19","out":"conditional cumulative sum for pandas array"}
{"in":"FullName = LastName + (\", \" + FirstName if FirstName else \"\")","out":"Join string and None\/string using optional delimiter"}
{"in":"from subprocess import Popen, PIPE<nl><nl>cmdline = ['hipi-i2c', 'r', '1', '0x1D', '0x01']<nl>result = Popen(<nl><tab>cmdline<nl><tab>, stdin=PIPE<nl><tab>, stdout=PIPE<nl><tab>, stderr=PIPE<nl>)<nl>output = result.stdout.readlines()<nl>try:<nl><tab>X = int(output[0])<nl>except:<nl><tab>pass<nl><nl>print X","out":"Python-Raspberry pi: get int from popen result"}
{"in":"# Import guzzle theme https:\/\/github.com\/guzzle\/guzzle_sphinx_theme<nl># Not actually using the theme but intead using the<nl># sitemap functionality and overriding the theme\/templates in source\/<nl>html_translator_class = 'guzzle_sphinx_theme.HTMLTranslator'<nl>html_theme_path = guzzle_sphinx_theme.html_theme_path()<nl>html_theme = 'guzzle_sphinx_theme'<nl>extensions.append(\"guzzle_sphinx_theme\")<nl>html_theme_options = {<nl><tab>\"base_url\": \"YOURSITEURL\"<nl>}","out":"How do I generate a sitemap.xml file with sphinx?"}
{"in":"bin\/pycharm.sh","out":"How to run PyCharm in Ubuntu - \"Run in Terminal\" or \"Run\"?"}
{"in":"from datetime import datetime, timedelta<nl>fourweeks = datetime.now() + timedelta(weeks=4)","out":"Change the start of the year in the datetime module of Python?"}
{"in":"import os, shutil, stat<nl><nl>def on_rm_error( func, path, exc_info):<nl><tab># path contains the path of the file that couldn't be removed<nl><tab># let's just assume that it's read-only and unlink it.<nl><tab>os.chmod( path, stat.S_IWRITE )<nl><tab>os.unlink( path )<nl><nl>shutil.rmtree( TEST_OBJECTS_DIR, onerror = on_rm_error )","out":"How to remove read-only attrib directory with Python in Windows?"}
{"in":"def my_print(obj):  <nl><tab>if hasattr(obj, '__len__') and len(obj) > 100:  <nl><tab><tab>print '... omitted object of %s with length %d ...' % (type(obj), len(obj))  <nl><tab>else: print obj","out":"How can I stop IDLE from printing giant lists?"}
{"in":"outfile = open('scorefiles.txt', 'a')","out":"Adding to a file instead of overwriting data on multiple function calls"}
{"in":"import clr<nl>files = [ 'file1.py', 'file2.py' ]<tab># Look into os.walk() if you have more than a few files<nl>clr.CompileModules('Foo.dll', *files)","out":"How to create Library project"}
{"in":"method = getattr(myPotatoHead, 'play_' + toy)<nl>method()","out":"Variables as a part of calling a method in python"}
{"in":"def __hash__(self):<nl><tab>return hash(frozenset(self.iteritems()))","out":"Lookup table for unhashable in Python"}
{"in":"ftp.retrlines(\"LIST -a\")","out":"Python 3: ftplib - nlst command does not show files starting with a point"}
{"in":"memory_ptr =  pointer(memory)<nl>ReadMem(0x20000000, 100, memory_ptr)","out":"Working with pointers to struct"}
{"in":"df['d'] = df.apply(lambda x: some_func(a = x['a'], b = x['b'], c = x['c']))","out":"Pandas: Map a function using multiple columns"}
{"in":"def f1():<nl><tab>def f2():<nl><tab><tab>print g[0]<nl><tab><tab>g[0] = 1<nl><tab><tab>print g[0]<nl><tab>g =[0]<nl><tab>print g[0]<nl><tab>f2()<nl><tab>print g[0]<nl><nl><tab>f1()","out":"Sharing local variable between nested functions in python"}
{"in":"myDict = dict(queryDict.iterlists())","out":"How to change a django QueryDict to Python Dict?"}
{"in":"def findLines():<nl><tab>myWord = 'someWordIWantToSearchFor'<nl><tab>answer = []<nl><tab>with open('daily.txt') as myfile:<nl><tab><tab>lines = myfile.readlines()<nl><tab>for line in lines:<nl><tab><tab>if myWord in line:<nl><tab><tab><tab>answer.append(line)<nl><tab>return answer","out":"How to find a word in a string in a list? (Python)"}
{"in":"for key in d:<nl><tab>ddd[key] = [val\/sum(d[key]) for val in d[key]]<nl>print list(ddd.items())","out":"python dictionary divide each value in value list by total"}
{"in":"import urllib2<nl>try:<nl><tab>fh = urllib2.urlopen('http:\/\/example.com\/check.txt')<nl><tab>print fh.read()<nl>except urllib2.HTTPError, e:<nl><tab>print e.code <nl>except urllib2.URLError, e:<nl><tab>print e.code","out":"Python - urllib2 > how to escape HTTP errors"}
{"in":"3>> bytes(int(x, 16) for x in '0xDE 0xAD 0xBE 0xEF'.split())<nl>b'\\xde\\xad\\xbe\\xef'","out":"Python - Parse string in \"0xDE 0xAD 0xBE 0xEF\" form to a bytearray"}
{"in":"content = ''<nl>with open(filename, 'rt') as f:<nl><tab>content = f.read()<nl><nl>matches = re.findall(REGEX, content)","out":"Operating on a file's content despite a failure in the 'with' block"}
{"in":"for index, item in enumerate(L):<nl>  if a in item or b in item:<nl><tab>r.append(index)","out":"Python - Searching index of lists in list containing one element"}
{"in":"import re<nl><nl>with open('php_file.txt', 'r') as f:<nl><tab>html = re.sub('<\\?.*?\\?>', '', f.read(), re.MULTILINE)<nl><nl>with open('html_file.txt', 'w') as f:<nl><tab>f.write(html)","out":"Removing PHP Lines from an HTML File Using Python"}
{"in":"import matplotlib.pylab as plt<nl>import matplotlib.animation as animation<nl>import numpy as np<nl><nl>#create image with format (time,x,y)<nl>image = np.random.rand(100,10,10)<nl><nl>#setup figure<nl>fig = plt.figure()<nl>ax1 = fig.add_subplot(1,2,1)<nl>ax2 = fig.add_subplot(1,2,2)<nl>#set up viewing window (in this case the 25 most recent values)<nl>repeat_length = (np.shape(image)[0]+1)\/4<nl>ax2.set_xlim([0,repeat_length])<nl>#ax2.autoscale_view()<nl>ax2.set_ylim([np.amin(image[:,5,5]),np.amax(image[:,5,5])])<nl><nl>#set up list of images for animation<nl><nl><nl>im = ax1.imshow(image[0,:,:])<nl>im2, = ax2.plot([], [], color=(0,0,1))<nl><nl>def func(n):<nl><tab>im.set_data(image[n,:,:])<nl><nl><tab>im2.set_xdata(np.arange(n))<nl><tab>im2.set_ydata(image[0:n, 5, 5])<nl><tab>if n>repeat_length:<nl><tab><tab>lim = ax2.set_xlim(n-repeat_length, n)<nl><tab>else:<nl><tab><tab># makes it look ok when the animation loops<nl><tab><tab>lim = ax2.set_xlim(0, repeat_length)<nl><tab>return im, im2<nl><nl>ani = animation.FuncAnimation(fig, func, frames=image.shape[0], interval=30, blit=False)<nl><nl>plt.show()","out":"Updating the x-axis values using matplotlib animation"}
{"in":"for n in numbers:<nl><tab>frequencies[n] += 1","out":"How do you get number frequencies in a list, then index into another list?"}
{"in":"sum(SCORES[letter] for letter in word)","out":"Add values together in for loop (Python)"}
{"in":"re.split(r'\\s+-\\s*|\\s*-\\s+', description)","out":"Search from end of string and split"}
{"in":"Recommendation.objects.filter(user__publication_set__subscriber=request.user).select_related()","out":"What's the best django way to do a query that spans several tables?"}
{"in":"for x in ['a', 'b', 'c', 'd', 'e']:<nl><tab>setattr(i, x, f(getattr(i, x)))","out":"Elegant way to modify a list of variables by reference in Python?"}
{"in":"asciiList = [n.encode(\"ascii\", \"ignore\") for n in strList]<nl>h5File.create_dataset('xxx', (len(asciiList),1),'S10', asciiList)","out":"Storing a list of strings to a HDF5 Dataset from Python"}
{"in":"name = 'My Name'<nl>skipLines = False<nl>results = []<nl>for x in chatLog:<nl><tab>if x == name:<nl><tab><tab>skipLines = True<nl><tab>elif not x[0].isdigit():<nl><tab><tab>skipLines = False<nl><nl><tab>if not skipLines:<nl><tab><tab>results.append(x)","out":"Python - Delete Conditional Lines of Chat Log File"}
{"in":"import wx<nl><nl>class Frame(wx.Frame):<nl>  def __init__(self, parent, id, title, img_path):<nl><tab>wx.Frame.__init__(self, parent, id, title, <nl><tab><tab><tab><tab><tab>  style=wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER)<nl><nl><tab>image = wx.StaticBitmap(self, wx.ID_ANY)<nl><tab>image.SetBitmap(wx.Bitmap(img_path))<nl><nl><tab>sizer = wx.BoxSizer()<nl><tab>sizer.Add(image)<nl><tab>self.SetSizerAndFit(sizer)<nl><nl><tab>self.Show(True)<nl><nl>app = wx.App()<nl>frame = Frame(None, wx.ID_ANY, 'Image', '\/path\/to\/file.png')<nl>app.MainLoop()","out":"Sizing a frame to an image in WxPython"}
{"in":"from twisted.application.service import Service<nl><nl>class MultiprocessingService(Service):<nl><tab>def startService(self):<nl><tab><tab>self.pool = multiprocessing.Pool(processes=processes)<nl><nl>MultiprocessingService().setServiceParent(application)","out":"Twisted network client with multiprocessing workers?"}
{"in":"json.dumps()","out":"Is it possible to put a python dictionary in AMQP?"}
{"in":"from collections import defaultdict<nl><nl>data = [['a', 'b', 2], ['a', 'c', 1], ['a', 'b', 1]]<nl><nl>result = collections.defaultdict(int) # new keys are auto-added and initialized as 0<nl>for item in data:<nl><tab>a, b, value = item<nl><tab>result[(a,b)] += value<nl>print result<nl># defaultdict(<type 'int'>, {('a', 'b'): 3, ('a', 'c'): 1})<nl>print dict(result)<nl># {('a', 'b'): 3, ('a', 'c'): 1}<nl>print [[a, b, total] for (a, b), total in result.items()]<nl># [['a', 'b', 3], ['a', 'c', 1]]","out":"Identify duplicates in a list of lists and sum up their last items"}
{"in":"import BeautifulSoup<nl><nl>soup = BeautifulSoup.BeautifulSoup('''<table><nl>  <tr><nl><tab><td>Names<\/td><nl><tab><td>Fred, John, Barry, <a href=\"http:\/\/www.example.com\/\">Roger<\/a>, James<\/td><nl>  <\/tr><nl><\/table>''')<nl><nl>result = []<nl>for tag in soup.table.findAll('td')[1]:<nl>  if isinstance(tag, BeautifulSoup.NavigableString):<nl><tab>for name in tag.string.split(','):<nl><tab>  name = name.strip()<nl><tab>  if name:<nl><tab><tab>result.append({ 'name': name })<nl>  else:<nl><tab>result.append({ 'name': tag.string.strip(), 'url': tag[\"href\"] })<nl><nl>print result","out":"split a comma separated list with links in with beautifulsoup"}
{"in":"def parse_file():<nl>  with open('SOMETHING.txt', 'r') as f:<nl><tab>c1 = 0<nl><tab>c2 = 0<nl><tab>for i in f:<nl><tab>  w = i.split()<nl><tab>  c1 += len(w)<nl><tab>  for j in w:<nl><tab><tab>if j.endswith('LY'):<nl><tab><tab>  c2 += 1<nl><tab>return {'Total words': c1, 'Words ending with LY': c2}","out":"Count every word in a text file python"}
{"in":"import matplotlib.pyplot as pl<nl>from matplotlib.ticker import ScalarFormatter<nl><nl>fig = pl.figure()<nl>ax = fig.add_subplot(111)<nl><nl>ax.set_xscale('log')<nl>ax.set_xticks([1,2,5,10])<nl>ax.get_xaxis().set_major_formatter(ScalarFormatter())<nl>ax.set_xlim([1., 10.])","out":"Matplotlib log scale formatting"}
{"in":"class PopenThread(threading.Thread):<nl><nl><tab>def __init__(self, port):<nl><tab><tab>threading.Thread.__init__(self)<nl><tab><tab>self.port=port<nl><nl><tab>def run(self):<nl><tab><tab>Popen('ant -Dport='+str(self.port)+ ' -Dhost='+GetIP()+ <nl><tab><tab><tab><tab>' -DhubURL=http:\/\/192.168.1.113:4444' <nl><tab><tab><tab><tab>' -Denvironment=*firefox launch-remote-control'<nl><tab><tab><tab><tab>' $HOME\/selenium-grid-1.0.8', shell=True)<nl><nl>if '__main__'==__name__:<nl><tab>PopenThread(5555).start()<nl><tab>PopenThread(5556).start()<nl><tab>PopenThread(5557).start()","out":"Launching multiple processes of shell"}
{"in":"__author__ = 'vinayjoseph'<nl><nl>from google.appengine.ext import ndb<nl>import logging<nl>from datetime import datetime<nl><nl>class Event(ndb.Model):<nl><tab>\"\"\"Models an individual event at xxx xxx \"\"\"<nl><tab>Date = ndb.DateTimeProperty()<nl><tab>Location = ndb.StringProperty()<nl><tab>Address = ndb.StringProperty()<nl><tab>Name = ndb.StringProperty()<nl><nl><nl>def get_meeting_date():<nl><tab>\"\"\"gets the next meeting date from the No SQL Schemaless Google Datastore<nl><tab>\"\"\"<nl><tab>qry = Event.query(Event.Name == 'Next Meeting Location')<nl><tab>for event in qry.fetch(1):<nl><tab><tab>logging.info(\"Meeting is on %s at %s\" % (str(event.Date), event.Address))","out":"Google App Engine ndb query"}
{"in":"class Player:<nl>  def __init__(self, name, hp):<nl><tab>self.name = name<nl><tab>self.hp = hp","out":"Changing renamed global variables from inside a function (python)"}
{"in":"def setUp(self):<nl><tab>self.test_passed = false<nl><nl>def tearDown(self):<nl><tab>if not self.test_passed:<nl><tab><tab>log()<nl><nl>def test_something(self):<nl><tab>self.assertEquals(something())<nl><tab>self.test_passed = true","out":"Performing an action whenever a unit test fails"}
{"in":"class exampleForm(forms.Form):<nl> item_price = forms.IntegerField(label = 'item price')<nl> item_quantity = forms.IntegerField(label = 'quantity')<nl> item_total = forms.IntegerField(label = 'total')<nl><nl> def clean_item_total(self):<nl>   total = self.cleaned_data.get(\"item_price\", 0)+self.cleaned_data.get(\"item_quantity\", 0)<nl>   return total","out":"Django Forms : I need to add a field that is a multiple of other fields?"}
{"in":"sel = selected()<nl><nl>for i in sel:<nl><tab>print i.ty.get()<nl><tab>i.ty.set(i.ty.get() + 1)","out":"how to get or set object's attribute from a list in maya python?"}
{"in":"re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|\\\"[^\\\"]*\\\"|\\S+',strs)","out":"Python splitting string by parentheses"}
{"in":"re.search(r'<div.*?>(*.?)<\/div>', price.get_attribute('innerHTML')).group(1)","out":"Selenium Python how to get text(html source) from <div>"}
{"in":"mylist=['I am fabulous']<nl><nl>mylist[0] = mylist[0].replace(' ', ', ')<nl><nl>print mylist","out":"How do I add a comma after each word in a list with a single long string of words in Python?"}
{"in":"#Bind listbox selection into entry field <nl>def get_list(event):<nl><tab>index = listbox1.curselection()[0]<nl><tab>seltext = listbox1.get(index)<nl><tab>enter1.delete(0, 50)<nl><tab>enter1.insert(0, seltext)<nl><nl>#Bind entry text into listbox<tab><nl>def set_list(event):<nl><tab>try:<nl><tab><tab>index = listbox1.curselection()[0]<nl><tab><tab>listbox1.delete(index)<nl><tab>except IndexError:<nl><tab><tab>index = tk.END<nl><tab>listbox1.insert(index, enter1.get())<nl><nl>listbox1 = tk.Listbox(root, width=50, height=6)<nl>listbox1.grid(row=0, column=0)<nl><nl>enter1 = tk.Entry(root, textvariable=source, width=50)<nl>enter1.insert(0, 'Click on Fetch Button, then select item in the listbox')<nl>enter1.grid(row=1, column=0)<nl><nl>enter1.bind('<Return>', set_list)<nl>enter1.bind('<Double-1>', set_list)<nl><nl>listbox1.bind('<ButtonRelease-1>', get_list)","out":"Load Listbox Selection into Entry Box with Sqlite3 Connection"}
{"in":"def convert_pdf_to_png(blob):<nl><tab>pdf = Image(blob=blob)<nl><nl><tab>pages = len(pdf.sequence)<nl><nl><tab>image = Image(<nl><tab><tab>width=pdf.width,<nl><tab><tab>height=pdf.height * pages<nl><tab>)<nl><nl><tab>for i in xrange(pages):<nl><tab><tab>image.composite(<nl><tab><tab><tab>pdf.sequence[i],<nl><tab><tab><tab>top=pdf.height * i,<nl><tab><tab><tab>left=0<nl><tab><tab>)<nl><nl><tab>return image.make_blob('png')","out":"imagemagick wand save pdf pages as images"}
{"in":"sorted_qs = sorted(chain(fqs, sqs), key=lambda obj: obj.added)","out":"sort two joined querysets - django"}
{"in":"import importlib<nl>themodule = importlib.import_module('django-google-storage')","out":"Referencing a python package installed with pip"}
{"in":"c = [item for item in a<nl><tab> if any(name in item for name in b)]","out":"Common characters within strings in 2 lists in Python"}
{"in":"hands = {} # Create a new dictionary to hold the hands.<nl>hands[\"flush\"] = make_hand(deck) # Generate some hands using your function.<nl>hands[\"straight\"] = make_hand(deck) # Generate another hand with a different name.<nl>print hands[\"flush\"] # Access the hand later.","out":"list named with a function argument in python"}
{"in":"return json.dumps({'lat': result.lat, 'lon': result.lon})","out":"Cannot JSON serialize python Appengine GeoModel subclass using simple json"}
{"in":"linecache.clearcache()","out":"Memory error while parsing files in a folder"}
{"in":"json.loads(request.POST.get('myd'), object_pairs_hook=collections.OrderedDict)","out":"How can I create an ordered dictionary from json in Python"}
{"in":"button.modify_base(gtk.STATE_NORMAL, gtk.gdk.color_parse(\"red\"))","out":"GTK: Modify bg color of a CheckButton"}
{"in":"[[\"A\", \"B\", 1.3750], [\"X\", \"Y\", 0.7097]]","out":"ValueError when attempting to parse JSON"}
{"in":"newList = [row[0] for row in data[1:]]","out":"Python: removing first item in each list of a group of lists, starting with the second list"}
{"in":"from itertools import islice<nl>with open('target.txt', 'w') as target:<nl><tab>f1, f2 = open('f1.txt'), open('f2.txt')<nl><tab>while True:<nl><tab><tab>ls1 = islice(f1, 32)<nl><tab><tab>if not ls1:<nl><tab><tab><tab># will not happen in this case<nl><tab><tab><tab>target.write('<nl>' + f2.read())<nl><tab><tab><tab>break<nl><tab><tab>ls2 = islice(f2, 64)<nl><tab><tab>if not ls2:<nl><tab><tab><tab>target.write('<nl>' + f1.read())<nl><tab><tab><tab>break<nl><tab><tab>target.write('<nl>'.join('<nl>'.join(ls) for ls in [ls1, ls2]))<nl><tab>f1.close()<nl><tab>f2.close()","out":"how to sequentially read two txt files and write into a new file in python?"}
{"in":"df[(1.5 <= df.two) & (df.two <= 3.5)]","out":"pandas hpw to perform comparison on column"}
{"in":"from bs4 import BeautifulSoup<nl><nl>html = \"\"\"<tr> <stuff1> <tr><stuff2> <\/tr> <\/tr>\"\"\"<nl>soup =BeautifulSoup(html)<nl><nl>print(soup.find_all(\"tr\"))","out":"using re to find nested results in strings"}
{"in":"# XXX for whatever reasons, creating the first instance of a callback<nl># function is needed for the unittests on Win64 to succeed.  This MAY<nl># be a compiler bug, since the problem occurs only when _ctypes is<nl># compiled with the MS SDK compiler.  Or an uninitialized variable?<nl>CFUNCTYPE(c_int)(lambda: None)","out":"Occasional ctypes error importing numpy from mod_wsgi django app"}
{"in":"django.conf.settings","out":"In Django, how can I reuse settings.py in a new app outside of the project"}
{"in":"import json<nl>payload={'text': 'bi ba buzemann!',<nl><tab><tab> 'nouns': ['streetlight', 'situation'],<nl><tab><tab> 'states': ['solid', 'fluid']<nl><tab><tab>}<nl>requests.post(url, data=json.dumps(payload))","out":"http.server: decoding POST request to JSON"}
{"in":"import matplotlib.pyplot as plt<nl><nl>for i, group in df.groupby('ModelID'):<nl><tab>plt.figure()<nl><tab>group.plot(x='saleDate', y='MeanToDate', title=str(i))","out":"Plotting a Pandas DataSeries.GroupBy"}
{"in":"from datetime import datetime<nl>today = datetime.today()<nl>b.utcoffset(today) == c.utcoffset(today)","out":"How to compare two timezones in python?"}
{"in":"my_datetime.strftime(\"%B %d, %Y\")","out":"How do I turn a python datetime into a string, with readable format date?"}
{"in":"fig, ax = plt.subplots(1,2, figsize=(10,4))<nl><nl>x = [2,4,3,6,1,7]<nl>y = [1,2,3,4,5,6]<nl><nl>ax[0].plot(x, y)<nl><nl>ax[1].plot(np.arange(len(x)), y)<nl>ax[1].set_xticklabels(x)","out":"How to make X axis in matplotlib\/pylab to NOT sort automatically the values?"}
{"in":"in_str  = \"1, 2, 3, 4\"<nl>listed = [int(x) for x in in_str.split(',')]","out":"Putting integers in lists in python"}
{"in":"if request.method == \"POST\":<nl><tab>image = request.files['myfile'] #myfile is name of input tag<nl><tab>config ={<nl><tab><tab><tab>'album':album,<nl><tab><tab><tab>'name':'Catastrophe!',<nl><tab><tab><tab>'title':'Catastrophe!'<nl><tab>}<nl><tab>print \"uploading image...\"<nl><tab>filename = secure_filename(image.filename)<nl><tab>file.save(os.path.join('\/home\/suraj\/Pictures', filename))<nl><tab>print os.path.realpath(image.filename)","out":"upload image using image Path in flask"}
{"in":"import web<nl><nl>class MyApplication(web.application):<nl><tab>def run(self, port=8080, *middleware):<nl><tab><tab>func = self.wsgifunc(*middleware)<nl><tab><tab>return web.httpserver.runsimple(func, ('0.0.0.0', port))<nl><nl>urls = (<nl>   '\/(.*)', 'hello'<nl>)<nl><nl>class hello:<nl><tab>def GET(self, name):<nl><tab><tab>if not name:<nl><tab><tab><tab>name = 'World'<nl><tab><tab>return 'Hello, ' + name + '!'<nl><nl>if __name__ == \"__main__\":<nl><tab>app = MyApplication(urls, globals())<nl><tab>app.run(port=8888)","out":"How to deploy a simple python webserver in a right way?"}
{"in":"def save(self):<nl><tab>from django.template.defaultfilters import slugify<nl><nl><tab>if not self.slug:<nl><tab><tab>self.slug = slugify(self.title)<nl><nl><tab>super(Your_Model_Name,self).save()","out":"Is there a way to define which fields in the model are editable in the admin app?"}
{"in":"sqlite3.Row","out":"How do I select a column by its name? (Python & SQLite3)"}
{"in":"parser.add_argument('path', nargs=1, help='File path to process')","out":"Stop argparse from globbing filepath"}
{"in":"xarr, yarr = [], []<nl>for i in range(1,n):<nl><tab>dx = random.uniform(-2,2)<nl><tab>x = x+dx<nl><tab>y += ((v**2 - dx**2)**(0.5))*(random.randint(-1,1))<nl><tab>xarr.append(x)<nl><tab>yarr.append(y)<nl>pl.plot(xarr,yarr)<nl><nl>pl.show()","out":"Creating plots from 2-D values generated in a for loop in Python"}
{"in":"What is your name?.replace(\"?\",\"\") #this is the most clear<nl>#or<nl>filter(lambda x:x!= \"?\",\"What is your name?\")<nl>#or<nl>\"\".join(x for x in \"What is your name?\" if x != \"?\")<nl>#or<nl>\"What is your name?\".translate(None,\"?\") #this is my favorite","out":"Removing Question marks from string"}
{"in":"d ={'idx1':{'tokenA': 0.1,<nl><tab><tab><tab>'tokenB': 1.3,<nl><tab><tab><tab>'tokenD': 2.3},<nl><tab>  'idx2':{'tokenC': 0.9,<nl><tab><tab><tab>'tokenE': 3.4},<nl><tab>  'idxn':{'tokenA': 0.3,<nl><tab><tab><tab>'tokenF': 0.4,<nl><tab><tab><tab>'tokenZ': 7.4}<nl><tab>  }<nl><nl>from collections import Counter<nl><nl>token_sums   = sum((Counter(v<tab>   ) for k,v in d.iteritems()), Counter())<nl>token_counts = sum((Counter(v.keys()) for k,v in d.iteritems()), Counter())<nl>token_mean   = {k:token_sums[k]\/token_counts[k] for k in token_sums}<nl>print token_mean","out":"How to get average value from a dict like below?"}
{"in":"\"This pure Python MySQL client provides a DB-API to a MySQL database by talking directly to the server via the binary client\/server protocol.\"<nl><nl>import pymysql<nl>conn = pymysql.connect(host='127.0.0.1', unix_socket='\/tmp\/mysql.sock', user='root', passwd=None, db='mysql')<nl>cur = conn.cursor()<nl>cur.execute(\"SELECT Host,User FROM user\")<nl>for response in cur:<nl><tab>print(response)<nl>cur.close()<nl>conn.close()","out":"Python 3.3 Mysql Connector"}
{"in":"#! \/usr\/bin\/env python<nl>import pandas as pd<nl>import matplotlib.pyplot as plt<nl>data = pd.read_fwf('myfile.log',header=None,names=['time','amount'],widths=[27,5])<nl>data.time = pd.to_datetime(data['time'], format='%Y-%m-%d %H:%M:%S.%f')<nl>data.set_index(['time'],inplace=True)<nl>data.plot()<nl><nl>#OR <nl>plt.plot(data.index, data.amount)","out":"Plot pandas dates in matplotlib"}
{"in":"import subprocess<nl>import wx<nl><nl>def main():<nl><tab>p = subprocess.Popen(['ls', '-a'], stdout = subprocess.PIPE)<nl><tab>text = p.stdout.readlines()<nl><tab>text = \"\".join(text)<nl><nl><tab>wx.MessageBox(\"file names:<nl>%s\" % text, \"info\")<nl><nl>if __name__ == '__main__':<nl><tab>app = wx.PySimpleApp()<nl><tab>main()","out":"pass terminal output to GUI using wxpython"}
{"in":"import netCDF4<nl>dset = netCDF4.Dataset('test.nc')<nl>dset.variables","out":"programatically list all variables of a netCDF file using netCDF4 and python"}
{"in":"myvars = {}<nl><nl># iterate through all the lines<nl>for line in open('SampleText.txt').readlines():<nl><tab># skip this line if it doesn't look like an assignment<nl><tab>if not '=' in line: continue<nl><nl><tab># split it into left and right pieces<nl><tab>left, right = line.split('=', 1)<nl><nl><tab># keep it around in a dictionary<nl><tab>myvars[left.strip()] = right.strip()<nl><nl># now you can query it to get stuff:<nl>myvars['efgh']   # returns \/home\/user\/targetfile1.txt","out":"Python: Get file path from a text file"}
{"in":"import re<nl>lookup = {re.search('([A-Z][A-Za-z_]*$)', cls.__name__).group(1): cls for cls in BaseCls.__subclasses__()}<nl># {'A': <class '__main__.ChildClsA'>, 'B': <class '__main__.ClildClsB'>}<nl><nl>input_str = raw_input('Please enter one of {}:'.format(', '.join(lookup)))<nl>new_class = lookup[input_str]()","out":"How to decide creating a child class without using 'if' statement"}
{"in":"from sqlalchemy import func, desc<nl>session.query(<nl><tab>func.count(tablename.id).label('qty')<nl><tab>).group_by(tablename.category<nl><tab>).order_by(desc('qty'))","out":"Finding most frequent values in column of array in SQL Alchemy"}
{"in":"import datetime<nl>date = (datetime.date.today() - datetime.timedelta(1)).strftime(\"%d-%b-%Y\")<nl>result, data = mail.uid('search', None, '(SENTSINCE {date})'.format(date=date))","out":"Searching through IMAP folder for multiple criterion (python)"}
{"in":"try:<nl><tab>dico[\"title\"] = unicode(xml.Items.Item.ItemAttributes.Title)<nl>except AttributeError:<nl><tab>dico[\"title\"] = ''","out":"access all xml value in python, where there's several that have the same name"}
{"in":"default_app_config = 'apps.cliente.config.ClienteConfig'","out":"Broken models imports in Django when specifying app verbose_name"}
{"in":"totalData = [ [['Test1',5,2,1,8],['Test2',10,4,3,2]],<nl><tab><tab><tab><tab>  [['Test1',2,4,5,1],['Test2',4,6,10,3]] ]<nl>for t in range(len(totalData[0])): #tests<nl><tab>result = [totalData[0][t][0],]<nl><tab>for i in range(1,len(totalData[0][0])): #numbers<nl><tab><tab>sum = 0.0<nl><tab><tab>for j in range(len(totalData)):<nl><tab><tab><tab>sum += totalData[j][t][i]<nl><tab><tab>sum \/= len(totalData)<nl><tab><tab>result.append(sum)<nl><tab>print result","out":"Averaging values in a list of a list of a list in Python"}
{"in":"# In models.py, add as_dict() method to all models<nl># Example for class Book<nl>def as_dict(self):<nl><tab>d = {<nl><tab><tab>\"id\": self.id,<nl><tab><tab>\"publisher\": self.publisher.as_dict(), # avoid this<nl><tab><tab>\"title\": self.title,<tab><tab><nl><tab><tab>\"publication_date\": str(self.publication_date),  <nl><tab><tab>\"publisher\": self.publisher,  <nl><tab><tab>\"authors\": [author.as_dict() for author in self.authors.all()] # avoid this<nl><tab>}<nl><nl># then in views.py<nl>def getAllBooks(request):<nl><tab>book_list = [book.as_dict() for book in Book.objects.all().select_related()]<nl><tab>return HttpResponse(simplejson.dumps(book_list), <nl><tab><tab><tab><tab><tab><tab>content_type=\"application\/json\")","out":"Is there a better way to convert a Model to a well formatted JSON string?"}
{"in":"data.sort('COL1', inplace=True)","out":"matplotlib: data points connected in wrong order in line graph"}
{"in":"class Client(Person):<nl>   favorite_stores = models.ManyToManyField('store.Store')<nl>   favorite_vendors = models.ManyToManyField(Vendor)","out":"Django manytomany relationship over 2 apps"}
{"in":"dset.attrs[\"Name\"] = \"My Dataset\"","out":"Dictionary-like efficient storing of scipy\/numpy arrays"}
{"in":"print '.{0,3}'.join(re.escape(part) for part in s.split('?')) + '.*'","out":"python+postgresql: Convert string literal to regex"}
{"in":"colormap = PythonMagick.Image(\"colors256.png\")<nl>original.map(colormap)","out":"(Python) Set a specific palette in an image using PIL or PyPNG"}
{"in":"for k in a.keys():<nl><tab> a[k] = a[k] * 2","out":"Python: How to multiply values of a Counter object?"}
{"in":"def sc1(self, *argv):<nl><tab><tab>self.a = float(argv[0]) <nl><tab><tab># rather than re-request the value resulting in more function calls<nl><tab><tab># i'm using the value that is passed in during the callback<nl><tab><tab>if not hasattr(self, \"a_prev\"): # this is a hacky method to <nl><tab><tab><tab>self.a_prev = 1<tab><tab><tab> # remember the previous value<nl><nl><tab><tab>b_diff = self.scale_2.get() - self.a_prev <nl><tab><tab>c_diff = self.scale_3.get() - self.a_prev<nl><tab><tab># calculate the differences to the previous value<nl><nl><tab><tab>self.scale_2.set(self.a+b_diff) # set the scales<nl><tab><tab>self.scale_3.set(self.a+c_diff)<nl><tab><tab>self.a_prev = self.a # remember current value as the new previous","out":"one scale controls other scale values in tkinter python3"}
{"in":"#!\/usr\/bin\/env python","out":"How to profile PyCuda code with the Visual Profiler?"}
{"in":"import difflib","out":"Calculation of Set A - Set B in Python"}
{"in":"from wand.image import Image<nl>from wand.display import display<nl>from wand.drawing import Drawing<nl>from wand.color import Color<nl>img=Image(filename='..\/..\/rmli_fr\/rmli_fr.ave.ras')<nl><nl>color = Color('red')<nl>draw = Drawing()<nl>draw.fill_color = color<nl>for i in pts_comp:<nl><tab>draw.line((i[0], i[1]), (i[0], i[1]))<nl><tab>draw(img)<nl><nl>img.save(filename='rmli.ras')","out":"Wand (imagemagick) draw colored points on top of greyscale sun raster image"}
{"in":"import os<nl>import sys<nl>import shutil<nl><nl>source = raw_input(\"Enter source file path: \")<nl>dest = raw_input(\"Enter destination path: \")<nl><nl>if not os.path.isfile(source):<nl><tab>print \"Source file %s does not exist.\" % source<nl><tab>sys.exit(3)<nl><nl>try:<nl><tab>shutil.copy(source, dest)<nl>except IOError, e:<nl><tab>print \"Could not copy file %s to destination %s\" % (source, dest)<nl><tab>print e<nl><tab>sys.exit(3)","out":"How to copy a file in Python?"}
{"in":"import numpy as np<nl>from scipy.io import wavfile<nl><nl>fs = 44.1e3<nl>t = np.arange(0, 1.0, 1.0\/fs)<nl><nl>f1 = 440<nl>f2 = 600<nl><nl>x = 0.5*np.sin(2*np.pi*f1*t) + 0.5*np.sin(2*np.pi*f2*t)<nl><nl>fname = 'output.wav'<nl>wavfile.write( fname, fs, x )<nl><nl><nl>fs, data = wavfile.read( fname )<nl><nl>print fs, data[:10]","out":"looking for reading audio wave values in python"}
{"in":"U = np.random.rand(3,24,5) <nl>R = np.eye(3,3)<nl>result = np.einsum( \"ijk,il\", U,R )","out":"numpy: broadcast matrix multiply accross array"}
{"in":"#!\/usr\/bin\/python<nl>from PIL import Image<nl>import os, sys<nl><nl>path = \"\/root\/Desktop\/python\/images\/\"<nl>dirs = os.listdir( path )<nl><nl>def resize():<nl><tab>for item in dirs:<nl><tab><tab>if os.path.isfile(path+item):<nl><tab><tab><tab>im = Image.open(path+item)<nl><tab><tab><tab>f, e = os.path.splitext(path+item)<nl><tab><tab><tab>imResize = im.resize((200,200), Image.ANTIALIAS)<nl><tab><tab><tab>imResize.save(f + ' resized.jpg', 'JPEG', quality=90)<nl><nl>resize()","out":"Python\/PIL Resize all images in a folder"}
{"in":"sorted(lst, reverse=True)","out":"Python how to sort this list?"}
{"in":"R = (R - A) \/ (1 - A)<nl>G = (G - A) \/ (1 - A)<nl>B = (B - A) \/ (1 - A)","out":"My sprite has a weird white pixelated border around it"}
{"in":"print \"Enter 100 words:\"<nl>words = [] # create a list<nl>for x in range(100): # loop through all the numbers from 0 to 100<nl>  words.append(raw_input(\"Word {}\".format(x + 1))) # ask for the word,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>   # then add it to the list","out":"how to input many times in python?"}
{"in":"def __getattr__(self, name):<nl><tab>if hasattr(self.st, name):<nl><tab><tab>return getattr(self.st, name)<nl><tab>else:<nl><tab><tab>raise AttributeError","out":"Python 2: export class attributes from a local variable to the class itself"}
{"in":"def zero_value(x):<nl><tab>if x is None:<nl><tab><tab>return None<nl><tab>return type(x)()","out":"Getting the \"zero value\" corresponding to a given value"}
{"in":"gws = conn.get_all_internet_gateways(filters={'attachment.vpc-id': vpc.id})","out":"AWS boto: how to get a list of all Internet gateways attached to a VPC"}
{"in":"ip_string = \",\".join(IPsToPING)<nl>subprocess.call('Fping.exe -H %s ...' % ip_string)","out":"How to strip an individual list item (string)?"}
{"in":"#!\/usr\/bin\/env python<nl><nl>d = {<nl><tab>'key1' : ['A', 'B', 'C'], <nl><tab>'key2' : ['B', 'A', 'G'], <nl><tab>'key3' : ['Z', 'H', 'I']<nl>}<nl><nl>l = ['A', 'A', 'B', 'D']<nl><nl>uniq_l = set(l) # you don't need to check duplicates twice<nl><nl>for key, value in d.items():<nl><tab>if value[0] in uniq_l:<nl><tab><tab>print \"Match\", key, value<nl><nl># Output:<nl># Match key2 ['B', 'A', 'G']<nl># Match key1 ['A', 'B', 'C']","out":"Perform actions on dictionary values that match items in a list?"}
{"in":"Location.objects.annotate(encounter_count=Count('subject__encounter'))","out":"django product of annotate"}
{"in":"inrels = graph.cypher.query('START strt=node({mynode}) \\<nl><tab><tab><tab><tab><tab><tab><tab>MATCH strt<-[r:follows]-neighbor \\<nl><tab><tab><tab><tab><tab><tab><tab>WHERE neighbor.attr = {myattr} \\<nl><tab><tab><tab><tab><tab><tab><tab>RETURN r', {'mynode': self.eid, 'myattr': someattr})<nl><nl>firstrel = inrel.next()","out":"How to enter a neo4j Cypher query using Bulbs?"}
{"in":"from rx.executors import ThreadPoolExecutor<nl>from rx.futures import Future<nl><nl>with ThreadPoolExecutor(10) as tp:<nl><tab>futures = [tp.submit(foo, i) for i in range(10)] # list of futures<nl><tab>future_all = Future.all(futures) # combines into single future with list of results<nl><tab>future_all_sum = future_all.map(sum) # maps result list to sum of elements<nl><tab>print(future_all_sum.result(timeout=10))","out":"I would like to make\/have a scala like 'future' async API for python"}
{"in":"lines = tuple(open('\/var\/log\/fail2ban.log', 'r'))<nl>seen = set()<tab><nl>for item in lines:<nl>  item = item.strip('<nl>')<nl>  if \"fail2ban.actions:\" in item and \"[postfix]\" in item and \"Ban\" in item:<nl><tab>item = item.split(' ')<nl><tab>if item[6] not in seen:<nl><tab>  seen.add(item[6])<nl><tab>  print item","out":"Sorting uniques in multiple lists"}
{"in":"lines = []<nl><nl>with open('file.txt', 'r') as f:<nl><tab>lines = f.readlines()<nl><nl>with open('file.txt', 'w') as f:<nl><tab>f.writelines(lines[:1] + lines[2:]) # This will skip the second line","out":"Removing the second line from a text file"}
{"in":"import django.utils.translation.trans_real as trans<nl>from django.utils.thread_support import currentThread<nl><nl>def isactive():<nl>  return currentThread() in trans._active","out":"Django: How to detect if translation is activated?"}
{"in":"aa1 = [0,1,1,2,3,3,4,4,5,9]<nl>aa2 = [0,1,3,3,4,4,4,4,5,6,7,9]<nl>bins = [0,3,9]<nl>height = [np.histogram( xs, bins=bins)[0] for xs in [aa1, aa2]]<nl>left, n = np.arange(len(bins)-1), len(height)<nl><nl>ax = plt.subplot(111)<nl>color_cycle = ax._get_lines.color_cycle<nl><nl>for j, h in enumerate(height):<nl><tab>ax.bar(left + j \/ n, h, width=1.0\/n, color=next(color_cycle))<nl><nl>ax.set_xticks(np.arange(0, len(bins)))<nl>ax.set_xticklabels(map(str, bins))","out":"How to draw histogram with same bins width for unequally spaced bins in matplotlib"}
{"in":"p = re.compile(r'([a-zA-Z0-9\\-\\+\\.]+)\\ ([0-9][0-9a-zA-Z\\:\\.\\-]+)')<nl>iterator = p.finditer(\"amd64 build of dvdrip software 1:0.98.10-0.2svn20090909 in archive\")<nl>for match in iterator:<nl><tab>print match.group()<nl># Prints: software 1:0.98.10-0.2svn20090909","out":"Creating Regular Expressions in Python"}
{"in":"def get_img(html):<nl><tab>soup = BeautifulSoup(html)<nl><tab>img_box = []<nl><tab>imgs = soup.find_all('div', class_= 'pthumb')<nl><nl><tab>for img in imgs:<nl><tab><tab>img_box.append(get_domain(BASE_URL) + img.img['src'])<nl><nl><tab>my_path = '\/home\/<username>\/Desktop'  # use whatever path you like<nl><tab>for img in img_box:<nl><tab><tab>urllib.request.urlretrieve(img, os.path.join(my_path, os.path.basename(img)))","out":"Save image from url to special folder"}
{"in":"import sys<nl>import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl>testData = np.array([[0,0], [0.1, 0], [0, 0.3], [-0.4, 0], [0, -0.5]])<nl>fig, ax = plt.subplots()<nl>coll = ax.scatter(testData[:,0], testData[:,1], color=[\"blue\"]*len(testData), picker = 5, s=[50]*len(testData))<nl>plt.grid(True)<nl>plt.axis([-0.5, 0.5, -0.5, 0.5])<nl><nl>def on_pick(event):<nl><tab>print testData[event.ind], \"clicked\"<nl><tab>coll._facecolors[event.ind,:] = (1, 0, 0, 1)<nl><tab>coll._edgecolors[event.ind,:] = (1, 0, 0, 1)<nl><tab>fig.canvas.draw()<nl><nl>fig.canvas.mpl_connect('pick_event', on_pick)<nl>plt.show()","out":"Python, Matplotlib, Scatter plot, Change color on the clicked point"}
{"in":"for key,group in itertools.groupby(dirtup2,operator.itemgetter(2)):<nl><tab>newlist=sorted(group,key=operator.itemgetter(1),reverse=True)<nl><tab>tuple_with_max=newlist[0]<nl><tab>print tuple_with_max","out":"Extract the tuple with the largest item from sublist (find most recent report in directory)"}
{"in":"cmd = r\"\"\"c:\\temp\\osmconvert.exe c:\\temp\\770.osc.gz -b=1,1,3,3 -o=c:\\temp\\extract.o5m\"\"\"","out":"Using Osmconvert with Python"}
{"in":"from pages.view_consignments import ViewConsignmentsPage<nl><nl>class AddConsignmentPage(BasePage):<nl><nl><tab>def __init__(self, driver):<nl><tab><tab>super(AddConsignmentPage, self).__init__(driver, self._title)<nl><tab><tab>self._title_uuid = get_random_uuid(7)<nl><tab><tab>ViewConsignmentsPage._title_uuid = self._title_uuid","out":"Generate random value once for every issue Python"}
{"in":"orig_arr = ma.array([[11,12],[21,22]])<nl>orig_arr[1,:] = ma.masked<nl><nl>print orig_arr<nl>## Prints: [[11 12]<nl>##<tab><tab>  [-- --]]<nl><nl>view_arr = orig_arr[1,:]<nl>print view_arr<nl>## Prints: [-- --]<nl><nl>view_arr.mask=False # or [True, False] <nl><nl><nl>view_arr[:] = [31,32] <nl>print view_arr<nl>## Prints: [31 32] #or [-- 32]<nl><nl>print orig_arr<nl>## Prints: [[11 12]<nl>##<tab><tab>  [31 32]] # or [-- 32]","out":"How do I keep the mask when slicing a masked array in Numpy?"}
{"in":"os.path.realpath()","out":"How to find the filename of a script being run when it is executed from a symlink on linux"}
{"in":"import os<nl>for root, dirs, files in os.walk('path\/to\/local\/dir'):<nl><tab>for fname in files:<nl><tab><tab>full_fname = os.path.join(root, fname)<nl><tab><tab>ftp.storbinary('STOR remote\/dir' + fname, open(full_fname, 'rb'))","out":"Python ftplib - uploading multiple files?"}
{"in":"from urlparse import urlparse<nl>url = \"http:\/\/stackoverflow.com\/questions\/34446468\/looks-like-a-valid-python-syntax-to-me-but-gives-me-invalid-error-using-in-djang\"<nl>long_url = urlparse(url).netloc if url else \"be kind to one another\"<nl>long_url.split('.', 1)[1] if long_url.split('.', 1)[0] == 'www' else long_url","out":"looks like a valid python syntax to me but gives me invalid error using in django"}
{"in":"scipy.spatial.distance.euclidean","out":"Multidimensional Eucledian Distance in Python"}
{"in":"import smtplib<nl><nl>def sendmail(sender, recipient, subject, body, server=\"localhost\"):<nl><tab>\"Sends an e-mail to the specified recipient.\"<nl><nl><tab>body = \"<html><head><\/head><body><pre>\" + body + \"<\/pre><\/body><\/html>\"<nl><nl><tab>headers = [\"From: \" + sender,<nl><tab><tab><tab>   \"Subject: \" + subject,<nl><tab><tab><tab>   \"To: \" + recipient,<nl><tab><tab><tab>   \"MIME-Version: 1.0\",<nl><tab><tab><tab>   \"Content-Type: text\/html\"]<nl><tab>headers = \"\\r<nl>\".join(headers)<nl><nl><tab>session = smtplib.SMTP(server)<nl><tab>session.sendmail(sender, recipient, headers + \"\\r<nl>\\r<nl>\" + body)<tab><tab><tab><tab><nl><tab>session.quit()","out":"Sending email from gmail using Python"}
{"in":"for i, (word, frequency) in enumerate(top_words, start=1):<nl><tab>print(\"%s %d %d\" % (word, i, frequency))","out":"How to print out the rank number of a word?"}
{"in":"import matplotlib<nl>matplotlib.use('TKAgg')","out":"Close pyplot figure using the keyboard on Mac OS X"}
{"in":"#!\/usr\/bin\/env python<nl># -*- coding: utf-8 -*-<nl><nl><nl>import cherrypy<nl><nl><nl>config = {<nl>  'global' : {<nl><tab>'server.socket_host' : '127.0.0.1',<nl><tab>'server.socket_port' : 8080,<nl><tab>'server.thread_pool' : 4<nl>  }<nl>}<nl><nl><nl>class App:<nl><nl>  @cherrypy.expose<nl>  def default(self, *args, **kwargs):<nl><tab>return u'It is me again at {0} with {1}'.format(args, kwargs)<nl><nl><nl>if __name__ == '__main__':<nl>  cherrypy.quickstart(App(), '\/', config)","out":"cherrypy catch all route"}
{"in":"logging.info('date={}'.format(date))","out":"Python: Logging TypeError: not all arguments converted during string formatting"}
{"in":"w = Canvas(root)<nl>w.pack()<nl>w.create_image(0, 0, image=photo, anchor=\"nw\")","out":"Python, tuple index out of range"}
{"in":"def get_detail(self, slug):<nl><tab>qr = v1_api.canonical_resource_for('question')<nl><tab>try:<nl><tab><tab>question = qr.cached_obj_get(slug=slug)<nl><tab>except Question.DoesNotExist:<nl><tab><tab>raise Http404<nl><nl><tab>bundle = qr.full_dehydrate(qr.build_bundle(obj=question))<nl><nl><tab># create response<nl><tab>desired_format = qr.determine_format(self.request)<nl><tab>serialized = qr.serialize(self.request, bundle, desired_format)<nl><tab>return serialized","out":"Tastypie building data bundle from canonical_resource_for('object')"}
{"in":"class LogWaitLogInOrder(pipeline.Pipeline):<nl><nl>  def run(self, message1, message2, delay):<nl><tab>with pipeline.InOrder():<nl><tab>  yield LogMessage(message1)<nl><tab>  yield Delay(seconds=delay)<nl><tab>  yield LogMessage(message2)<nl><nl><tab>yield LogMessage('This would happen immediately on run')","out":"How to execute tasks in (FIFO) order using Google App Engine Task Queues?"}
{"in":"import pylab<nl>import matplotlib.colors<nl>import numpy<nl><nl>im = pylab.imread('lena.png').sum(axis=2) # make grayscale<nl>pylab.imshow(im, cmap=pylab.cm.gray)<nl>pylab.title('orig')<nl>imvals = numpy.sort(im.flatten())<nl>lo = imvals[0]<nl>hi = imvals[-1]<nl>steps = (imvals[::len(imvals)\/256] - lo) \/ (hi - lo)<nl>num_steps = float(len(steps))<nl>interps = [(s, idx\/num_steps, idx\/num_steps) for idx, s in enumerate(steps)]<nl>interps.append((1, 1, 1))<nl>cdict = {'red' : interps,<nl><tab><tab> 'green' : interps,<nl><tab><tab> 'blue' : interps}<nl>histeq_cmap = matplotlib.colors.LinearSegmentedColormap('HistEq', cdict)<nl>pylab.figure()<nl>pylab.imshow(im, cmap=histeq_cmap)<nl>pylab.title('histeq')<nl>pylab.show()","out":"Histogram Equalization of matplotlib color tables"}
{"in":"def f(x):<nl><tab>return x+1<nl><nl>var1 = 5<nl>var1 = f(var1)<nl># var1 is now 6","out":"python: can i set a variable to equal a function of itself?"}
{"in":"config.add_route('simple_example', '\/simple_example')<nl>config.add_route('test', '\/test')<nl><nl>@view_config(route_name='test', renderer='templates\/main.html')<nl>def test(request):<nl><tab>partial = [\"Custom\/test.html\"]<nl><tab>return dict(partial=partial)","out":"No 'iDisplayStart' key in GET request dictionary"}
{"in":"POS_SERVO = struct.pack('<h', int(posicion))","out":"Python-How to add a struct.pack value to an integer that would be sent through the serial port"}
{"in":"from datetime import datetime, timedelta<nl><nl>posts = Post.objects.filter(author=member.user, xyz=xzy_id, pub_date__gte=datetime.now()-timedelta(days=7))","out":"Creating QuerySet object from last 7 days"}
{"in":"class BaseAttrEnforcer(type):<nl><tab>def __init__(cls, name, bases, d):<nl><tab><tab>if 'loglevel' not in d:<nl><tab><tab><tab>raise ValueError(\"Class %s doesn't define loglevel attribute\" % name)<nl><tab><tab>type.__init__(cls, name, bases, d)<nl><nl>class Base(object):<nl><tab>__metaclass__ = BaseAttrEnforcer<nl><tab>loglevel = None<nl><nl>class d1(Base):<nl><tab>logfile = \"d1.log\"<nl><tab>loglevel = \"debug\"<nl><nl>class d2(Base):<nl><tab>logfile = \"d2.log\"<nl><tab>loglevel = \"info\"<nl><nl>class d3(Base):<nl><tab>logfile = \"d3.log\"<nl><tab># I should fail","out":"different values for class variables in each subclass in python"}
{"in":"title_count = Counter(titles).most_common()<nl>for name,count in title_count:<nl><tab>print('{} was found {} times'.format(name, count))","out":"Extracting frequency from list"}
{"in":"import urllib<nl>urllib.urlretrieve(\"http:\/\/www.example.com\/songs\/mp3.mp3\", \"\/home\/download\/mp3.mp3\")","out":"How to Download Files using Python?"}
{"in":"fp = codecs.open('outputfile6.txt', encoding='utf-8')<nl>lines1 = fp.readlines()<nl>fp.close()<nl>fb = codecs.open('outputfile6.txt', 'w')<nl>for j in range(0,len(lines1)):<nl><tab>if j>end:<nl><tab><tab>fb.write(lines1[j].encode('UTF-8'))<nl><nl>fb.close()","out":"Write to a file from another file and delete line from file"}
{"in":"authors_books = db.Table(<nl><tab>'authors_books',<nl><tab>db.Column('id', UUID(as_uuid=True), primary_key=True, default=lambda: uuid.uuid4().hex),<nl><tab>db.Column('author_id', UUID(as_uuid=True), db.ForeignKey('authors.id')),<nl><tab>db.Column('book_id', UUID(as_uuid=True), db.ForeignKey('books.id')),<nl>)","out":"Flask-Sqlalchemy, Primary key for secondary table in many-to-many relationship"}
{"in":"from sqlalchemy.sql import between<nl>import datetime<nl># [all other relevant imports]<nl><nl>td = datetime.timedelta(seconds=2)<nl>t1_entry = session.query(table_1).filter(table_1.name == 'the_name').first()<nl>if t1_entry is not None:<nl> tmin = t1_entry.date - td<nl> tmax = t1_entry.date + td<nl> t2_entry = session.query(table_2).filter(between(table_2.date, tmin, tmax)).first()<nl> return (t1_entry, t2_entry)<nl>return None","out":"Filter objects within two seconds of one another using SQLAlchemy"}
{"in":"import base64<nl>import numpy as np<nl><nl>t = np.arange(25, dtype=np.float64)<nl>s = base64.b64encode(t)<nl>r = base64.decodestring(s)<nl>q = np.frombuffer(r, dtype=np.float64)<nl><nl>print(np.allclose(q, t))<nl># True","out":"Numpy Array to base64 and back to Numpy Array - Python"}
{"in":"import random<nl><nl>def shuffled(seq):<nl>  copy = list(seq)<nl>  random.shuffle(copy)<nl>  return copy<nl><nl>def rand_repeat(seq):<nl>  while True:<nl><tab>for el in shuffled(seq):<nl><tab>  yield el<nl><nl>list1 = ['tom', 'mary', 'frank', 'joe', 'john', 'barry']<nl>list2 = [1, 2, 3, 4]<nl><nl>print zip(shuffled(list1), rand_repeat(list2))","out":"Randomize 2 lists for a for loop"}
{"in":"def print_message(message):<nl><tab>print \"<nl>\"<nl><tab>print \"-\"*10<nl><tab>print message<nl><tab>print \"-\"*10<nl><tab>print \"<nl>\"<nl><nl>print_message('This is a test of the %s system' % codes[0])<nl>print_message('This is not a test of the %s system and all is good'% codes[1])","out":"In python how do I assign a series of commands to one variable?"}
{"in":"for line in infline:<nl><tab> #re.sub(\"pattern\",\"replacement\", \"string\")<nl><tab> line =re.sub(r\"([a-zA-Z]+:[0-9\\.]+)\",r\"\\1 STRING\", line)<nl><tab> print line","out":"How can you employ multi-digit wildcards in python to parse a string using varying patterns?"}
{"in":"def memsetObject(bufferObject):<nl><tab>\"Note, dangerous\"<nl><tab>import ctypes<nl><tab>data = ctypes.POINTER(ctypes.c_char)()<nl><tab>size = ctypes.c_int()  # Note, int only valid for python 2.5<nl><tab>ctypes.pythonapi.PyObject_AsCharBuffer(ctypes.py_object(bufferObject), ctypes.pointer(data), ctypes.pointer(size))<nl><tab>ctypes.memset(data, 0, size.value)<nl><nl>testObject = \"sneakyctypes\"<nl>memsetObject(testObject)<nl>print repr(testObject)<nl># '\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'","out":"How to do a memset with Python buffer object?"}
{"in":"L = [(x, y[0]) for x, y in L]","out":"List Changing In Python"}
{"in":"from mod_python import Cookie<nl>ID = Cookie.get_cookie(req, 'ID')<nl>if ID:<nl><tab>ID.expires = time.time() + 60*120<nl><tab>Cookie.add_cookie(req, ID)<nl><tab>ID = ID.value<nl>else:<nl><tab>ID = None","out":"set post data python apache"}
{"in":"print(\"UDP target IP:\", UDP_IP)<nl>print(\"UDP target port:\", UDP_PORT)<nl>print(\"message:\", MESSAGE)<nl><nl>sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # UDP<nl>sock.sendto(bytes(MESSAGE, \"utf-8\"), (UDP_IP, UDP_PORT))","out":"Python send UDP packet"}
{"in":"url.split('\/')[-1]","out":"Extract a part of URL - python"}
{"in":"state_obj = State.objects.get(name=\"Alaska\")<nl>province_obj = state_obj.provinces({\"name\": \"Juneau\"})<nl>for city in province_obj.cities:<nl><tab>if city.name == \"Test_City\" and city.population == 10000:<nl><tab><tab>province_obj.cities.remove(city)","out":"How to remove an item of embedded document in another embedded document of a document in mongoengine"}
{"in":"#!\/usr\/bin\/env python<nl><nl>import re<nl><nl># uncomment\/comment for test with a real file ...<nl># header = open('mycfile.c', 'r').read()<nl>header = \"\"\"<nl><nl>#if 0<nl><tab>whatever(necessary)<nl><tab>and maybe more<nl><nl>#endif<nl><nl>\/* <nl> * This is an original style comment<nl> *<nl> *\/<nl><nl>int main (int argc, char const *argv[])<nl>{<nl><tab>\/* code *\/<nl><tab>return 0;<nl>}<nl><nl>\"\"\"<nl><nl>p_macro = re.compile(\"#if.*?#endif\", re.DOTALL)<nl>p_comment = re.compile(\"\/\\*.*?\\*\/\", re.DOTALL)<nl><nl># Example ...<nl># print re.sub(p_macro, '', header)<nl># print re.sub(p_comment, '', header)","out":"How to automatically remove certain preprocessors directives and comments from a C header-file?"}
{"in":"data = list(Data.objects.all().values('deviceId','payload'))","out":"Django JSON string to json object"}
{"in":"class GuildMiddleware(object):<nl><tab>def process_request(self, request):<nl><tab><tab>request.G = figure_out_what_G_is()<nl><tab><tab>return None","out":"Is it possible to check whether a context variable is already set in a view within a custom context processor definition?"}
{"in":"module_name = 'a.foo'<nl>module = __import__(module_name, globals(), locals(), ['*'])","out":"django - import different module when variable change"}
{"in":"import csv<nl><nl>from itertools import chain<nl><nl>reader = csv.DictReader(f, delimiter='\\x01', lineterminator=\"\\x02\")<nl>my_dict_of_values = {}  # whatever goes here<nl><nl>for line in chain(reader, my_dict_of_values):<nl><tab>do_something(line)","out":"How to iterate over two different iterable objects"}
{"in":"import requests<nl>import re<nl><nl>UTORRENT_URL = 'http:\/\/%s:%s\/gui\/' % ('192.168.1.80', '55655')<nl>UTORRENT_URL_TOKEN = '%stoken.html' % UTORRENT_URL<nl>REGEX_UTORRENT_TOKEN = r'<div[^>]*id=[\\\"\\']token[\\\"\\'][^>]*>([^<]*)<\/div>'<nl><nl>auth = requests.auth.HTTPBasicAuth('x', 'x')<nl>r = requests.get(UTORRENT_URL_TOKEN, auth=auth)<nl>token = re.search(REGEX_UTORRENT_TOKEN, r.text).group(1)<nl>guid = r.cookies['GUID']<nl>cookies = dict(GUID = guid)<nl><nl>params = {'action':'add-file','token': token}<nl>files = {'torrent_file': open('C:\\\\x.torrent', 'rb')}<nl>r = requests.post(url=UTORRENT_URL, auth=auth, cookies=cookies, params=params, files=files)","out":"Add torrent with web api"}
{"in":"import mechanize<nl><nl>class HeadRequest(mechanize.Request):<nl><tab>def get_method(self):<nl><tab><tab>return \"HEAD\"<nl><nl>request = HeadRequest(\"http:\/\/www.example.com\/\")<nl>response = mechanize.urlopen(request)<nl><nl>print response.info()","out":"How can I perform a HEAD request with the mechanize library?"}
{"in":"from PIL import Image<nl>import StringIO<nl>import binascii<nl><nl># In your case, 's' will be the string from the field<nl># in the database.<nl>s = open(\"chenchi.txt\").read()<nl><nl># chop off the '0x' at the front.<nl>s = s[2:] <nl><nl># Decode it to binary.<nl>binary = binascii.unhexlify(s)<nl><nl># Wrap the bytes in a memory stream that can be read like a file.<nl>bytes = StringIO.StringIO(binary)<nl><nl># Use pillow to read the memory stream into an image (it autodetects the format).<nl>im = Image.open(bytes)<nl><nl># And show it. Or you could .save() it.<nl>im.show()","out":"How to convert image data type from windows sql server to image using python?"}
{"in":"from subprocess import PIPE<nl>import subprocess<nl>pro = subprocess.Popen(\"ifconfig\", stdout=PIPE, stderr=PIPE)<nl>data = pro.communicate()[0].split()<nl>for line in data:<nl><tab>print \"THIS IS A LINE\"<nl><tab>print line<nl><tab>print \"**************\"","out":"Need to get output as lists rather than strings in Popen or any other system commands"}
{"in":"x = [1,2,3,4,5,6]<nl>restart = True<nl>while restart:<nl><tab>for i in x:<nl><tab><tab># add any exit condition!<nl><tab><tab># if foo == bar:<nl><tab><tab>#   restart = False<nl><tab><tab>#   break<nl><tab><tab>if i == 4:<nl><tab><tab>   break<nl><tab><tab>else:<nl><tab><tab><tab>print i","out":"how to restart \"for\" loop in python ?"}
{"in":"#Django<nl>from django.contrib.auth.models import User<nl>from django.conf.urls import url<nl><nl>#Tasty<nl>from tastypie.resources import ModelResource<nl><nl>class UserResource(ModelResource):<nl><tab>class Meta:<nl><tab><tab>queryset = User.objects.all()<nl><tab><tab>resource_name = 'users'<nl><nl><tab><tab>#Disallow list operations<nl><tab><tab>list_allowed_methods = []<nl><tab><tab>detail_allowed_methods = ['get', 'put', 'patch']<nl><nl><tab><tab>#Exclude some fields<nl><tab><tab>excludes = ('first_name', 'is_active', 'is_staff', 'is_superuser', 'last_name', 'password',)<nl><nl><tab>#Apply filter for the requesting user<nl><tab>def apply_authorization_limits(self, request, object_list):<nl><tab><tab>return object_list.filter(pk=request.user.pk)<nl><nl><tab>#Override urls such that GET:users\/ is actually the user detail endpoint<nl><tab>def override_urls(self):<nl><tab><tab>return [<nl><tab><tab><tab>url(r\"^(?P<resource_name>%s)\/$\" % self._meta.resource_name, self.wrap_view('dispatch_detail'), name=\"api_dispatch_detail\"),<nl><tab><tab>]","out":"Django Tastypie - Resource with object details only"}
{"in":"some_list = [l + [10, 11] for l in some_list]","out":"How do I extend a list within a list in Python?"}
{"in":"from collections import defaultdict<nl><nl>d = defaultdict(list)<nl>for key, value in yourlist:<nl><tab>d[key].append(value)<nl><nl>result = [[key] + value for key, value in d.items()]","out":"Grouping touples in a list based on key\/value (python)"}
{"in":"ContactDetails.objects.filter(server__user=request.user)","out":"How do I get queryset containing all referenced objects with a specific user field?"}
{"in":"%-140.140s % some_text","out":"text aligning, python"}
{"in":"# Retrieve tasks<nl># Reference: http:\/\/docs.celeryproject.org\/en\/latest\/reference\/celery.events.state.html<nl>query = celery.events.state.tasks_by_type(your_task_name)<nl><nl># Kill tasks<nl># Reference: http:\/\/docs.celeryproject.org\/en\/latest\/userguide\/workers.html#revoking-tasks<nl>for uuid, task in query:<nl><tab>celery.control.revoke(uuid, terminate=True)","out":"How to inspect and cancel Celery tasks by task name"}
{"in":"conn = MySQLdb.connect(host=\"1.2.3.4\", port=1234, user=\"root\", passwd=\"x\", db=\"test\")<nl><nl>for j in range(10):<nl><tab>try:<nl><tab><tab>for i in range(10):<nl><tab><tab><tab>cur = conn.cursor()<nl><tab><tab><tab>query = \"DELETE FROM SomeTable WHERE ID = %d\" % i<nl><tab><tab><tab>cur.execute(query)<nl><tab><tab><tab>cur.close()<nl><tab><tab>conn.commit()<nl><tab>except Exception:<nl><tab><tab>conn.rollback()<nl><nl>conn.close()","out":"MySQLdb with multiple transaction per connection"}
{"in":"import scipy, pylab<nl>names = ['Alice', 'Bob', 'Carol', 'David']<nl>interests = [['Football', 'Swimming'], ['Swimming', 'Jooga', 'Jogging'], <nl><tab><tab><tab> ['Cycling', 'Football'], ['Football', 'Tennis', 'Cycling']]<nl>allinterests = list(set(reduce(lambda x,y:x+y, interests)))<nl>X = scipy.zeros((len(interests), len(allinterests)))<nl>for i, indinterests in enumerate(interests):<nl><tab>for x in indinterests:<nl><tab><tab>X[i, allinterests.index(x)] = 1<nl>pylab.matshow(X, interpolation='nearest', cmap=pylab.cm.gray_r)<nl>pylab.show()<nl>pylab.yticks(range(len(names)), names)<nl>pylab.ylim([len(names)-0.5, -0.5])<nl>pylab.xticks(range(len(allinterests)), allinterests)<nl>pylab.savefig('interests.png')","out":"Plot multidimensional data"}
{"in":"text2=corpus<nl>text4=nltk.word_tokenize(text2)<nl>tags=nltk.pos_tag(text4)<nl>counter2={}<nl>for a,b in tags:<nl><tab>counter2[b] = counter2.get(b,0)+1<nl>list5=sorted([(freq,word) for word, freq in counter2.items()], reverse=True)[:3]<nl>print [word for freq,word in list5]","out":"Outcome doesn't make sense for list of most common POS"}
{"in":"s = \"Some ABC text followed by XYZ followed by multiple ABC, more ABC, more ABC\"<nl><nl>pattern = re.compile(r'(?<=XYZ)(.*?)ABC')<nl>while pattern.search(s):<nl>   s = pattern.sub(r'\\1REPLACED', s)<nl><nl>print s","out":"Regex for matching any occurrence of ABC following XYZ anywhere in the string "}
{"in":"def main():<nl><tab>phrase = input(\"Enter a phrase: \")<nl><tab>print(\"Number of characters: \",len(phrase))<nl><tab>count = wordCount(phrase)<nl><tab>average(phrase,count)<nl><tab>freqWords(phrase)<nl><nl>def wordCount(phrase):<nl><tab>words = phrase.split()<nl><tab>wordCount = len(words)<nl><tab>print(\"Number of words: \",wordCount)<nl><tab>return wordCount<nl><nl>def average(phrase, wordCount):<nl><tab>avg = len(phrase)\/wordCount<nl><tab>print(\"The average word length: %.01f\" % avg)<nl><nl>def freqWords(phrase):<nl><tab>freqLetter = phrase[0]<nl><tab>max = phrase.count(phrase[0])<nl><tab>for char in phrase:<nl><tab><tab>if char is not \" \":<nl><tab><tab><tab>if phrase.count(char) > max:<nl><tab><tab><tab><tab>freqLetter = char<nl><tab><tab><tab><tab>max = phrase.count(char)<nl><nl><tab>print(\"The most frequent letter: \", freqLetter)<nl><nl>main()","out":"Need help assigning parameters to my definitions"}
{"in":"source = \"\"\"<nl>class test:<nl><tab>class inner_class:<nl><tab><tab>pass<nl><tab>pass<nl><nl>class test2:<nl><tab>pass<nl>\"\"\"<nl><nl>import ast<nl>p = ast.parse(source)<nl>classes = [node.name for node in ast.walk(p) if isinstance(node, ast.ClassDef)]<nl># ['test', 'test2', 'inner_class']","out":"How to find the list of all the class name in a file in python?"}
{"in":"import os.path<nl>with open('idfile') as fin:<nl><tab> header = next(fin) #read the `#ID` comment header line.  Don't use it.<nl><tab> for line in fin:<nl><tab><tab> fname = 'datafileID{0}.csv'.format(line.strip())<nl><tab><tab> if not os.path.exists(fname):<nl><tab><tab><tab> print fname","out":"Checking That All Files Are Present"}
{"in":"# Import required alphabet<nl>from Bio.Alphabet import IUPAC<nl><nl># Pass imported alphabet as an argument for `SeqIO.parse`:<nl>records = list(SeqIO.parse(handle, 'fasta', IUPAC.extended_protein))","out":"BioPython: How to convert the amino acid alphlabet to"}
{"in":"size = 10<nl>maxlen = len(str(size * size))<nl>m = size * 2 - 1<nl>matrix = [[' ' * maxlen] * m for _ in range(m)]<nl><nl>for n in range(size * size):<nl><tab>r = n \/\/ size<nl><tab>c = n % size<nl><tab>matrix[c + r][size - r - 1 + c] = '{0:{1}}'.format(n + 1, maxlen)<nl><nl>print '<nl>'.join(''.join(row) for row in matrix)","out":"Printing numbers in a diamond shape"}
