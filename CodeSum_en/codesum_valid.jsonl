{"in":"def index():  <nl><tab>return \"Python works!\"<nl><nl>def command(command):  <nl><tab>return \"this is a command %s!\" %command","out":"Python get URL from Apache"}
{"in":"with open(inpf, \"r\") as ifile:<nl><tab>for line in ifile:<nl><tab><tab>if line.startswith(\"lattice parameters\"):<nl><tab><tab><tab>print(next(ifile, '').strip())","out":"read next line after a matching line in python"}
{"in":"def strip_unwanted(line):<nl><tab>title = str(line['title']).replace(' ', '-').replace(\"??\", \"\")<nl><tab>title = ''.join((c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c) != 'Mn'))<nl><tab>line['title'] = title<nl><tab>return line<nl><nl>with open(\"output.csv\", encoding = \"utf8\") as input:<nl><tab>dic_entries = csv.DictReader(input)<nl><tab># use the 'map' function<nl><tab>new_entries = map(strip_unwanted, dic_entries)<nl><nl><tab>with open('some.csv', 'wb') as output:<nl><tab><tab>writer = csv.DictWriter(output)<nl><tab><tab>writer.writerows(new_entries)","out":"Reading columns of a csv file with python"}
{"in":"def unanimous(it):<nl>  it1, it2 = itertools.tee(it)<nl>  return all(it1) or not any(it2)","out":"Pythonic way to check if: all elements evaluate to False -OR- all elements evaluate to True"}
{"in":"from collections import Counter<nl>[x*c for x,c in Counter([1, 2, 1, 3, 3]).items()]","out":"python: sum similar values in list"}
{"in":"import sys<nl>import tweepy<nl><nl>consumer_key=\"\"<nl>consumer_secret=\"\"<nl>access_key=\"\"<nl>access_secret=\"\"<nl><nl>auth = tweepy.OAuthHandler(consumer_key, consumer_secret)<nl>auth.set_access_token(access_key, access_secret)<nl>api = tweepy.API(auth)<nl><nl><nl>class CustomStreamListener(tweepy.StreamListener):<nl><tab>def on_status(self, status):<nl><tab><tab>if 'manchester united' in status.text.lower():<nl><tab><tab><tab>print status.text<nl><nl><tab>def on_error(self, status_code):<nl><tab><tab>print >> sys.stderr, 'Encountered error with status code:', status_code<nl><tab><tab>return True # Don't kill the stream<nl><nl><tab>def on_timeout(self):<nl><tab><tab>print >> sys.stderr, 'Timeout...'<nl><tab><tab>return True # Don't kill the stream<nl><nl>sapi = tweepy.streaming.Stream(auth, CustomStreamListener())<tab><nl>sapi.filter(locations=[-6.38,49.87,1.77,55.81])","out":"How to add a location filter to tweepy module"}
{"in":"cursor.executemany(\"insert into table (var1,var2,var3) values (%s, %s, %s)\", [list1,list2,list3])","out":"Import multiple lists in MySQL using pymysql (Python)"}
{"in":"os.system(\"screencapture screen.png\")","out":"Take screenshot in Python on Mac OS X"}
{"in":"import pandas as pd<nl>data = [('a', 'b', 'c'), ('d', 'e', 'f')]<nl>df = pd.DataFrame(data)<nl>df.to_csv('test.csv', index=False, header=False)","out":"How to write list of lists to CSV file Python?"}
{"in":"admin.py<nl>class PermissionInline(admin.TabularInline):<nl><tab>form = PermissionForm<nl><tab>model = Permission<nl><tab>extra = 3<nl><nl>forms.py<nl>class PermissionForm(forms.ModelForm):<nl><tab>class Meta:<nl><tab><tab>model = Permission<nl><nl><tab>def clean(self):<nl><tab><tab>cleaned_data = self.cleaned_data<nl><tab><tab>user = cleaned_data['user']<nl><tab><tab>role = cleaned_data['role']<nl><tab><tab>if role.id != 1:<nl><tab><tab><tab>folder = cleaned_data['application'].folder<nl><tab><tab><tab>if len(filter(lambda x:x in user.profile.company.all(),folder.company.all())) > 0: # this is an intersection<nl><tab><tab><tab><tab>raise forms.ValidationError(\"One of the users of this Application works for one of the Repository's organisations!\")<nl><tab><tab>return cleaned_data","out":"Validation on ManyToManyField before Save in Models.py"}
{"in":"from django.db import IntegrityError<nl><nl>class Property(models.Model):<nl><tab>owner = models.ForeignKey(Owner)<nl><nl><tab>def save(self, *args, **kwargs):<nl><tab><tab>if self.owner.type == \"Individual\":<nl><tab><tab><tab>if Property.objects.filter(owner=self.owner).exists():<nl><tab><tab><tab><tab>raise IntegrityError<nl><tab><tab>super(Property, self).save(*args, **kwargs)","out":"How to model \"One or Many\" relationship in Django?"}
{"in":"str = \"WooHoo\"   <nl>str = str[:-len(str)\/2]","out":"Need more elegant solution to even string length"}
{"in":"# -*- coding: utf-8 -*-","out":"Python doesn't save file with unicode characters"}
{"in":"import urllib<nl><nl>print urllib.unquote(\"cmd%5Blogin_user%5D%5Busername%5D=dfdsfdsf&cmd%5Blogin_user%5D%5Bpassword%5D=dsfsdf\")","out":"How to unescape a query string"}
{"in":"#!\/usr\/bin\/env python<nl># -*- coding: utf-8 -*-<nl>from xml.dom.minidom import *<nl>xml = parse('1.xml')<nl>name = xml.getElementsByTagName('type_id')<nl>hashes = set()<nl>for node in name:<nl><tab>hashes.add(node.childNodes[0].data.encode('utf-8'))<nl><nl>print \"<nl>\".join(sorted(hashes))","out":"python 2 xml to sort and remove duplicates"}
{"in":"inverse_namelist = {v: k for k, v in namelist.items()}","out":"Extracting the key from dictionary using get()"}
{"in":"numpy.searchsorted","out":"Is there a faster way to search a numpy array"}
{"in":"self.EIG2D = numpy.vectorize(complex)(EIG2Dtmp[...,0], EIG2Dtmp[...,1])","out":"How to pass complex arguments in netcdf python"}
{"in":"# Open a file<nl>fo = open(\"foo.txt\", \"a\") # safer than w mode<nl>fo.write( \"Python is a great language.<nl>Yeah its great!!<nl>\");<nl><nl># Close opend file<nl>fo.close()","out":"How to open and edit an existing file in Python?"}
{"in":"ImagesUrl.objects(src=self.src).update_one(<nl><tab><tab><tab><tab><tab><tab><tab><tab>  upsert=True, <nl><tab><tab><tab><tab><tab><tab><tab><tab>  inc__counter=1, <nl><tab><tab><tab><tab><tab><tab><tab><tab>  set__src=self.src)","out":"Mongoengine - How to perform a \"save new item or increment counter\" operation?"}
{"in":"inner_qs = table2.objects.all()<nl>results = table1.objects.exclude(field1__in=inner_qs)","out":"Select values which not in another table with Django"}
{"in":"mylist[:4] = szResult.split()","out":"Python String List additions"}
{"in":"print n[-4::]","out":"Extracting indices from numpy array python"}
{"in":"# cols to select<nl>c = rpy2.robjects.IntVector((1,3))<nl># selection from df<nl>mydf.rx(True, c)","out":"how to select columns from R dataframe in rpy2 in python?"}
{"in":"from django.db.models import Count<nl>Games.objects.filter(owned=0).annotate(vote=Count('votes')).order_by('-vote')","out":"Django ORM Table Relationships"}
{"in":"def createtable(self):<nl><tab> rows = self.tableName.rowCount()<nl><tab> columns = self.tableName.columnCount()<nl><tab> for i in range(rows):<nl><tab><tab> for j in range(columns):<nl><tab><tab><tab> item = self.cell(\"text\")<nl><tab><tab><tab> # execute the line below to every item you need locked<nl><tab><tab><tab> item.setFlags(QtCore.Qt.ItemIsEnabled)<nl><tab><tab><tab> self.ui.tableName.setItem(i, j, item)","out":"how to make a cell in a QTableWidget read only?"}
{"in":"import IPython.nbformat.current as nbf<nl>nb = nbf.read(open('test.py', 'r'), 'py')<nl>nbf.write(nb, open('test.ipynb', 'w'), 'ipynb')","out":"Is there a way to create a .ipynb from a .py file command line?"}
{"in":"list.pop(0)","out":"Big-O of a while loop"}
{"in":"x = info.split(';',2)[1]","out":"How to find a string between to special characters in python?"}
{"in":"#circle.circle_computation()<nl>if circle_create == True:<nl><tab>#circle_list[i].draw_circle()<nl><tab>for j in xrange(i):<nl><tab><tab>circle_list[j].draw_circle()","out":"Accessing all elements in an iterated list under a loop in Python"}
{"in":"ILLEGAL_NTFS_CHARS = \"[<>:\/\\\\|?*\\\"]|[\\0-\\31]\"<nl>def __removeIllegalChars(name):<nl><tab># removes characters that are invalid for NTFS<nl><tab>return re.sub(ILLEGAL_NTFS_CHARS, \"\", name)","out":"how to check for platform incompatible folder (file) names in python"}
{"in":"fh = open('my.txt','r').read()<nl>unique_chars = set(fh)<nl>len(unique_chars) #for the length.","out":"How to get all unique characters in a textfile? unix\/python"}
{"in":"ndf = merge(left=df1,right=df1,on=('c','d'),how='inner')<nl>out = ndf[(ndf.a_x == (-1)*ndf.a_y) & (ndf.b_x == (-1)*ndf.b_y)]","out":"How to find matching rows in Pandas DataFrame with identical values with same\/opposite signs in certain columns?"}
{"in":"try:<nl><tab>import locale<nl><tab>locale.setlocale(locale.LC_ALL, 'en_US.utf8')<nl>except Exception:<nl><tab>try:<nl><tab><tab>locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')<nl><tab>except Exception as e:<nl><tab><tab>messages.error(request, 'An error occurred: {0}'.format(e))","out":"django unsupported locale setting on Mac OS X"}
{"in":"urlpatterns = patterns(\"myapp.views\",<nl><tab>url(r'^$', 'index',dict(template_name = 'myapp\/index.html'), name = 'home'),<nl><tab>url(r'^kick-ass-chart\/$', 'render_chart', name='myapp_render_chart'),<nl>)","out":"writing urlpattern in django for rendering an image"}
{"in":"dict((k, v.split(',')) for k,v in (x.split(':') for x in s.split('::')))","out":"Parse a map of int -> list from a string"}
{"in":"s = sum(hours)*3600+sum(minutes)*60+sum(seconds)<nl>return '%d hours %d minutes %d seconds'%( s\/3600, (s%3600)\/60, s%60)","out":"converting a list of times to total time"}
{"in":"from A import settings as A_settings","out":"how to access settings variable from different project in the same folder in django"}
{"in":"import tkinter as tk<nl><nl>root = tk.Tk()<nl><nl>screen_width = root.winfo_screenwidth()<nl>screen_height = root.winfo_screenheight()","out":"How to get the screen size in Tkinter?"}
{"in":"lower, upper = dictionary1[key]","out":"how do i access lists values stored in a dictionary key?"}
{"in":"import wave<nl><nl>start_time = 5.43<nl>stop_time = 5.81<nl>time_period = stop_time - start_time<nl>wav = wave.open('test.wav')<nl>time_period_frames = time_period * wav.getnframes()","out":"to get number of frames between a time range?"}
{"in":"def _total_resources(self, cr, uid, ids, field_name, arg, context):<nl><tab>res = {}<nl><tab>reqrd_bffr = 0<nl><tab>trng_bffr = 0<nl><tab>billable = 0<nl><tab>for id in ids:<nl><tab><tab>res[id] = {<nl><tab><tab><tab>'total_resources' : 0,<nl><tab><tab><tab>'req_buffr':0,<nl><tab><tab><tab>'trng_buffr': 0,<nl><tab><tab><tab>'billable' : 0<nl><tab><tab>}<nl><tab><tab>list_resources = self.browse(cr,uid,ids[0]).resource_all_id<nl><tab><tab>print\"list_resources\",list_resources<nl><tab><tab>for status_chk in list_resources :<nl><tab><tab><tab>status_resrc = status_chk.status_id.name<nl><tab><tab><tab>if status_resrc == 'Required Buffer':<nl><tab><tab><tab><tab>reqrd_bffr=reqrd_bffr + 1<nl><tab><tab><tab>elif status_resrc == 'Training Buffer':<nl><tab><tab><tab><tab>trng_bffr=trng_bffr + 1<nl><tab><tab><tab>elif status_resrc == 'Billable':<nl><tab><tab><tab><tab>billable=billable + 1<nl><tab><tab>total = len(list_resources)<nl><tab><tab>res[id] = {'total_resources' : total,'req_buffr':reqrd_bffr,'trng_buffr': trng_bffr, 'billable' : billable}<nl><tab>return res","out":"in openerp fields.function takes the dictionry as a arugument"}
{"in":"values = {<nl><tab><tab>'order_line_id': order.id,<nl><tab><tab>'product_id': product.id,<nl>}<nl>if field == 0:<nl><tab>values['new_line'] = line.id","out":"How to eliminate redundancy when creating variants of a dictionary"}
{"in":"def copy_function(row):<nl><tab>if row['col2']==1:<nl><tab><tab>return row['col2'] <nl><tab>else: <nl><tab><tab>return row['col1']<nl>df['col3'] = df.apply(copy_function, axis=1)","out":"Copy over values to new column with formula"}
{"in":"interval = 2<nl>while True:<nl><tab>next_run = time.time() + interval<nl><tab>do_something()<nl><tab>delta = next_run - time.time()<nl><tab>if delta < 0:<nl><tab><tab>skipped(delta\/-interval)<nl><tab>else:<nl><tab><tab>time.sleep(delta)","out":"Pythonmodule to make a loop run exactly every n seconds"}
{"in":"user_input = raw_input(\"Please enter a word: \")<nl>ls = [\"a\", \"f\" , \"x\" , \"u\"]<nl>user_list = []<nl>inDict = True<nl><nl>for i in user_input:<nl><tab>if not(i in ls):<nl><tab><tab>inDict = False<nl><tab><tab>break<nl>if(inDict):<tab><nl><tab>user_list.append(user_input)","out":"Append a string to a list after checking"}
{"in":"x = np.concatenate((x, new_x))","out":"Concatenating with empty numpy array"}
{"in":"for k, v in user_actions.iteritems():<nl><tab>print v['notes']","out":"Django deserialize JSON request with nested dictionary"}
{"in":"class ContactWizard(SessionWizardView):<nl><tab>template_name = \"invite.html\"<nl><nl><tab>def done(self, form_list, **kwargs):<nl><tab><tab>form_data = process_form_data(form_list, self.request.user)<nl><nl><tab><tab>return render_to_response('invitedone.html', {'form_data': form_data})","out":"Django: how do i request username in SessionWizardView?"}
{"in":"def test_envconfig():<nl><tab> import inspect<nl><tab> for frame, filename, line_num, func, source_code, source_index in inspect.stack():<nl><tab><tab> if 'tests\/unittests\/capital\/' in filename:<nl><tab><tab><tab> print 'The Test env is activated for %s' % (filename)<nl><tab> return \"user\"","out":"How to track the caller details inside callee in python"}
{"in":"def contact_create(request):<nl><tab>if request.method == 'POST':<nl><tab><tab>form = ContactForm(request.POST)<nl><tab><tab>if form.is_valid():<nl><tab><tab><tab>new_contact = form.save()<nl><tab><tab><tab>return HttpResponseRedirect(reverse(contact_details, args=(new_contact.pk,)))<nl><tab>else:<nl><tab><tab>form = ContactForm()","out":"Get Primary Key after Saving a ModelForm in Django"}
{"in":"import bpy, mathutils<nl><nl>plane = bpy.data.objects[\"Plane\"]<nl>previous = None<nl><nl>for poly in plane.data.polygons:<nl>  center = mathutils.Vector(poly.center)<nl>  if previous:<nl><tab>previous -= center<nl><tab>#print length and center<nl><tab>print(previous.length, center)<nl>  previous = center","out":"How get length of Navigation Mesh?"}
{"in":"import random<nl>import matplotlib.pyplot as plt<nl>import networkx as nx<nl>G=nx.Graph()<nl>G.add_edges_from([('a','b'),('b','d'),('c','e'),('b','e')])<nl>pos=nx.spring_layout(G)<nl>nodes=G.nodes()<nl>random.shuffle(nodes)<nl>blue=nodes.pop()<nl>nx.draw_networkx_nodes(G,pos,nodelist=[blue],node_color='b')<nl>nx.draw_networkx_nodes(G,pos,nodelist=nodes,node_color='r')<nl>nx.draw_networkx_edges(G,pos)<nl>plt.show()","out":"Change color of nodes when in a spring layout+ networkx"}
{"in":"df[\"DATE\"].irow(0)","out":"Calculating day of the week from csv files, how to select one field in csv file"}
{"in":"data_only=True","out":"Python - openpyxl read xlsx data after writing on existing xlsx with formula"}
{"in":"column_name='last_login_date'","out":"Django custom user field clashes with AbstractBaseUser"}
{"in":"mylist = []<nl>for i in range(million):<nl><tab>mylist.append(something)<nl>mytup = tuple(mylist)","out":"Python : Variable size problems with Pyscripter"}
{"in":"import itertools<nl>def update_dict(A, result): #update vaules to the same set<nl><tab>for k in A:<nl><tab><tab>result[k] = result.get(k, {k}).union(set(A[k]))<nl><tab><tab>tmp = None<nl><tab><tab>for i in result[k]:<nl><tab><tab><tab>tmp = result.get(k, {k}).union(result.get(i, {i}))<nl><tab><tab>result[k] = tmp<nl><tab><tab>for i in result[k]:<nl><tab><tab><tab>result[i] = result.get(i, {i}).union(result.get(k, {k}))<nl><nl>A = {0:('b',), 1:('c',), 2:('c',), 3:('c',)}<nl>B = {'a':(3,), 'b':(0,), 'c':(1,2,3)}<nl>result = dict()<nl>update_dict(A, result)<nl>update_dict(B, result)<nl>update_dict(A, result) #update to fix bugs<nl>update_dict(B, result)<nl><nl>k = sorted([sorted(list(v)) for v in result.values()]) <nl>k = list( k for k, _ in itertools.groupby(k))  #sort and remove dumplicated set<nl><nl>final_result = dict()<nl>for v in k: #merge the result as expected<nl><tab>final_result.update({tuple([i for i in v if isinstance(i, int)]):tuple([i for i in v if not isinstance(i, int)])})<nl>print final_result<nl><nl>#output<nl>{(0,): ('b',), (1, 2, 3): ('a', 'c')}","out":"merge python dictionary of sets"}
{"in":"class A(object):<nl><nl>  def __init__(self):<nl><tab>self.logger = logging.LoggerAdapter(log, {'session_id': random(1024)})<nl><nl>  def process(self):<nl><tab>self.logger.info('hello')","out":"Is it possible to inject a variable into python logger Filter"}
{"in":"command = re.search(\"(\" + re.escape(MyDir) + \")\", body).group(1)","out":"variable regex python"}
{"in":"pk = open( 'file.txt', 'r' ).readlines() #or 'rb' if there's a need<nl><nl>if len(pk) > 2:<nl><tab>for line in pk[1:-1]:<nl><tab><tab>print line,<nl><tab><tab>#or do anything you like to do with line","out":"How to extract necessary content from file in python?"}
{"in":"dict1 = {'imp_local'+str(k):700 for k,val in enumerate(nBottom)}<nl>dict2 = {'imp_global'+str(k):600 for k,val in enumerate(nBottom)}","out":"How to call variables generated in loop"}
{"in":"runcall(main, self.argv)","out":"Python-Hotshot error trying to profile a simple program"}
{"in":"driver.find_element_by_xpath('\/\/div[contains(@class,\"ui-dialog\") and @aria-describedby=\"dialogContent2\"]\/\/button[@title=\"Close\"]').click()","out":"Closing a generic pop up in Selenium"}
{"in":"here = pickle.load(open(\"1965.pkl\", 'rb'))","out":"EOFError Opening\/Reading Pickled File"}
{"in":"print (int(hexlify(corr),16))&0x01","out":"apply a bit mask in python"}
{"in":"for i in clslist:<nl><tab>if i.str1 == A and i.str2 == B:<nl><tab><tab>i.strlist.append(whatever)","out":"add to a list in tuple with search in python"}
{"in":"print 'Word is',<tab> #Notice the trailing comma. This will not print a newline char<nl>faultyPrint()","out":"Python printing from non returning functions"}
{"in":"from cPickle import dumps<nl>from cookielib import CookieJar<nl>import threading<nl><nl>class MyCookieJar(CookieJar):<nl><tab>def __getstate__(self):<nl><tab><tab>state = self.__dict__.copy()<nl><tab><tab>del state['_cookies_lock']<nl><tab><tab>return state<nl><nl><tab>def __setstate__(self, state):<nl><tab><tab>self.__dict__ = state<nl><tab><tab>self._cookies_lock = threading.RLock()<nl><nl>class Person(object):<nl><tab>def __init__(self, name):<nl><tab><tab>self.name = name<nl><tab><tab>self.cookies = MyCookieJar()<nl><nl>bob = Person(\"bob\")<nl>print dumps(bob)","out":"How to pickle a CookieJar?"}
{"in":"os.system(\"7z x install.zip subfolder -y -r -oc:\\\\\\\"Program Files (x86)\\\\\\\"Calibre2\")","out":"Extracting only a specific subfolder 7zip"}
{"in":"runner = unittest.TextTestRunner(verbosity=2)","out":"Print result right after each unit test"}
{"in":"import requests<nl>r = requests.get(\"http:\/\/localhost:5000\")  <nl># a flask application there sets two cookies 'first' and 'second'<nl><nl>r.cookies.keys()<nl># returns ['first', 'second']<nl><nl>r.headers['Set-Cookie']<nl># returns 'first=4; Path=\/, second=42; Path=\/'","out":"python web-client multipile set-cookie header, get raw set-cookie header"}
{"in":"basename = os.path.basename(file)<nl>if ext in (\".txt\", \".htm\", \".html\"):<nl><tab>ftp.storlines(\"STOR \" + basename, open(file))<nl>else:<nl><tab>ftp.storbinary(\"STOR \" + basename, open(file, \"rb\"), 1024)","out":"Trying to upload with ftplib, can connect just fine, but I'm messing something up at some point."}
{"in":"levels = np.logspace(0,np.log10(Z.max()), 100 )[30:80]<nl>levels_black = [level for i,level in enumerate(levels) if (i+5) % 10 != 0]<nl>levels_red =  [level for i,level in enumerate(levels) if (i+5) % 10 == 0]<nl><nl>CS2_black = pyplot.contour(X,Y,Z,locator=ticker.LogLocator(), colors='k', levels=levels_black, lw=2,norm=colors.LogNorm(),vmin=1,vmax =Z.max())<nl>CS2_red = pyplot.contour(X,Y,Z,locator=ticker.LogLocator(), colors='r', levels=levels_red, lw=2,norm=colors.LogNorm(),vmin=1,vmax =Z.max())<nl><nl>cbar.add_lines(CS2_red)","out":"Add certain lines from contourplot in colorbar"}
{"in":"from google.appengine.ext.remote_api import remote_api_stub<nl><nl>def auth_func():<nl>   return ('your_username', 'your_password')<nl><nl>remote_api_stub.ConfigureRemoteApi(None, '\/_ah\/remote_api', auth_func, 'your-app-id.appspot.com')","out":"How do I get live data from my production App Engine app to my local dev app?"}
{"in":"numpy.matrix","out":"Any way to create a NumPy matrix with C API?"}
{"in":"from Tkinter import *<nl>import sys<nl>master = Tk()<tab><nl>def callback():<nl><tab>master.destroy()<nl><tab>sys.exit()<tab><nl>b = Button(master, text=\"Click to close\", command=callback)<nl>b.pack()<tab><nl>mainloop()","out":"create a standalone py server application for mac"}
{"in":"raw = open(filename).read()<nl>docs = []<nl>for raw_doc in raw.split('---'):<nl><tab>try:<nl><tab><tab>docs.append(yaml.load(raw_doc))<nl><tab>except SyntaxError:<nl><tab><tab>docs.append(raw_doc)","out":"Loading document as raw string in yaml with PyYAML"}
{"in":"from bs4 import BeautifulSoup<nl><nl>txt = \"\"\"<div name=\"div1\"><nl><tab><tab><li>Test 1<\/li><nl><tab><tab><li>Test 2<\/li><nl><tab><tab><\/div>\"\"\"<nl><nl>def clone(soup, tag):<nl>   newtag = soup.new_tag(tag.name)<nl>   for attr in tag.attrs:<nl><tab>  newtag[attr] = tag[attr]<nl>   return newtag<nl><nl>soup = BeautifulSoup(txt)<nl>tags = soup.find_all(\"li\")<nl>for tag in tags:<nl>   print tag.wrap(clone(soup, tag.parent))","out":"Get an element and its parent ONLY, using BeautifulSoup in Python"}
{"in":"from glob import glob<nl><nl>with open('C:\/test\/out_file\/out_file.txt', 'w') as out_file:<nl><tab>out_file.write('<nl>'.join(glob('C:\/test\/*.txt')))","out":"obtain list of files in python"}
{"in":"import os<nl>import sys<nl><nl>sys.path.append('\/home\/ubuntu\/web\/lightea.com\/elderlytracking\/django_test')<nl>os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"django_test.settings\") # here django_test is a directory within django_test project <nl><nl>from django.core.wsgi import get_wsgi_application<nl>application = get_wsgi_application()","out":"uwsgi error : Requested setting DEBUG, but settings are not configured"}
{"in":"from csv import reader<nl>nan_counts = {}<nl>with open('\/path\/to\/file') as file:<nl><tab>file_reader = reader(file)<nl><tab>next(file_reader)  # Skip the first row of headers<nl><tab>for row in file_reader:<nl><tab><tab>year, data = row[1], row[4:]<nl><tab><tab>nan_counts[year] = data.count('NaN') + nan_counts.get(year, 0)","out":"Calculate number of NaN's based on two separate unique columns"}
{"in":"start = 0<nl>calculated_mean = float('inf')<nl>while calculated_mean > set_mean:<nl><tab>energies = []<nl><tab>for i in range(start, start + 1000): <nl><tab><tab>system = moves.move(system, 50, true)<nl><tab><tab>energy = system.energies()<nl><tab><tab>energies.append(energy)<nl><tab><tab>print(\"%d: %s\" % (i, energy))<nl><tab>calculated_mean = sum(energies[-10:]) \/ 10","out":"for loop data , iteration and some statistic calculations in python"}
{"in":"c = round(((a + b) - abs(a - b)) \/ 2)","out":"Comparing two numbers without loops or branching in Python"}
{"in":"plt.figure()<nl><nl>CS = plt.contour(X, Y,log_mu,levels = [-7,-8],<nl><tab><tab><tab><tab> colors=('k',),linestyles=('-',),linewidths=(2,))<nl>CSF = plt.contourf(X, Y,log_mu)<nl>plt.clabel(CS, fmt = '%2.1d', colors = 'k', fontsize=14) #contour line labels<nl>CB = plt.colorbar(CSF, shrink=0.8, extend='both')<nl><nl>plt.xscale('log')<nl>plt.yscale('log')<nl><nl>plt.show()","out":"Mark a specific level in contour map on matplotlib"}
{"in":"kwargs = {\"childWrapper\": {\"inputFIeld\": \"Example2\"}}<nl>form = ParentForm(**kwargs)","out":"Flask-wtf: Using a kwarg to set the initial value for a field"}
{"in":"profile = list(profile)","out":"Can't change the values of fields of model objects in lists"}
{"in":"ip=\"192.168.1.1\"<nl>for line in csv_file:<nl><tab>if ip in line:<nl><tab><tab>found = True<nl><tab><tab>break","out":"How to check if an data already present in a CSV file using Python"}
{"in":"def get_values(self, env):<nl><tab>class ValUsers(models.Model):<nl><tab><tab>name = models.TextField(max_length=64)<nl><tab><tab>value = models.TextField(max_length=2048)<nl><tab>ret = EnvUsers.objects.raw(<nl><tab><tab>'SELECT a.id, a.name, v.value '<nl><tab><tab>' FROM Authorization a, Value v ' <nl><tab><tab>' WHERE a.user_root = v.parent '<nl><tab><tab>'<tab>  and a.active = %s '<nl><tab><tab>'<tab>  and v.active = %s '<nl><tab><tab>'<tab>  and v.name = %s ',<nl><tab><tab>[True, True, env]<nl><tab>)<nl><nl><tab>return {u.name: u.value for u in ret}","out":"Span models in Django without a ForeignKey"}
{"in":"def _example_id_default():<nl><tab>return HMAC(\"{}\".format(urandom(32).encode('base_64'))).hexdigest()<nl><nl>class ExampleMixin(object):<nl><tab>\"\"\"Mixin for `AnExample`\"\"\"<nl><nl><tab>example_id = Column(String(255), default=_example_id_default)","out":"Super with sqlalchemy mixins for default values"}
{"in":"import csv<nl>with open(\"data.csv\", \"wb\") as f:<nl><tab>csv.writer(f).writerows((k,) + v for k, v in maxDict.iteritems())","out":"Python: How to write a dictionary of tuple values to a csv file?"}
{"in":"FILTER_SOURCE_FILES = YES<nl>INPUT_FILTER = \"python path\/to\/doxypy.py\"","out":"How to make doxygen ignore the first line of a Python script?"}
{"in":"from Tkinter import *<nl>import sys<nl><nl>def write():<nl><tab>new_player = e1_var.get() + \" \" + e2_var.get()<nl><tab>with open('stats', 'a') as file:<nl><tab><tab>file.write(\"<nl>\" + new_player + \"<nl>\")<nl><nl><tab>players[new_player] = Label(text=new_player).grid(column=0)<nl><tab>e1_var.set(\"\")<nl><tab>e2_var.set(\"\")<nl><nl>root=Tk()<nl>root.title(\"Basketball Stats\")<nl>l1=Label(text=\"Player\").grid(column=0, row=0)<nl>l2=Label(text=\"Number\").grid(column=0, row=1)<nl><nl>e1_var = StringVar()<nl>e1 = Entry(textvariable=e1_var).grid(column=1, row=0)<nl><nl>e2_var = StringVar()<nl>e2 = Entry(textvariable=e2_var).grid(column=1, row=1)<nl><nl>b1=Button(text=\"Submit\", command=write).grid(column=1, row=3)<nl><nl>players = {}<nl>with open(\"stats\", \"r\") as file:<nl><tab>for line in file.read().split('<nl>'):<nl><tab><tab>players[line] = Label(text=line).grid(column=0)<nl><nl>root.mainloop()","out":"How to update Tkinter labels?"}
{"in":"import matplotlib.transforms as transforms<nl><nl>fig = plt.figure()<nl>ax = fig.add_subplot(111)<nl><nl>trans = transforms.blended_transform_factory(<nl><tab>ax.transData, ax.transAxes)<nl><nl>ax.plot(range(50))<nl>ax.axvline(20)<nl><nl>ax.text(20, 0.05, 'test', transform=trans, rotation='vertical', ha='right')","out":"Matplotlib - Add labels aligned to bottom of axis"}
{"in":"for line in fname:<nl><tab>line = re.sub('[\\(\\)\\{\\}\\'\\'\\,<>]','', line)<nl><tab>line = re.sub(r\"(\\.\\d)\\d*_?\\d*\", r\"\\1\", line, 1)<nl><tab>fields = line.rstrip(\"<nl>\").split()<nl><tab>outfile.write('%s  %s  %s  %s  %s  %s<nl>' % (fields[0],fields[1],fields[2],fields[3],fields[4],(fields[5])))","out":"How do I remove 2nd and rest digits after a period from column one of lines?"}
{"in":"filtered_clue = filter(lambda x: len(x['number']), clue)","out":"Remove empty sets from a dict inside a list (python 2.7)"}
{"in":"import pytz<nl>import datetime<nl><nl>fecha_actual_Madrid = pytz.timezone('Europe\/Madrid')<tab><nl>logging.info('time is %s', datetime.datetime.now(fecha_actual_Madrid ))","out":"Datetime in Google Cloud SQL [GAE + Python]"}
{"in":"import contextlib<nl>@contextlib.contextmanager<nl>def argv_tmp():<nl><tab>tmp = sys.argv<nl><tab>sys.argv = []<nl><tab>try:<nl><tab><tab>yield<nl><tab>finally:<nl><tab><tab>sys.argv = tmp<nl><nl>with argv_tmp():<nl><tab>from ROOT import *","out":"How can a function set the value of a variable without returning the value of that variable?"}
{"in":"def slicedict(d, s):<nl><tab>return {k:v for k,v in d.iteritems() if k.startswith(s)}","out":"Slicing a dictionary by keys that start with a certain string"}
{"in":"import argparse<nl><nl>def do_things(args):<nl><tab>print args<nl><tab># Do your stuff<nl><nl>mainparser = argparse.ArgumentParser()<nl>submainadder = mainparser.add_subparsers(title='subcommands')<nl>parser_ut = submainadder.add_parser('unittest')<nl>parser_ut.set_defaults(func=do_things)<nl><nl>if __name__ == \"__main__\":<nl><tab>stuff = mainparser.parse_args()<nl><tab>stuff.func(stuff)","out":"How do I check for a particular subparser?"}
{"in":"class MyHandler(tornado.web.RequestHandler):<nl><tab>@tornado.web.asynchronous<nl><tab>def get(self):<nl><tab><tab>self._pcb = tornado.ioloop.PeriodicCallback(self._cb, 1000)<nl><tab><tab>self._pcb.start()<nl><nl><tab>def _cb(self):<nl><tab><tab>self.write('Kapooya, Kapooya!')<nl><tab><tab>self.flush()<nl><nl><tab>def on_connection_close(self):<nl><tab><tab>self._pcb.stop()","out":"How to return some variable once in few seconds to client?"}
{"in":"import numpy<nl><nl>def rgba_unpremultiply(data):<nl><tab>a = numpy.fromstring(data, 'B') # Treat the string as an array of bytes<nl><tab>a = a.astype('I') # Cast array of bytes to array of uints, since temporary values needs to be larger than byte<nl><tab>alpha = a[3::4] # Every 4th element starting from index 3<nl><tab>alpha = numpy.where(alpha == 0, 255, alpha) # Don't modify colors where alpha is 0<nl><tab>a[0::4] = a[0::4] * 255 \/\/ alpha # Operates on entire slices of the array instead of looping over each element<nl><tab>a[1::4] = a[1::4] * 255 \/\/ alpha<nl><tab>a[2::4] = a[2::4] * 255 \/\/ alpha<nl><tab>return a.astype('B').tostring() # Cast back to bytes","out":"Process RGBA data efficiently using python?"}
{"in":"setup(console=[{'script':\"process.py\",'uac_info': \"requireAdministrator\"}])","out":"Python - Access denied error on windows 8"}
{"in":"from sqlalchemy import event<nl>@event.listens_for(Person.home_addresses, 'append')<nl>def receive_append(target, value, initiator):<nl><tab># set the address type to home<nl><tab>value.type = 'home'<nl><tab>return value","out":"Automatically setting properties in SQLAlchemy declarative models"}
{"in":"L = ['Chris Terman', 'Tom Brady', 'Eric Grimson', 'Gisele Bundchen']<nl><nl>print sorted(L,key=lambda x:x.split()[-1]) # sorted by last name<nl>['Tom Brady', 'Gisele Bundchen', 'Eric Grimson', 'Chris Terman']<nl><nl>print sorted(L)# sorted first name<nl>['Chris Terman', 'Eric Grimson', 'Gisele Bundchen', 'Tom Brady']","out":"Sorting a list of names in python"}
{"in":"for i, word in enumerate(z):<nl><tab>if \"-\" not in word:<nl><tab><tab>if word in d.keys():<nl><tab><tab><tab>z[i] = str(d[word])<nl><tab><tab>else:<nl><tab><tab><tab>count = count + 1<nl><tab><tab><tab>d[word] = count<nl><tab><tab><tab>z[i] = str(count)","out":"python : replace words in string"}
{"in":"p.drawString(10, 800, \"Name\")<nl>p.drawString(10, 790, \"Address\")<nl>p.drawString(10, 780, \"School\")","out":"Generate pdf with reportlab"}
{"in":"df['bins'] = df.groupby(df.hours).density.transform(func)","out":"join or merge values calculated on grouped pandas dataframe"}
{"in":"class MYREALM_securepage(webapp.RequestHandler):<nl>  def get(self):<nl><tab>  if not 'Authorization' in self.request.headers:<nl><tab><tab>  self.response.headers['WWW-Authenticate'] = 'Basic realm=\"MYREALM\"'<nl><tab><tab>  self.response.set_status(401)<nl><tab><tab>  self.response.out.write(\"Authorization required\")<nl><tab>  else:<nl><tab><tab>  auth = self.request.headers['Authorization']<nl><tab><tab>  (username, password) = base64.b64decode(auth.split(' ')[1]).split(':')<nl><tab><tab>  # Check the username and password, and proceed ...","out":"Python\/WebApp Google App Engine - testing for user\/pass in the headers"}
{"in":"def depth(t):<nl><tab>try:<nl><tab><tab>return 1+max(map(depth,t))<nl><tab>except:<nl><tab><tab>return 0<nl><nl>t = (4, (3, 5, (2, 4, 6, (1, 3, 5, 7))))<nl>print(depth(t)) # 4<nl>t = tuple(tuple(range(k)) for k in range(1,200))<nl>print(depth(t)) # 2","out":"Easy way to determine a nesting level of nested tuples, in Python"}
{"in":"import json<nl><nl>f = open('data\/convertcsv.json');<nl><nl>data = json.loads(f.read())<nl><nl>f.close()<nl><nl>for row in data:<nl><tab><tab>print row['sentiment']","out":"Right way to load data from json file in python"}
{"in":"G={'E': 18.0, 'D': 17.0, 'C': 19.0, 'B': 15.0, 'A': 0}<nl><nl><nl>count = 0<nl>_sum = 0<nl>for key in G:<nl><tab>count += 1<nl><tab>_sum += G[key]<nl><nl>print('this is the mean: ', _sum\/count)","out":"Finding mean of a values in a dictionary"}
{"in":"AA[1,2]='K'","out":"Python: replacing an element in an array without changing array shape"}
{"in":"with open('ProjectEuler11Data.txt') as numbers:<nl><tab>data = numbers.readlines()<nl>lines = [line.split() for line in data]","out":"Creating lists with loops in Python"}
{"in":"values = range(10)<nl>random.shuffle(values)<nl><nl>def get_value():<nl><tab>return values.pop()","out":"In python, how to generate a random integer in a range, excluding some numbers in a list?"}
{"in":"from selenium import webdriver<nl>driver = webdriver.Firefox()<nl>driver.get('http:\/\/example.com')<nl>element = driver.find_element_by_class_name(\"yourClassName\") #or find by text or etc<nl>element.click()","out":"How to scrape dynamic webpages by Python"}
{"in":"l = ['03:18:45.2345', '03:19:23']<nl>for item in l:<nl><tab>time_format = \"%H:%M:%S.%f\" if '.' in item else \"%H:%M:%S\"<nl><tab>print datetime.datetime.strptime(item, time_format)","out":"From string to datetime with or without millisecond"}
{"in":"second_longest = sorted(sentence.split(), key=len)[-2]","out":"Is there a way to find the second longest word in a sentence in Python?"}
{"in":"all_res = sorted(list(fq) + list(sq), key = lambda x: (x[-1], x[0]))","out":"merge two lists in python - but sort them during merge"}
{"in":"overlapped = plot(xdata[-2:-1],ydata[-2:-1],'-',lw=4.5)<nl><nl>for item in overlapped:<nl><tab>item.set_solid_capstyle('butt')","out":"Accurate line ends with matplotlib"}
{"in":"from matplotlib import pyplot as plt<nl>import numpy as np<nl>randn = np.random.randn<nl>from pandas import *<nl><nl>idx = Index(arange(1,11))<nl>df = DataFrame(randn(10, 5), index=idx, columns=['A', 'B', 'C', 'D', 'E'])<nl>vals = np.around(df.values,2)<nl>normal = plt.normalize(vals.min()-1, vals.max()+1)<nl><nl>fig = plt.figure(figsize=(15,8))<nl>ax = fig.add_subplot(111, frameon=True, xticks=[], yticks=[])<nl><nl>the_table=plt.table(cellText=vals, rowLabels=df.index, colLabels=df.columns, <nl><tab><tab><tab><tab><tab>colWidths = [0.03]*vals.shape[1], loc='center', <nl><tab><tab><tab><tab><tab>cellColours=plt.cm.hot(normal(vals)))","out":"matplotlib: using a colormap to color table-cell background"}
{"in":"def __eq__(self, value):<nl><tab>return self.value == value<nl><nl>def __len__(self):<nl><tab>return len(self.value)","out":"Django inheritance from models.CharField with choices gives error"}
{"in":"from mpl_toolkits.axes_grid1 import make_axes_locatable <nl><nl>ax1 = plt.subplot2grid((1,1), (0,0))<nl>divider = make_axes_locatable(ax1) <nl>ax2 = divider.append_axes(\"bottom\", size=\"100%\", pad=0.5)<nl>ax3 = divider.append_axes(\"bottom\", size=\"100%\", pad=1)","out":"Adjust the distance only between two subplots in matplotlib"}
{"in":"def take(dictionary, key):<nl><tab>return {key: dictionary[key]}<nl><nl>R = take(D, k)","out":"Slice out one element from a python dictionary"}
{"in":"import pandas as pd<nl>data_xls = pd.read_excel('export.csv', 'Sheet1', index_col=None)<nl>data_xls.to_csv('exceltocsv.csv', encoding='utf-8')","out":"How to open file and save as csv"}
{"in":"query = \"SELECT COUNT(*) from `%s`\" %table<nl>cursor.execute(query)<tab><tab><tab> #execute query separately<nl>res = cursor.fetchone()<nl>total_rows = res[0]<tab>  #total rows","out":"Python\/MySQL- How to properly use %s for counting rows"}
{"in":"from shapely.geometry import box, Polygon<nl><nl>for pixel in pixels:<nl><tab># say the pixel has llx, lly, urx, ury values.<nl><tab>pixel_shape = box(llx, lly, urx, ury)<nl><nl><tab>for polygon in approximately_overlapping:<nl><tab><tab># say the polygon has a ``value`` and a 2-D array of coordinates <nl><tab><tab># [[x0,y0],...] named ``xy``.<nl><tab><tab>polygon_shape = Polygon(xy)<nl><tab><tab>pixel_value += polygon_shape.intersection(pixel_shape).area * value","out":"Data binning: irregular polygons to regular mesh"}
{"in":"if json.encoder.ESCAPE_DCT.get('\/') != '\/':<nl><tab>json.encoder.ESCAPE_DCT['\/'] = '\/'","out":"Google App Engine Python simplejson escaping?"}
{"in":"approved_rides = [ride for ride in initial_rides if any(<nl><tab><tab>  (lat_min < step.latitude< lat_max and \\<nl><tab><tab>   lng_min< step.longitude< lng_max) for step in ride.route.steps.all())]","out":"need help optimizing a geo algorithm using a map() operation, lists, floats and some validation"}
{"in":"mydict = dict((key, {}) for key in keylist)","out":"Setting a value to a dictionary's dictionary value"}
{"in":"peaks_np = array([s.max() for s in segments])","out":"Normalize sub array lengths in a numpy array to do math on them"}
{"in":"from mpl_toolkits.mplot3d import Axes3D<nl>from mpl_toolkits.mplot3d.art3d import Poly3DCollection<nl>import matplotlib.pyplot as plt<nl>fig = plt.figure()<nl>ax = Axes3D(fig)<nl>x = [0,1,1,0]<nl>y = [0,0,1,1]<nl>z = [0,1,0,1]<nl>verts = [zip(x, y,z)]<nl>ax.add_collection3d(Poly3DCollection(verts))<nl>plt.show()","out":"Plotting 3D Polygons in python-matplotlib"}
{"in":"import re<nl><nl>s = \"5+5.[)]1\"<nl>s = re.search(\"\\d+\\+\\d+\", s).group()<nl>print(s) # 5+5","out":"Python string trimming"}
{"in":"values = {'what': 'surreal', 'punctuation': 'is'}<nl>template=\" Hello, {what} world {punctuation} One of Python least-used functions is \"<nl>t = template.format(**values)<nl>print(t)<nl># Hello, surreal world is One of Python least-used functions is","out":"How to substitute values in a MAP to string template in Python"}
{"in":"with open('rooms') as f:<nl><tab>chunks = f.read().split('<nl><nl>')<nl><nl>people_by_id = {}<nl><nl>for chunk in chunks:<nl><tab>data = dict(row.split('=', 1) for row in chunk.split('<nl>'))<nl><tab>people_by_id[data['id']] = data<nl><tab>del data['id']<nl><nl>def get_person_by_id(id):<nl><tab>return people_by_id.get(id)","out":"Finding a line in a file then reading next few lines in Python"}
{"in":"form.getvalue('toggle-event')","out":"Toggle low state won't be sent to python cgi"}
{"in":"with open('\/tmp\/test.tsv') as infile, open('\/tmp\/test2.tsv', 'w') as outfile:<nl><tab>for line in infile:<nl><tab><tab>tsplit = line.split(\"\\t\")<nl><tab><tab>firstcolumns = tsplit[:-1]<nl><tab><tab>lastitems = tsplit[-1].strip().split(\";\")<nl><tab><tab>for item in lastitems:<nl><tab><tab><tab>allcolumns = firstcolumns + item.split(\"=\")<nl><tab><tab><tab>outfile.write(\"\\t\".join(allcolumns) + \"<nl>\")","out":"Extract data from tsv file python"}
{"in":"from collections import defaultdict<nl>import json<nl><nl>d = defaultdict(dict)<nl>for date in dates:<nl><tab>d[date.year][date.month] = info_for_date(date)<nl>json.dumps(d)","out":"How do I create a data structure that will be serialized this JSON format in python?"}
{"in":"view.setRootIndex(model.index(\"C:\\Myfolder\"))","out":"Python PyQt QFileSystemModel Root Path"}
{"in":"fig = plt.figure()<nl>ax = fig.add_axes()<nl>ax.invert_xaxis()","out":"loglog plots with inverted x_axis in python"}
{"in":"random.shuffle()","out":"Python: How to find scrambled words in a wordlist"}
{"in":"def GetSelectedNodes(self,*args):<nl><tab>cal = cmds.checkBox(self.xAxis,q = True, v = True)<nl><tab>print cal","out":"maya python print state of checkbox?"}
{"in":"import sys<nl><nl>def foobar():<nl><tab>print sys._getframe().f_code.co_name","out":"Equivalent of __func__ (from C) in Python"}
{"in":"self.root.grid_columnconfigure(0, weight=1)<nl>self.root.grid_rowconfigure(0, weight=1)<nl>self.contentFrame.grid_columnconfigure(0, weight=1)<nl>self.contentFrame.grid_rowconfigure(0, weight=1)<nl>self.topBar.grid_columnconfigure(0, weight=1)<nl>self.topBar.grid_rowconfigure(0, weight=1)","out":"How to center a tkinter widget in a sticky frame"}
{"in":"print(\"%s %s\" % (hello, myvar))","out":"Difficulties with the % Operator in Python"}
{"in":"class Comment(db.Model):<nl><tab>series = db.ReferenceProperty(reference_class=Series);<nl><nl><tab>def series_id(self):<nl><tab><tab>return Comment.series.get_value_for_datastore(self)","out":"How do I get the key value of a db.ReferenceProperty without a database hit?"}
{"in":"from pymongo import MongoClient<nl># Assuming youre running mongod on 'localhost' with port 27017<nl>c = MongoClient('localhost',27017)<nl>c.database_names()","out":"how to issue a \"show dbs\" from pymongo"}
{"in":"from rpy2.robjects.packages import importr<nl><nl>MASS = importr('MASS')<nl><nl># the function is now at MASS.fitdistr","out":"fitdistr in rpy2"}
{"in":"myList = ['a','b','c']<nl>myStr = 'z'<nl>res = [[myStr, x] for x in myList]","out":"Python: pair a single element with every element in a list"}
{"in":"class myBool():<nl><tab>def __init__(self, val):<nl><tab><tab>self.value = val<nl><nl><tab>def __repr__(self):<nl><tab><tab>return self.value<nl><nl><tab>def __invert__(self):<nl><tab><tab>if self.value == 'A':<nl><tab><tab><tab>return 'B'<nl><tab><tab>else:<nl><tab><tab><tab>return 'A'<nl><nl>def main():<nl><tab>a = myBool('A')<nl><tab>print(a)<nl><tab>print(~a)<nl><nl>if __name__ == '__main__':<nl><tab>main()","out":"Model boolean variables in Python"}
{"in":"doc.Tables(1).Rows(1).Delete()","out":"Python - Unable to Edit Table Contents in Microsoft Word using win32com"}
{"in":"from PIL import Image<nl>from PIL import ImageChops<nl><nl>a = Image.open(\"pict1.jpg\")<nl>b = Image.open(\"pict2.jpg\")<nl>diff = ImageChops.difference (a, b)<nl>RED = ('red')<nl>RL = Image.new('RGB', diff.size, RED) # Make a red layer the same size<nl>RedDiff = ImageChops.multiply(RL, diff)<nl>Result = ImageChops.blend(RedDiff, b, 0.7)<nl>Result.show()","out":"Color in red diffrencies between two pictures"}
{"in":"class TourAdmin(admin.ModelAdmin):<nl>   def queryset(self, request):<nl><tab>  qs = super(TourAdmin, self).queryset(request)<nl><tab>  if request.user.is_superuser:<nl><tab><tab><tab>return qs<nl><tab>  return qs.filter(ActionUserCode=request.user)<nl>admin.site.register(Tour,TourAdmin)","out":"Filtering Django admin changelist to show specific rows based on the logged-in user"}
{"in":"super(SyncableMixin, self).save(*args, **kwargs)","out":"Django Model: How to use mixin class to override django model for function likes save"}
{"in":"result = serve_fileobj(RETURN_FILE,disposition='attachment',<nl><tab><tab><tab><tab><tab><tab> content_type='.txt',name=filename)<nl>os.unlink(filename)<nl>return result","out":"How to serve file with cherrypy and delete the file from server?"}
{"in":"def delete_everything(self):<nl><tab>Reporter.objects.all().delete()<nl><nl>def drop_table(self):<nl><tab>cursor = connection.cursor()<nl><tab>table_name = self.model._meta.db_table<nl><tab>sql = \"DROP TABLE %s;\" % (table_name, )<nl><tab>cursor.execute(sql)","out":"How to remove all of the data in a table using django"}
{"in":"(mE, a)","out":"Scipy - Executing part of function only when function input values change"}
{"in":"cmap = matplotlib.colors.ListedColormap(['green', 'blue', 'red'])<nl>bounds=[0,125,200,400]<nl>cax = inset_axes(ax3, width=\"8%\", height='70%', loc=4)<nl>cbar = matplotlib.colorbar.ColorbarBase(cax, cmap=cmap, boundaries=bounds)<nl>cax.yaxis.set_ticks_position('left')<nl>cbar.ax.set_yticklabels(['0', '125', '200', '200+'])<nl>cax.yaxis.set_label_position('left')<nl>cbar.set_label('Income (,000s)')","out":"Custom Matplotlib ColorBar for Scatterplot"}
{"in":"metric=\"precomputed\"","out":"DBSCAN in Python: Unexpected result"}
{"in":"pd.to_datetime(data['Deadline Time'], coerce=True)","out":"How does one handle zero datetime in python pandas?"}
{"in":"def adminhome():<nl><tab>row1 =''<nl><tab>try:<nl><tab><tab>db = connect_db()<nl><tab><tab>rows=g.db.query(\"SELECT * FROM `auth_user` order by id DESC \")<nl><tab><tab>rows1 = list(rows)<nl><tab><tab>data=''<nl><tab><tab>if len(rows1) > 0:<nl><tab><tab><tab>users = rows1<nl><tab><tab>#close_db(db)<nl><tab>except Exception as e:<nl><tab><tab>users = e<nl><tab>return users<nl><nl>@app.context_processor<nl>def inject():<nl><tab>return dict(adminhome=adminhome)","out":"register function for all urls in flask"}
{"in":"stackOfImages = np.array((image1, image2)) #iterate over these if many more<nl>redData = stackOfImages[:, N-1, M-1]","out":"How to extract vector from 3d numpy array?"}
{"in":"query_set = Item.objects.extra(select={'count': 'count(1)'}, <nl><tab><tab><tab><tab><tab><tab><tab>   order_by=['-count']).values('count', 'category')<nl>query_set.query.group_by = ['category_id']","out":"Django equivalent for count and group by"}
{"in":"urlpatterns = patterns('tiptop.views',<nl><tab>(r'^(\\d+)\/(\\d*)$', 'test_items'),<nl>)","out":"Getting a Caught NoReverseMatch error in django"}
{"in":"import datetime<nl><nl>tomorrow = datetime.datetime.today()+datetime.timedelta(days=1) <nl><nl>upcoming_obj = Events.objects.filter(start_date__gt = tomorrow)","out":"Retrive data where date and time are more than tomorrow"}
{"in":"dict = { 'a': [ \"hello\", \"hey\", \"hi\" ] }","out":"How can I re-order the values of a dictionary in python?"}
{"in":"dictionary = {}<nl>with open('filename') as f:<nl><tab>for line in f:<nl><tab><tab>dictionary[line[0]] = line[1]","out":"Python text into dictionary"}
{"in":"getattr(CallMe, variable)()","out":"Call method from string"}
{"in":"class Foo(ndb.Model):<nl>  CACHE_KEY = 'bla_cache'<nl>  bla = ndb.StringProperty()<nl><nl>  @clasmethod<nl>  def build_page(cls):<nl><tab>result = memcache.get(CACHE_KEY)<nl><tab>if result is None:<nl><tab>  result = cls.query().fetch(100)<nl><tab>return result<nl><nl>  def _post_put_hook(self, future):<nl><tab>memcache.delete(CACHE_KEY)","out":"Best practices for caching front page queries for Google App Engine (GAE)"}
{"in":"import matplotlib.pyplot as plt<nl>from numpy import *<nl>xx = arange(0,700,30)<nl>tt = arange(0,100,5)<nl>U = outer(xx,tt)<nl>V = outer(xx**(1\/2),tt\/4)<nl>plt.subplot(121)<nl>plt.pcolor(tt,xx,U)<nl>plt.colorbar()<nl>#plt.axes([0,600,0,100])<nl><nl>plt.xlim(0,100)<nl>plt.ylim(0,600)<nl><nl>plt.subplot(122)<nl>plt.pcolor(tt,xx,V)<nl>plt.colorbar()<nl><nl>plt.show()","out":"Fixing axes ranges in pyplot subplots"}
{"in":"data = {}<nl><nl>for dir_item in os.listdir(path):<nl><tab>dir_item_path = os.path.join(path, dir_item)<nl><tab>if os.path.isfile(dir_item_path):<nl><tab><tab>with open(dir_item_path, 'r') as f:<nl><tab><tab><tab>data[dir_item] = f.read()<nl><tab><tab><tab>for part in data[dir_item].split():<nl><tab><tab><tab><tab>if part.startswith('color='):<nl><tab><tab><tab><tab><tab>print part[6:]","out":"Python: read all files from directory"}
{"in":"int1, int2 = tuple","out":"How do I get integers from a tuple in Python?"}
{"in":"data = np.load(filename, mmap_mode='r')","out":"Extracting specific values from .npy file"}
{"in":"from main import Session, User","out":"Using a SQLAlchemy session from a separate python file"}
{"in":"from scipy.ndimage.interpolation import zoom<nl><nl>plt.pcolor(R,cmap='RdBu')<nl>plt.show()<nl><nl>R2 = zoom(R,2)<nl>plt.pcolor(R2,cmap='RdBu')<nl>plt.show()<nl><nl>R5 = zoom(R,5)<nl>plt.pcolor(R5,cmap='RdBu')<nl>plt.show()<nl><nl>R10 = zoom(R,10)<nl>plt.pcolor(R10,cmap='RdBu')<nl>plt.show()","out":"Python: interpolate matrix for figure"}
{"in":"def increment(self, seconds):<nl><tab>with self._mutex:<nl><tab><tab>self._countdownInSec += seconds","out":"Is a mutex really necessary in this piece of code?"}
{"in":"MyPrettyPrinter(stream=f).pprint(d)","out":"Write UTF-8 strings to file with pprint"}
{"in":"from visual import *<nl><nl>scene.title = \"Faces example\"<nl>scene.width = 600<nl>scene.height = 400<nl><nl>f = frame()<nl>tri = faces(<nl><tab>pos = [<nl><tab><tab>[0.,0.,0.], [1.,0.,0.], [0.,1.,0.],   # first tri - vertices<nl><tab><tab>[0.,0.,0.], [-1.,0.,0.], [0.,-1.,0.]  # second tri - vertices<nl><tab>],<nl><tab>color = [<nl><tab><tab>[1.,0.,0.], [0.5,0.5,0.], [0.,1.,0.], # first tri - colors<nl><tab><tab>[0.,0.,1.], [0.,0.5,0.5], [0.,1.,0.]  # second tri - colors<nl><tab>],<nl><tab>frame = f<nl>)<nl><nl>tri.make_normals()<nl>tri.make_twosided()<nl><nl>while True:<nl><tab>rate(100)<nl><tab>f.rotate(angle=0.01)","out":"Create a single face in VPython?"}
{"in":"class Foo(object):<nl><tab>pass<nl><nl>class Bar(object):<nl><tab>pass<nl><nl>dispatch_dict = {\"Foo\": Foo, \"Bar\": Bar}<nl>dispatch_dict[\"Foo\"]() # returns an instance of Foo","out":"Creating an Instance of a Class with a variable in Python"}
{"in":"import thread, time<nl><nl>def takes_a_while():<nl><nl><tab>def print_status():<nl><tab><tab>while True:<nl><tab><tab><tab>print i   # print current i every two seconds<nl><tab><tab><tab>time.sleep(2)<nl><nl><tab>status_thread = thread.start_new_thread(print_status, ())<nl><tab>for i in xrange(10000000):<nl><tab><tab>print '*',<nl><tab><tab>time.sleep(0.1)<nl><tab>status_thread.exit()<nl><nl>takes_a_while()","out":"Python - while a long-running loop is going, how to have a thread periodically \"do something\" in the same scope?"}
{"in":"import ConfigParser<nl><nl>config = ConfigParser.ConfigParser()<nl>config.read('conf.ini')<nl><nl>try:<nl><tab>val = config.get('section1', 'var1')<nl>except:<nl><tab>sys.exit(1)<nl><nl>print val","out":"How to parse ini files and choose appropriate function with python"}
{"in":"import turtle<nl><nl>turtle.colormode(255)<nl><nl>for i in range(0,255,15):<nl><tab>turtle.pencolor(i,i,i)<nl><tab>turtle.write(\"Hello\")<nl><tab>turtle.delay(100)","out":"Fading Text in Python Turtle"}
{"in":"#!\/usr\/bin\/env python<nl>import csv<nl>afile = open('<directory>\/*.csv', 'r+')<nl>csvReader1 = csv.reader(afile)<nl>for i in range(2):<nl><tab>print csvReader1.next()","out":"Print the first two rows of a csv file to a standard output"}
{"in":"import datetime<nl><nl>td = datetime.timedelta(seconds=time.time()-a_unix_timestamp)","out":"using unix timestamp generate timedelta for babel's format_timedelta"}
{"in":"import threading<nl>import time<nl><nl>value = 3<nl><nl>def process():<nl><tab>while True:<nl><tab><tab>print(value)<nl><tab><tab>time.sleep(1)<nl><nl>thread = threading.Thread(target=process)<nl>thread.start()<nl><nl>while True:<nl><tab>value = input('Enter value: ')","out":"How to read users input when in loop (and without blocking work in this loop)?"}
{"in":"from pprint import pprint<nl><nl>def getCurrentVariableState():<nl><tab>pprint(locals())<nl><tab>pprint(globals())","out":"Python, print names and values of all bound variables"}
{"in":"import csv<nl>testSet = set(['thissucks.in', 'whateverlife.in', 'crapface.in', 'lasttry.in'])<nl>with open('mag.csv', 'ab+') as f:<nl><tab>writer = csv.writer(f ,dialect= 'excel', delimiter= ',')<nl><tab>for domain in testSet:<nl><tab><tab>writer.writerow([domain, '', 'Related'] )","out":"Writing a set plus a formatted string to a CSV?"}
{"in":"foo,bar,baz,qux","out":"Process the data after using str.split"}
{"in":"from Tkinter import *<nl>master = Tk()<nl>listbox = Listbox(master, selectbackground=\"red\")","out":"python modify Tkinter.Listbox parameter"}
{"in":"list1 = [0,1,4,8,87,6,4,7,5,'a','f','er','fa','vz']<nl>tuple1 = (8,5,'f')<nl><nl>def my_contains(first, second):<nl><tab>return bool(set(first).intersection(second))<nl><nl>my_contains(list1, tuple1) # True<nl>my_contains(list1, [1]) # True<nl>my_contains(list1, (125,178,999)) # False","out":"Multiple parameters for the __contains__ function"}
{"in":"regex = re.compile(r'\"(?:[^\"]|\"\")*\"')","out":"Regex for string matching with special escaping rule"}
{"in":"query = Q()<nl>for search in (prefs.address1, prefs.address2):<nl><tab>if search:<nl><tab><tab>query |= Q(title__icontains=search)<nl>results = Stores.objects.filter(query)","out":"How to deal with \"None\" DB values in Django queries"}
{"in":"dice=random.randint(1,7)","out":"Program that simulates rolling a dice, and tells you how many times you roll each number"}
{"in":"import sys<nl>sys.path.append('\/home\/markstadt\/.local\/lib\/python\/site-packages')<nl>import soundcloud","out":"Accessing module installed on Pythonanywhere in Web2py"}
{"in":"#!usr\/bin\/env python<nl>import matplotlib.pyplot as plt<nl>import numpy as np<nl><nl>x = np.arange(-180.0,190.0,10)<nl>theta = (np.pi\/180.0 )*x<tab># in radians<nl><nl>offset = 2.0<nl><nl>R1 = [-0.358,-0.483,-0.479,-0.346,-0.121,0.137,0.358,0.483,0.479,0.346,0.121,\\<nl>-0.137,-0.358,-0.483,-0.479,-0.346,-0.121,0.137,0.358,0.483,0.479,0.346,0.121,\\<nl>-0.137,-0.358,-0.483,-0.479,-0.346,-0.121,0.137,0.358,0.483,0.479,0.346,0.121,\\<nl>-0.137,-0.358]<nl><nl>fig1 = plt.figure()<nl>ax1 = fig1.add_axes([0.1,0.1,0.8,0.8],polar=True)<nl>ax1.set_ylim(-2,2)<nl>ax1.set_yticks(np.arange(-2,2,0.5))<nl>ax1.plot(theta,R1,lw=2.5)","out":"Changing axis options for Polar Plots in Matplotlib\/Python"}
{"in":"content = b'cmd\\x00arg1\\x00arg2\\x00'<nl>print(content.replace(\"\\x00\", \" \"))","out":"Converting \\x00 with a space"}
{"in":"__init__.py","out":"ImportError: No module named b - Python"}
{"in":"print \" \"+ \"\\033[01;41m\" + \" \" +\"\\033[01;46m\" + \" \" + \"\\033[01;42m\"","out":"Change the color of text in python shell?"}
{"in":"if not 'seen' in session.data:<nl><tab># new session, set a flag<nl><tab>session.data['seen'] = True","out":"Python, handling session in CGI"}
{"in":"(await-svctim)\/await*100","out":"Anyone benchmarked virtual machine performance for build servers?"}
{"in":"for circle in circles[:]:<nl><tab>circle.update()","out":"Python & Pygame: Updating all elements in a list under a loop during iteration"}
{"in":"class MyLayout(BoxLayout):<nl><tab>def getPerson1Name(self):<nl><tab><tab>return App.get_running_app().person2.getName()","out":"Kivy - How to make an object accessible from both Kv Language child widgets and Python widget's classes?"}
{"in":"import subprocess # This is how we're going to call the commands.<nl><nl>samples = {} # Empty dict<nl>with open('inputfile','r') as f:<nl><tab>for line in f:<nl><tab><tab># Extract sampleID, other things depending on file format...<nl><nl><tab><tab>samples[sampleID] = [rgid, rglb, grpl, rgpu, rgsm] # Populate dict<nl><nl>for sampleID in samples:<nl><tab>rgid, rglb, grpl, rgpu, rgsm = samples[sampleID]<nl><nl><tab># Now you can run your commands using the subprocess module.<nl><tab># Remember to add a change based on sampleID if e.g. the IO files differ.<nl><tab>subprocess.call(['picard-tools', 'AddOrReplaceReadGroups', 'I=input.bam', <nl><tab><tab>'O=output.bam', 'RGID=%s' % rgid, 'RGLB=%s' % rglb, 'RGPL=%s' %rgpl,<nl><tab><tab>'RGPU=%s' % rgpu, 'RGSM=%s' % rgsm, 'VALIDATION_STRINGENCY=SILENT', <nl><tab><tab>'SORT_ORDER=coordinate', 'CREATE_INDEX=true'])","out":"From spreadsheet to dictionary in ipython\/python & more?"}
{"in":"from datetime import datetime<nl><nl>date_format = XFStyle()<nl>date_format.num_format_str = 'dd\/MM\/yyyy'<nl>plan.write(1, 4, datetime.strptime(\"01\/01\/2014\", \"%d\/%M\/%Y\"), date_format)","out":"Writing date format using xlwt"}
{"in":"from sympy import *<nl>s = symbols(\"s\")<nl>t = symbols(\"t\", positive=True)<nl>h = 1\/(s**3 + s**2\/5 + s)<nl>inverse_laplace_transform(h,s,t).evalf().simplify()","out":"Getting a better answer from sympy inverse laplace transform"}
{"in":"A1 = [1, 2, 3, 3, 4, 4, 4]<nl>B1 = [1, 2, 3, 4, 5, 6, 7]<nl>A2 = []<nl>B2 = []<nl><nl>for i in range(len(A1)):<nl><tab>if A1[i] != A1[i + 1]:<nl><tab><tab>A2.append(A1[i])<nl><tab><tab>B2.append(B1[i])<nl><tab>else:<nl><tab><tab>j = i + 1<nl><tab><tab>sum = B1[i]<nl><tab><tab>while j < len(A1) and A1[i] == A1[j]:<nl><tab><tab><tab>sum += B1[j]<nl><tab><tab><tab>del A1[j]<nl><tab><tab><tab>del B1[j]<nl><tab><tab>A2.append(A1[i])<nl><tab><tab>B2.append(sum)<nl><tab><tab>if j >= len(A1):<nl><tab><tab><tab>break<nl><nl>print A2<nl>print B2","out":"If column A repeats, sum column 2"}
{"in":"class Features(EmbeddedDocument):<nl><tab>version = FloatField()<nl><tab>data = ListField(StringField())","out":"MongoEngine ListField within a EmbeddedDocument throws TypeError on validation"}
{"in":"images.resize(data, width=188)","out":"Google Python Image Library - How to resize an image based on its width?"}
{"in":"python-pygraphviz","out":"Enable to use django-extensions with pygraphviz"}
{"in":"import time<nl>from multiprocessing import Pool, Value, Lock<nl>import decimal<nl>import random<nl><nl>number = Value('i', 0)<nl>lock = Lock()<nl>lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h','i', 'j', 'k']<nl><nl>def thefunction(listi):<nl><tab>time.sleep(decimal.Decimal(random.random()))<nl><tab>with lock:<nl><tab><tab>number.value += 1<nl><tab><tab>print time.strftime('%H:%M:%S'), number.value, listi<nl><nl>def initializer(*args):<nl><tab>global number, lock<nl><tab>number, lock = args<nl><nl>pool = Pool(4, initializer, (number, lock))<nl>pool.map(thefunction, lists)<nl>print number.value","out":"Python Increment a number in a function called with multiprocessing.pool.map()"}
{"in":"import matplotlib.pyplot as plt<nl>import numpy as np<nl>fig = plt.figure()<nl>ax = fig.add_subplot(111)<nl>ax.plot(np.random.rand(10))<nl><nl>retval = -1<nl>def onclick(event):<nl><tab>print 'button=%d, x=%d, y=%d, xdata=%f, ydata=%f'%(event.button, event.x, event.y, event.xdata, event.ydata)<nl><tab># Record the x location of the user's click in the global variable and close the figure<nl><tab>global retval<nl><tab>retval = event.xdata<nl><tab>plt.close()<nl><nl>cid = fig.canvas.mpl_connect('button_press_event', onclick)<nl># Bring up the figure (and wait)<nl>plt.show()<nl><nl>print 'User selected point {0}'.format( retval )","out":"python return ydata from matplotlib click"}
{"in":"# A Foolish Consistency is the Hobgoblin of Little Minds [1]<nl># [1]: http:\/\/www.python.org\/dev\/peps\/pep-0008\/#a-foolish-consistency-is-the-hobgoblin-of-little-minds","out":"How should I format a long url in a python comment and still be PEP8 compliant"}
{"in":"ListLayers (map_document_or_layer, {wildcard}, {data_frame})","out":"ArcPy Mapping: batch symbolizing layers and exporting each as a JPEG (ArcGIS 10.2)"}
{"in":"obj.some_function( '1', 2, '3', g=\"foo\", h=\"bar\" )","out":"python function with optional arguments"}
{"in":"with open(\"Input.txt\") as inFile:<nl><tab>for item in inFile:<nl><tab><tab>datePart, holiday = item.split(\", \", 1)<nl><tab><tab>month, day = datePart.split()","out":"Tokenizing with different delimiters"}
{"in":"import glob<nl>results = [open(f) for f in glob.glob(\"*.data\")]<nl>sep = \",\"<nl># Uncomment if your Excel formats decimal numbers like 3,14 instead of 3.14<nl># sep = \";\"<nl><nl>with open(\"res.csv\", 'w') as fout:<nl><tab>for row in range(21):<nl><tab><tab>iterator = (f.readline().strip().replace(\"\\t\", sep) for f in results)<nl><tab><tab>line = sep.join(iterator)<nl><tab><tab>fout.write(\"{0}<nl>\".format(line))","out":"Python- Read from Multiple Files"}
{"in":"import sys<nl>sys.path.append('\/your\/dir\/goes\/here')<nl>from base import foo","out":"Python Imports From The Directory Above"}
{"in":"f = open('test.dat', 'r')<nl>while True:<nl><tab>ch=f.read(1)<nl><tab>if not ch: break<nl><tab>print ch","out":"Python - How to read file one character at a time?"}
{"in":"edge_list = []<nl>delete_these = []<nl>for point, edges in edges_per_point.items():<nl><tab>edge_list.append(edges.pop(0))<nl><tab>if edges:<nl><tab><tab>edges_per_point[point] = edges<nl><tab>else:<nl><tab><tab>delete_these.append(point)<nl><nl>for point in delete_these:<nl><tab>del edges_per_point[point]","out":"Removing item from dictionary of lists"}
{"in":"indices = 0, 2<nl>somelist = [i for j, i in enumerate(somelist) if j not in indices]","out":"Deleting multiple elements from a list"}
{"in":"mask = freq>=0<nl>pl.plot(freq[mask]*2*np.pi, np.sqrt(sp[mask].real**2+sp[mask].imag**2))<nl>pl.plot(freq[~mask]*2*np.pi, np.sqrt(sp[~mask].real**2+sp[~mask].imag**2))","out":"how to remove the unecessay straight line in the plot?"}
{"in":"nx.draw_networkx(G,with_labels=False)","out":"NetworkX - Plot Graphs without labels"}
{"in":"import sqlalchemy.types as types<nl><nl>class UUID(types.TypeEngine):<nl><tab>def get_col_spec(self):<nl><tab><tab>return \"uuid\"<nl><nl><tab>def bind_processor(self, dialect):<nl><tab><tab>def process(value):<nl><tab><tab><tab>return value<nl><tab><tab>return process<nl><nl><tab>def result_processor(self, dialect):<nl><tab><tab>def process(value):<nl><tab><tab><tab>return value<nl><tab><tab>return process<nl><nl>table = Table('foo', meta,<nl><tab>Column('id', UUID(), primary_key=True),<nl>)","out":"How can I use UUIDs in SQLAlchemy?"}
{"in":"x='iamonlywhoknock BREAKINGBAD<nl>'.split(\" \")<nl>mydict={x[0]:x[1]}","out":"String to Dictionary Python"}
{"in":"import MySQLdb<nl>import os<nl>import datetime<nl><nl>con = MySQLdb.connect(host='localhost', user='root', passwd='password', db='test')<nl>cur = con.cursor()<nl><nl>cur.execute(\"SHOW TABLES\")<nl>data = \"\"<nl>tables = []<nl>for table in cur.fetchall():<nl><tab>tables.append(table[0])<nl><nl>for table in tables:<nl><tab>data += \"DROP TABLE IF EXISTS `\" + str(table) + \"`;\"<nl><nl><tab>cur.execute(\"SHOW CREATE TABLE `\" + str(table) + \"`;\")<nl><tab>data += \"<nl>\" + str(cur.fetchone()[1]) + \";<nl><nl>\"<nl><nl><tab>cur.execute(\"SELECT * FROM `\" + str(table) + \"`;\")<nl><tab>for row in cur.fetchall():<nl><tab><tab>data += \"INSERT INTO `\" + str(table) + \"` VALUES(\"<nl><tab><tab>first = True<nl><tab><tab>for field in row:<nl><tab><tab><tab>if not first:<nl><tab><tab><tab><tab>data += ', '<nl><tab><tab><tab>data += '\"' + str(field) + '\"'<nl><tab><tab><tab>first = False<nl><nl><nl><tab><tab>data += \");<nl>\"<nl><tab>data += \"<nl><nl>\"<nl><nl>now = datetime.datetime.now()<nl>filename = str(os.getenv(\"HOME\")) + \"\/backup_\" + now.strftime(\"%Y-%m-%d_%H:%M\") + \".sql\"<nl><nl>FILE = open(filename,\"w\")<nl>FILE.writelines(data)<nl>FILE.close()","out":"How can I dump a MySQL database without using mysqldump in Python"}
{"in":"for e in soup.findAll('br'):<nl><tab>e.extract()","out":"Remove <br> tags from a parsed Beautiful Soup list?"}
{"in":"from sqlalchemy import and_, or_<nl><nl>db.query(ShippingRate).filter(or_( \\<nl><tab>and_(ShippingRate.minimum == None, ShippingRate.maximum == None), \\<nl><tab>and_(ShippingRate.minimum != None, ShippingRate.maximum != None,  literal(myVal).between(ShippingRate.minimum, ShippingRate.maximum)), \\<nl><tab>and_(ShippingRate.minimum == None, myVal < ShippingRate.maximum), \\<nl><tab>and_(ShippingRate.maximum == None, myVal > ShippingRate.minimum)))","out":"How to filter based on two columns where one column may not be defined using SQLAlchemy?"}
{"in":"mylist = re.findall(r'''(?x)<tab><tab><tab><tab><tab># verbose mode<nl><tab><tab><tab><tab><tab><tab><span\\ info=\".+<\/span>| # allows you to comment the regex<nl><tab><tab><tab><tab><tab><tab>Name:\\ .+<br>|<tab><tab>  # for even better readability<nl><tab><tab><tab><tab><tab><tab><span\\ id=\"Phone\"\\ info=\"phonenumber\">.+<\/span>''', file)","out":"Python, how to code a read statement onto multiple lines?"}
{"in":"#cloud-config","out":"How to provision an EC2 Server programmatically and configure default settings"}
{"in":"class Event:<nl><tab>def __init__(self, name):<nl><tab><tab>self.name = name<nl><tab><tab>self.people = []","out":"Trying to append items to a list in python but its acting odd"}
{"in":"from Bio import Entrez, Medline<nl><nl># Always tell NCBI who you are  <nl>Entrez.email = \"your_address@example.com\"  <nl><nl>term=\"((oncology) AND breast cancer) AND resulted in\"<nl><nl>handle = Entrez.esearch(db=\"pubmed\", retmax=10, term=term)<nl>record = Entrez.read(handle)<nl><nl>print record['Count']  # see how many hits in your search<nl><nl>for ref in record['IdList']:<nl><tab>handle = Entrez.efetch(db=\"pubmed\", id=ref, <nl><tab><tab><tab><tab><tab><tab>   rettype=\"Medline\", <nl><tab><tab><tab><tab><tab><tab>   retmode=\"text\")<nl><tab>paper = Medline.read(handle)<nl><tab># Medline returns a dict from which we can extract the <nl><tab># fields we desire<nl><tab>print '-' * 30<nl><tab>print paper['TI']<nl><tab>print<nl><tab>print paper['AB']","out":"Navigating to next page using beautiful soup"}
{"in":"pModule = PyImport_Import(PyString_FromString(\"cpp_interface\"));","out":"How can I extract a wrapped C++ type from a Python type using boost::python?"}
{"in":"from zipfile import ZipFile<nl>from StringIO import StringIO<nl><nl>inMemoryOutputFile = StringIO()<nl><nl>zipFile = ZipFile(inMemoryOutputFile, 'w') <nl>zipFile.writestr('OEBPS\/content.xhtml', 'hello world')<nl>zipFile.close()<nl><nl>inMemoryOutputFile.seek(0)","out":"How to create an in-memory zip file with directories without touching the disk?"}
{"in":"import os, re<nl>path = 'C:\/Temp\/Folder1\/allTexts'<nl>listing = os.listdir(path)<nl>for infile in listing:<nl><tab>text = open(path + '\/' + infile).read()<nl><tab>match = re.search('<div id=\"text-interesting1\">', text)<nl><tab>if match is None:<nl><tab><tab>continue<nl><tab>start = match.start()<nl><tab>end = re.search('<div id=\"text-interesting2\">', text).start()<nl><tab>print text[start:end]","out":"How to search multiple files for textblocks and write those textblocks to another file"}
{"in":"pandas.concat([df1, df2], axis=1)","out":"Combine two pandas dataframes with the same index"}
{"in":"from selenium import webdriver<nl>from selenium.webdriver.support.ui import WebDriverWait<nl><nl>driver = webdriver.Firefox()<nl>driver.get(\"http:\/\/www.saksoff5th.com\/\")<nl><nl>driver.implicitly_wait(10) # seconds<nl><nl>driver.find_element_by_css_selector(\".sign-in > span\").click()<nl>driver.find_element_by_css_selector(\".ui-dialog[style*='display: block'] .ui-icon-closethick\").click()<nl><nl># If you prefer explicit wait, you can do these<nl># WebDriverWait(driver, 10).until(lambda driver: driver.find_element_by_css_selector(\".sign-in > span\")).click()<nl># WebDriverWait(driver, 10).until(lambda driver: driver.find_element_by_css_selector(\".ui-dialog[style*='display: block'] .ui-icon-closethick\")).click()","out":"Clicking visible close button inside a dialog"}
{"in":"def blendShape(self, *args):<nl><nl><tab>blendshape_name = cmds.textField(self.widgets['bs'],  q=True, text=True)<nl><tab>cmds.blendShape(cmds.ls(sl=True)[1], cmds.ls(sl=True)[0], frontOfChain=True, n=blendshape_name)","out":"use text from textField for naming - maya python"}
{"in":"def is_code_block(node):<nl><tab>return (node.tagname == 'literal_block'<nl><tab><tab><tab>and 'code' in node.attributes['classes'])<nl><nl>code_blocks = doctree.traverse(condition=is_code_block)<nl>source_code = [block.astext() for block in code_blocks]","out":"extract code from code directive from restructuredtext using docutils"}
{"in":"for k in sorted(d, key=d.get, reverse=True):<nl><tab>print(\"{:>10}{:>20}\".format(k, d[k]))","out":"Printing a dictionary using .format in python"}
{"in":"def f(x):<nl><tab>return {<nl><tab><tab>'a': 1,<nl><tab><tab>'b': 2,<nl><tab>}[x]","out":"Replacements for switch statement in Python?"}
{"in":"def gen_wrapper(cmp):<nl><tab>class Wrapper(object):<nl><tab><tab>def __init__(self, value): self.value = value<nl><tab><tab>def __cmp__(self, obj): return cmp(self.value, obj.value)<nl><tab>return Wrapper","out":"min heap in python"}
{"in":"result = braintree.Transaction.sale({<nl><tab>\"amount\": \"10.00\",<nl><tab>\"payment_method_token\": the_token,<nl><tab>\"options\": {<nl><tab><tab>\"submit_for_settlement\": True<nl><tab>}<nl>})","out":"how to create transaction without plan in braintree js+python?(whiteout subscription)"}
{"in":"url = 'http:\/\/www.klse.info\/companies\/listed-companies\/alphabet\/A'<nl>req = urllib2.Request(url, headers={'User-Agent' : \"Magic Browser\"}) <nl>page = urllib2.urlopen(req).read()","out":"Unable to open a URL link with using urllib2 in chrome"}
{"in":"GridItem.setPen()","out":"How to apply pyqtgraph.mkPen() to a GridItem?"}
{"in":"import http.client<nl>connection = http.client.HTTPConnection('www.python.org')<nl><nl>connection.request('GET', '\/')<nl>response = connection.getresponse()<nl>print(response.status)<nl>print(response.msg)<nl>answer = response.read()<nl>print(answer)","out":"Python - sending http requests as strings"}
{"in":"import pandas as pd<nl>import numpy as np<nl><nl># load your data<nl><nl>data['Time'] = pd.to_datetime(data['Time'])<nl><nl>list_of_indexes = [np.argmin(g['Time']) for l, g in data.groupby('ID Name')]<nl>data.ix[list_of_indexes]","out":"How to keep the most recent values and delete all other others in a column (pandas)"}
{"in":"test.func_defaults","out":"Accessing the default argument values in Python"}
{"in":"WSGIScriptAlias \/A \/path\/to\/my\/wsgi.py\/A<nl>WSGIScriptAlias \/B \/path\/to\/my\/wsgi.py\/B","out":"Django app under mod_wsgi - how to not consume url"}
{"in":"df = {'dname':[\"123ask\", \"example92\" , \"what3ver\"]}<nl>df['numeric'] = [sum (x.isdigit()  for x in b) for b in df['dname']]<nl>print df['numeric']<nl>#>>> [3, 2, 1]","out":"Python- Compute the sum of numerical characters of every string in a dataframe"}
{"in":"# FRAME 1 ##########################################################<nl>self.frame1 = gtk.Frame()<nl>self.contentTable.attach(self.frame1, 0, 1, 0, 1,<nl>gtk.FILL | gtk.EXPAND, gtk.EXPAND | gtk.SHRINK | gtk.FILL, 0, 0)","out":"gtk python expanding content to fit window"}
{"in":"with open(\"input1.txt\") as f, open(\"input2.txt\") as f2,open(\"output.txt\",\"w\") as f3:<nl><tab>f2.next() # skip header to avoid writing  A B C twice<nl><tab>for line in f:<nl><tab><tab>f3.write(line)<nl><tab>f3.write(\"<nl>\") # separate last line from file 1 and first of file 2<nl><tab>for line in f2:<nl><tab><tab>f3.write(line)","out":"Python: Joining files in a list"}
{"in":"re.findall('\"([^\"]*\\.(?:gif|jpg)[^\"]*)\"', text)","out":"How do I create a list of all occurances of a string which ends with a specific file type found in a text file?"}
{"in":"data = data[0]","out":"How to delete a list parameters but not the contents?"}
{"in":"import sys<nl>from PyQt4 import QtGui, QtCore<nl><nl>class CompiledWindow(QtGui.QWidget):<nl><tab>def __init__(self, parent = None):<nl><tab><tab>QtGui.QWidget.__init__(self, parent)<nl><tab><tab>self.setWindowTitle('Reasonably named window')<nl><tab><tab>names = ['Open Logo Picture', 'Open Setup Picture', 'Open first data file', 'Open second data file', 'Enter text about settings', 'Enter other text about settings', 'Enter third setting', 'Enter fourth setting']<nl><tab><tab>grid = QtGui.QGridLayout(self)<nl><tab><tab>self.Logo_button = QtGui.QPushButton(names[0], self)<nl><tab><tab>self.Logo_button.clicked.connect(self.logo_pic)<nl><tab><tab>grid.addWidget(self.Logo_button, 0, 0)<nl><nl><tab>def logo_pic(self):<nl><tab><tab>self.Logo_picture = unicode(QtGui.QFileDialog.getOpenFileName())<nl><tab><tab>print(self.Logo_picture)<nl><nl>app = QtGui.QApplication(sys.argv)<nl>cw = CompiledWindow()<nl>cw.show()<nl>sys.exit(app.exec_())","out":"PyQt4 - signals and slots. Trouble connecting button to a method"}
{"in":"import re, sys, md5<nl><nl>def p(s, pos, callBack):<nl>  while pos < len(s):<nl><tab>m = re.match(r'(d+)[', s[pos:])<nl><tab>if m:  # repetition?<nl><tab>  number = m.group(1)<nl><tab>  for i in range(int(number)):<nl><tab><tab>endPos = p(s, pos+len(number)+1, callBack)<nl><tab>  pos = endPos<nl><tab>elif s[pos] == ']':<nl><tab>  return pos + 1<nl><tab>else:<nl><tab>  callBack(s[pos])<nl><tab>  pos += 1<nl>  return pos + 1<nl><nl>digest = md5.new()<nl>def feed(s):<nl>  digest.update(s)<nl>  sys.stdout.write(s)<nl>  sys.stdout.flush()<nl><nl>end = p(sys.argv[1], 0, feed)<nl>print<nl>print \"MD5:\", digest.hexdigest()<nl>print \"finished parsing input at pos\", end","out":"Hashing same character multiple times"}
{"in":"import os<nl><nl>Export_Dir = os.path.dirname(Export)<nl>Export_Name = os.path.basename(Export)<nl><nl>Output = Export_Dir + \"\\Output_\" + Export_Name<nl>print \"<nl>Output: \" + Output + \"<nl>\"<nl><nl>cmd = grep_loc + \" --file=\" + Serial_List + \" \" + Export + \" > \" + Output<nl>print \"grep usage: <nl>\" + cmd + \"<nl>\"<nl>os.system(cmd)<nl>print \"Output created<nl>\"","out":"Use grep on file in Python"}
{"in":"hist = cv.CreateHist([255], cv.CV_HIST_ARRAY, [[0,255]], 1)<nl>cv.CalcHist([im] , hist)<tab><tab>  <nl>for h in range(255):<nl><tab>zm = cv.QueryHistValue_1D(hist, h)<nl><tab>objectArea.append([int(zm)])","out":"Area of multiple blobs in a binary image python"}
{"in":"DataFrame.update(other, join='left', overwrite=True,<nl><tab><tab><tab><tab> filter_func=None, raise_conflict=False)","out":"Merge\/Join\/Append two Pandas DataFrames with MultiIndex columns by both index and cols"}
{"in":"m = [<nl><tab>{'title': 'Song 1', 'artist': 'Artist 1',<nl><tab><tab>'Album': 'Album 1', 'Path': 'path 1'},<nl><tab>{'title': 'Song 2', 'artist': 'Artist 1 Ft 2',<nl><tab><tab>'Album': 'Album 1', 'Path': 'path 2'},<nl><tab>{'title': 'Song 3', 'artist': 'Artist 1 Ft 3',<nl><tab><tab>'Album': 'Album 1', 'Path': 'path 3'}<nl>]<nl><nl>from collections import defaultdict<nl><nl># Group all the artists, as per the Album name<nl>d = defaultdict(list)<nl>for item in m:<nl><tab>d[item[\"Album\"]].append(item[\"artist\"])<nl><nl># Gather paths corresponding to the Albums<nl>p = {item[\"Album\"]: item[\"Path\"] for item in m}<nl><nl># Recreate a list of all albums with artist names joined<nl>result = []<nl>for album in d:<nl><tab>result.append({<nl><tab><tab>\"Album\" : album,<nl><tab><tab>\"artist\": \"; \".join(d[album]),<nl><tab><tab>\"Path\"  : p[album]<nl><tab>})<nl><nl>print result","out":"Python: How to group dictionaries based on a key value pair"}
{"in":"def divide(dividends, divisors):<nl><tab>ret = dict()<nl><tab>for key, dividend in dividends.iteritems():<nl><tab><tab>if key in divisor:<nl><tab><tab><tab>ret[key] = dividend\/divisors[key]<nl><tab><tab>else:<nl><tab><tab><tab>ret[key] = dividend<nl><tab>return ret","out":"Dividing values of dictionaries by values of another dictionary python"}
{"in":"def toJSON(self):<nl><tab>clone = copy.deepcopy(self)<nl><tab>if getattr(clone.data, '_state', False):<nl><tab><tab>del clone.data._state<nl><tab>return jsonpickle.encode(clone, unpicklable=False)","out":"Easy way to exclude django _state attribute from jsonpickle.encode"}
{"in":"import gdata.gauth<nl><nl>Client_id='xxx';<nl>Client_secret='yyy'<nl>Scope='https:\/\/spreadsheets.google.com\/feeds\/'<nl>User_agent='myself'<nl><nl>token = gdata.gauth.OAuth2Token(client_id=Client_id,client_secret=Client_secret,scope=Scope,user_agent=User_agent)<nl>print token.generate_authorize_url(redirect_uri='urn:ietf:wg:oauth:2.0:oob')<nl>code = raw_input('What is the verification code? ').strip()<nl>token.get_access_token(code)<nl>print \"Refresh token<nl>\"<nl>print token.refresh_token<nl>print \"Access Token<nl>\"<nl>print token.access_token","out":"Gdata python Google apps authentication"}
{"in":"if len(data) == 0:<nl><tab>plt.plot([])<nl>else:<nl><tab>plt.histogram(data)","out":"How to make an empty histogram with matplotlib?"}
{"in":"def queryset(self, request):<nl><tab><tab>qs = super(ContentAdmin, self).queryset(request)<nl><tab><tab>return qs.filter(score__name='Twitter').order_by('-score__score')","out":"Django Admin: Order by value on related Foreign Key"}
{"in":"wmi_sql = wmi.WMI(SQLServer_raw, user=\"%s\\\\%s\" % (sql_domain, sql_user), <nl><tab>password=sql_pass)","out":"How do I assign variables within WMI calls?"}
{"in":"import matplotlib.pyplot as plt<nl>img = plt.imread(filename)<nl><nl># >>> img<nl># array([[38948, 41457, 37714, ..., 61511, 61785, 61824],<nl>#<tab>   [39704, 38083, 36690, ..., 61419, 60086, 61910],<nl>#<tab>   [41449, 39169, 38178, ..., 60192, 60969, 63538],<nl>#<tab>   ...,<nl>#<tab>   [37963, 39531, 40339, ..., 62351, 62646, 61793],<nl>#<tab>   [37462, 37409, 38370, ..., 61125, 62497, 59770],<nl>#<tab>   [39753, 36905, 38778, ..., 61922, 59565, 60035]], dtype=uint16)","out":"Python PIL struggles with uncompressed 16-bit TIFF images"}
{"in":"del a[0][0]","out":"How to delete element from list in Python?"}
{"in":"import matplotlib.pyplot as plt<nl>from numpy.random import randn<nl><nl># plot something<nl>fig, ax = plt.subplots()<nl>cax = ax.imshow(randn(100,100))<nl><nl># create the color bar<nl>cbar = fig.colorbar(cax)<nl>cbar.set_label('dBZ', color = \"white\")<nl><nl># update the text <nl>t = cbar.ax.get_yticklabels();<nl>labels = [item.get_text() for item in t]<nl>cbar.ax.set_yticklabels(labels, color = 'white')<nl>plt.show()","out":"Change color of cbar legend text python"}
{"in":"re.sub(r'(?<=abc)\\d{1,3}', '456', string)","out":"Help with a regular expression - Python"}
{"in":"list_of_pixels = list(im.getdata())<nl># Do something to the pixels...<nl>im2 = Image.new(im.mode, im.size)<nl>im2.putdata(list_of_pixels)","out":"How do I create an image in PIL using a list of RGB tuples?"}
{"in":"d = {'dog': [['4.1', '7.0', 'dog'], ['1.2', '3.4', 'dog']], 'cat': [['1', '8.2', '5.501', 'cat'], ['6.5', '8', '9.1', 'cat']]}<nl><nl>avg_dict = {}<nl>for key in d:<nl><tab>avg_list = []<nl><tab>i = 0<nl><tab>while (i < len(d[key][0]) - 1):<nl><tab><tab>avg_list.append((float(d[key][0][i]) + float(d[key][1][i])) \/2.0)<nl><tab><tab>i += 1<nl><tab>avg_dict[key] = avg_list<nl><nl>print(avg_dict)","out":"Finding the average of columns from nested lists in a dictionary's value"}
{"in":"execute()","out":"How do you define a wrapper function in Fabric?"}
{"in":"import imp<nl>import os<nl>MODULE_EXTENSIONS = ('.py', '.pyc', '.pyo')<nl><nl>def package_contents(package_name):<nl><tab>file, pathname, description = imp.find_module(package_name)<nl><tab>if file:<nl><tab><tab>raise ImportError('Not a package: %r', package_name)<nl><tab># Use a set because some may be both source and compiled.<nl><tab>return set([os.path.splitext(module)[0]<nl><tab><tab>for module in os.listdir(pathname)<nl><tab><tab>if module.endswith(MODULE_EXTENSIONS)])","out":"Is there a standard way to list names of Python modules in a package?"}
{"in":"def save(self, force_insert=False, force_update=False):<nl><tab>new_task = False<nl><tab>if not self.id:<nl><tab><tab>new_task = True<nl><tab>super(Task, self).save(force_insert, force_update)<nl><tab>end = self.startDateTime + timedelta(minutes=24*60)<nl><tab>title = \"This is test Task\"<nl><tab>if new_task:<nl><tab><tab>event = Event(start=self.startDateTime, end=end,title=title,<nl><tab><tab><tab><tab>  description=self.description)<nl><tab><tab>event.save()<nl><tab><tab>rel = EventRelation.objects.create_relation(event, self)<nl><tab><tab>rel.save()<nl><tab><tab>try:<nl><tab><tab><tab>cal = Calendar.objects.get(pk=1)<nl><tab><tab>except Calendar.DoesNotExist:<nl><tab><tab><tab>cal = Calendar(name=\"Community Calendar\")<nl><tab><tab><tab>cal.save()<nl><tab><tab>cal.events.add(event)<nl><tab>else:<nl><tab><tab>event = Event.objects.get_for_object(self)[0]<nl><tab><tab>event.start = self.startDateTime<nl><tab><tab>event.end = end<nl><tab><tab>event.title = title<nl><tab><tab>event.description = self.description<nl><tab><tab>event.save()","out":"How to use django-scheduler app in existing app"}
{"in":"from PyQt4 import QtGui<nl>from PyQt4 import QtWebKit<nl><nl>class DisplayHTML(QtWebKit.QWebView):<nl><nl><tab>def __init__(self, html, parent=None):<nl><tab><tab>super().__init__(parent)<nl><tab><tab>self.setHtml(html)<nl><nl>if __name__ == '__main__':<nl><tab>import sys<nl><tab>app = QtGui.QApplication(sys.argv)<nl><tab>html_template = \"<html><p>Hello, {first}, how {second} you {third}?<\/p><\/html>\"<nl><tab>values_dict = {<nl><tab><tab>'first': 'Joe',<nl><tab><tab>'second': 'are',<nl><tab><tab>'third': 'today',<nl><tab>}<nl><tab>html_ready_to_render = html_template.format(**values_dict)<nl><tab>window = DisplayHTML(html_ready_to_render)<nl><tab>window.show()<nl><tab>sys.exit(app.exec_())","out":"Qt\/pyQt\/PySide - Create document template for printing"}
{"in":"from dateutil import parser<nl>parse_time = lambda s: parser.parse(s, ignoretz = True)<nl><nl>func_map = \"\"\"<nl>function() {<nl><tab>if (this.hasOwnProperty(\"time\"))<nl><tab><tab>emit(this.time.getUTCFullYear() + \"\/\" + (this.time.getUTCMonth() + 1) + \"\/\" + this.time.getUTCDate(),<nl><tab><tab>{<nl><tab><tab><tab>count: 1,<nl><tab><tab><tab>not_deleted: (1 - this.deleted)<nl><tab><tab>});<nl>}<nl>\"\"\"<nl><nl>func_reduce = \"\"\"<nl>function(key, values) {<nl><tab>var result = {count: 0, not_deleted: 0};<nl><nl><tab>values.forEach(function(value) {<nl><tab><tab>result.count += value.count;<nl><tab><tab>result.not_deleted += value.not_deleted;<nl><tab>});<nl><nl><tab>return result;<nl>}<nl>\"\"\"<nl><nl>with my_mongo() as m:<nl><tab>result = m.data.inline_map_reduce(func_map, func_reduce)<nl><tab>dataset = {parse_time(day['_id']): day['value']['not_deleted'] for day in result}<nl><tab>dataset2 = {parse_time(day['_id']): day['value']['count'] for day in result}","out":"Mongodb data statistics visualization using matplotlib"}
{"in":"clean()","out":"How to raise a ValidationError AND return a response?"}
{"in":"oWord.Tables[1].Range.ParagraphFormat.Alignment = WdParagraphAlignment.wdAlignParagraphCenter;","out":"how to assign a word table in the center of the page"}
{"in":"def save(self, *args, **kwargs):<nl><tab># save the instance, do this first so that we have an id<nl><tab>super(MyModelClass, self).save(*args, **kwargs)<nl><tab># if it was a new instance fid is not set yet<nl><tab>if self.id and not self.fid:<nl><tab><tab>self.fid = encode(self.id)<nl><tab><tab># save the instance again now that we've set fid<nl><tab><tab>super(MyModelClass, self).save(*args, **kwargs)","out":"Django Save method needs to update model instance twice"}
{"in":"hid = plt.pcolormesh(X,Y, data, antialiased=True)<nl><nl>#here we cover up the region that we just plotted in<nl>r3 = [1 for i in range(360)]<nl>theta3 = np.arange(360)*np.pi\/180.<nl>plt.fill(theta3, r3, 'w')<nl><nl>#now we can go through and fill in all the regions<nl>for j in range(len(r)):<nl><tab>rbox = np.array([r[j], r[j], r[j]+ rstep, r[j] + rstep])<nl><tab>for i in range(len(theta)):<nl><tab><tab>thetabox = np.array([theta[i], theta[i] + tstep, theta[i] + tstep, theta[i]])<nl><tab><tab>x = rbox*np.cos(thetabox)<nl><tab><tab>y = rbox*np.sin(thetabox)<nl><tab><tab>colorv = np.sin(r[j]\/10.*np.pi)<nl><tab><tab>plt.fill(thetabox,rbox, facecolor = my_cmap(colorv))<nl>#And now we can plot the color bar that fits the data Tada :)<nl>plt.colorbar()<nl>plt.show()","out":"Creating a colour bar for a plot made with plt.fill"}
{"in":"import codecs<nl>raw_file=open('Documents\/t_alibaba_data.csv', 'r')<nl>result=open('Documents\/result.txt','w')<nl>for line in raw_file.readlines():<nl><tab>entry=line.split(\",\")<nl><tab>deco=entry[3].decode(\"gbk\").strip()<nl><tab>month=deco[0]<nl><tab>if len(deco)==5:<nl><tab><tab>day=int(deco[2])*10+int(deco[3])<nl><tab>else:<nl><tab><tab>day=int(deco[4])<nl><tab>result.write(\",\".join(entry[:3])+\",\"+str(month)+\",\"+str(day)+\"<nl>\")<nl>result.close()","out":"Delete particular string while reading CSV data"}
{"in":"query = Notification.query.filter(Notification.id.in_(my_list)).all()","out":"filter with more than one value on flask-sqlalchemy"}
{"in":"import os<nl><nl>var = os.popen('xsel').read()<nl>print var","out":"How to get selected text with xsel - Python"}
{"in":"trial = pgv.AGraph(strict=False, overlap=False, splines='true')<nl>#or   <nl>trial = pgv.AGraph(strict=False, overlap=False, splines='spline')","out":"Preventing edges from crossing nodes in pygraphviz"}
{"in":"def content_file_name(instance, filename):<nl><tab>print instance<nl><tab>print filename<nl><tab>file = os.path.exists(\"media\/file\/\"+str(filename))<nl><tab>print file<nl><tab>if file:<nl><tab><tab>os.remove(\"media\/file\/\"+str(filename))<nl><tab>return \"file\/\"+str(filename)","out":"changing file name in django"}
{"in":"numpy.zeros((3,3,3))","out":"How to create nested lists in python?"}
{"in":"db.online_users.insert(user)","out":"Mongokit add objects to collection"}
{"in":"my_list = [\"Value1\", \"Value2\"]<nl>json = simplejson.dumps(my_list)<nl># send json","out":"Generating XML in Python"}
{"in":"[aa+bb for aa,bb in zip(a,b)]","out":"how to get [(1, 2, 3, 4), (5, 6, 7, 8)] in my code using python"}
{"in":"class Child(Parent):<nl><tab>foobar = Parent.foobar + ['world']","out":"Inherited class variable modification in Python"}
{"in":"qry = (session.query(<nl><tab><tab><tab><tab>table.c.field1,<nl><tab><tab><tab><tab>table.c.field2,<nl><tab><tab><tab><tab># #strftime* for year-month works on sqlite; <nl><tab><tab><tab><tab># @todo: find proper function for mysql (as in the question)<nl><tab><tab><tab><tab># Also it is not clear if only MONTH part is enough, so that<nl><tab><tab><tab><tab># May-2001 and May-2009 can be joined, or YEAR-MONTH must be used<nl><tab><tab><tab><tab>func.strftime('%Y-%m', table.c.datestamp),<nl><tab><tab><tab><tab>func.count(),<nl><tab><tab><tab><tab>)<nl><tab><tab># optionally check only last 2 month data (could have partial months)<nl><tab><tab>.filter(table.c.datestamp < datetime.date.today() - datetime.timedelta(60))<nl><tab><tab>.group_by(<nl><tab><tab><tab><tab>table.c.field1,<nl><tab><tab><tab><tab>table.c.field2,<nl><tab><tab><tab><tab>func.strftime('%Y-%m', table.c.datestamp),<nl><tab><tab><tab><tab>)<nl><tab><tab># comment this line out to see all the groups<nl><tab><tab>.having(func.count()>1)<nl><tab>  )","out":"SQLAlchemy: How to group by two fields and filter by date"}
{"in":"import wx<nl><nl>def ask(parent=None, message='', default_value=''):<nl><tab>dlg = wx.TextEntryDialog(parent, message, defaultValue=default_value)<nl><tab>dlg.ShowModal()<nl><tab>result = dlg.GetValue()<nl><tab>dlg.Destroy()<nl><tab>return result<nl><nl># Initialize wx App<nl>app = wx.App()<nl>app.MainLoop()<nl><nl># Call Dialog<nl>x = ask(message = 'What is your name?')<nl>print 'Your name was', x","out":"Using wxPython to get input from user"}
{"in":"num = 0.1423<nl>print '%06.2f' %num","out":"Format number in python with leading zeros and fixed decimal places"}
{"in":"def flatten_list(l):<nl><tab>new_l = []<nl><tab>for item in l:<nl><tab><tab>if type(item) == type([]):<nl><tab><tab><tab>new_l += flatten_list(item)<nl><tab><tab>else:<nl><tab><tab><tab>new_l.append(item)<nl><tab>return new_l","out":"Python: How to put unknow Multidimentional array in 1D array"}
{"in":"import subprocess<nl>p=subprocess.Popen(args, stdout=subprocess.PIPE)<nl>print p.communicate()[0]","out":"In Python, how I do use subprocess instead of os.system?"}
{"in":"vector<Points> contour","out":"How to find the center of dots in binary image that is moving"}
{"in":"numbers = []<nl><nl>while len(numbers) < 5:<nl><tab>number = raw_input('Please input 5 numbers: ')<nl><tab>if number.isdigit():<nl><tab><tab>numbers.append(int(number)) #may want to use float here instead of int<nl><tab>else:<nl><tab><tab>print \"You entered something that isn't a number\"<nl><nl>search = raw_input('Search for the numer: ')<nl>if int(search) in numbers:<nl><tab>print \"Found it!\"","out":"Python searching list thats inputted by user"}
{"in":"import pylab<nl><nl>my_labels = ['food', 'music', 'clothes']<nl><nl>fig = pylab.figure()<nl>fig.text(0.4,0.95,\"Consumption by Region\")<nl><nl>ax1 = fig.add_subplot(2,2,1)<nl>ax1.pie([1,2,3])<nl>ax1.text(0.6, 1, \"North West\")<nl><nl>ax2 = fig.add_subplot(2,2,2)<nl>ax2.pie([6,4,3])<nl>ax2.text(0.6, 1, \"North East\")<nl><nl>ax3 = fig.add_subplot(2,2,3)<nl>ax3.pie([1,4,3])<nl>ax3.text(0.6, 1, \"South West\")<nl><nl>ax4 = fig.add_subplot(2,2,4)<nl>ax4.pie([9,1,3])<nl>ax4.text(0.6, 1, \"South East\")<nl><nl>pylab.legend(my_labels, title=\"Legend\", loc=(-1.5,0.9))<nl><nl>pylab.show()","out":"Don't display labels in subplot"}
{"in":"from dateutil.parser import parse<nl>date = 'Thu, 14 Mar 2013 13:33:07 -0400'<nl>parse(date).strftime(\"%Y-%m-%d %H:%M:%S\")","out":"Convert String In Python to insert into MySQL DB date column date"}
{"in":"for i in hd_com.comment_message[1:500]:<nl><tab>fl=open('delete.txt','wb')","out":"Prints on stdout but unable to write to file in Python"}
{"in":"chart.data = [(20.5,32.4),(0.01, 0.01)]","out":"Python Repotrlab vertical bar chart spacing inconsistency"}
{"in":"import sys<nl>from PyQt4 import QtGui, uic<nl><nl>class TestGUI(QtGui.QMainWindow):<nl><tab>def __init__(self):<nl><tab><tab>super(TestGUI, self).__init__()<nl><tab><tab>uic.loadUi('TEST.ui', self)<nl><tab><tab>self.actionAdd_Tab.triggered.connect(self.handleAddTab)<nl><nl><tab>def handleAddTab(self):<nl><tab><tab>contents = QtGui.QWidget(self.tabWidget)<nl><tab><tab>layout = QtGui.QVBoxLayout(contents)<nl><tab><tab># add other widgets to the contents layout here<nl><tab><tab># i.e. layout.addWidget(widget), etc<nl><tab><tab>self.tabWidget.addTab(contents, 'Tab One')<nl><nl>if __name__ == '__main__':<nl><tab>app = QtGui.QApplication(sys.argv)<nl><tab>window = TestGUI()<nl><tab>window.show()<nl><tab>sys.exit(app.exec_())","out":"PyQt4 menu acction to add new tab to QTabWidget"}
{"in":"class MyObject( object ):<nl><tab>def __init__( self, args ):<nl><tab><tab>pass # Something Expensive<nl><nl>class MyObjectFactory( object ):<nl><tab>def __init__( self ):<nl><tab><tab>self.pool = {}<nl><tab>def makeMyObject( self, args ):<nl><tab><tab>if args not in self.pool:<nl><tab><tab><tab>self.pool[args] = MyObject( args )<nl><tab><tab>return self.pool[args]","out":"How to create a class that doesn't re-create an object with identical input parameters"}
{"in":"class Projet(object):<nl><nl><tab>def pathDirectory(self):<nl><tab><tab>print \"- - in pathDirectory - -\"<nl><tab><tab>self.pathDir= str(QFileDialog.getExistingDirectory(ui.pathTab1, 'Select Path','', QFileDialog.ShowDirsOnly))<nl><nl><tab>def goFunc(self):<nl><tab><tab>print \"- - In goFunc - -\"<nl><tab><tab>print self.pathDir<nl><nl>if __name__ == \"__main__\":<nl><tab>p = Projet()<nl><tab>p.pathDirectory()<nl><tab>p.goFunc()","out":"Sharing values between methods"}
{"in":"color_dict = { 'Allan':'red', 'Betty':'blue', 'Chris':'black', 'Diane':'green','Eugene':'purple' }<nl><nl>plt.scatter( data['a'], data['b'], color=[ color_dict[i] for i in data['c'] ] )","out":"Python scatter plot with colors corresponding to strings"}
{"in":"df.loc[5:6,:] = df.loc[3:4,:].values","out":"Pandas Dataframe - Set Rows Equal to Other Rows"}
{"in":"def del_task(self, *args):<nl><tab>if self.task_list.adapter.selection:<nl><tab><tab>selection = self.task_list.adapter.selection[0].text<nl><tab><tab>self.task_list.adapter.data.remove(selection)<nl><tab><tab>self.task_list._trigger_reset_populate()","out":"Python Kivy ListView: How to delete selected ListItemButton?"}
{"in":"parent.list_child_properties()<nl>Gtk.ContainerClass.list_child_properties(parent)","out":"Gtk3 replace child widget with another widget"}
{"in":"today = datetime.today()<nl>def get_data():<nl><tab>\"\"\" @return: [(student, followup), (student, followup), ...] \"\"\"<nl><tab>q = (session.query(Student) # get all students<nl><tab><tab>.outerjoin(Followup, and_(Student.id == Followup.student_id, func.date(Followup.next_date)==today)) # @NOTE: check for today might need to be different depending on the database used. Current code should work for mysql<nl><tab><tab>.options(contains_eager(Student.followup)) # let SA know that \"followup\" is loaded (line above)<nl><tab><tab>.filter(Student.status == \"active\") # filter only for active students<nl><tab><tab>)<nl><tab>res = [(s, s.followup) for s in q.all()]<nl><tab>return res<nl><nl>data = get_data()<nl><nl># debug<nl>for s, f in data:<nl><tab>print s.name<nl><tab>for _f in f:<nl><tab><tab>print \"  \", _f","out":"Best way to get the todays notifications for each user"}
{"in":"import smtplib<nl>from smtplib import SMTP<tab>   <nl><nl>try:<nl><tab>sender = 'xxx@gmail.com'<nl><tab>receivers = ['xxx.com']<nl><nl><tab>message = \"\"\" this message sending from python<nl><tab>for testing purpose<nl><tab>\"\"\"<nl><tab>smtpObj = smtplib.SMTP(host='smtp.gmail.com', port=587)<nl><tab>smtpObj.ehlo()<nl><tab>smtpObj.starttls()<nl><tab>smtpObj.ehlo()<nl><tab>smtpObj.login('xxx','xxx')<nl><tab>smtpObj.sendmail(sender, receivers, message)<nl><tab>smtpObj.quit()<nl><tab>print \"Successfully sent email\"<nl>except smtplib.SMTPException,error:<nl><tab>print str(error)<nl><tab>print \"Error: unable to send email\"","out":"Trying to send email from python"}
{"in":"from datetime import datetime, timedelta<nl>import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl>size = 10<nl><nl># List of Dates<nl>base = datetime.now()<nl>date_list = [base - timedelta(weeks=x) for x in range(0, size)]<nl>date_list = [i.strftime(\"%Y %m %d\") for i in date_list]<nl><nl>b = np.random.random([size,size])<nl>plt.figure(2)<nl>c = np.arange(0,size)<nl>plt.pcolormesh(c,c,b)<nl>plt.xticks(c, date_list, rotation='vertical')<nl>plt.subplots_adjust(bottom=0.2)<nl>plt.show()","out":"Python: How to add datetime to x-axis in pcolormesh"}
{"in":"from django.db.models import Sum","out":"django get sum of column based on where clause"}
{"in":"import os<nl>count = 0<nl>for doc in os.listdir('C:\\Users\\B\\Desktop\\<nl>ewdocs'):<nl><tab>if doc.endswith(\".txt\"):<nl><tab><tab>with open(doc, 'r') as f:<nl><tab><tab><tab>single_line = ''.join([line for line in f])<nl><tab><tab><tab>single_space = ' '.join(single_line.split())<nl><nl><tab><tab>with open(\"new_doc{}.txt\".format(count) , \"w\") as doc:<nl><tab><tab><tab>doc.write(single_space)<nl><tab><tab>count += 1<nl><tab>else:<nl><tab><tab>continue","out":"Combine multiple lines of text documents into one"}
{"in":"import re<nl>with open(\"in1.txt\") as f:<nl>   lines = f.read()<nl>   m = re.sub(r'(?s)my _car_.*?(?=my|$)', '', lines)<nl>   m = re.sub(r'<nl>+', '<nl>', m)<nl>   print m,","out":"Delete regex matching part of file"}
{"in":"import xml.etree.ElementTree as ET<nl>def to_parseable(tree):<nl><tab>t = ET.tostring(tree)<nl><tab>t = t.lower()<nl><tab>return ET.fromstring(t)","out":"Case Insensitive findall in Python ElementTree"}
{"in":"class ExceptionLoggingMiddleware(object):<nl><tab>def process_exception(self, request, exception):<nl><tab><tab>import traceback<nl><tab><tab>print traceback.format_exc()","out":"Print a stack trace to stdout on errors in Django while using manage.py runserver"}
{"in":"diff = cv2.matchTemplate(img1, img2, cv2.TM_CCORR_NORMED)<nl>x, y = np.unravel_index(np.argmax(diff), diff.shape)","out":"Find image inside another in SimpleCV"}
{"in":"import requests,  bs4<nl><nl>headers = {<nl><tab>\"User-Agent\":<nl><tab><tab>\"Mozilla\/5.0 (Windows NT 6.3; WOW64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/44.0.2403.157 Safari\/537.36\"<nl>}<nl>payload = {'as_epq': 'James Clark', 'tbs':'cdr:1,cd_min:01\/01\/2015,cd_max:01\/01\/2015', 'tbm':'nws'}<nl>r = requests.get(\"https:\/\/www.google.com\/search\", params=payload, headers=headers)<nl><nl>soup = bs4.BeautifulSoup(r.content, 'html5lib')<nl>print soup.find(id='resultStats').text","out":"Wrong number of results in Google Scrape with Python"}
{"in":"return all(c in lettersGuessed for c in secretWord)","out":"Looping Inside a list in python"}
{"in":"import os<nl><nl>os.system(\"xterm -e 'your command'\")","out":"Start a process in a different console window"}
{"in":"from django.core.urlresolvers import reverse<nl>twitterpath = reverse('social:begin', args=('twitter',))","out":"How do I access values from python social auth used in template"}
{"in":"t = threading.Timer(30.0, unban)<nl>t.start() # after 30 seconds, unban will be run","out":"Least painful way to run a Python delay loop"}
{"in":"links = []<nl>for i in urls:<nl><tab>try:<nl><tab><tab>data = urllib2.urlopen(str(i)).read()<nl><tab><tab>data = json.loads(data)<nl><tab><tab>links.append(url)<nl><tab>except:<nl><tab><tab>pass","out":"how to filter out elements in a for loop?"}
{"in":"WSGIApplicationGroup %{GLOBAL}","out":"Why gevent on a Flask app with Apache + mod_wsgi is raising NotImplementedError?"}
{"in":"import urllib2<nl><nl>manager = urllib2.HTTPPasswordMgrWithDefaultRealm()<nl>manager.add_password(None, 'https:\/\/app.streamsend.com\/emails', 'login', 'key')<nl>handler = urllib2.HTTPBasicAuthHandler(manager)<nl><nl>director = urllib2.OpenerDirector()<nl>director.add_handler(handler)<nl><nl>req = urllib2.Request('https:\/\/app.streamsend.com\/emails', headers = {'Accept' : 'application\/xml'})<nl><nl>result = director.open(req)<nl># result.read() will contain the data<nl># result.info() will contain the HTTP headers<nl><nl># To get say the content-length header<nl>length = result.info()['Content-Length']","out":"CURL alternative in Python"}
{"in":"data[col_name] = a_col.apply(lambda x: x if isinstance(x, datetime.datetime) <nl><tab><tab><tab><tab><tab><tab><tab><tab><tab>   and not isinstance(x, pd.tslib.NaTType) else epoch)","out":"Replacing NaT with Epoch in Pandas"}
{"in":"# some code left out for brevity<nl><nl>class InputsModelExtendedForm(ModelForm):<nl><tab>class Meta:<nl><tab><tab>model = InputsModelExtended<nl><nl><tab>def __init__(self, *args, **kwargs):<nl><tab><tab>service_choices = kwargs.pop('service_choices')<nl><tab><tab>super(InputsModelExtendedForm, self).__init__(*args, **kwargs)<nl><nl><tab><tab>if service_choices:<nl><tab><tab><tab>self.fields['service'] = forms.ChoiceField(choices=service_choices,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>   required=False)<nl><nl># example usage:<nl><nl>def my_view(request):<nl><tab>service_choices = (<nl><tab><tab>('Foo', 'Foo',),<nl><tab><tab>('Bar', 'Bar',),<nl><tab><tab>('Baz', 'Baz',),<nl><tab>)<nl><nl><tab>form = InputsModelExtendedForm(request.POST or None, service_choices=service_choices)","out":"modifying django modelform select set"}
{"in":"text.lower()","out":"Convert letters to lower case"}
{"in":"MyModel.objects.create(**{key: value for key, value in data_dict.iteritems() if key in MyModel._meta.get_all_field_names()})","out":"Is it possible to pass a dictionary with extraneous elements to a Django object.create method?"}
{"in":"class Example(Document):<nl><tab>pass<nl><nl>db = Example._get_db()<nl>for collection_name in db.collection_names():<nl><tab>print collection_name","out":"How do I iterate over collections in a database in mongoengine?"}
{"in":"x1=np.linspace(0,np.pi)<nl>y1=np.sin(x1)<nl><nl>y2=np.sin(x1)<nl><nl>rect1=[0.1,0.1,0.8,0.8]<nl>ax1=plt.axes(rect,frameon=True)<nl>ax1.yaxis.tick_left()<nl>plt.plot(x1,y1)<nl>plt.ylabel('axis 1')<nl>plt.xlabel('x')<nl><nl><nl>rect2=[0.1,1,0.2,0.2]<nl>ax2=plt.axes(rect2,frameon=False)<nl>ax2.yaxis.tick_right()<nl>ax2.plot(x1,y2)<nl><nl>percent = 0.2<nl>xp = percent*np.pi<nl>yp = np.sin(xp)<nl>ax2.plot(xp,yp, marker='o')<nl><nl>ax2.yaxis.set_label_position('right')<nl>ax2.axes.get_xaxis().set_visible(False)<nl>ax2.axes.get_yaxis().set_visible(False)<nl><nl>ax2.annotate('%d Percent' %(percent*100), xy=(0.5, 0.))<nl><nl><nl>rect3=[0.3,1,0.2,0.2]<nl>ax3=plt.axes(rect3,frameon=False)<nl>ax3.yaxis.tick_right()<nl>ax3.plot(x1,y2)<nl><nl>percent = 0.4<nl>xp = percent*np.pi<nl>yp = np.sin(xp)<nl>ax3.plot(xp,yp, marker='o')<nl><nl>ax3.yaxis.set_label_position('right')<nl>ax3.axes.get_xaxis().set_visible(False)<nl>ax3.axes.get_yaxis().set_visible(False)<nl><nl>ax3.annotate('%d Percent' %(percent*100), xy=(0.5, 0.))<nl><nl><nl><nl><nl>plt.show()","out":"using a pdf image inside a subplot in matplotlib"}
{"in":"ok_words = set([\"a\", \"b\", \"c\", \"e\"])<nl><nl>def filter_words(words):<nl><tab>return [word for word in words if word in ok_words]","out":"passing text through a dictionary in Python"}
{"in":"dist([4.0, 7.0], [2.0, 9.0]) - 2.0","out":"What is the distance between point [4, 7] and the nearest point on the circle centered at [2, 9] with radius 2? Provide at least 4 digits of accuracy"}
{"in":"self.request.GET.getlist('pax')","out":"getting values from multiple same keyword parameter in request"}
{"in":"colors = weights.apply(lambda x: (0,0,1,x)).tolist()","out":"Python matplotlib: How to assign a different opacity to each point in a scatter plot?"}
{"in":"df2 = df[((df.index.month == 6) & (df.index.day > 20)) | (df.index.month > 6)]","out":"pandas python select all data after day of year"}
{"in":"import os<nl><nl>zfName = 'simonsZip.kmz'<nl>foo = zipfile.ZipFile(zfName, 'w')<nl>foo.write(\"temp.kml\")<nl># Adding files from directory 'files'<nl>for root, dirs, files in os.walk('files'):<nl><tab>for f in files:<nl><tab><tab>foo.write(os.path.join(root, f))<nl>foo.close()<nl>os.remove(\"temp.kml\")","out":"How to zip a folder and file in python?"}
{"in":"file.info(\"\/etc\")<nl>##<tab>  size isdir mode<tab><tab><tab>   mtime<tab><tab><tab>   ctime<nl>## \/etc 3638  TRUE  755 2015-07-22 10:51:58 2015-07-22 10:51:58<nl>##<tab><tab><tab><tab><tab>atime uid gid uname grname<nl>## \/etc 2015-08-01 08:11:43   0   0  root  wheel<nl><nl>file.info(\"\/etc\/hosts\")<nl>##<tab><tab><tab>  size isdir mode<tab><tab><tab>   mtime<tab><tab><tab>   ctime<nl>## \/etc\/hosts 787448 FALSE  644 2015-07-19 17:34:59 2015-07-19 17:34:59<nl>##<tab><tab><tab><tab><tab><tab>  atime uid gid uname grname<nl>## \/etc\/hosts 2015-08-06 12:30:26   0   0  root  wheel<nl><nl>file_test(\"-f\", \"\/etc\/hosts\") # is a file and not a dir<nl>## [1] TRUE<nl><nl>file_test(\"-d\", \"\/etc\") # is a dir<nl>## [1] TRUE<nl><nl>dir.exists(\"\/etc\") # R 3.2.0+<nl>## [1] TRUE<nl><nl>file.exists(\"\/etc\/hosts\")<nl>## [1] TRUE<nl><nl>Sys.readlink(\"\/etc\") # will return something if it's a symbolic link<nl>## [1] \"private\/etc\"<nl><nl>Sys.readlink(\"\/tmp\")<nl>## [1] \"private\/tmp\"<nl><nl>Sys.readlink(\"\/bin\") # or \"\" if not<nl>## [1] \"\"","out":"How to check if an argument is a file or a directory in R?"}
{"in":"import os, sys<nl><nl>dataDir = 'fullpath of directory with images'<nl>os.chdir(dataDir)<nl><nl><nl>os.system('SETLOCAL EnableDelayedExpansion')<nl>#This is the path of the imagemagick installation convert command.  <nl>#The invalid parameter I was  getting was because the computer was trying to <nl>#use a different convert command.  This code sets convert as a different<nl>#variable and then calls that new variable as the convert command.  <nl>os.system('SET IMCONV=\"C:\\Program Files\\ImageMagick-6.9.1-Q16\\Convert\"')<nl>os.system('%IMCONV% *.jpg animated.gif')","out":"Creating a gif in python using ImageMagick"}
{"in":"def get_brand_count(filename, brand):<nl><tab>return int(subprocess.check_output('''zcat %s |  '''<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab>   '''awk 'BEGIN {FS=\";\"};{print $6}' | '''<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab>   '''grep -i %r | wc -l''' %<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab>   (filename, brand), shell=True))<nl><nl>brands = 'hummer', 'bmw', 'audi'<nl>with open('results.csv', 'wb') as csvfile:<nl><tab>csvwriter = csv.writer(csvfile)<nl><tab>csvwriter.writerow(brands)  # csv header row (if desired)<nl><tab>for myfilename in glob.iglob('*.gz'):<nl><tab><tab>csvwriter.writerow([get_brand_count(myfilename, brand)<nl><tab><tab><tab><tab><tab><tab><tab><tab>for brand in brands])","out":"python - how to write to a csv file while in a loop"}
{"in":"class History(Article, IHasAttachments):<nl><tab>date = DateField(default=datetime.date.today)","out":"django model inheritance and admin application"}
{"in":"users = session.query(User).all()<nl>for user in users:<nl><tab>users_classes = ','.join([c.class_name for c in user.classes])<nl><tab>print(\"{0} is {1} in {2}\".format(user.user_firstName,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> user.role.role_name,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> users_classes))","out":"Select many to many with Flask-SQLAlchemy"}
{"in":"thumbor_kwargs = {}<nl>thumbor_kwargs['image_url'] = 'localhost:8000\/media\/image.jpg'<nl>thumbor_kwargs['width'] = 80<nl>thumbor_kwargs['filters'] = [<nl><tab>\"quality(80)\",<nl><tab>\"grayscale()\",<nl>]","out":"How to apply Thumbor filters effects"}
{"in":"import copy<nl>import types<nl><nl>def _deepcopy_method(x, memo):<nl><tab>return type(x)(x.im_func, copy.deepcopy(x.im_self, memo), x.im_class)<nl>copy._deepcopy_dispatch[types.MethodType] = _deepcopy_method","out":"Can't use a list of methods in a Python class, it breaks deepcopy. Workaround?"}
{"in":"import os, zipfile<nl><nl>dir_name = 'C:\\\\SomeDirectory'<nl>extension = \".zip\"<nl><nl>os.chdir(dir_name) # change directory from working dir to dir with files<nl><nl>for item in os.listdir(dir_name): # loop through items in dir<nl><tab>if item.endswith(extension): # check for \".zip\" extension<nl><tab><tab>file_name = os.path.abspath(item) # get full path of files<nl><tab><tab>zip_ref = zipfile.ZipFile(file_name) # create zipfile object<nl><tab><tab>zip_ref.extractall(dir_name) # extract file to dir<nl><tab><tab>zip_ref.close() # close file<nl><tab><tab>os.remove(file_name) # delete zipped file","out":"Unzip all zipped files in a folder to that same folder using Python 2.7.5"}
{"in":"xpath = \"\/\/table[2]\/tr\/td\/\/text()[re:match(., '\\\\S')]\"<nl><nl>filtered_html = tree.xpath(<nl><tab>xpath,<nl><tab>namespaces={\"re\": \"http:\/\/exslt.org\/regular-expressions\"})","out":"Timetable Web Scraping with multiple tables (Python)"}
{"in":"import os<nl>import subprocess<nl><nl>cwd = os.getcwd()<nl><nl>for i in os.listdir(cwd):<nl><tab>if i.endswith('.ttp'):<nl><tab><tab>o = i + \"-out\"<nl><tab><tab>p = subprocess.call([\"program_name\", \"-input\", i, \"-output\", o])","out":"Calling a non python program from python?"}
{"in":"counter = len(f.readlines())","out":"How do i print\/return the number of lines in a file"}
{"in":"def test_check_url(self):<nl><tab>url_a = \"http:\/\/audaxing.wordpress.com\"<nl><tab>dummy_event = self.generate_dummy_auction_event(url_a)<nl><tab>with patch(\"sys.stdin\") as mock_stdin:<nl><tab><tab>MaddUrl = Mock()<nl><tab><tab>Minit = Mock(return_value=None)<nl><tab><tab>with patch('Foo.crawler.crawlerapp.CrawlerApp.__init__', Minit, create=True):<nl><tab><tab><tab>with patch('Foo.crawler.crawlerapp.CrawlerApp.addUrl', MaddUrl, create=True):<nl><nl><tab><tab><tab><tab>ca = Foo.crawler.crawlerapp.CrawlerApp(1)<nl><tab><tab><tab><tab>mock_stdin.read.return_value = EventDataFrame(1, \"TOKEN1\", dummy_event.SerializeToString()).to_bytes()<nl><tab><tab><tab><tab>ca._running = True<nl><tab><tab><tab><tab>input_thread = threading.Thread(target=ca.inputStreamThread)<nl><tab><tab><tab><tab>input_thread.start()<nl><tab><tab><tab><tab>time.sleep(0.5)<nl><tab><tab><tab><tab>ca._running = False<nl><tab>MaddUrl.assert_called_with(url_a)","out":"Trying to mock method in Object gives 'AttributeError'"}
{"in":"l = [35,53,[525,6743],64,63,[743,754,757]]<nl><nl>def flatten(xs):<nl><tab>result = []<nl><tab>if isinstance(xs, (list, tuple)):<nl><tab><tab>for x in xs:<nl><tab><tab><tab>result.extend(flatten(x))<nl><tab>else:<nl><tab><tab>result.append(xs)<nl><tab>return result<nl><nl>print flatten(l)","out":"How to flatten a hetrogenous list of list into a single list in python?"}
{"in":"urls = [ user['url'] for user in loadmain ]","out":"TypeError: list indices must be integers, not str with JSON"}
{"in":"re.findall('ABC-[0-9]+', string)","out":"Python findall regex"}
{"in":"class Alien(object):<nl><tab>def __init__(self):<nl><tab><tab>self.health = 5<nl><tab>def do_damage(self, amount):<nl><tab><tab>self.health -= amount","out":"Simple way to decrease values without making a new attribute?"}
{"in":"import string<nl><nl>def func(str1, str2):<nl><tab>s1 = set(str1)<nl><tab>s2 = set(str2)<nl><tab># requests are ambiguous \"contained in both strings\" can be either interpreted as intersections or union (i chose intersection)<nl><tab>uni = s1.union(s2)<nl><tab>letters_in_both_strings = [item for item in s1.intersection(s2) if item.isalpha()]<nl><tab>non_letters_in_any_string = [item for item in uni if not item.isalpha()]<nl><tab>all_letters = set(string.ascii_uppercase + string.ascii_lowercase)<nl><tab>return letters_in_both_strings, all_letters.difference(uni), non_letters_in_any_string<nl><nl>str1 = input(\"Enter 1st string:\")<nl>str2 = input(\"Enter 2nd string:\")<nl>a, b, c = func(str1, str2)<nl>print(\"|\" + \"\".join(a) + \"|<nl>|\" + \"\".join(b) + \"|<nl>|\" + \"\".join(c) + \"|<nl>\")","out":"Using sets in python to find common letters from two strings"}
{"in":"T_g.append([x for x in rootss(coeff) if np.isreal(x) and x > 0])","out":"Keeping only real positive value from an array"}
{"in":"from nltk.corpus.reader import XMLCorpusReader<nl>reader = XMLCorpusReader(dir, file)","out":"How to use the Spanish Wordnet in NLTK?"}
{"in":"def retrive(directory, a_regex):<nl><tab>for filename in glob.glob(os.path.join(directory, '*.txt')):<nl><tab><tab>with open(filename, 'r') as file:<nl><tab><tab><tab>important_stuff = re.findall(a_regex, file.read(), re.S)<nl><tab><tab><tab>my_list = [tuple([j.split()[0] for j in i]) for i in important_stuff]<nl><tab><tab><tab># print my_list # old line<nl><tab><tab><tab>print str(my_list).strip('[]') + filename.split('\/')[-1]<nl><nl><nl>lists_per_file = retrive(directory,regex_)","out":"How to carry in a list the name each file from a directory with python?"}
{"in":"title = \"This is my title, there are many like it but this one is mine...\"<nl>self.headerItem().setText(0, title)","out":"How do I change the title of the tree view that is created"}
{"in":"vbox.pack_start(self.scrolledwindow)","out":"Python : Packing a gtk.TreeView and a gtk.Menu in a top level gtk.Window"}
{"in":"a = tb.open_file(\"FGBS.h5\")<nl>table = a.root.quote.z4<nl>c = pd.DataFrame.from_records(table.read())","out":"how do you read a pytables table into a pandas dataframe"}
{"in":"Stop.objects.filter(approved_ts__isnull=False).order_by('line')","out":"Grouping a queryset by another related model"}
{"in":"self.function = lambda *args: module1.f(*args)[0]","out":"Assign function, ignore first value"}
{"in":"def add_invoice(request):<nl><tab>InvoiceFormSet = inlineformset_factory(Invoice, InvoiceItem)<nl><tab>if request.POST:<nl><tab><tab>invoiceForm = InvoiceForm(request.POST) <nl><tab><tab>invoiceFormSet = InvoiceFormSet(request.POST)<nl><tab><tab>if invoiceForm.is_valid() and invoiceFormSet.is_valid():<nl><tab><tab><tab>invoice = invoiceForm.save()<nl><tab><tab><tab>invoiceItems = invoiceFormSet.save(commit=False)<nl><tab><tab><tab>for invoiceItem in invoiceItems:<nl><tab><tab><tab><tab>invoiceItem.invoice = invoice<nl><tab><tab><tab><tab>invoiceItem.save()<nl><tab><tab><tab>return redirect('show_invoice', invoice_id=invoice.id)<nl><tab>else:<nl><tab><tab>invoiceForm = InvoiceForm()<nl><tab><tab>invoiceFormSet = InvoiceFormSet()<nl><tab>context_data = {<nl><tab><tab><tab>'invoiceForm': invoiceForm,<nl><tab><tab><tab>'invoiceFormSet': invoiceFormSet,<nl><tab><tab><tab>}<nl><tab>return render(request, 'add_invoice.html', context_data)","out":"ModelForm with multiple child models"}
{"in":"import re<nl><nl>def get_id(toParse):<nl><tab>return re.search('id(\\d+)', toParse).groups()[0]","out":"How to easily extract ID from iTunes URL using Python"}
{"in":"add_signal_watch_full()","out":"GStreamer bus sends None message"}
{"in":"import subprocess<nl>import locale<nl><nl>encoding = locale.getdefaultlocale()[1]<nl>proc = subprocess.Popen([\"ping\", \"123.123.123.123\"], stdout=subprocess.PIPE)<nl>out = proc.communicate()[0]<nl>if 'Request timed out' in out.decode(encoding):<nl><tab>print 'the host is down'<nl>else: <nl><tab>print 'the host is up'","out":"How to detect what output is and do if statement from it?"}
{"in":"import random<nl><nl>def insert_spaces(s):<nl><tab>s = list(s)<nl><tab>for i in xrange(len(s)-1):<nl><tab><tab>while random.randrange(2):<nl><tab><tab><tab>s[i] = s[i] + ' '<nl><tab>return ''.join(s)","out":"Is there a pythonic way to insert space characters at random positions of an existing string?"}
{"in":"def filtering(a_list):<nl><tab>results = []<nl><tab>for i, item in enumerate(a_list):<nl><tab><tab>if re.search(r'\\d{0,1}\\s+Contacts;\\s*', item) is not None:<nl><tab><tab><tab>results.extend(a_list[i+1:i+6])","out":"Isolate N values from a list after obtaining a specific match with a regex"}
{"in":"f = open(\"text.txt\", \"rb\")<nl>s = f.readlines()<nl>f.close()<nl>f = open(\"newtext.txt\", \"wb\")<nl>s.reverse()<nl>for item in s:<nl>  print>>f, s<nl>f.close()","out":"Read lines from a text file, reverse and save in a new text file"}
{"in":"logger = logging.getLogger(__name__)","out":"What are the guidelines to allow customizable logging from a Python module?"}
{"in":"xls = pd.ExcelFile('path_to_file.xls')<nl>df1 = xls.parse('Sheet1')<nl>df2 = xls.parse('Sheet2')","out":"Using Pandas to pd.read_excel() for multiple worksheets of the same workbook"}
{"in":"#!\/usr\/bin\/python<nl>from multiprocessing import Process,Queue<nl>import random<nl>import time<nl><nl>def printrand():<nl>   #Checks whether Queue is empty and runs<nl>   while q.empty():<nl><tab>  rand = random.choice(range(1,100))<nl><tab>  time.sleep(1)<nl><tab>  print rand<nl><nl><nl>if __name__ == \"__main__\":<nl>   #Queue is a data structure used to communicate between process <nl>   q = Queue()<nl>   #creating the process<nl>   p = Process(target=printrand)<nl>   #starting the process<nl>   p.start()<nl>   while True:<nl><tab>  ip = raw_input(\"Write something: \")<nl><tab>  #if user enters stop the while loop breaks<nl><tab>  if ip==\"stop\":<nl><tab><tab> #Populating the queue so that printramd can read and quit the loop<nl><tab><tab> q.put(ip)<nl><tab><tab> break<nl>   #Block the calling thread until the process whose join() <nl>   #method is called terminates or until the optional timeout occurs.<nl>   p.join()","out":"Python - run two commands at the same time"}
{"in":"from datetime import datetime, timedelta<nl>now = datetime.now()<nl>now = now - timedelta(minutes = now.minute % 15, seconds = now.second, microseconds = now.microsecond )","out":"Find current time interval in python?"}
{"in":"while True:<nl><tab>new = Cell(\"A1\").value<nl><tab>if static != new:<nl><tab><tab>CellRange(\"C2:E4\").clear()<nl><tab><tab>Cell(\"C2\").table = {\"mamposteria\": data1,<nl><tab><tab><tab><tab><tab><tab><tab>\"moretero\": data2,<nl><tab><tab><tab><tab><tab><tab><tab>\"estructura\": data3}[new]<nl><tab><tab>static = new","out":"Interactive sheet using Datanitro"}
{"in":"import re<nl><nl>d = {}<nl><nl>with open('data', 'r') as f:<nl><nl><tab>for line in f:<nl><nl><tab><tab>line =   re.sub('\\s', '', line)<nl><nl><tab><tab>key, value = line.split('=')<nl><nl><tab><tab>d[key] = value<nl><nl>for el in d.items():<nl><nl><tab>print(el)","out":"Python: How do i convert data in text file into a dictionary?"}
{"in":"df = pd.concat([DataFrame({'M': [1, 2], 'F': [2, 5]}), \\<nl><tab><tab><tab><tab>DataFrame({'M': [1, 5], 'F': [2, 7]})], \\<nl><tab><tab><tab><tab>axis=1, keys=['Completed', 'Not Completed'])<nl><nl>df.index = ['A', 'B']<nl><nl>df.index.name = 'Name'","out":"Pandas Data Frame Column structure"}
{"in":"class N:<nl><tab>def __init__(self):<nl><tab><tab>self.s = []<nl><tab>def add(self,u):<nl><tab><tab>self.s.append(u)<nl><tab>def check(self):<nl><tab><tab>if sorted(self.s) == True:<nl><tab><tab><tab>print \"List is sorted\"<nl><tab><tab>else:<nl><tab><tab><tab>print \"Not sorted but it will sort now\"<nl><tab><tab><tab>return sorted(self.s)","out":"initializing queue with condition"}
{"in":"if __name__ == \"__main__\":<nl><tab>import traceback<nl><tab>from raven import Client<nl><tab>client = Client('requests+http:\/\/XXKEYXX@sentry.yourserver.com\/sentry\/1')<nl><tab>try:<nl><tab><tab>YourApp().run()<nl><tab>except:<nl><tab><tab>traceback.print_exc()<nl><tab><tab>ident = client.get_ident(client.captureException())<nl><tab><tab>print \"Exception caught; reference is %s\" % ident","out":"How can I catch kivy-client crash log and send it to my server?"}
{"in":"image = load_image(\"\/path\/to\/image\")[:,:,0]","out":"translation\/rotation through phase correlation in python"}
{"in":"import subprocess<nl>process = subprocess.Popen([\"C:\\Users\\Ben\\Desktop\\youtube-dl\\youtube-dl.exe\", \"--max-quality\", \"FORMAT\", \"--extract-audio\", \"songUrl\"], shell=True, stdout = subprocess.PIPE)<nl><nl>while process.poll() is None:<nl><tab>result = process.stdout.read()<nl><tab># do some calculations for percentage done","out":"python: getting a response from check_output before the command is finished"}
{"in":"class Tag(models.Model):<nl><tab>test_case_counter = models.IntegerField(default=0)<nl><tab>my_date_field = models.DateField(auto_now=True,auto_add=True)<nl><nl><tab>class Meta: # notice indentation<nl><tab><tab>ordering = ['my_date_field']<nl><tab><tab>app_label = 'project'","out":"How to write sort function"}
{"in":"import csv<nl><nl>result={}<nl>with open('\/tmp\/test.csv','r') as f:<nl><tab>red=csv.DictReader(f)<nl><tab>for d in red:<nl><tab><tab>result.setdefault(d['team'],[]).append(d['bldg'])<nl><nl>#results={'1': ['1450'], '3': ['204', '250', '1437'], '2': ['1440']}","out":"Read two column CSV as dict with 1st column as key"}
{"in":"x=\"[python] how to [css]\"<nl>print re.findall(r\"(?<=\\[)[^\\]]*(?=\\])\",x)   # this is the list you want<nl>print re.sub(r\"\\[[^\\]]*\\]\",\"\",x)<tab><tab><tab> # this is the string you want","out":"split string according to words between square parenthesis"}
{"in":"jrange = np.arange(self.max_j - j_start)<nl>joffset = np.round(jrange * discriminant).astype(int)<nl>i = np.arange(self.max_i)<nl><nl>for j in jrange:<nl><tab>new_i = i + joffset[j]<nl><tab>in_range = new_i < self.max_i<nl><tab>self.grid[new_i[in_range], j+j_start] = standard[i[in_range]]","out":"How to rewrite this code from python loops to numpy vectors (for perfomance)?"}
{"in":"G.label(*x)","out":"Assign a list to variables"}
{"in":"company_3 = [o.title() for o in company_2]","out":"How can I iterate this code without using such a complicated for loop?"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl>data = \"\"\"100 0.0<nl><tab>  5 500.25<nl><tab>  2 10.0<nl><tab>  4 5.55<nl><tab>  3 950.0<nl><tab>  3 300.25\"\"\"<nl><nl>counts = []<nl>values = []<nl><nl>for line in data.split(\"<nl>\"):<nl><tab>x, y = line.split()<nl><tab>values.append(int(x))<nl><tab>counts.append(float(y))<nl><nl>plt.bar(counts, values)<nl><nl>plt.show()","out":"Generating a matlibplot bar chart from two columns of data"}
{"in":"sample_means = [x\/seg_len] + [mean(data[x:x+seg_len,i]) for i in range(4)]<nl>writer.writerow(sample_means)","out":"Written csv file with Python contains wrong format of numbers"}
{"in":"Stmt<tab>  << ( selectToken +<nl><tab><tab><tab><tab>columnNameList('columns') + <nl><tab><tab><tab><tab>Optional( CaselessKeyword('where') + whereExpression('where'), \"\" ) +<nl><tab><tab><tab><tab>Each( [ Optional( CaselessKeyword('group by') + columnNameList('group'), \"\" ).setDebug(),<nl><tab><tab><tab><tab><tab><tab>Optional( CaselessKeyword('order by') + columnNameList('order'), \"\" ).setDebug() ] <nl><tab><tab><tab><tab><tab>) <nl><tab><tab><tab>)","out":"pyparsing, Each, results name"}
{"in":"class GraphElement:<nl><tab>def __init__(self, graph):<nl><tab><tab>pass<nl><nl>class Edge(GraphElement, tuple):<nl><tab>def __new__(cls, graph, (source, target)):<nl><tab><tab>return tuple.__new__(cls, (source, target))<nl><tab>def __init__(self, graph, (source, target)):<nl><tab><tab>GraphElement.__init__(self, graph)","out":"Python: Inheriting from Built-In Types"}
{"in":"import subprocess<nl>subprocess.call('nircmd.exe win close class \"CabinetWClass\"' , shell=True)","out":"How to close all windows7 folders using python"}
{"in":"import unicodedata, re<nl><nl>all_chars = (unichr(i) for i in xrange(0x110000))<nl>control_chars = ''.join(c for c in all_chars if unicodedata.category(c) == 'Cc')<nl># or equivalently and much more efficiently<nl>control_chars = ''.join(map(unichr, range(0,32) + range(127,160)))<nl><nl>control_char_re = re.compile('[%s]' % re.escape(control_chars))<nl><nl>def remove_control_chars(s):<nl><tab>return control_char_re.sub('', s)","out":"Stripping non printable characters from a string in python"}
{"in":"import random <nl>score = 0<nl>ops = ['+','-','*']<nl><nl>for i in range(10):<nl><tab>num1 = random.randint(1,9)<nl><tab>num2 = random.randint(1,9)<nl><tab>operation = random.choice(ops)<nl><tab>print(num1)<nl><tab>print(operation)<nl><tab>print(num2)<nl><tab>user = int(input(\"\"))<nl><tab>if operation == \"+\":<nl><tab><tab>answer = num1 + num2<nl><tab>elif operation == \"-\":<nl><tab><tab>answer = num1 - num2<nl><tab>elif operation == \"*\":<nl><tab><tab>answer = num1 * num2<nl><nl><tab>if user == answer:<nl><tab><tab>print(\"correct\")<nl><tab><tab>score = score + 1<nl><tab>else:<nl><tab><tab>print(\"Incorrect\")<nl><tab>print (score)","out":"How would I loop a randomly generated arithmetic 10 times over? this is my code so far"}
{"in":"import numpy as np<nl>import pylab as py<nl>from scipy.misc import factorial as fact<nl><nl>e = 0.65<nl><nl><nl>def E(M):<nl><tab>return (M + sum((1.0 \/ 2.0 ** (n - 1) *<nl><tab><tab><tab><tab><tab> sum((-1) ** (k) \/ (fact(n - k) * fact(k)) *<nl><tab><tab><tab><tab><tab><tab> (n - 2 * k) ** (n - 1) *<nl><tab><tab><tab><tab><tab><tab> np.sin((n - 2 * k) * M)<nl><tab><tab><tab><tab><tab><tab> for k in range(0, n \/ 2, 1))) * e ** n<nl><tab><tab><tab><tab><tab><tab> for n in range(1, 4, 1)))<nl><nl><nl>M = np.linspace(0, 2 * np.pi, 50000.0)<nl><nl>fig = py.figure()<nl>ax = fig.add_subplot(111)<nl>ax.plot(E(M), M)<nl>py.xlim((0, 2 * np.pi))<nl>py.ylim((0, 2 * np.pi))<nl>py.show()","out":"Python: Plotting a infinite series by only taking finite points"}
{"in":"import module_1<nl><nl>class Card(object):<nl><tab>def __init__(self, suit, number):<nl><tab><tab>self.suit = suit<nl><tab><tab>self.number = number<nl><tab><tab>self.index = [suit, number]<nl><nl>if __name__ == '__main__':<nl><tab># Keep reference to the original Card class.<nl><tab>original_card = module_1.Card<nl><tab># Replace with my custom Card class.<nl><tab>module_1.Card = Card  <nl><tab>new_deck = module_1.Deck()<nl><tab>print new_deck.cards[0]<nl><tab># Restore.<nl><tab>module_1.Card = original_card","out":"How can I override a class definition in python?"}
{"in":"text = \"Some sample (with parenthesis) text\"<nl>regEx = re.compile(r'([^\\(]*)\\([^\\)]*\\) *(.*)')<nl>m = regEx.match(text)<nl>while m:<nl>  text = m.group(1) + m.group(2)<nl>  m = regEx.match(text)<nl>print text","out":"remove content inside parenthesis as well as the parenthesis themselves from a paragraph"}
{"in":"shell=True","out":"subprocess.call requiring all parameters to be separated by commas"}
{"in":"driver.switch_to.window(driver.window_handles[-1])","out":"How can I move WebDriver to new opened Chrome tab without knowing index?"}
{"in":"class mydeque(object):<nl><nl>  def __init__(self):<nl><tab>self.left = []<nl><tab>self.right = []<nl><nl>  def pushleft(self, v):<nl><tab>self.left.append(v)<nl><nl>  def pushright(self, v):<nl><tab>self.right.append(v)<nl><nl>  def popleft(self):<nl><tab>if not self.left:<nl><tab>  self.__fill_left()<nl><tab>return self.left.pop()<nl><nl>  def popright(self):<nl><tab>if not self.right:<nl><tab>  self.__fill_right()<nl><tab>return self.right.pop()<nl><nl>  def __len__(self):<nl><tab>return len(self.left) + len(self.right)<nl><nl>  def __getitem__(self, i):<nl><tab>if i >= len(self.left):<nl><tab>  return self.right[i-len(self.left)]<nl><tab>else:<nl><tab>  return self.left[-(i+1)]<nl><nl>  def __fill_right(self):<nl><tab>x = len(self.left)\/\/2<nl><tab>self.right.extend(self.left[0:x])<nl><tab>self.right.reverse()<nl><tab>del self.left[0:x]<nl><nl>  def __fill_left(self):<nl><tab>x = len(self.right)\/\/2<nl><tab>self.left.extend(self.right[0:x])<nl><tab>self.left.reverse()<nl><tab>del self.right[0:x]","out":"O(1) indexable deque of integers in Python"}
{"in":"import servo<nl>servo.move(int(argv[1]), int(argv[2]))","out":"I need help with a python script I am trying to adapt for a specific need"}
{"in":"from matplotlib.pyplot import axes, pie, show, figure, subplot<nl>import matplotlib.gridspec as gridspec<nl><nl>fig = figure(facecolor = 'k')<nl><nl>ax1 = subplot(111, axisbg='k')<nl>ax1.pie([1,2,3,4])<nl>ax1.set_frame_on(True)<nl>ax1.spines['bottom'].set_color('w')<nl>ax1.spines['left'].set_color('w')<nl>ax1.spines['top'].set_color('w')<nl>ax1.spines['right'].set_color('w')","out":"Python matplotlib - White spines with pie chart?"}
{"in":"from selenium import webdriver<nl>driver = webdriver.Firefox()<nl>print (driver.current_url)","out":"get current url from browser python"}
{"in":"if x == \"No Event\":<nl><tab># Handle no-event situation<nl><tab>pass<nl>elif x.startswith(\"P(\"):<nl><tab># extract the number<nl><tab>s = x[2:].split()[0]<nl><tab>if \".\" in s:<nl><tab><tab># period present<nl><tab><tab>result = float(s)<nl><tab>else:<nl><tab><tab># period not present<nl><tab><tab>result = int(s)<nl>else:<nl><tab># Handle unexpected input<nl><tab>pass","out":"How do filter and convert unicode to integer in python"}
{"in":"from suds.xsd.sxbasic import Import<nl><nl>file_url = 'file:\/\/<path to xml.xsd>'<nl>Import.bind('http:\/\/www.w3.org\/XML\/1998\/namespace', file_url)","out":"How do I prevent suds from fetching xml.xsd over the network?"}
{"in":"from subprocess import call<nl>call([\"open\", \"hi.jpg\"])","out":"I want to get python to output a png file"}
{"in":"from turtle import *<nl>from time import sleep<nl>turtle = Turtle()<nl>screen = Screen()<nl>screen.onscreenclick(turtle.goto)<nl>turtle.getscreen()._root.mainloop()","out":"Python - Move Turtle To Mouse On Click"}
{"in":"df.unstack(level=1)","out":"Fill multi-index Pandas DataFrame with interpolation"}
{"in":"print(\"Hello World\")","out":"SyntaxError when entering python3.2 to run print from Terminal"}
{"in":"def devisors_number(n):<nl><tab>result = 0<nl><tab>sqrt_n = int(n**0.5)<nl><nl><tab>for i in xrange(1, sqrt_n + 1):<nl><tab><tab>if n % i == 0:<nl><tab><tab><tab>result += 1<nl><nl><tab>result *= 2<nl><nl><tab>if sqrt_n**2 == n:<nl><tab><tab>result -= 1<nl><nl><tab>return result<nl><nl><nl>n = int(raw_input(\"Enter a number: \"))<nl>d = devisors_number(n)<nl>print \"{0} has {1} devisors\".format(n, d)","out":"find total number of divisors of number, for t test cases in python"}
{"in":"with open('r.0', 'r') as IRR, open('tt', 'w') as fd_w:<nl><tab>lines = []<nl><tab>for line in IRR:<nl><tab><tab>line = line.strip()<nl><tab><tab>if line:<nl><tab><tab><tab>lines.append(line)<nl><tab><tab>else:<nl><tab><tab><tab># empty line, found a complete block, test for status line<nl><tab><tab><tab>if 'status:<tab><tab> ASSIGNED PA' in lines:<nl><tab><tab><tab><tab>for line in lines:<nl><tab><tab><tab><tab><tab>fd_w.write(line + '<nl>')<nl><tab><tab><tab>lines = []","out":"Writing lines from a file"}
{"in":"mail.send_mail(sender=\"\",<nl><tab><tab><tab><tab> to=\"\",<nl><tab><tab><tab><tab> subject=\"\",<nl><tab><tab><tab><tab> body=\"\",<nl><tab><tab><tab><tab> html=\"your html\")","out":"Set background image in google app engine mail API"}
{"in":"from itertools import combinations<nl><nl>def find_sum_in_list(numbers, target, comboSize):<nl><tab>results = []<nl><tab>for combo in combinations(numbers, comboSize):<nl><tab><tab>if sum(combo) == target:<nl><tab><tab><tab>results.append(combo)<nl><tab>return results<nl><nl><nl>if __name__ == \"__main__\":<nl><tab>numbers = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300]<nl><tab>total = 1200<nl><tab>comboSize = 5<nl><tab>print find_sum_in_list(numbers, total, comboSize)","out":"How to limit Python recursive combinations?"}
{"in":"dict((k, v) for (k, v) in somedict.iteritems() if not k.startswith('someprefix'))","out":"Fastest way of deleting certain keys from dict in Python"}
{"in":"output_list = list(itertools.product(*test_list))","out":"Python return combinations of a list of ranges?"}
{"in":"import cv2<nl><nl>def crop(img):<nl><tab>face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')<nl><tab>sub_face = img<nl><nl><tab>faces = face_cascade.detectMultiScale(img, 1.1, 5)<nl><tab>for (x,y,w,h) in faces:<nl><tab><tab>sub_face = img[y:y+h, x:x+w]<nl><nl><tab>return sub_face<nl><nl><nl>imageToCrop = cv2.imread('izz.jpg',0)<nl>croppedImage = crop(imageToCrop)<nl><nl>cv2.imshow('img',croppedImage)<nl>cv2.waitKey(0)<nl>cv2.destroyAllWindows()","out":"Capture face area by camera"}
{"in":"foos = doc.find('foos')<nl>for foo in foos:<nl><tab>for text in foo.itertext():<nl><tab><tab>print text.strip(),<nl><tab>print","out":"extract tag inside text element of an xml tag"}
{"in":"s_regs = sorted(regexes,key=lambda x:len(x))<nl>s_regs.reverse()<nl>regex = '|'.join(s_regs)","out":"Python regex ordering issue"}
{"in":"import BeautifulSoup<nl><nl>doc = '''<html><head><title>Page title<\/title><\/head><body><p id=\"firstpara\" align=\"center\">This is <i>paragraph<\/i> <a onclick=\"\">one<\/a>.<p id=\"secondpara\" align=\"blah\">This is <i>paragraph<\/i> <b>two<\/b>.<\/html>'''<nl>soup = BeautifulSoup.BeautifulSoup(doc)<nl><nl>for tag in soup.recursiveChildGenerator():<nl><tab>if isinstance(tag,BeautifulSoup.Tag) and tag.name not in ('a'):<nl><tab><tab>print(tag.string)<nl><tab>elif isinstance(tag,BeautifulSoup.Tag) and tag.name in ('a'):<nl><tab><tab>print(tag)","out":"Is it possible to use Python \/ BeautifulSoup to strip all tags from a chunk of HTML EXCEPT anchor \/ links?"}
{"in":"class SoundManager:<nl><tab>sounds = [] # list of sound objects<nl><nl><tab>@staticmethod<nl><tab>def playRandom():<nl><tab><tab>random.choice(SoundManager.sounds).play()","out":"Choosing a random sound Pygame"}
{"in":"cherrypy.server.socket_host = '192.168.0.147'<nl>cherrypy.server.socket_port = 8080","out":"How to deploy a CherryPy app locally"}
{"in":"df.index.is_monotonic","out":"How can I check if a Pandas dataframe's index is sorted"}
{"in":"import wx<nl><nl>class Frame(wx.Frame):<nl><tab>def __init__(self, title):<nl><tab><tab>wx.Frame.__init__(self, None, title=title, size=(300,200))<nl><nl><tab><tab>self.panel = wx.Panel(self)<nl><tab><tab>box = wx.BoxSizer(wx.VERTICAL)<nl><tab><tab>m_text = wx.StaticText(self.panel, -1, 'File Uploaded!')<nl><tab><tab>m_text.SetSize(m_text.GetBestSize())<nl><nl><tab><tab>box.Add(m_text, 0, wx.ALL, 10)<nl><tab><tab>self.panel.SetSizer(box)<nl><tab><tab>self.panel.Layout()<nl><nl><tab><tab>self.timer = wx.Timer(self)<nl><tab><tab>self.Bind(wx.EVT_TIMER, self.onClose, self.timer)<nl><tab><tab>self.timer.Start(5000)<nl><nl><tab>def onClose(self, event):<nl><tab><tab>self.Close()<nl><nl>app = wx.App(redirect=True)<nl>top = Frame('test')<nl>top.Show()<nl>app.MainLoop()","out":"pop up a window with text in it and automatically close it after certain time"}
{"in":"plt.figure(1)<nl>plt.hist(trials, bins=2, align=\"mid\",<nl><tab><tab> weights=np.zeros_like(trials) + 1. \/ len(trials))<nl><nl><nl># ------------------------------<nl># New lines to add tick marks as requested<nl>tick_locs = [0.25, 0.75]<nl>tick_lbls = ['0','1']<nl>plt.xticks(tick_locs, tick_lbls)<nl># ------------------------------<nl><nl>plt.ylim(0,1.0)<nl>plt.title(\"Bernoulli Distribution with p = \" + str(p))<nl>plt.xlabel(\"Outcome\")<nl>plt.ylabel(\"Probability\")<tab><nl>plt.show()","out":"Displaying bins correctly with pyplot"}
{"in":"last_state = False<nl>while True:<nl><tab>x,y = win32api.GetCursorPos()<nl><tab>state = x < 0<nl><tab>if state == last_state:<nl><tab><tab>continue<nl><tab>last_state = state<nl><tab>if state:<nl><tab><tab>print(\"2\")<nl><tab>else:<nl><tab><tab>print(\"1\")","out":"Take action when the cursor position crosses a particular x value"}
{"in":"\\\\{(.*)\\\\}","out":"QRegEx to highlight everything between braces"}
{"in":"def makeImage (triangle, largura, altura):<nl><tab>\"\"\"<nl><tab>triangle: receives a tuple in the form: x1, y1, x2, y2, x3, y3, R, G, B, A<nl><tab>largura: image weight<nl><tab>altura: image height<nl><nl><tab>returns: numPy array of the triangle composed final image<nl><tab>\"\"\"<nl><tab>back = Image.new('RGBA', (largura,altura), (0,0,0,0))<nl><tab>poly = Image.new('RGBA', (largura,altura))<nl><tab>pdraw = ImageDraw.Draw(poly)<nl><nl><tab>pdraw.polygon([1,2,3,4,5,6], fill=(255,0,0,127))<nl><tab>back.paste(poly,mask=poly)<nl><nl><tab>back = back.convert('RGB')<nl><tab>backArr = asarray(back)<nl><tab>#back.show()<nl><nl><tab>return backArr","out":"Convert Matplotlib figure to NumPy array without any borders\/frame or axis"}
{"in":"res = service.data().ga().get(ids='ga:' + profile_id, start_date='2014-01-01', end_date=t, metrics='ga:sessions', dimensions='ga:browser',sort='-ga:sessions' , max_results='5' ).execute()","out":"How do I get dimension data from Analytics reporting api"}
{"in":"'''<nl>This is a multiline<nl>comment. I can type here whatever I want.<nl>'''","out":"Multiple line comment in python"}
{"in":"fd.seek(0)","out":"python writing to file prepends null characters"}
{"in":"import win32file # Ensure you import the module.<nl><nl>file_handle = win32file.CreateFile('filename.txt', win32file.GENERIC_READ, win32file.FILE_SHARE_DELETE | win32file.FILE_SHARE_READ | win32file.FILE_SHARE_WRITE, None, win32file.OPEN_EXISTING, win32file.FILE_ATTRIBUTE_NORMAL, None)","out":"Python: Opening a file without creating a lock"}
{"in":"import re<nl><nl>p = re.compile('\\d+(\\.\\d+)?')<nl><nl>a = raw_input('How much is 1 share in that company? ')<nl><nl>while p.match(a) == None:<nl><tab>print \"You need to write a number!<nl>\"<nl><tab>a = raw_input('How much is 1 share in that company? ')","out":"Python - Using isdigit for floats?"}
{"in":"# for python 3.x use 'tkinter' rather than 'Tkinter'<nl>import Tkinter as tk<nl>import datetime<nl>import math<nl>MINUTE = 60<nl>HOUR = 60*MINUTE<nl>class App():<nl><tab>def __init__(self):<nl><tab><tab>self.root = tk.Tk()<nl><tab><tab>self.done_time=datetime.datetime.now() + datetime.timedelta(seconds=HOUR\/2) # half hour<nl><tab><tab>self.label = tk.Label(text=\"\")<nl><tab><tab>self.label.pack()<nl><tab><tab>self.update_clock()<nl><tab><tab>self.root.mainloop()<nl><nl><tab>def update_clock(self):<nl><tab><tab>elapsed = self.done_time - datetime.datetime.now()<nl><tab><tab>h,m,s,fractional_s = elapsed.seconds\/3600,elapsed.seconds\/60,elapsed.seconds%60<nl><tab><tab>fractional_seconds = math.floor(elapsed.microseconds\/1000000.0*100)<nl><tab><tab>self.label.configure(text=\"%02d:%02d:%02d.%02d\"%(h,m,s))<nl><tab><tab>self.root.after(1000, self.update_clock)<nl><nl>app=App()","out":"Making a Tkinter countdown timer update actively"}
{"in":"self.scrollbar.grid(column=6, row=5, rowspan=2,  sticky=N+S+W)","out":"Scrollbar to scroll Text widget, using Grid layout, in Tkinter"}
{"in":"import itertools<nl><nl>tasks_combinations = [[1, 2, 3], [2, 3, 4]]<nl>people_tasks = [[1, 3], [2, 3], [3, 4]]<nl><nl>people_tasks_product = map(set, (itertools.product(*people_tasks)))<nl><nl>for tasks_combination in tasks_combinations:<nl><tab>if set(tasks_combination) in people_tasks_product:<nl><tab><tab>print('Task combination {} is covered.'.format(tasks_combination))<nl><tab>else:<nl><tab><tab>print('Task combination {} is NOT covered.'.format(tasks_combination))","out":"Check whether all possible combinations from a list appear in an attribute of objects in another list"}
{"in":"from urllib import request<nl>filename = '\/Users\/kyle\/Desktop\/html_test.html'<nl><nl>u = request.urlopen('http:\/\/www.ebay.com')<nl>with open(filename, 'wb') as f: #notice the 'b' here<nl><tab>f.write(u.read())<nl><nl>import webbrowser<nl>webbrowser.open_new(filename)","out":"can't open file with browser"}
{"in":"import re<nl>filename = re.findall(\"filename=(\\S+)\", f[1]['Content-Disposition'])","out":"How to get filename from Content-Disposition in headers"}
{"in":"import RPi.GPIO as GPIO<nl>GPIO.setwarnings(False)<nl>GPIO.setmode(GPIO.BCM)<nl>GPIO.setup(4,GPIO.OUT)<nl>GPIO.setup(17,GPIO.OUT)<nl>GPIO.setup(22,GPIO.OUT)<nl>GPIO.setup(23,GPIO.OUT)<nl>GPIO.output(4,1)<nl>GPIO.output(17,0)<nl>GPIO.output(22,1)<nl>GPIO.output(23,0)<nl>i=GPIO.input(4)<nl>j=GPIO.input(17)<nl>k=GPIO.input(22)<nl>l=GPIO.input(23)<nl>data=[i,j,k,l]<nl>ser.write(data)","out":"Read status of GPIO pins of Raspberry pi and send it through serial port"}
{"in":"data.groupby('Name').sum()['Score'].reset_index()","out":"Combine the dataframe in Pandas"}
{"in":"class Hangmanner:<nl><tab>correct_word = ''<tab><nl><tab>current_guess = ''<nl><nl><tab>def play_hangman(self, word):<nl><tab><tab>self.correct_word = word<nl><nl><tab><tab>self.current_guess = '_' * len(self.correct_word)<nl><nl><tab><tab>while self.current_guess != self.correct_word:<nl><tab><tab><tab>self.guess_letter(input(\"Please guess a letter: \"))<nl><nl><tab>def guess_letter(self, guessed_letter):<nl><tab><tab>for i in range(len(self.correct_word)):<nl><tab><tab><tab>if self.correct_word[i] == guessed_letter:<nl><tab><tab><tab><tab>if i == 0:<nl><tab><tab><tab><tab><tab>self.current_guess = self.correct_word[i] + self.current_guess[1:]<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab>self.current_guess = self.current_guess[:i] + self.correct_word[i] + self.current_guess[i + 1:]<nl><tab><tab>print(self.current_guess)<nl><nl>if __name__ == \"__main__\":<nl><tab>hangmanner = Hangmanner()<nl><tab>hangmanner.play_hangman(\"test\")","out":"Implementing a hangman function in Python"}
{"in":"import MySQLdb<nl>db = MySQLdb.connect(host=\"localhost\",<nl><tab><tab><tab><tab><tab> user=\"user\",<nl><tab><tab><tab><tab><tab>  passwd=\"password\", <nl><tab><tab><tab><tab><tab>  db=\"database\") <nl>cur = db.cursor() <nl>cur.execute(\"SELECT common_name , genus , species  FROM table WHERE sequence LIKE 'MDPSSID%'\")","out":"Searching through database with python"}
{"in":"server.set_debuglevel(True)","out":"Emailing an excel sheet with SSL in Python"}
{"in":"check_call(['gzip', fullFilePath])","out":"gzip a file in Python"}
{"in":"ret = np.zeros_like(data[0,:,:])<nl>for latIdx in xrange(grid.shape[1]):<nl><tab>for lonIdx in xrange(grid.shape[2]):<nl><tab><tab># check if we need to flip the column<nl><tab><tab>if grid[0,latIdx,lonIdx] > grid[-1,latIdx,lonIdx]:<nl><tab><tab><tab>ind = -1<nl><tab><tab>else:<nl><tab><tab><tab>ind = 1<nl><tab><tab>f = interpolate.interp1d(grid[::ind,latIdx,lonIdx], \\<nl><tab><tab><tab><tab>data[::ind,latIdx,lonIdx], \\<nl><tab><tab><tab><tab>kind=interp)<nl><tab><tab>ret[latIdx,lonIdx] = f(value)<nl>return ret","out":"How to improve performance when interpolating on 3d data with SciPy"}
{"in":"Chair.objects.filter(datetime__isnull=False)","out":"Making a query for all objects that don't have `None` for a certain field"}
{"in":"import numpy as np<nl>W1 = np.arange(25*64).reshape(25, 64)<nl>W2 = np.arange(25*64).reshape(64, 25)<nl>b1 = np.arange(25)<nl>b2 = np.arange(64)<nl><nl>theta = np.concatenate([W1.flat, W2.flat, b1, b2])<nl>print(theta.shape)<nl># (3289,)","out":"How to convert matrices to column vectors and append all together in python"}
{"in":"# Fast O(n) solution using a dictionary<nl>def solution(lst):<nl><tab>counts = {}<nl><nl><tab>for item in lst:<nl><tab><tab>if item in counts:<nl><tab><tab><tab>counts[item] += 1<nl><tab><tab>else:<nl><tab><tab><tab>counts[item] = 1<nl><nl><tab>for item in lst:<nl><tab><tab>if counts[item] == 1:<nl><tab><tab><tab>return item<nl><nl><tab>return -1<nl><nl>print(solution([1,2,1,3,2,5])) # prints 3<nl>print(solution([1,2,1,3,3,2,5])) # prints 5<nl>print(solution([1,2,1,3,3,2,5,5])) # prints -1<nl>print(solution([7])) # prints 7","out":"Python: first unique number in a list"}
{"in":"print ('radius   area<tab> circumference')","out":"How do i get the print outs to show up correctly under the final output"}
{"in":"def add_data (new_data, old_data, n): # keep n points<nl><tab>return (old_data + new_data)[-n:]","out":"How can I plot online data coming from two different sources in python?"}
{"in":"for error in dtd.error_log.filter_from_errors():<nl><tab>print(error.message)<nl><tab>print(error.line)<nl><tab>print(error.column)","out":"How to get the error position of xml file with lxml dtd.validate function in Python?"}
{"in":"def root_pre(l):<nl><tab>root = \"\"<nl><tab>for t in zip(*l):<nl><tab><tab>if not all(t[0] == s for s in t):<nl><tab><tab><tab>break<nl><tab><tab>root += t[0]<nl><tab>ln = len(root)<nl><tab>pres = [s[ln:] for s in listData]<nl><tab>return root, pres<nl><nl>print(root_pre(listData))<nl>('black', ['ish', 'en', 'ed'])","out":"Root Identification in a list of Data in python:"}
{"in":"def test(the_list):<nl><tab>for i in range(len(the_list)):<nl><tab><tab>the_list[i] = the_list[i].lower()<nl><nl>the_list=[\"Python\", \"Programming\"]<nl>test(the_list)<nl>print the_list","out":"Modify list elements by passing it to a function"}
{"in":"try:<nl><tab>import cPickle as pickle  # Improve speed<nl>except ValueError:<nl><tab>import pickle<nl><nl>file_temp = open('temp', 'w')<nl>pickle.dump(scenes, file_temp)<nl>file_temp.close()","out":"Python save variable to file like save() in MATLAB"}
{"in":"import subprocess<nl><nl>DETACHED_PROCESS = 0x00000008<nl><nl>subprocess.Popen(args,<nl><tab><tab><tab><tab> cwd=cwd,<nl><tab><tab><tab><tab> creationflags=DETACHED_PROCESS)","out":"Application called with Subprocess from PySide GUI application (py2exe) stopped working"}
{"in":"def OnRun(self,event):<nl><tab>path = \"\/path\/to\/youtube-dl.py\"<nl><tab>url = \"http:\/\/www.youtube.com\/\"<nl><tab>subprocess.Popen(path, url, \"--extract-audio\", \"--audio-format\", \"mp3\")","out":"Run a cmd command with a simple button in wxpython"}
{"in":"def scanFiles(dir): <nl><tab>fout = open(\"animals.las\", \"w\")<nl><tab>for root, dirs, files in os.walk(dir):<nl><tab><tab>for file in files:<nl><tab><tab><tab>if '.las' in file:<nl><tab><tab><tab># read the file<nl><tab><tab><tab><tab>fin = open(file, \"r\")<nl><tab><tab><tab><tab>str2 = fin.read()<nl><tab><tab><tab><tab>fin.close()<nl><tab><tab><tab># call the function and get the changed text<nl><tab><tab><tab><tab>str3 = replace_words(str2, word_dic)<nl><tab><tab><tab># write changed text back out<nl><tab><tab><tab><tab>fout.write(str3)<nl><tab><tab><tab><tab>#time.sleep(1)<nl><tab>fout.close()","out":"How can I change this script to also include a rename functionality?"}
{"in":"import os, datetime<nl><nl>folder_name = \"MY_PATH\"<nl>for file_name in os.listdir(folder_name):<nl><tab>file_name_full = os.path.join(folder_name, file_name)<nl><tab>if not os.path.isfile(file_name_full):<nl><tab><tab>continue<nl><tab>timestamp = os.path.getctime(file_name_full)<nl><tab>dt = datetime.datetime.fromtimestamp(timestamp)<nl><tab># print out the datestamp<nl><tab>print dt<nl><nl><tab># if you now want to put them into subfolders based on the year 2012 <nl><tab># you can do something like the following<nl><tab>yr = dt.year<nl><tab>subfolder_name = \"\"<nl><tab>if yr < 2012:<nl><tab><tab>subfolder_name = \"before 2012\"<nl><tab>else:<nl><tab><tab>subfolder_name = \"2012 and after\"<nl><tab>subfolder_name_full = os.path.join(folder_name, subfolder_name)<nl><tab>new_file_name_full = os.path.join(subfolder_name_full, file_name)<nl><tab># I assume your folders are premade. If not, you can do a quick-and-dirty mkdir here<nl><nl><tab>print \"Moving %s -> %s\" % (file_name_full, new_file_name_full)<nl><tab>os.rename(file_name_full, new_file_name_full)","out":"Image sorter by created date in python"}
{"in":"print(('<tab>{:<' + str(SHOWLEN) + '.' <nl><tab>+ str(SHOWLEN) +'}  {:<}').format(value[1], value[0]))","out":"How to use variables for width and precision in str.format()?"}
{"in":"doc.xpath('\/\/*[contains(@style,\"background\") and contains(@style,\"url(\")]')","out":"find if background image is used for any html tag with inline style"}
{"in":"cmd = 'ping 192.168.1.1'<nl>output = subprocess.check_output(cmd.split())","out":"loading another program that takes in a textfile in a program subprocess"}
{"in":"records = db_session.query(Resource).filter(<nl><tab><tab><tab>  Resources.data[\"lastname\"].astext == \"Doe\"<nl><tab><tab>  ).all()","out":"Python SQLAlchemy and Postgress - How to query a JSON element"}
{"in":"def groupings(a):<nl><tab> g = []<nl><tab> for val in a:<nl><tab><tab> if not g:<nl><tab><tab><tab> g.append(val)<nl><tab><tab> elif abs(g[-1] - val) <= 1.00001:<nl><tab><tab><tab> g.append(val)<nl><tab><tab> else:<nl><tab><tab><tab> yield g<nl><tab><tab><tab> g = []<nl><nl>print list(groupings(my_numpy_array))","out":"Identify groups of consecutive values within NumPy array"}
{"in":"transformed = sig(x)","out":"applying a function to each element in vector in numpy"}
{"in":"import collections<nl>files_by_str = collections.defaultdict(list)<nl><nl>thestrings = []<nl>with open('Strings.txt') as f:<nl>  for line in f:<nl><tab>text = line.split('=', 1)[1]<nl><tab>text = text.strip().replace('\"', '')<nl><tab>thestrings.append(text)<nl><nl>import os<nl><nl>for root, dirs, files in os.walk('\/top\/dir\/of\/interest'):<nl>  for name in files:<nl><tab>path = os.path.join(root, name)<nl><tab>with open(path) as f:<nl><tab>  data = f.read()<nl><tab>  for text in thestrings:<nl><tab><tab>if text in data:<nl><tab><tab>  files_by_str[text].append(path)<nl><tab><tab>  break","out":"Python Script to find instances of a set of strings in a set of files"}
{"in":"my_functions = []<nl><nl>def put_in_list(fn):<nl><tab>my_functions.append(fn)<nl><tab>return fn<nl><nl>@put_in_list<nl>def function1():<nl><tab>pass<nl><nl>@put_in_list<nl>def function2():<nl><tab>pass","out":"Pythonic, elegant way of dynamically defining a list of statically defined functions?"}
{"in":"import logging<nl><nl>logging.debug('Debug Message')<nl><nl>if some_error:<nl>   logging.error('Error Message')","out":"How do I use Logging in the Django Debug Toolbar?"}
{"in":"import multiprocessing<nl>import os<nl>import time<nl><nl>import cherrypy<nl><nl>def run_in_sub_proc(size):<nl><tab>for i in range(size):<nl><tab><tab>print os.getpid(), i<nl><tab><tab>time.sleep(1)<nl><nl>pool = multiprocessing.Pool(2)<nl><nl>class Root(object):<nl><tab>@cherrypy.expose<nl><tab>def index(self):<nl><tab><tab>pool.map_async(run_in_sub_proc, (3, 5))<nl><nl>if __name__ == '__main__':<nl><tab>cherrypy.engine.subscribe('stop', pool.join)<nl><tab>cherrypy.quickstart(Root())","out":"How to use multiprocessing together with multithreading?"}
{"in":"numpy.random.normal()","out":"Generating values from Normal distribution using Box-Muller method"}
{"in":"host = request.host<nl>host = host.split(':', 1)[0] # Strip off optional ':##' port number<nl>username = None<nl>if host.endswith('.yourdomain.com'):<nl><tab>username = host.split('.', 1)[0]","out":"how to map url with usernames prefixed?"}
{"in":"if ext == 'gz':<nl>   command = 'gunzip -c {} -k | pg_restore -U {} -h {} -p {}' \\<nl><tab><tab><tab> '-d {}'.format(file, user, server, port, new_dbname)<nl>elif ext == 'bz2':<nl>   command = 'bunzip2 -c {} -k | pg_restore -U {} -h {} -p {}' \\<nl><tab><tab><tab> '-d {}'.format(file, user, server, port, new_dbname)<nl>elif ext == 'zip':<nl>   command = 'unzip -p {} | pg_restore -U {} -h {} -p {} ' \\<nl><tab><tab><tab> '-d {}'.format(file, user, server, port, new_dbname)<nl>else:<nl>   command = 'pg_restore -U {} -h {} -p {} -d {} {}'.format(user,<nl><tab><tab><tab><tab>server, port, new_dbname, file)","out":"Is there a way to unzip automatically with pg_restore?"}
{"in":"#!\/usr\/bin\/python<nl>import rpy2.robjects as robjects<nl><nl>l = [1,2,3,4,5]<nl><nl># get ks.test via execute string as R statement<nl>test = robjects.r('ks.test')<nl># get a built-in functions variables directly<nl>pexp = robjects.r.pexp<nl><nl>l_vector = robjects.IntVector(l)<nl>result = test(l_vector, pexp)<nl>print result[result.names.index('p.value')]","out":"How to pass a list to R in rpy2 and get result back"}
{"in":"'''<nl>This is a multiline<nl>comment.<nl>'''","out":"Multiline comments in Python"}
{"in":"key1, key2 = random.sample(list(d), 2)<nl>d[key1], d[key2] = d[key2], d[key1]","out":"Swap two random values in dictionary"}
{"in":"set(thingList1) & set(thingList2) & set(thingList3)","out":"intersection of three sets in python?"}
{"in":"import copy<nl>if 'career_business' in add_sal and 'career_business' in add_perc and \\<nl><tab>  add_sal['career_business'] == add_perc['career_business']:<nl>   add_all = copy.deepcopy( add_sal )<nl>   add_all['percent'] = add_perc['percent']","out":"python: merging dictionaries by identical value of key"}
{"in":"sorted(itertools.chain(list1.itervalues(), list2.itervalues(),<nl><tab>list3.itervalues()), key=operator.itemgetter('timestamp'))","out":"In python, what's the most efficient way to combine 3 dicts and to sort by one of the dict's keys?"}
{"in":"import os<nl>import stat<nl><nl>executable = stat.S_IEXEC | stat.S_IXGRP | stat.S_IXOTH<nl>for filename in os.listdir('.'):<nl><tab>if os.path.isfile(filename):<nl><tab><tab>st = os.stat(filename)<nl><tab><tab>mode = st.st_mode<nl><tab><tab>if mode & executable:<nl><tab><tab><tab>print(filename,oct(mode))","out":"How do I search for an executable file using python in linux?"}
{"in":"from ctypes import * <nl><nl>your_dll = cdll.LoadLibrary(\"your_dll.dll\") <nl><nl>PFloat = POINTER(c_float) <nl>PInt   = POINTER(c_int) <nl><nl>p_data<tab>= PFloat() <nl>p_classes = PInt() <nl>buff<tab>  = create_string_buffer(1024) <nl>n1<tab><tab>= c_int( 0 ) <nl>n2<tab><tab>= c_int( 0 ) <nl><nl>ret = your_dll.read_data( buff, byref(n1), byref(n2), byref(p_data), byref(p_classes) ) <nl><nl>print('Data:<tab>', p_data.contents) <nl>print('Classes: ', p_classes.contents)","out":"How to use float ** in Python with Swig?"}
{"in":"a = 10e-50","out":"Python, code a number with exponential decimal notation"}
{"in":"from collections import defaultdict<nl>d = defaultdict(dict)<nl>for line in open('input_file','r'):<nl><tab>line = line.strip()<nl><tab>a,b = line.split(',')<nl><tab>node = a.split('=')[1] <nl><tab>key, value = b.split('=')<nl><tab>d[node][key] = value","out":"How can I create a dictionary in python from a txt file?"}
{"in":"b = a[:20]","out":"How to make a smaller list of tuples from a large list of tuples?"}
{"in":"rules = app.url_map._rules<nl>for rule in rules:<nl><tab>print rule.endpoint, rule, rule.defaults","out":"Flask: Get URLs for each View class in module"}
{"in":"headers = {<nl><tab>\"X-Auth-Token\": \"dddddsssb04411b4c6a2\",<nl><tab>\"Access-Control-Allow-Origin\": \"*\",<nl>}<nl>r = requests.post(\"https:\/\/verylong\/url\", headers=headers)","out":"Python Request Module To Add Header to CDN URL Using Token"}
{"in":"import hashlib<nl>[(fname, hashlib.md5(open(fname, 'rb').read()).digest()) for fname in fnamelst]","out":"How to create a checksum of a file in python"}
{"in":"QWidget#Form {background-image: url(test.jpg);}","out":"PyQt4 Image as Background"}
{"in":"for r in range(rows):<nl><tab>A[r,B[r,:]!=0] = np.dot(B[r , B[r,:]!=0], C[: , B[r,:]!=0].T)","out":"Accessing non-zero elements in specific row of matrix in python"}
{"in":"re.compile('(?<=}})\\s+(?={{)')","out":"Parsing TCL lists in Python"}
{"in":"import urllib2<nl>from bs4 import BeautifulSoup<nl>url = urllib2.urlopen(\"http:\/\/www.example.com\/\").read()<nl>soup = BeautifulSoup(url)<nl>for line in soup.find_all('a'):<nl><tab><tab>print(line.get('href'))","out":"Parsing a website with Python"}
{"in":"def find_next(cur_dt):<nl><tab>import datetime as dt<nl><tab>t = [dt.time(5,30), dt.time(8,30), dt.time(13,0), dt.time(17,30)]<nl><nl><tab>cur_t = cur_dt.time()<nl><tab>cur_d = cur_dt.date()<nl><nl><tab>for i in range(len(t)):<nl><tab><tab>if t[i] > cur_t:<nl><tab><tab><tab>rt = [t[(j+i)%len(t)] for j in range(len(t))]<nl><tab><tab><tab>rd = [cur_d] * (len(t)-i) + [cur_d + dt.timedelta(days=1)]*i<nl><tab><tab><tab>return [dt.datetime.combine(rd[j],rt[j]) for j in range(len(rt))]<nl><nl><tab># everything happens tomorrow<tab><tab><nl><tab>return [dt.datetime.combine(cur_d + dt.timedelta(days=1), i) for i in t]","out":"How to generate a sequence of future datetimes in Python and determine nearest datetime from set"}
{"in":"import numpy<nl>masses = numpy.array([[0,  0,  0,  0],<nl>[0,  1,  0,  0],<nl>[0,  2,  0,  0],<nl>[1,  0,  0,  0],<nl>[1,  1,  0,  1],<nl>[1,  2,  0,  1],<nl>[2,  0,  0,  0],<nl>[2,  1,  0,  0],<nl>[2,  2,  0,  0]])<nl><nl>nonZeroMasses = masses[numpy.nonzero(masses[:,3])] # Not really necessary, can just use masses because 0 mass used as weight will work just fine.<nl><nl>CM = numpy.average(nonZeroMasses[:,:3], axis=0, weights=nonZeroMasses[:,3])","out":"python: calculate center of mass"}
{"in":"from multiprocessing import Pool, cpu_count<nl><nl># ...<nl>all_files = [\"file%d\" % i for i in range(5)]<nl><nl><nl>def process_file(file_name):<nl><tab># process file<nl><tab>return \"finished file %s\" % file_name<nl><nl>pool = Pool(cpu_count())<nl><nl># this is a blocking call - when it's done, all files have been processed<nl>results = pool.map(process_file, all_files)<nl><nl># no more tasks can go in the pool<nl>pool.close()<nl><nl># wait for all workers to complete their task (though we used a blocking call...)<nl>pool.join()<nl><nl><nl># ['finished file file0', 'finished file file1',  ... , 'finished file file4']<nl>print results","out":"python, subprocess: launch new process when one (in a group) has terminated"}
{"in":"driver.find_element_by_id()","out":"Use Selenium to enter search text into Google"}
{"in":"waitTime=0.5<nl><nl>def is_ava():<nl><tab>global waitTime  # <--------<nl><tab>waitTime = waitTime + 0.1<nl><tab>print waitTime<nl><nl>if __name__ == '__main__':<nl><tab>is_ava()","out":"UnboundLocalError: local variable referenced before assignment"}
{"in":"google-api-python-client","out":"Google Data Transfer API in Python"}
{"in":"from django.contrib.admin.models import LogEntry<nl><nl>class LogEntryAdmin(admin.ModelAdmin):<nl><tab>readonly_fields = ('content_type', 'user', 'action_time')<nl><nl>admin.site.register(LogEntry, LogEntryAdmin)","out":"Make django admin logEntry read only?"}
{"in":"tuple(tuple(tuple(l2) for l2 in l1) for l1 in inner_loop)","out":"Multidimensional array to multidimensional tuple"}
{"in":"from scrapy.contrib.spiders import CrawlSpider, Rule<nl>from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor<nl>from scrapy.selector import Selector<nl>from scrapy.http import Request<nl><nl>class people(CrawlSpider):<nl>  name=\"people\"<nl>  allowed_domains=[\"http:\/\/blog.sina.com.cn\/\"]<nl>  start_urls=[\"http:\/\/blog.sina.com.cn\/s\/blog_53d7b5ce0100e7y0.html\"]<nl>  rules=(Rule(SgmlLinkExtractor(allow=(\"http:\/\/blog.sina.com.cn\/\",)),  callback='parse_item', follow=True),<nl>#restrict the crawling in the articalContent section only<nl>  Rule(SgmlLinkExtractor(restrict_xpaths=('\/\/div[contains(@class, \"articalContent\")]'))),<nl>  )<nl><nl>  def parse(self,response):<nl><tab>  links = Selector(text=response.body).xpath('\/\/div[contains(@class, \"articalContent\")]\/\/a\/\/text()')<nl><tab>  for link in links:<nl><tab><tab>  print link.extract()","out":"1-level down crawling using scrapy"}
{"in":"apples = [red, green]<nl>for type in apples:<nl><tab>for item in type:<nl><tab><tab>print item","out":"Sending a list of arrays to a For loop"}
{"in":"d = {frozenset((1,2)): \"foo\"}<nl>print d.get(frozenset((2,1)))","out":"Look up a tuple in a python dictionary matching (x,y) or (y,x)"}
{"in":"import zipfile<nl>from lxml import etree<nl><nl>z = zipfile.ZipFile('mydocument.ods')<nl><nl>data = z.read('content.xml')<nl>data = etree.XML(data)<nl><nl>etree.dump(data)","out":"Python: Import Data from Open Office calc with lxml"}
{"in":"import subprocess<nl><nl>ps = subprocess.Popen('ps -ef', shell=True, stdout=subprocess.PIPE)<nl>print ps.stdout.readlines()","out":"How do I show a list of processes for the current user using python?"}
