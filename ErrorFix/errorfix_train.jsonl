{"in":"newdata=[]<nl>for x in data:<nl><tab>newdata.append[]<nl><nl><tab>print(newdata)<nl><tab>","out":"newdata=[]<nl>for x in data:<nl><tab>newdata.append(x)<nl><nl><tab>print(newdata)<nl><tab>"}
{"in":"plt.figure(figsize(8,8))<nl>plt.scatter(df['築年'],df['住宅価格'],alpha=0.5,color='purple')<nl>plt.xlabel('築年')<nl>plt.ylabel('住宅価格')<nl>plt.show","out":"plt.figure(figsize=(8,8))<nl>plt.scatter(df['築年'],df['住宅価格'],alpha=0.5,color='purple')<nl>plt.xlabel('築年')<nl>plt.ylabel('住宅価格')<nl>plt.show"}
{"in":"class Ratio(object):<nl><tab><tab>a: int<nl><tab><tab>b: int<nl><tab><tab>def __init__(self, a, b=1):<nl><tab><tab><tab><tab>self.a = a \/\/ math.gcd(a,b)<nl><tab><tab><tab><tab>self.b = b \/\/ math.gcd(a,b)<nl><tab><tab>def __repr__(self): <nl><tab><tab><tab><tab>if self.b == 1:<nl><tab><tab><tab><tab><tab><tab>return str(self.a)<nl><tab><tab><tab><tab>return f'{self.a}\/{self.b}'<tab><nl><tab><tab>def add(self,x):<nl><tab><tab><tab><tab>a = self.a<nl><tab><tab><tab><tab>b = self.b<nl><tab><tab><tab><tab>c = x.a<nl><tab><tab><tab><tab>d = x.b<nl><tab><tab><tab><tab>return Ratio(a*b+b*c, b*d)<nl><nl>Ratio(1,2).add(Ratio(1,3))","out":"class Ratio(object):<nl><tab><tab>a: int<nl><tab><tab>b: int<nl><tab><tab>def _init__(self, a, b=1):<nl><tab><tab><tab><tab>self.a = a \/\/ math.gcd(a,b)<nl><tab><tab><tab><tab>self.b = b \/\/ math.gcd(a,b)<nl><tab><tab>def _repr__(self): <nl><tab><tab><tab><tab>if self.b == 1:<nl><tab><tab><tab><tab><tab><tab>return str(self.a)<nl><tab><tab><tab><tab>return f'{self.a}\/{self.b}'<tab><nl><tab><tab>def add(self,x):<nl><tab><tab><tab><tab>a = self.a<nl><tab><tab><tab><tab>b = self.b<nl><tab><tab><tab><tab>c = x.a<nl><tab><tab><tab><tab>d = x.b<nl><tab><tab><tab><tab>return Ratio(a*b+b*c, b*d)<nl><nl>Ratio(1,2).add(Ratio(1,3))"}
{"in":"N = int(input())<nl>A = [list(map(int, input(). split())) for i in range(N)]<nl>X = []<nl>for i in range(N):<nl><tab>for j in range(N):<nl><tab><tab>if i == j:<nl><tab><tab><tab>X. append(A[i][0] + A[j][1])<nl><tab><tab>else:<nl><tab><tab><tab>if A[i][0] >= A[j][1]:<nl><tab><tab><tab><tab>X. apped(A[i][0])<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>X. append(A[j][1])<nl>X = sorted(X)<nl>print(X[0])","out":"N = int(input())<nl>A = [list(map(int, input(). split())) for i in range(N)]<nl>X = []<nl>for i in range(N):<nl><tab>for j in range(N):<nl><tab><tab>if i == j:<nl><tab><tab><tab>X. append(A[i][0] + A[j][1])<nl><tab><tab>else:<nl><tab><tab><tab>if A[i][0] >= A[j][1]:<nl><tab><tab><tab><tab>X. append(A[i][0])<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>X. append(A[j][1])<nl>X = sorted(X)<nl>print(X[0])"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl><nl>50 <= B <= A ＜＝300<nl><nl>C = A-B\/3 +B","out":"#kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl><nl>50 <= B <= A <=300<nl><nl>C = A-B\/3 +B"}
{"in":"w＝ 42.0<nl>h= 1.58<nl>BMI = w \/ (h * h)<nl><nl>print(BMI)","out":"w= 42.0<nl>h= 1.58<nl>BMI = w \/ (h * h)<nl><nl>print(BMI)"}
{"in":"if BMI>25.00<nl><tab>print(\"太りすぎ\")<nl>else:<nl><tab>print(\"太りすぎでない\")","out":"if BMI>25.00:<nl><tab>print(\"太りすぎ\")<nl>else:<nl><tab>print(\"太りすぎでない\")"}
{"in":"df=pd.read_csv('\/content\/sample_data\/california_housing_train.csv'<nl>df.head(5)","out":"df=pd.read_csv('\/content\/sample_data\/california_housing_train.csv')<nl>df.head(5)"}
{"in":"plt.hist(df['性別'],df[g3])<nl>plt.show()","out":"plt.hist(df['性別'],df[\"G3\"])<nl>plt.show()"}
{"in":"if BMI < 18.50 :<nl><tab>print(\"低体重\")<nl>else BMI >= 18.50 :<nl><tab><tab>print(\"低体重でない\")","out":"if BMI < 18.50:<nl><tab>print(\"低体重\")<nl>else BMI >= 18.50:<nl><tab>print(\"低体重でない\")"}
{"in":"d = 2010218<nl>while d>10:<nl><tab>D=list(map(int,str(d)))<nl><tab>print(D)<nl><tab>d= sum(D)<nl><tab>print(d)<nl><tab>if d == 11 or d == 22 or d == 33 or d == 44:break<nl><tab>print('ソールナンバー：'d)","out":"d = 2010218<nl>while d>10:<nl><tab>D=list(map(int,str(d)))<nl><tab>print(D)<nl><tab>d= sum(D)<nl><tab>print(d)<nl><tab>if d == 11 or d == 22 or d == 33 or d == 44:break<nl><tab>print('ソールナンバー:', d)"}
{"in":"X = df[['緑地']] #一つ選ぶ<nl>y = df['住宅価格']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(6, 6))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)<nl>r2 = r2_scpre(y, y_pred)<nl>print('決定係数(R2)：', r2)","out":"X = df[['緑地']] #一つ選ぶ<nl>y = df['住宅価格']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(6, 6))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)"}
{"in":"X_train_numa_p = pd.read_csv('https:\/\/drive.google.com\/file\/d\/1yWj9QG29CmUOufrvE2NITNBxwRlRtD7g\/view?usp=sharing'\/train_Numa_print.csv)<nl># X_train_numa_a = pd.read_csv(\"\/Users\/shion\/Desktop\/OJT\/numa-chan\/\")<nl># X_test_numa_p = pd.read_csv(\"\/Users\/shion\/Desktop\/OJT\/numa-chan\/\")<nl># X_test_numa_a = pd.read_csv(\"\/Users\/shion\/Desktop\/OJT\/numa-chan\/\")","out":"X_train_numa_p = pd.read_csv('https:\/\/drive.google.com\/file\/d\/1yWj9QG29CmUOufrvE2NITNBxwRlRtD7g\/view?usp=sharing')<nl># X_train_numa_a = pd.read_csv(\"\/Users\/shion\/Desktop\/OJT\/numa-chan\/\")<nl># X_test_numa_p = pd.read_csv(\"\/Users\/shion\/Desktop\/OJT\/numa-chan\/\")<nl># X_test_numa_a = pd.read_csv(\"\/Users\/shion\/Desktop\/OJT\/numa-chan\/\")"}
{"in":"N = int(input())<nl>S = input()<nl>ss = [] #からのリストを追加<nl>for c in S:<nl><tab>a = ord(c) + N<nl><tab>if a >= ord('Z'):<nl><tab><tab>a = a - ord('Z') + ord('A') - 1<nl><tab>ss.apend(chr(a)) #リストに追加<nl><tab>print(''.join(ss)) #リストを文字列に","out":"N = int(input())<nl>S = input()<nl>ss = [] #からのリストを追加<nl>for c in S:<nl><tab>a = ord(c) + N<nl><tab>if a >= ord('Z'):<nl><tab><tab>a = a - ord('Z') + ord('A') - 1<nl><tab>ss.append(chr(a)) #リストに追加<nl><tab>print(''.join(ss)) #リストを文字列に"}
{"in":"w = int(input(\"体重は？(kg)\")) <nl>BMI = 22<nl>h = w \/ BMI<nl>import math<nl>\"平均身長\", math.sqrt(h) *100 cm)","out":"w = int(input(\"体重は?(kg)\")) <nl>BMI = 22<nl>h = w \/ BMI<nl>import math<nl>\"平均身長\", math.sqrt(h) *100 cm)"}
{"in":"d = 2010218<nl>while d>10:<nl><tab>D=list(map(int,str(d)))<nl><tab>print(D)<nl><tab>d= sum(D)<nl><tab>print(d)<nl><tab>if d == 11 or d == 22 or d == 33 or d == 44:<nl><tab><tab>break<nl><tab>print('ソールナンバー：'d)","out":"d = 2010218<nl>while d>10:<nl><tab>D=list(map(int,str(d)))<nl><tab>print(D)<nl><tab>d= sum(D)<nl><tab>print(d)<nl><tab>if d == 11 or d == 22 or d == 33 or d == 44:<nl><tab><tab>break<nl><tab>print('ソールナンバー:', d)"}
{"in":"plt.figure(figsize=(8,8)) #図の大きさ<nl>plt.scatter(df['犯罪率'],df['低所得率'],alpha=0.5,color='green')plt.xlim(0,0.1)<nl>plt.xlabel('犯罪率')<nl>plt.ylabel('低所得率')<nl>plt.show()","out":"plt.figure(figsize=(8,8)) #図の大きさ<nl>plt.scatter(df['犯罪率'],df['低所得率'],alpha=0.5,color='green')<nl>plt.xlim(0,0.1)<nl>plt.xlabel('犯罪率')<nl>plt.ylabel('低所得率')<nl>plt.show()"}
{"in":"for column in df.columns[:-1]:<nl><tab>X = df[columns]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(6,6))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)","out":"for column in df.columns[:-1]:<nl><tab>X = df[[column]]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(6,6))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)"}
{"in":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df[df['soldout','kcal']]<tab># 価格以外を全て説明変数に<nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()","out":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df[['soldout','kcal']]<tab># 価格以外を全て説明変数に<nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()"}
{"in":"for column in df.columns[:-1]:<nl><tab>for column in df.columns[:-1]:<nl><tab><tab>X = df[[column1], [column]]<nl><tab><tab>y = df['住宅価格']<nl><tab><tab>model = LinearRegression()<nl><tab><tab>model.fit(X, y)<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>r2 = r2_score(y, y_pred) <nl><tab><tab>print(f'{column} 決定係数(R2):', r2)<nl>","out":"for column1 in df.columns[:-1]:<nl><tab>for column in df.columns[:-1]:<nl><tab><tab>X = df[[column1, column]]<nl><tab><tab>y = df['住宅価格']<nl><tab><tab>model = LinearRegression()<nl><tab><tab>model.fit(X, y)<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>r2 = r2_score(y, y_pred) <nl><tab><tab>print(f'{column} 決定係数(R2):', r2)<nl>"}
{"in":"for column in df.columns[:-1]:<nl><tab>X = df[[colomn]]<nl><tab>Y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fix(X,y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 =r2_score(y,y_pred)<nl><tab>print(f'{column}決定係数(R2):',r2)","out":"for column in df.columns[:-1]:<nl><tab>X = df[[column]]<nl><tab>Y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fix(X,y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 =r2_score(y,y_pred)<nl><tab>print(f'{column}決定係数(R2):',r2)"}
{"in":"df = pd.read_csv(student-mat.csv)","out":"df = pd.read_csv(\"student-mat.csv\")"}
{"in":"if BMI < 18.50 :<nl><tab>print(\"低体重\")<nl><tab>else BMI >= 18.50 :<nl><tab><tab>print(\"低体重でない\")","out":"if BMI < 18.50:<nl><tab>print(\"低体重\")<nl>elif BMI >= 18.50 :<nl><tab>print(\"低体重でない\")"}
{"in":"<nl>x = floar(input())<nl><nl>from decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN<nl>print(Decimal(str(x)).quantize(Decimal('0'), rounding=ROUND_HALF_UP))<nl>","out":"<nl>x = float(input())<nl><nl>from decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN<nl>print(Decimal(str(x)).quantize(Decimal('0'), rounding=ROUND_HALF_UP))<nl>"}
{"in":"S = []<nl>for _ in range(len(sample_list)):<nl><tab>S.append([])<nl>str_list, num_list = data_sep(df_keys['keys'][3])<nl>for j in range(len(keys_list)) : <nl><tab>sl = keys_list[j]<nl><tab>for i in range(len(str_list)):<nl><tab><tab>s = str_list[i]<nl><tab><tab>num = num_list[i]<nl><tab><tab>if sl == s:<nl><tab><tab><tab>S[j].append(num)<nl><nl>print(S)<nl>mean_lists = [mean_list(S[k]) for k in range(len(keys_list))]<nl>print(mean_lists)<nl><nl>","out":"S = []<nl>for<tab>in range(len(sample_list)):<nl><tab>S.append([])<nl>str_list, num_list = data_sep(df_keys['keys'][3])<nl>for j in range(len(keys_list)) : <nl><tab>sl = keys_list[j]<nl><tab>for i in range(len(str_list)):<nl><tab><tab>s = str_list[i]<nl><tab><tab>num = num_list[i]<nl><tab><tab>if sl == s:<nl><tab><tab><tab>S[j].append(num)<nl><nl>print(S)<nl>mean_lists = [mean_list(S[k]) for k in range(len(keys_list))]<nl>print(mean_lists)<nl><nl>"}
{"in":"input A<nl>if A < 100:<nl><tab><tab>print('投入金額が不足しています')<nl><nl>elif A == 100:<nl><tab><tab>print ('0')<nl><nl>X = A-100<nl>print(X)","out":"A=int(input())<nl>if A < 100:<nl><tab><tab>print('投入金額が不足しています')<nl><nl>elif A == 100:<nl><tab><tab>print ('0')<nl><nl>X = A-100<nl>print(X)"}
{"in":"def print_sim(index):<nl><tab><tab>vec = bags.toarray()<nl><tab><tab>similarity = cosine_similarity(vec[index:index+1], vec)[0]<nl><tab><tab>top10 = np.argsort(similarity)[::-1][:10]<nl><tab><tab>for i in top10:<nl><tab><tab><tab><tab>print(similarity[i], df['コメント'][i])<nl>print_sim(1)<nl>","out":"def print_sim(index):<nl><tab><tab>vec = bags.toarray()<nl><tab><tab>similarity = cosine_similarity(vec[index:index+1], vec)[0]<nl><tab><tab>top10 = np.argsort(similarity)[::-1][:10]<nl><tab><tab>for i in top10:<nl><tab><tab><tab><tab>print(similarity[i], df['コメント忘れ'][i])<nl>print_sim(1)<nl>"}
{"in":"import datetime<nl><nl>class PersonD(object):<nl><tab><tab>name:str<nl><tab><tab>year:int<nl><tab><tab>month:int<nl><tab><tab>day:int<nl><tab><tab>def __init__(self,name,year,month,day):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab><tab><tab>self.year = year <nl><tab><tab><tab><tab>self.month = month<nl><tab><tab><tab><tab>self.day = day <nl><tab><tab>def age(self):<nl><tab><tab><tab><tab>today = datetime.date.today()<nl><tab><tab><tab><tab>birthday = datetime.date(year, month, day)<nl><tab><tab><tab><tab>return (int(today.strftime(\"%Y%m%d\")) - int(birthday.strftime(\"%Y%m%d\"))) \/\/ 10000<nl><tab><tab>def stone(self):<nl><tab><tab><tab><tab>return #誕生石を返す<nl><tab><tab>def diff(self,p2):<nl><tab><tab><tab><tab>today = datetime.date.today()<nl><tab><tab><tab><tab>p_birthday = datetime.date(self.year, self.month, self.day)<nl><tab><tab><tab><tab>p_age = (int(today.strftime(\"%Y%m%d\")) - int(birthday.strftime(\"%Y%m%d\"))) \/\/ 10000<nl><tab><tab><tab><tab>p2_birthday = datetime.date(p2.year, p2.month, p2.day)<nl><tab><tab><tab><tab>p2_age = (int(today.strftime(\"%Y%m%d\")) - int(birthday.strftime(\"%Y%m%d\"))) \/\/ 10000<nl><tab><tab><tab><tab>return abs(p_age - p2_age)<nl><tab><tab>def is_same_month(self,p2):<nl><tab><tab><tab><tab>if self.month = p2.month:<nl><tab><tab><tab><tab><tab>return \"True\"<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab>return \"False\"<nl><nl><tab><tab>def soul_number():<nl><tab><tab><tab><tab>str = str(year) + str(month) + str(day)<nl><tab><tab><tab><tab>yourbirthday = list(str)<nl><tab><tab><tab><tab>sum = 0<nl><tab><tab><tab><tab>for i, day in enumerate(yourbirthday):<nl><tab><tab><tab><tab><tab>sum = sum + int(day)<nl><tab><tab><tab><tab>if sum == 11 or 22 or 33 or 44:<nl><tab><tab><tab><tab><tab>return sum<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab>sum = list(sum)<nl><tab><tab><tab><tab><tab>sum2 = 0<nl><tab><tab><tab><tab><tab>for i, number in enumerate(sum):<nl><tab><tab><tab><tab><tab><tab>sum2 = sum2 + int(number)<nl><tab><tab><tab><tab><tab>if sum2 <= 10:<nl><tab><tab><tab><tab><tab><tab>return sum2<nl><tab><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab><tab>sum2 = list(sum2)<nl><tab><tab><tab><tab><tab><tab>sum3 = 0<nl><tab><tab><tab><tab><tab><tab>for i, number2 in enumerate(sum2):<nl><tab><tab><tab><tab><tab><tab><tab>sum3 = sum3 + int(number2)<nl><tab><tab><tab><tab><tab><tab>return sum3<nl><tab><tab>def __str__(self):<nl><tab><tab><tab><tab>return str(self.name)","out":"import datetime<nl><nl>class PersonD(object):<nl><tab><tab>name:str<nl><tab><tab>year:int<nl><tab><tab>month:int<nl><tab><tab>day:int<nl><tab><tab>def __init__(self,name,year,month,day):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab><tab><tab>self.year = year <nl><tab><tab><tab><tab>self.month = month<nl><tab><tab><tab><tab>self.day = day <nl><tab><tab>def age(self):<nl><tab><tab><tab><tab>today = datetime.date.today()<nl><tab><tab><tab><tab>birthday = datetime.date(year, month, day)<nl><tab><tab><tab><tab>return (int(today.strftime(\"%Y%m%d\")) - int(birthday.strftime(\"%Y%m%d\"))) \/\/ 10000<nl><tab><tab>def stone(self):<nl><tab><tab><tab><tab>return #誕生石を返す<nl><tab><tab>def diff(self,p2):<nl><tab><tab><tab><tab>today = datetime.date.today()<nl><tab><tab><tab><tab>p_birthday = datetime.date(self.year, self.month, self.day)<nl><tab><tab><tab><tab>p_age = (int(today.strftime(\"%Y%m%d\")) - int(birthday.strftime(\"%Y%m%d\"))) \/\/ 10000<nl><tab><tab><tab><tab>p2_birthday = datetime.date(p2.year, p2.month, p2.day)<nl><tab><tab><tab><tab>p2_age = (int(today.strftime(\"%Y%m%d\")) - int(birthday.strftime(\"%Y%m%d\"))) \/\/ 10000<nl><tab><tab><tab><tab>return abs(p_age - p2_age)<nl><tab><tab>def is_same_month(self,p2):<nl><tab><tab><tab><tab>if self.month == p2.month:<nl><tab><tab><tab><tab><tab>return \"True\"<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab>return \"False\"<nl><nl><tab><tab>def soul_number():<nl><tab><tab><tab><tab>str = str(year) + str(month) + str(day)<nl><tab><tab><tab><tab>yourbirthday = list(str)<nl><tab><tab><tab><tab>sum = 0<nl><tab><tab><tab><tab>for i, day in enumerate(yourbirthday):<nl><tab><tab><tab><tab><tab>sum = sum + int(day)<nl><tab><tab><tab><tab>if sum == 11 or 22 or 33 or 44:<nl><tab><tab><tab><tab><tab>return sum<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab>sum = list(sum)<nl><tab><tab><tab><tab><tab>sum2 = 0<nl><tab><tab><tab><tab><tab>for i, number in enumerate(sum):<nl><tab><tab><tab><tab><tab><tab>sum2 = sum2 + int(number)<nl><tab><tab><tab><tab><tab>if sum2 <= 10:<nl><tab><tab><tab><tab><tab><tab>return sum2<nl><tab><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab><tab>sum2 = list(sum2)<nl><tab><tab><tab><tab><tab><tab>sum3 = 0<nl><tab><tab><tab><tab><tab><tab>for i, number2 in enumerate(sum2):<nl><tab><tab><tab><tab><tab><tab><tab>sum3 = sum3 + int(number2)<nl><tab><tab><tab><tab><tab><tab>return sum3<nl><tab><tab>def __str__(self):<nl><tab><tab><tab><tab>return str(self.name)"}
{"in":"N = int(input())<nl>S = input()<nl>ss = [] #空のリストを作る<nl>for c in S:<nl><tab>a = ord(c) + N<nl><tab>if a >= ord('Z'):<nl><tab><tab>a = a - ord('Z') + ord('A') - 1<nl><tab>ss.apend(chr(a)) #リストに追加<nl><tab>print(''.join(ss)) #リストを文字列に","out":"N = int(input())<nl>S = input()<nl>ss = [] #空のリストを作る<nl>for c in S:<nl><tab>a = ord(c) + N<nl><tab>if a >= ord('Z'):<nl><tab><tab>a = a - ord('Z') + ord('A') - 1<nl><tab>ss.append(chr(a)) #リストに追加<nl><tab>print(''.join(ss)) #リストを文字列に"}
{"in":"df.read_csv('pollen.csv')","out":"df = pd.read_csv('pollen.csv')"}
{"in":"w=22*h**2<nl>print(w)<nl>print（f'w: {w:. 2f}')","out":"w=22*h**2<nl>print(w)<nl>print(f'w: {w:. 2f}')"}
{"in":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl>df=de.sample(150)<nl>X = df[['week'],['weather'],['kcal']] <nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()<nl>","out":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl>df=df.sample(150)<nl>X = df[['week'],['weather'],['kcal']] <nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()<nl>"}
{"in":"l=[]<nl>K=[]<nl><nl>N.Q=map(int,input().split())<nl>for i in range(N):<nl><tab>L=list(map(int,input().split()))<nl><tab>l.append(L)<nl>for j in range(Q):<nl><tab>S,T=map(int,input().split())<nl><tab>K.apprnd(l[S-1][T])<nl>for a in range(Q):<nl><tab>print(K[a])","out":"l=[]<nl>K=[]<nl><nl>N,Q=map(int,input().split())<nl>for i in range(N):<nl><tab>L=list(map(int,input().split()))<nl><tab>l.append(L)<nl>for j in range(Q):<nl><tab>S,T=map(int,input().split())<nl><tab>K.apprnd(l[S-1][T])<nl>for a in range(Q):<nl><tab>print(K[a])"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc186\/tasks\/abc186_d<nl><nl>N=int(input()<nl>A=list(map(int,input().split()))<nl>A.sort(reverse=True)<nl><nl>ans=0<nl>X=sum(A)<nl><nl>for i in range(N):<nl><tab>X=X-A[i]<nl><tab>ans+=A[i]*(N-i-1)-X<nl>print(ans)<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc186\/tasks\/abc186_d<nl><nl>N=int(input())<nl>A=list(map(int,input().split()))<nl>A.sort(reverse=True)<nl><nl>ans=0<nl>X=sum(A)<nl><nl>for i in range(N):<nl><tab>X=X-A[i]<nl><tab>ans+=A[i]*(N-i-1)-X<nl>print(ans)<nl>"}
{"in":"if BMI>25.00:<nl>f BMI>25.00:<nl><tab>print('太りすぎ')<nl>else:<nl><tab>print('太りすぎでない')<nl>if BMI<18.50:<nl><tab>print('やせすぎです')","out":"if BMI>25.00:<nl><tab>print('太りすぎ')<nl>else:<nl><tab>print('太りすぎでない')<nl>if BMI<18.50:<nl><tab>print('やせすぎです')"}
{"in":"X = df[['部屋巣', '低所得率']]<tab># 説明変数　二つ選ぶ<nl>y = df['住宅価格'] # 目的変数<nl>pd.concat([X,y], axis=1).head() #最初の5件のみみてみる<nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(7,7))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)<nl>r2 = r2_score(y,y_pred)<nl>print('決定係数(R2):', r2)<nl><nl>#低所得率が高いと住宅価格が下がることから、それに関連する犯罪率や通勤、工場の影響も大きいのではと予想","out":"X = df[['部屋巣', '低所得率']]<tab># 説明変数<tab>二つ選ぶ<nl>y = df['住宅価格'] # 目的変数<nl>pd.concat([X,y], axis=1).head() #最初の5件のみみてみる<nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(7,7))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)<nl>r2 = r2_score(y,y_pred)<nl>print('決定係数(R2):', r2)<nl><nl>#低所得率が高いと住宅価格が下がることから、それに関連する犯罪率や通勤、工場の影響も大きいのではと予想"}
{"in":"import linear_model.LinearRegression()<nl>model = sklearn.linear_model.LinearRegression()<nl>x_model=df['平均気温']<nl>y_model=df['スギ花粉飛散量']<nl>model.fit(x_model,y_model)","out":"import sklearn.linear_model<nl>model = sklearn.linear_model.LinearRegression()<nl>x_model=df['平均気温']<nl>y_model=df['スギ花粉飛散量']<nl>model.fit(x_model,y_model)"}
{"in":"r,p = pearsonr(df['部屋数'],df['住宅価格'])<nl>print('相関係数':,r)<nl>print('p値':,p)","out":"r,p = pearsonr(df['部屋数'],df['住宅価格'])<nl>print('相関係数:',r)<nl>print('p値:',p)"}
{"in":"#演習１　「大気汚染」<nl>dc['大気汚染']","out":"#演習1<tab>「大気汚染」<nl>dc['大気汚染']"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B,(map(int,input().splist())","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B=map(int,input().split())"}
{"in":"hanoi(n, x, y, z): # ｎ枚の円盤をｘからｙに移す。<nl><tab>hanoi(n-1, x, z,y)<nl><tab>d = x.pop()<nl><tab>y.append(d)<nl><tab>hanoi(n-1, z, y, x)","out":"def hanoi(n, x, y, z): # n枚の円盤をxからyに移す。<nl><tab>hanoi(n-1, x, z,y)<nl><tab>d = x.pop()<nl><tab>y.append(d)<nl><tab>hanoi(n-1, z, y, x)"}
{"in":"plt.figure(figsize(8,8))<tab>#図の大きさ<nl>plt.scatter(df['部屋数'],df['住宅価格'])<nl>plt.Xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()","out":"plt.figure(figsize=(8,8))<tab>#図の大きさ<nl>plt.scatter(df['部屋数'],df['住宅価格'])<nl>plt.Xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()"}
{"in":"X_test = test[['Sex', 'Age', 'Fare','SibSp','Embarked]]<nl>X_test","out":"X_test = test[['Sex', 'Age', 'Fare','SibSp','Embarked']]<nl>X_test"}
{"in":"#線形回帰(重回帰)<nl>from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl>from sklearn.ensemble import RandomForestRegressor<nl><nl>model_L = LinearRegression()<nl>model_L.fit(X, y)<nl><nl>y__train_pred_L = model_L.predict(X)<nl><nl><nl># RandomForestのパラメータ設定<nl>randomforest= RandomForestRegressor(n_estimators=100,max_depth=4,random_state=2018)<nl><nl>##予測値<nl>y_train_pred= mode_L.predict(X)<nl><nl># 残差 = 実測値 - 予測値 を求める<nl>pred_sub=y-y__train_pred_L<nl><nl># RandomForestの説明変数には全てのカラムを使う<nl>randomforest_X_train=X<nl><nl># randomforest_X_trainを説明変数、pred_sub（残差）を目的変数にし、モデル作成<nl>randomforest.fit(randomforest_X_train,pred_sub)<nl><nl><nl># 線形回帰の予測値に、RandomForestで予測した残差を足し合わせたものを、最終的な予測値とする<nl><nl>##線形回帰の予測値=y_pred<nl>##予測残差<nl>y_pred_sub= randomforest.predict(X_test)<nl><nl>##最終予測値<nl>y_last_pred=y_pred_L + y_pred_sub<nl>print(y_last_pred)","out":"#線形回帰(重回帰)<nl>from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl>from sklearn.ensemble import RandomForestRegressor<nl><nl>model_L = LinearRegression()<nl>model_L.fit(X, y)<nl><nl>y__train_pred_L = model_L.predict(X)<nl><nl><nl># RandomForestのパラメータ設定<nl>randomforest= RandomForestRegressor(n_estimators=100,max_depth=4,random_state=2018)<nl><nl>##予測値<nl>y_train_pred= mode_L.predict(X)<nl><nl># 残差 = 実測値 - 予測値 を求める<nl>pred_sub=y-y__train_pred_L<nl><nl># RandomForestの説明変数には全てのカラムを使う<nl>randomforest_X_train=X<nl><nl># randomforest_X_trainを説明変数、pred_sub(残差)を目的変数にし、モデル作成<nl>randomforest.fit(randomforest_X_train,pred_sub)<nl><nl><nl># 線形回帰の予測値に、RandomForestで予測した残差を足し合わせたものを、最終的な予測値とする<nl><nl>##線形回帰の予測値=y_pred<nl>##予測残差<nl>y_pred_sub= randomforest.predict(X_test)<nl><nl>##最終予測値<nl>y_last_pred=y_pred_L + y_pred_sub<nl>print(y_last_pred)"}
{"in":"import numpy as np<nl>df = pd.DataFrame({'PassengerId','sex': test['PassengerId'], 'Survived': y_pred})<nl>df.to_csv(\"result.csv\", index=False)","out":"import numpy as np<nl>df = pd.DataFrame({'PassengerId': test['PassengerId'], 'Survived': y_pred})<nl>df.to_csv(\"result.csv\", index=False)"}
{"in":"x = ayayayayaya<nl><nl>print(x)","out":"x = \"ayayayayaya\"<nl><nl>print(x)"}
{"in":"df4 = df4.drop(5, axis=0)<nl>df4","out":"df4 = df4.drop(5, axis=1)<nl>df4"}
{"in":"print(\"Hello\"","out":"print(\"Hello\")"}
{"in":"if BMI < 17.5:<nl><tab>print(\"低体重\")<nl><tab>else BMI >=17.5: and BMI =< 25.0:<nl><tab><tab>print(\"標準\")<nl><tab><tab>else: BMI > 25.0:<nl><tab><tab><tab>print(\"太りすぎ\")","out":"if BMI < 17.5:<nl><tab>print(\"低体重\")<nl>elif BMI >=17.5 and BMI =< 25.0:<nl><tab>print(\"標準\")<nl>else:<nl><tab>print(\"太りすぎ\")"}
{"in":"df = df.read_csv('pollen.csv')","out":"df = pd.read_csv('pollen.csv')"}
{"in":"df.describe()<nl>df.read_csv('pollen.csv')<nl>df.head()","out":"df=pd.read_csv('pollen.csv')<nl>df.describe()<nl>df.head()"}
{"in":"def update(lives):<nl><tab>N,M=lives.shape<nl><tab>newlives=np.zeros(lives.sha@e)<nl><tab>for y in range(N):<nl><tab><tab>for x in range(M):<nl><tab><tab><tab><tab>c=count(lives,x,y)<nl><tab><tab><tab><tab>newlives[y,x]=lives[y,x]<nl><tab><tab><tab><tab>if lives[y,x]==1: <nl><tab><tab><tab><tab><tab><tab>if c<=1 or c>=4:<nl><tab><tab><tab><tab><tab><tab><tab><tab>newlives[y,x]=0<nl><tab><tab><tab><tab>elif c ==3:<nl><tab><tab><tab><tab><tab>newlives[y,x]=1<nl><tab>return lives.reshape(N,M)<nl><tab><nl><nl><tab><tab><tab><tab><tab><tab><tab> <nl>　","out":"def update(lives):<nl><tab>N,M=lives.shape<nl><tab>newlives=np.zeros(lives.sha@e)<nl><tab>for y in range(N):<nl><tab><tab>for x in range(M):<nl><tab><tab><tab><tab>c=count(lives,x,y)<nl><tab><tab><tab><tab>newlives[y,x]=lives[y,x]<nl><tab><tab><tab><tab>if lives[y,x]==1: <nl><tab><tab><tab><tab><tab><tab>if c<=1 or c>=4:<nl><tab><tab><tab><tab><tab><tab><tab><tab>newlives[y,x]=0<nl><tab><tab><tab><tab>elif c ==3:<nl><tab><tab><tab><tab><tab>newlives[y,x]=1<nl><tab>return lives.reshape(N,M)<nl><tab><nl><nl><tab><tab><tab><tab><tab><tab><tab> <nl><tab>"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A, B, C = map(int, input().split())<nl>if A==B:<nl><tab>print(C)<nl>elif B==c:<nl><tab>print(A)<nl>elif C==A:<nl><tab>print(B)<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A, B, C = map(int, input().split())<nl>if A==B:<nl><tab>print(C)<nl>elif B==C:<nl><tab>print(A)<nl>elif C==A:<nl><tab>print(B)<nl>"}
{"in":"def calc_pi(N)<nl><tab><tab>pi=0.0<nl><tab><tab>for k in range(1, N, 2):<nl><tab><tab><tab> #print(k, (-1)**(k\/\/2))<nl><tab><tab><tab> pi +=((-1)**(k\/\/2)) * (1\/k)<nl><tab><tab>return pi*4","out":"def calc_pi(N):<nl><tab><tab>pi=0.0<nl><tab><tab>for k in range(1, N, 2):<nl><tab><tab><tab> #print(k, (-1)**(k\/\/2))<nl><tab><tab><tab> pi +=((-1)**(k\/\/2)) * (1\/k)<nl><tab><tab>return pi*4"}
{"in":"class Animal(object):<nl><tab>def face(self):<nl><tab><tab>return '?'<nl><tab>def sound(self):<nl><tab><tab>return 'ピー'<nl><tab>def __repr__(self):<nl><tab><tab>return self.__class__.__name__#クラス名<nl><tab>def leg(self):<nl><tab><tab>raise NotImplemented()#例外<nl><tab><tab>return 0<nl>class Bird(Animal):<nl><tab>def leg(self):<nl><tab><tab>return 2<nl>class chikin(Mammal):<nl><tab>def __repr__(self):<nl><tab><tab>return '🐔'<tab><nl><tab>def sound(self):#override<nl><tab><tab>return 'コケコッコー'<nl><nl>class Mammal(Animal):<nl><tab>def leg(self):<nl><tab><tab>return 2<nl>class Sheep(Mammal):<nl><tab>def __repr__(self):<nl><tab><tab>return '🐏'<tab><nl><tab>def sound(self):#override<nl><tab><tab>return 'メエ～'<nl><nl>class Dog(Mammal):<nl><tab>name:str<nl><tab>def __init__(self,name):<nl><tab><tab>self.name=name<nl><tab>def __repr__(self):<nl><tab><tab>return f'🐕{self.name}' <nl><tab>def face(self):<nl><tab><tab>return '🐩'<nl><tab>def sound(self):<nl><tab><tab>return 'ワン'<nl>class 🐤","out":"class Animal(object):<nl><tab>def face(self):<nl><tab><tab>return '?'<nl><tab>def sound(self):<nl><tab><tab>return 'ピー'<nl><tab>def __repr__(self):<nl><tab><tab>return self.__class__.__name__#クラス名<nl><tab>def leg(self):<nl><tab><tab>raise NotImplemented()#例外<nl><tab><tab>return 0<nl>class Bird(Animal):<nl><tab>def leg(self):<nl><tab><tab>return 2<nl>class chikin(Mammal):<nl><tab>def __repr__(self):<nl><tab><tab>return '🐔'<tab><nl><tab>def sound(self):#override<nl><tab><tab>return 'コケコッコー'<nl><nl>class Mammal(Animal):<nl><tab>def leg(self):<nl><tab><tab>return 2<nl>class Sheep(Mammal):<nl><tab>def __repr__(self):<nl><tab><tab>return '🐏'<tab><nl><tab>def sound(self):#override<nl><tab><tab>return 'メエ~'<nl><nl>class Dog(Mammal):<nl><tab>name:str<nl><tab>def __init__(self,name):<nl><tab><tab>self.name=name<nl><tab>def __repr__(self):<nl><tab><tab>return f'🐕{self.name}' <nl><tab>def face(self):<nl><tab><tab>return '🐩'<nl><tab>def sound(self):<nl><tab><tab>return 'ワン'<nl>class 🐤"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_b<nl><nl>for i in range(10):<nl><tab><tab>S=list(map(str, input().split()))<nl><tab><tab>for j in range(10):<nl><tab><tab><tab>print S[j]<nl> #<tab><tab> if S[j] = #:<nl> #<tab><tab><tab> A=i+1<nl> #<tab><tab><tab> C=j+1","out":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_b<nl><nl>for i in range(10):<nl><tab><tab>S=list(map(str, input().split()))<nl><tab><tab>for j in range(10):<nl><tab><tab><tab>print(S[j])<nl> #<tab><tab> if S[j] = #:<nl> #<tab><tab><tab> A=i+1<nl> #<tab><tab><tab> C=j+1"}
{"in":"plt.boxplot(df[\"住宅価格\"])<nl>df.[\"住宅価格\"].describe()","out":"plt.boxplot(df[\"住宅価格\"])<nl>df[\"住宅価格\"].describe()"}
{"in":"データフレーム","out":"#データフレーム"}
{"in":"for i,x in enumerate(InfiniteZero()):<nl><tab>print(i,x)<nl><tab>if i > 100<nl><tab>break","out":"for i,x in enumerate(InfiniteZero()):<nl><tab>print(i,x)<nl><tab>if i > 100:<nl><tab><tab>break"}
{"in":"w = 42<nl>h = 1.55<nl>BMI = w\/(h ** 2)<nl>print('BMI' BMI)","out":"w = 42<nl>h = 1.55<nl>BMI = w\/(h ** 2)<nl>print('BMI', BMI)"}
{"in":"bmi = PersonW() ","out":"bmi = PersonW()"}
{"in":"https:\/\/atcoder.jp\/contests\/abc229\/tasks\/abc229_b<nl>A, B = map(str, input().split())<nl>A = [int(c) for c in A[::-1]] <nl>B = [int(c) for c in B[::-1]]<nl><nl>ans = 'Easy'<nl>for a, b in zip(A, B): <nl><tab>if<tab>a + b > 10:<nl><tab><tab>ans = 'Hard'<nl><tab><tab>break<nl>print(ans)","out":"# https:\/\/atcoder.jp\/contests\/abc229\/tasks\/abc229_b<nl>A, B = map(str, input().split())<nl>A = [int(c) for c in A[::-1]] <nl>B = [int(c) for c in B[::-1]]<nl><nl>ans = 'Easy'<nl>for a, b in zip(A, B): <nl><tab>if<tab>a + b > 10:<nl><tab><tab>ans = 'Hard'<nl><tab><tab>break<nl>print(ans)"}
{"in":"df.sort_values(df[\"平均気温\"]).head()","out":"df.sort_values(\"平均気温\").head()"}
{"in":"for column in df.columns:<nl><tab><tab>plt(hist(df[column],bins=30)<nl><tab><tab>plt.xlabel(column)<nl><tab><tab>plt.ylabel('件数'<nl><tab><tab>plt.legnend([str(df[column].describe())]))<nl><tab><tab>plt.show","out":"for column in df.columns:<nl><tab><tab>plt(hist(df[column],bins=30)<nl><tab><tab>plt.xlabel(column)<nl><tab><tab>plt.ylabel('件数')<nl><tab><tab>plt.legnend([str(df[column].describe())])<nl><tab><tab>plt.show"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_b<nl><nl>N, K = map(int, input().split())<nl>h = list(map(int, input().split()))<nl>C = [0]*N<nl><nl>#飛んでみる<nl>C[K] = C[] + abs(h[i]-h[i-K])<nl><nl>C[0] = 0<nl>C[1] = abs(h[1]-h[0])<nl><nl><nl>for i in range(2, N):<nl><tab>tmp = 100000000000<nl><tab>for j in range(1, min(i, K)-1):<nl><tab><tab>C[i] = min(tmp, abs(h[i]-h[i-K]))<nl>print(C[N-1])","out":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_b<nl><nl>N, K = map(int, input().split())<nl>h = list(map(int, input().split()))<nl>C = [0]*N<nl><nl>#飛んでみる<nl>C[K] = C[K] + abs(h[i]-h[i-K])<nl><nl>C[0] = 0<nl>C[1] = abs(h[1]-h[0])<nl><nl><nl>for i in range(2, N):<nl><tab>tmp = 100000000000<nl><tab>for j in range(1, min(i, K)-1):<nl><tab><tab>C[i] = min(tmp, abs(h[i]-h[i-K]))<nl>print(C[N-1])"}
{"in":"df.(describe)","out":"df.describe()"}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl><nl>A,B=(int,input()split())<nl>C=(A-B)\/3+B<nl>print(C)<nl>","out":"# kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl><nl>A,B=(int,input().split())<nl>C=(A-B)\/3+B<nl>print(C)<nl>"}
{"in":"def show(lives):<nl><tab>N, M = lives.shape<nl><tab>for y in range(N):<nl><tab><tab>print('👾')<nl><tab><tab><tab>for x in range(M):<nl><tab><tab><tab><tab>print('👾', end='')<nl><nl>show(lives)","out":"def show(lives):<nl><tab>N, M = lives.shape<nl><tab>for y in range(N):<nl><tab><tab>print('👾')<nl><tab><tab>for x in range(M):<nl><tab><tab><tab><tab>print('👾', end='')<nl><nl>show(lives)"}
{"in":"def calc(1+10): return float(s)","out":"def calc(s): return float(s)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split())<nl><nl>C[1]=abs(h[1]-h[0]):<nl><nl>C1[i]=C[i-2]+abs(h[i]-h[i-2])<nl>C2[i]=C[i-1]+abs(h[i]-h[i-1])<nl>C[i]=min(C1,C2)<nl>print(C[N-1])<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split()))<nl><nl>C[1]=abs(h[1]-h[0]):<nl><nl>C1[i]=C[i-2]+abs(h[i]-h[i-2])<nl>C2[i]=C[i-1]+abs(h[i]-h[i-1])<nl>C[i]=min(C1,C2)<nl>print(C[N-1])<nl>"}
{"in":"d=20041214<nl><nl>while d >=10: #二桁の時は繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>＃print(d)＃print(d)<nl><tab><tab>if d ==11or d ==22 or d ==33 or d== 44:<nl><tab><tab><tab><tab>break #条件を満たしたらループを抜ける","out":"d=20041214<nl><nl>while d >=10: #二桁の時は繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>#print(d)#print(d)<nl><tab><tab>if d ==11or d ==22 or d ==33 or d== 44:<nl><tab><tab><tab><tab>break #条件を満たしたらループを抜ける"}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl><nl>A,B=(int,input()split<nl>C=(A-B)\/3+B<nl>print(C)<nl>","out":"# kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl><nl>A,B=(int,input().split())<nl>C=(A-B)\/3+B<nl>print(C)<nl>"}
{"in":"import spacy<nl>nlp = spacy.load(ginza) <nl><nl>doc = nlp(\"私は本を買った\") #形態素解析<nl><nl>for word in doc:<nl><tab><tab>print(word.i, word.orth_, word.lemma_, word.pos_, word.tag_)<nl>","out":"import spacy<nl>nlp = spacy.load(\"ginza\") <nl><nl>doc = nlp(\"私は本を買った\") #形態素解析<nl><nl>for word in doc:<nl><tab><tab>print(word.i, word.orth_, word.lemma_, word.pos_, word.tag_)<nl>"}
{"in":"ｗ　＝４６．６<nl>ｈ　＝１．６１<nl>BMI　＝ｗ／ｈ ＊＊ ２","out":"w<tab>=46.6<nl>h<tab>=1.61<nl>BMI<tab>=w\/h ** 2"}
{"in":"w=61.0<nl>h=1.79<nl>BMI=w\/h**<nl><nl>print(BMI) #表示されます　＃朔間零のBMIだよ　","out":"w=61.0<nl>h=1.79<nl>BMI=w\/h**2<nl><nl>print(BMI) #表示されます<tab>#朔間零のBMIだよ<tab>"}
{"in":"S, T = map(str, input().split())<nl>x = S,replace(' ', '')<nl>print(x)","out":"S, T = map(str, input().split())<nl>x = S.replace(' ', '')<nl>print(x)"}
{"in":"P = list(map(int, input().split())<nl>print(chr(P))","out":"P = list(map(int, input().split()))<nl>print(chr(P))"}
{"in":"n,w=map(int,input().split())<nl>a=list()<nl>b=list()<nl>for i in range(n):<nl><tab>aa,bb=map(int,input().split())<nl><tab>a=a+[aa]<nl><tab>b=b+[bb]<nl>sum=0<nl>while sum<w:<nl><tab>i=a.indet(max(a))<nl><tab>sum=sum+b[i]<nl><tab>a[i]=0<nl>print(sum)<nl><tab>","out":"n,w=map(int,input().split())<nl>a=list()<nl>b=list()<nl>for i in range(n):<nl><tab>aa,bb=map(int,input().split())<nl><tab>a=a+[aa]<nl><tab>b=b+[bb]<nl>sum=0<nl>while sum<w:<nl><tab>i=a.index(max(a))<nl><tab>sum=sum+b[i]<nl><tab>a[i]=0<nl>print(sum)<nl><tab>"}
{"in":"S,T=map(int,input().split())<nl>for a in range(10):<nl><tab>for b in range(10):<nl><tab><tab>for c in range(10):<nl><tab><tab><tab>if a+b+c <=S and a*b*c<=T:<nl><tab><tab><tab><tab>combs.append((a,b,c))<nl>print(len(combs))","out":"S,T=map(int,input().split())<nl>combs = []<nl>for a in range(10):<nl><tab>for b in range(10):<nl><tab><tab>for c in range(10):<nl><tab><tab><tab>if a+b+c <=S and a*b*c<=T:<nl><tab><tab><tab><tab>combs.append((a,b,c))<nl>print(len(combs))"}
{"in":"S=list(inpit())<nl>if S[-1]==r:<nl><tab>print('er')<nl>else:<nl><tab>print('ist')","out":"S=list(input())<nl>if S[-1]==r:<nl><tab>print('er')<nl>else:<nl><tab>print('ist')"}
{"in":"for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:<nl><tab><tab>if x % 2 ==0 :<nl><tab><tab><tab><tab> print(x\"は偶数です\")<nl><tab><tab>else :<nl><tab><tab><tab><tab>print(x\"は奇数です\")<nl><tab><tab>","out":"for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:<nl><tab><tab>if x % 2 ==0 :<nl><tab><tab><tab><tab>print(x, \"は偶数です\")<nl><tab><tab>else :<nl><tab><tab><tab><tab>print(x, \"は奇数です\")<nl><tab><tab>"}
{"in":"df_mine.columns()","out":"df_mine.columns"}
{"in":"df.sort_values('平均気温')<nl>上位五つ","out":"df.sort_values('平均気温')<nl>#上位五つ"}
{"in":"for x data:[1,2,3,4,5,7]<nl>print(data)","out":"for x in data: #[1,2,3,4,5,7]<nl><tab>print(data)"}
{"in":"x,y=map(str,input().split())<nl>if len(x)>len(y):<nl><tab>z=int(len(y))<nl>else:<nl><tab>z=len(x)<nl>for i in range(z):<nl><tab>if int(x[z-i-1])+int(y[z-i-1])>10:<nl><tab><tab>print('Hard')<nl><tab><tab>break<nl><tab>if i==z-1:<nl><tab><tab>if int(x[z-i-1])+int(y[z-i-1]>10:<nl><tab><tab><tab>print('Hard')<nl><tab><tab><tab>break<nl><tab><tab>else:<nl><tab><tab><tab>print('Easy')","out":"x,y=map(str,input().split())<nl>if len(x)>len(y):<nl><tab>z=int(len(y))<nl>else:<nl><tab>z=len(x)<nl>for i in range(z):<nl><tab>if int(x[z-i-1])+int(y[z-i-1])>10:<nl><tab><tab>print('Hard')<nl><tab><tab>break<nl><tab>if i==z-1:<nl><tab><tab>if int(x[z-i-1])+int(y[z-i-1])>10:<nl><tab><tab><tab>print('Hard')<nl><tab><tab><tab>break<nl><tab><tab>else:<nl><tab><tab><tab>print('Easy')"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc186\/tasks\/abc186_d<nl><nl>N = int(input()<nl>A = list(map(int, input().split()))<nl><nl>for i in range(N):<nl><tab>for j in range(i+1,N):<nl><tab><tab>X+=abs(A[i]-A[j])<nl><nl>print(X)<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc186\/tasks\/abc186_d<nl><nl>N = int(input())<nl>A = list(map(int, input().split()))<nl><nl>for i in range(N):<nl><tab>for j in range(i+1,N):<nl><tab><tab>X+=abs(A[i]-A[j])<nl><nl><tab><tab>print(X)<nl>"}
{"in":"heights=[130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200]<nl>data=[]<nl>for h in heights:<nl><tab><nl>BMI = 18<nl>w = 18 * h * h","out":"heights=[130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200]<nl>data=[]<nl>for h in heights:<nl><tab><nl><tab>BMI = 18<nl><tab>w = 18 * h * h"}
{"in":"d = 20060720<nl>while d => 10: #2桁の時は繰り返す<nl>D = List(map(int,str(d)))<nl>print(D)<nl>d = sum(D)<nl>print(d)<nl>if d == 11 or d == 22 or d == 33 or d== 44:<nl><tab>break #条件を満たしたらループを抜ける<nl><tab> <nl>print(\"ソールナンバー：，ⅾ\")","out":"d = 20060720<nl>while d >= 10: #2桁の時は繰り返す<nl>D = List(map(int,str(d)))<nl>print(D)<nl>d = sum(D)<nl>print(d)<nl>if d == 11 or d == 22 or d == 33 or d== 44:<nl><tab>break #条件を満たしたらループを抜ける<nl><tab> <nl>print(\"ソールナンバー:,ⅾ\")"}
{"in":"weight=[40,45,50,55,60,65,70]<nl>for x in weight:<nl><tab>print(w,\"BMI\")=x\/1.6**2<nl><tab>","out":"weight=[40,45,50,55,60,65,70]<nl>for x in weight:<nl><tab>print(w,\"BMI\")<nl><tab>"}
{"in":"from IPython.core.completer import ProvisionalCompleterWarning<nl>w = 50<nl>h = 1.6<nl>BMI = w \/ (h**2)<nl>if BMI<18.5:<nl><tab>print(\"低体重(やせ)\")<nl><tab>else:<nl><tab><tab>if BMI>=25.0:<nl><tab><tab><tab>print(\"肥満\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"普通体重\")","out":"from IPython.core.completer import ProvisionalCompleterWarning<nl>w = 50<nl>h = 1.6<nl>BMI = w \/ (h**2)<nl>if BMI<18.5:<nl><tab>print(\"低体重(やせ)\")<nl>else:<nl><tab>if BMI>=25.0:<nl><tab><tab>print(\"肥満\")<nl><tab>else:<nl><tab><tab>print(\"普通体重\")"}
{"in":"plt.figure(figsize=(8,8))<nl>plt.scatter(df['部屋数'],df['住宅価格'],alpha=0,5,color='purple')<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()","out":"plt.figure(figsize=(8,8))<nl>plt.scatter(df['部屋数'],df['住宅価格'],alpha=0.5,color='purple')<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()"}
{"in":"tar xvf ldcc-20140209.tar.gz","out":"! tar xvf ldcc-20140209.tar.gz"}
{"in":"P = list(map(int, input().split())<nl>for i in range(26):<nl><tab><tab>print(chr(P),end='')","out":"P = list(map(int, input().split()))<nl>for i in range(26):<nl><tab><tab>print(ord(P),end='')"}
{"in":"sinx+cosy","out":"sin(x)+cos(y)"}
{"in":"#6-6<nl>A, B = map(str,input().split())<nl><nl>ans = 'easy'<nl><nl>A = A[::-1]<nl>B = B[::-1]<nl><nl>for i in min(len(A),len(B)):<nl><tab>sum = int(A[i]) + int(B[i])<nl><tab>if sum >= 10:<nl><tab><tab>ans = 'hard'<nl><tab><tab>break<nl><nl>print(ans)","out":"#6-6<nl>A, B = map(str,input().split())<nl><nl>ans = 'easy'<nl><nl>A = A[::-1]<nl>B = B[::-1]<nl><nl>for i in range(min(len(A),len(B))):<nl><tab>sum = int(A[i]) + int(B[i])<nl><tab>if sum >= 10:<nl><tab><tab>ans = 'hard'<nl><tab><tab>break<nl><nl>print(ans)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_b<nl><nl>for i in range(10):<nl><tab><tab>S=list(map(str, input().split()))<nl><tab><tab>print(S)<nl><tab><tab>for i in range(10):<nl><tab><tab><tab>if S[i] == #:<nl><tab><tab><tab><tab>A=i+1","out":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_b<nl><nl>for i in range(10):<nl><tab><tab>S=list(map(str, input().split()))<nl><tab><tab>print(S)<nl><tab><tab>for i in range(10):<nl><tab><tab><tab>if S[i] == '#':<nl><tab><tab><tab><tab>A=i+1"}
{"in":"A, B, C = map(int, input().split())<nl>my lsit=[A, B, C]<nl>print(max(mylist))","out":"A, B, C = map(int, input().split())<nl>mylist=[A, B, C]<nl>print(max(mylist))"}
{"in":"X = df['部屋数','低所得']<nl>y = df['住宅価格']<nl><nl>model = LinearRegression(x)<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(x)<nl>plt.figure(figsize=(6,6))<nl>plt.xlabel('実装')<nl>plt.ylabel('予想')<nl>plt.ylim(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R２)：', r2)<nl>","out":"X = df[['部屋数','低所得']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression(x)<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(x)<nl>plt.figure(figsize=(6,6))<nl>plt.xlabel('実装')<nl>plt.ylabel('予想')<nl>plt.ylim(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)<nl>"}
{"in":"print(199999999999999999999999+2999999999）<nl><tab><tab><tab>","out":"print(199999999999999999999999+2999999999)<nl><tab><tab><tab>"}
{"in":"N,A,B=map(int,input().split())<nl><nl>##繰り返し？<nl>x==0<nl>def f(x):<nl><tab>return A<=sum(list(map(int, str(N))))<=B<nl><tab>x+=1<nl><tab>sum=sum+x<nl><nl>print(sum)","out":"N,A,B=map(int,input().split())<nl><nl>##繰り返し?<nl>x==0<nl>def f(x):<nl><tab>return A<=sum(list(map(int, str(N))))<=B<nl><tab>x+=1<nl><tab>sum=sum+x<nl><nl>print(sum)"}
{"in":"plt.figure(figsize=(5,5),color=pink)<nl><nl><nl>plt.scatter(df['G3'], df['G1'])<nl>plt.xlabel('最終成績G3')<nl>plt.ylabel('成績(G1)')<nl><nl>plt.show()","out":"plt.figure(figsize=(5,5),color=\"pink\")<nl><nl><nl>plt.scatter(df['G3'], df['G1'])<nl>plt.xlabel('最終成績G3')<nl>plt.ylabel('成績(G1)')<nl><nl>plt.show()"}
{"in":"df=pd.read_csv('\/content\/body_measurement_sample.csv'","out":"df=pd.read_csv('\/content\/body_measurement_sample.csv')"}
{"in":"ｗ　＝４６．６<nl>ｈ　＝１．６１<nl>BMI　＝ｗ ／ ｈ ＊＊ ２","out":"w<tab>=46.6<nl>h<tab>=1.61<nl>BMI<tab>=w \/ h ** 2"}
{"in":"def bsort(a):<nl><tab>n=len(a)<nl><tab>for i in range(n-1):<nl><tab><tab>for j in range(n-2):<nl><tab><tab>if a[i]>a[i+1]:<nl><tab><tab><tab>a[i],a[i+1]=a[i+1],a[i]<nl>print(a)<nl>bsort(a)<nl>print(a)","out":"def bsort(a):<nl><tab>n=len(a)<nl><tab>for i in range(n-1):<nl><tab><tab>for j in range(n-2):<nl><tab><tab><tab>if a[i]>a[i+1]:<nl><tab><tab><tab><tab>a[i],a[i+1]=a[i+1],a[i]<nl><tab>return a<nl>print(a)<nl>bsort(a)<nl>print(a)"}
{"in":"df.head(10)　　","out":"df.head(10)"}
{"in":"df['平均気温'].means()","out":"df['平均気温'].mean()"}
{"in":"class Ratio(object):<nl><tab>bunsi: int<nl><tab>bunbo: int<nl><tab>def __init__(self, bunsi,bunbo):<nl><tab><tab>self.bunsi = bunsi<nl><tab><tab>self.bunbo = bunbo<nl><tab>def Ratio(self):<nl><tab><tab>def gcd(a, b):<nl><tab><tab><tab>while b:<nl><tab><tab><tab><tab>a, b = b, a%b<nl><tab><tab><tab>return a<nl><tab><tab>if self.bunbo % self.bunsi == 0:<nl><tab><tab><tab>common = gcd(self.bunsi, self.bunbo)<nl><tab><tab><tab>print(str(self.bunsi \/\/ common) + '\/' + str(self.bunbo \/\/ common))<nl><tab><tab>else:<nl><tab><tab><tab>print(str(self.bunsi) + '\/' + str(self.bunbo))<nl><tab>def add(Ratio(self), Ratio(x)):<nl><tab><tab>return 0","out":"class Ratio(object):<nl><tab>bunsi: int<nl><tab>bunbo: int<nl><tab>def __init__(self, bunsi,bunbo):<nl><tab><tab>self.bunsi = bunsi<nl><tab><tab>self.bunbo = bunbo<nl><tab>def Ratio(self):<nl><tab><tab>def gcd(a, b):<nl><tab><tab><tab>while b:<nl><tab><tab><tab><tab>a, b = b, a%b<nl><tab><tab><tab>return a<nl><tab><tab>if self.bunbo % self.bunsi == 0:<nl><tab><tab><tab>common = gcd(self.bunsi, self.bunbo)<nl><tab><tab><tab>print(str(self.bunsi \/\/ common) + '\/' + str(self.bunbo \/\/ common))<nl><tab><tab>else:<nl><tab><tab><tab>print(str(self.bunsi) + '\/' + str(self.bunbo))<nl><tab>def add(self, x):<nl><tab><tab>return 0"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc186\/tasks\/abc186_d<nl>N = int(input()<nl>A = list(map(int, input()).split()))<nl>A.sort(reverse=True)<nl><nl>X=0<nl><nl>for i in range(N):<nl><tab>X+=A[i]*(N-2*i-1)<nl><nl>print(X)<nl><nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc186\/tasks\/abc186_d<nl>N = int(input()<nl>A = list(map(int, input()).split())<nl>A.sort(reverse=True)<nl><nl>X=0<nl><nl>for i in range(N):<nl><tab>X+=A[i]*(N-2*i-1)<nl><nl>print(X)"}
{"in":"if BMI > 25.00<nl><tab><tab>print (\"太りすぎ\")<nl><tab><tab>else;<nl><tab><tab>Print(\"太りすぎでない\")","out":"if BMI > 25.00:<nl><tab><tab>print(\"太りすぎ\")<nl>else:<nl><tab><tab>print(\"太りすぎでない\")"}
{"in":"def show():<nl><tab><tab>print('X',X)<nl><tab><tab>print('Y',Y)<nl><tab><tab>print('Z'Z)","out":"def show():<nl><tab><tab>print('X',X)<nl><tab><tab>print('Y',Y)<nl><tab><tab>print('Z',Z)"}
{"in":"n=int(input())<nl>c=[input().split() for _ in range(n)]<nl>print(c)<nl>a='0'<nl>x=0<nl>for i in c:<nl><tab>if i[0]!=i[1]:<nl><tab><tab>i.appned(a)<nl><tab><tab>a=min(i)<nl><tab><tab>c.appned(i)<nl><tab><tab>x+=1<nl>print(x)","out":"n=int(input())<nl>c=[input().split() for _ in range(n)]<nl>print(c)<nl>a='0'<nl>x=0<nl>for i in c:<nl><tab>if i[0]!=i[1]:<nl><tab><tab>i.appned(a)<nl><tab><tab>a=min(i)<nl><tab><tab>c.append(i)<nl><tab><tab>x+=1<nl>print(x)"}
{"in":"<nl>N=int(input())<nl>S=input()<nl><nl>answer = ''<nl>for letter in len(S):<nl><tab><tab>answer += chr(ord('A') + (ord(letter)-ord('A')+N) % 26)","out":"<nl>N=int(input())<nl>S=input()<nl><nl>answer = ''<nl>for letter in S:<nl><tab><tab>answer += chr(ord('A') + (ord(letter)-ord('A')+N) % 26)"}
{"in":"pos = s.find('-')<nl>s[:pos], pos[pos+1:] => rpartition<nl>def calc(s:str)->float:<nl><tab><tab>if '-' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('-')<nl><tab><tab><tab><tab>return calc(a)-calc(b)<nl><tab><tab>if '+' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('+')<nl><tab><tab><tab><tab>return calc(a)+calc(b)<nl><tab><tab>if '\/' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('\/')<nl><tab><tab><tab><tab>return calc(a)\/calc(b)<nl><tab><tab>if '*' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('*')<nl><tab><tab><tab><tab>return calc(a)*calc(b)<nl><tab><tab>return float(s)<nl><nl>print(calc(\"1+2*3\"))","out":"pos = s.find('-')<nl># s[:pos], pos[pos+1:] => rpartition<nl>def calc(s:str)->float:<nl><tab><tab>if '-' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('-')<nl><tab><tab><tab><tab>return calc(a)-calc(b)<nl><tab><tab>if '+' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('+')<nl><tab><tab><tab><tab>return calc(a)+calc(b)<nl><tab><tab>if '\/' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('\/')<nl><tab><tab><tab><tab>return calc(a)\/calc(b)<nl><tab><tab>if '*' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('*')<nl><tab><tab><tab><tab>return calc(a)*calc(b)<nl><tab><tab>return float(s)<nl><nl>print(calc(\"1+2*3\"))"}
{"in":"df.sort_values('平均気温')<nl>aaa","out":"df.sort_values('平均気温')<nl>#aaa"}
{"in":"http:\/\/www.mikiotaniguchi.com\/main\/3\/k3_720teisekibun_main.htm","out":"# http:\/\/www.mikiotaniguchi.com\/main\/3\/k3_720teisekibun_main.htm"}
{"in":"pd.read_df('平均気温', precision=True)","out":"pd.read_csv('平均気温', precision=True)"}
{"in":"#空のシーケンシャルデータを入れる箱に実際のデータを入れていく<nl>\"\"\"<nl>こんなイメージ？<nl>0,1,2,・・・9<tab><tab><tab><tab>+<tab>正解データt=10<nl><tab>1,2,・・・9,10<tab><tab> +<tab>正解データt=11<nl><tab><tab>2,・・・9,10,11<tab>+<tab>正解データt=12<nl>\"\"\"<nl>for i in range(n_sample):<nl><tab><tab>input_data[i] = df_scaled[i:i+time_stemp].reshape(-1, 1)<nl><tab><tab>correct_input_data[i] = df_scaled[i+time_stemp:i+time_stemp+1]<nl><nl>input_data = torch.tensor(input_data, dtype=torch.float) #Tensor化(入力)<nl>correct_data = torch.tensor(correct_input_data, dtype=torch.float) #Tensor化(正解)<nl>dataset = torch.utils.data.TensorDataset(input_data, correct_data) #データセット作成<nl>train_loader = DataLoader(dataset, batch_size=4, shuffle=True) #データローダー作成","out":"#空のシーケンシャルデータを入れる箱に実際のデータを入れていく<nl>\"\"\"<nl>こんなイメージ?<nl>0,1,2,・・・9<tab><tab><tab><tab>+<tab>正解データt=10<nl><tab>1,2,・・・9,10<tab><tab> +<tab>正解データt=11<nl><tab><tab>2,・・・9,10,11<tab>+<tab>正解データt=12<nl>\"\"\"<nl>for i in range(n_sample):<nl><tab><tab>input_data[i] = df_scaled[i:i+time_stemp].reshape(-1, 1)<nl><tab><tab>correct_input_data[i] = df_scaled[i+time_stemp:i+time_stemp+1]<nl><nl>input_data = torch.tensor(input_data, dtype=torch.float) #Tensor化(入力)<nl>correct_data = torch.tensor(correct_input_data, dtype=torch.float) #Tensor化(正解)<nl>dataset = torch.utils.data.TensorDataset(input_data, correct_data) #データセット作成<nl>train_loader = DataLoader(dataset, batch_size=4, shuffle=True) #データローダー作成"}
{"in":"d=20050831<nl>while d >=10: #二桁の時は繰り返す<nl><tab><tab>D=list(map(into,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d == 11 or d ==22 or d==33 or d==44:<nl><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print('ソールナンバー')","out":"d=20050831<nl>while d >=10: #二桁の時は繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d == 11 or d ==22 or d==33 or d==44:<nl><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print('ソールナンバー')"}
{"in":"plt.figure(figsize = (15,35))<nl>plt.subplots_adjust(wspace=0.4,hspace=0.6)#余白調整<nl>for i,item in enumerate(df.select_dtype('object').index):<nl><tab><tab>plt.subplot(9,4,i+1)<nl><tab><tab>sns.countplot(data=df, x=item)<nl><tab><tab>#plt.title(item)<nl><nl>plt.show()<tab> ","out":"plt.figure(figsize = (15,35))<nl>plt.subplots_adjust(wspace=0.4,hspace=0.6)#余白調整<nl>for i,item in enumerate(df.select_dtypes('object').index):<nl><tab><tab>plt.subplot(9,4,i+1)<nl><tab><tab>sns.countplot(data=df, x=item)<nl><tab><tab>#plt.title(item)<nl><nl>plt.show()<tab> "}
{"in":"def update(lives):<tab> #世代ごとの更新<nl><tab><tab>N, M = lives.shape<nl><tab><tab>newlives = np.zeros(lives.shape)<tab> #新しい生命の状態<nl><tab><tab>for y in range(N):<nl><tab><tab><tab><tab>for x in range(M):<nl><tab><tab><tab><tab><tab>c = count(lives,x,y)<nl><tab><tab><tab><tab><tab>newlives[y,x] = lives[y,x]<nl><tab><tab><tab><tab><tab>if lives[y,x] == 1:<nl><tab><tab><tab><tab><tab><tab><tab>if c <= 1 or c >= 4<tab><tab>#死滅<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab>newlives[y,x] = 0<tab>#死滅<nl><tab><tab><tab><tab><tab>elif c == 3:<nl><tab><tab><tab><tab><tab><tab><tab>newlives[y,x] = 1<tab>#誕生<nl><tab><tab>return newlives","out":"def update(lives):<tab> #世代ごとの更新<nl><tab><tab>N, M = lives.shape<nl><tab><tab>newlives = np.zeros(lives.shape)<tab> #新しい生命の状態<nl><tab><tab>for y in range(N):<nl><tab><tab><tab><tab>for x in range(M):<nl><tab><tab><tab><tab><tab>c = count(lives,x,y)<nl><tab><tab><tab><tab><tab>newlives[y,x] = lives[y,x]<nl><tab><tab><tab><tab><tab>if lives[y,x] == 1:<nl><tab><tab><tab><tab><tab><tab><tab>if c <= 1 or c >= 4:<tab><tab>#死滅<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab>newlives[y,x] = 0<tab>#死滅<nl><tab><tab><tab><tab><tab>elif c == 3:<nl><tab><tab><tab><tab><tab><tab><tab>newlives[y,x] = 1<tab>#誕生<nl><tab><tab>return newlives"}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc178\/tasks\/abc178_a<nl>2 x = int(input())<nl>if x == 1:<nl> print(0)<nl>else:<nl><tab>print(1)","out":"# kogi https:\/\/atcoder.jp\/contests\/abc178\/tasks\/abc178_a<nl>x = int(input())<nl>if x == 1:<nl> print(0)<nl>else:<nl><tab>print(1)"}
{"in":"A,B,C = map(int,input().split())<nl>for i in C:<nl><tab><tab>print(C)<nl>if A<=C<=B:<nl><tab><tab>print(C)<nl>else:<nl><tab><tab>print('-1')","out":"A,B,C = map(int,input().split())<nl>for i in range(C):<nl><tab><tab>print(C)<nl>if A<=C<=B:<nl><tab><tab>print(C)<nl>else:<nl><tab><tab>print('-1')"}
{"in":"a=[1,2,3]<nl>a.remove(1)<nl>print(a)<nl>a.append(4)<nl>print(a)<nl>a.remove(4)<nl>print(a)<nl>s=a.min()<nl>print(s)","out":"a=[1,2,3]<nl>a.remove(1)<nl>print(a)<nl>a.append(4)<nl>print(a)<nl>a.remove(4)<nl>print(a)<nl>s=min(a)<nl>print(s)"}
{"in":"heights=list(range(130,201,5))<nl>print(hieghts)","out":"heights=list(range(130,201,5))<nl>print(heights)"}
{"in":"ｗ ＝４６.６<nl>ｈ ＝１．６１<nl>BMI ＝ W ／H ＊＊ ２<nl>print(BMI)","out":"W =46.6<nl>H =1.61<nl>BMI = W \/H ** 2<nl>print(BMI)"}
{"in":"plt.scatter(df['降水量'], df['スギ花粉飛散量'])<nl>plot.show","out":"plt.scatter(df['降水量'], df['スギ花粉飛散量'])<nl>plt.show()"}
{"in":"x=2<nl>if x > 0: #コロン<nl><tab>print(\"正\")<nl>else:<nl><tab>if x==0:<nl><tab><tab>print(\"ゼロ\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"負\")","out":"x=2<nl>if x > 0: #コロン<nl><tab>print(\"正\")<nl>else:<nl><tab>if x==0:<nl><tab><tab>print(\"ゼロ\")<nl><tab>else:<nl><tab><tab>print(\"負\")"}
{"in":"import.math<nl>math.sqrt(x)","out":"import math<nl>math.sqrt(x)"}
{"in":"H, W = map(int, input(). split())<nl>A = [list(map(int, input(). split())) for i in range(H)]<nl>s = []<nl>for i in A:<nl><tab>for j in i:<nl><tab><tab>s. append(j)<nl>s. sorted(s)<nl>t = 0<nl>for i in s:<nl><tab>t += s[i] - s[0]<nl>print(t)","out":"H, W = map(int, input(). split())<nl>A = [list(map(int, input(). split())) for i in range(H)]<nl>s = []<nl>for i in A:<nl><tab>for j in i:<nl><tab><tab>s. append(j)<nl>s = sorted(s)<nl>t = 0<nl>for i in s:<nl><tab>t += s[i] - s[0]<nl>print(t)"}
{"in":"df.select_type('object')","out":"df.select_dtypes('object')"}
{"in":"class Animal(object):<nl><tab>def face(self):<nl><tab><tab>return '(Now printing...🐖)'<nl><tab>def sound(self):<nl><tab><tab>return 'ぎゃぎゃ'<nl><tab>def leg(self):<nl><tab><tab>return 4<nl><nl>class Sheep(Animal):<nl><tab>def __repr__(self):<nl><tab><tab>return '🐏'<nl><tab>def sound(self):<tab>#Override<nl><tab><tab>return 'め～'<nl><nl>class Dog(Animal):<nl><tab> name:str<nl><tab> def __repr__(self):<nl><tab><tab>return f'🐶{self.name}'<nl><tab> def face(self):<nl><tab><tab>return '🌭'<nl><tab> def sound(self):<nl><tab><tab>return 'BowBow'<nl><nl><nl>dog = Dog('aaa')<nl>dog","out":"class Animal(object):<nl><tab>def face(self):<nl><tab><tab>return '(Now printing...🐖)'<nl><tab>def sound(self):<nl><tab><tab>return 'ぎゃぎゃ'<nl><tab>def leg(self):<nl><tab><tab>return 4<nl><nl>class Sheep(Animal):<nl><tab>def __repr__(self):<nl><tab><tab>return '🐏'<nl><tab>def sound(self):<tab>#Override<nl><tab><tab>return 'め~'<nl><nl>class Dog(Animal):<nl><tab> name:str<nl><tab> def __repr__(self):<nl><tab><tab>return f'🐶{self.name}'<nl><tab> def face(self):<nl><tab><tab>return '🌭'<nl><tab> def sound(self):<nl><tab><tab>return 'BowBow'<nl><nl><nl>dog = Dog('aaa')<nl>dog"}
{"in":"N = int(input())<nl>AB = []<nl>T = 0<nl>for _ in range(N):<nl><tab><tab>a,b = map(int,input().split())<nl><tab><tab>AB.append((a,b))<nl><tab><tab>T += (a\/b)<nl><nl>r = T\/2<nl>for i in range(N):<nl><tab><tab>a,b = AB[i]<nl><tab><tab>t = a\/b<nl><tab><tab>if t < r:<nl><tab><tab><tab><tab>r -= t<nl><tab><tab><tab><tab>L += a<nl><tab><tab>else:<nl><tab><tab><tab> L += r* b<nl><tab><tab><tab> break<nl>print(L)","out":"N = int(input())<nl>AB = []<nl>T = 0<nl>for<tab>in range(N):<nl><tab><tab>a,b = map(int,input().split())<nl><tab><tab>AB.append((a,b))<nl><tab><tab>T += (a\/b)<nl><nl>r = T\/2<nl>for i in range(N):<nl><tab><tab>a,b = AB[i]<nl><tab><tab>t = a\/b<nl><tab><tab>if t < r:<nl><tab><tab><tab><tab>r -= t<nl><tab><tab><tab><tab>L += a<nl><tab><tab>else:<nl><tab><tab><tab> L += r* b<nl><tab><tab><tab> break<nl>print(L)"}
{"in":"N, A ,X, Y=map(int,input().split)<nl>print(X*A+(N-A)*Y)","out":"N, A ,X, Y=map(int,input().split())<nl>print(X*A+(N-A)*Y)"}
{"in":"df('住宅価格')","out":"df['住宅価格']"}
{"in":"animal.leg()　for animal in animals:","out":"list(animal.leg()<tab>for animal in animals)"}
{"in":"def gcd(a,b):<nl> if b==0:<nl><tab>return a<nl>else:<nl><tab>return gcd(b,a%b)<nl> <nl><tab>acd(6215,4746)","out":"def gcd(a,b):<nl><tab>if b==0:<nl><tab><tab>return a<nl><tab>else:<nl><tab><tab>return gcd(b,a%b)<nl> <nl>gcd(6215,4746)"}
{"in":"plt.figure(figsize=(8 , 8)) # 図の大きさ<nl>plt.scatter(df[\"部屋数\"], df[\"住宅価格\"], alpha=0.5, color=ffadad)<nl>plt.xlabel(\"部屋数\")<nl>plt.ylabel(\"住宅価格\")<nl>plt.show()","out":"plt.figure(figsize=(8 , 8)) # 図の大きさ<nl>plt.scatter(df[\"部屋数\"], df[\"住宅価格\"], alpha=0.5, color=\"#ffadad\")<nl>plt.xlabel(\"部屋数\")<nl>plt.ylabel(\"住宅価格\")<nl>plt.show()"}
{"in":"<nl>h,w,x,y=map(int,intput().split())<nl>s=[]<nl>for i in range(h):<nl><tab>si=input()<nl><tab>si=list(si)<nl><tab>s.append(si)<nl><nl><nl>x=x-1<nl>y=y-1<nl>cnt=0<nl><nl>j=x<nl>while 0 <= j <h:<nl><tab>if s[j][y]=='.':<nl><tab><tab>cnt+=1<nl><tab><tab>j=j+1<nl><tab>else:<nl><tab><tab>break<nl><nl>j=x<nl>while 0<=j<h:<nl><tab>if s[j][y]=='.':<nl><tab><tab>cnt += 1<nl><tab><tab>j=j+1<nl><tab>else:<nl><tab><tab>break<nl><nl>j=Y<nl>while 0 <=j<w:<nl><tab>if s[x][j]=='.':<nl><tab><tab>cnt+=1<nl><tab><tab>j=j+1<nl><tab>else:<nl><tab><tab>break<nl><nl><nl><nl>j=Y<nl>while 0 <=j<w:<nl><tab>if s[x][j]=='.':<nl><tab><tab>cnt+=1<nl><tab><tab>j=j-1<nl><tab>else:<nl><tab><tab>break<nl><nl>print(cnt-3)<nl><nl><tab><tab><tab><tab><tab>","out":"<nl>h,w,x,y=map(int,input().split())<nl>s=[]<nl>for i in range(h):<nl><tab>si=input()<nl><tab>si=list(si)<nl><tab>s.append(si)<nl><nl><nl>x=x-1<nl>y=y-1<nl>cnt=0<nl><nl>j=x<nl>while 0 <= j <h:<nl><tab>if s[j][y]=='.':<nl><tab><tab>cnt+=1<nl><tab><tab>j=j+1<nl><tab>else:<nl><tab><tab>break<nl><nl>j=x<nl>while 0<=j<h:<nl><tab>if s[j][y]=='.':<nl><tab><tab>cnt += 1<nl><tab><tab>j=j+1<nl><tab>else:<nl><tab><tab>break<nl><nl>j=Y<nl>while 0 <=j<w:<nl><tab>if s[x][j]=='.':<nl><tab><tab>cnt+=1<nl><tab><tab>j=j+1<nl><tab>else:<nl><tab><tab>break<nl><nl><nl><nl>j=Y<nl>while 0 <=j<w:<nl><tab>if s[x][j]=='.':<nl><tab><tab>cnt+=1<nl><tab><tab>j=j-1<nl><tab>else:<nl><tab><tab>break<nl><nl>print(cnt-3)<nl><nl><tab><tab><tab><tab><tab>"}
{"in":"if BMI < 18.50:<nl> print(\"低体重\")<nl>else : BMI >= 18.50:<nl>print(\"低体重でない\")","out":"if BMI < 18.50:<nl> print(\"低体重\")<nl>else : BMI >= 18.50:<nl><tab>print(\"低体重でない\")"}
{"in":"A=[list(map(int, input().split())) for a in range(3)]<nl>N=int(input())<nl>B=[]<nl>for b in N:<nl><tab>b=str(input())<nl><tab>B+=b<nl>print(A)<nl>print(B)","out":"A=[list(map(int, input().split())) for a in range(3)]<nl>N=int(input())<nl>B=[]<nl>for b in range(N):<nl><tab>b=str(input())<nl><tab>B+=b<nl>print(A)<nl>print(B)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc272\/tasks\/abc272_a<nl><nl>N = int(input())<nl><nl>for i in range(N):<nl><tab>A = map(int,input().split)<nl><tab>x = x + A<nl><tab>print(x)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc272\/tasks\/abc272_a<nl><nl>N = int(input())<nl><nl>for i in range(N):<nl><tab>A = map(int,input().split())<nl><tab>x = x + A<nl><tab>print(x)"}
{"in":"#6-6<nl>A, B = map(str,input().split())<nl><nl>ans = 'easy'<nl><nl>for i in int(A):<nl><tab>sum = int(A[i]) + int(B[i])<nl><tab>if sum >= 10:<nl><tab><tab>ans = 'hard'<nl><tab><tab>break<nl><nl>print(ans)","out":"#6-6<nl>A, B = map(str,input().split())<nl><nl>ans = 'easy'<nl><nl>for i in range(len(A)):<nl><tab>sum = int(A[i]) + int(B[i])<nl><tab>if sum >= 10:<nl><tab><tab>ans = 'hard'<nl><tab><tab>break<nl><nl>print(ans)"}
{"in":"pd.read_csv('pollen.csv', sep=',')<nl>df.head()","out":"df=pd.read_csv('pollen.csv', sep=',')<nl>df.head()"}
{"in":"sum[animal.leg() for animal in animals]<nl><tab>","out":"sum(animal.leg() for animal in animals)<nl><tab>"}
{"in":"w=50<nl>h=1.6<nl>BMI=w \/ (h**2)<nl>print(BMI)<nl>if BMI<18.5:<nl><tab><tab>print(\"低体重（やせ\")<nl>else:<nl><tab>if 18.5<=BMI<25:<nl><tab><tab>print(\"普通体重\")<nl><tab>else <nl><tab><tab>print(\"肥満\")","out":"w=50<nl>h=1.6<nl>BMI=w \/ (h**2)<nl>print(BMI)<nl>if BMI<18.5:<nl><tab><tab>print(\"低体重(やせ\")<nl>else:<nl><tab>if 18.5<=BMI<25:<nl><tab><tab>print(\"普通体重\")<nl><tab>else:<nl><tab><tab>print(\"肥満\")"}
{"in":"import spacy<nl>nlp = spacy.load(ja_ginza) <nl><nl>doc = nlp(\"私は本を買った\") #形態素解析<nl><nl>for word in doc:<nl><tab><tab>print(word.i, word.orth_, word.lemma_, word.pos_, word.tag_)<nl>","out":"import spacy<nl>nlp = spacy.load(\"ja_ginza\") <nl><nl>doc = nlp(\"私は本を買った\") #形態素解析<nl><nl>for word in doc:<nl><tab><tab>print(word.i, word.orth_, word.lemma_, word.pos_, word.tag_)<nl>"}
{"in":"for column in df.columns:<nl><tab><tab>rho = corr(df[column,column], df['住宅価格'])<nl><tab><tab>print(f'{column,column}-価格: ρ={rho}')<nl>","out":"for column in df.columns:<nl><tab><tab>rho = corr(df[[column,column]], df['住宅価格'])<nl><tab><tab>print(f'{column,column}-価格: ρ={rho}')<nl>"}
{"in":"[ ] df.head()","out":"df.head()"}
{"in":"if BMI > 25.00:<nl><tab><tab>print (\"太りすぎ\")<nl>else:<nl><tab><tab>Print(\"太りすぎでない\")","out":"if BMI > 25.00:<nl><tab><tab>print (\"太りすぎ\")<nl>else:<nl><tab><tab>print(\"太りすぎでない\")"}
{"in":"x1=df.['西暦']<nl>y1=df.['降水量']<nl>plt.show(x1,y1)","out":"x1=df['西暦']<nl>y1=df['降水量']<nl>plt.show(x1,y1)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc186\/tasks\/abc186_d<nl>N = int(input()）<nl>A = list(map(int, input()).split()))<nl>A.sort(reverse=True)<nl><nl>X=0<nl><nl>for i in range(N):<nl><tab>X+=A[i]*(N-2*i-1)<nl><nl>print(X)<nl><nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc186\/tasks\/abc186_d<nl>N = int(input())<nl>A = list(map(int, input().split()))<nl>A.sort(reverse=True)<nl><nl>X=0<nl><nl>for i in range(N):<nl><tab>X+=A[i]*(N-2*i-1)<nl><nl>print(X)<nl><nl>"}
{"in":"print(\"HelloWorld\"）","out":"print(\"HelloWorld\")"}
{"in":"for i in range(1,10000,1000):<nl><tab>print(f'N={i}'.calc_pi(i))","out":"for i in range(1,10000,1000):<nl><tab>print(f'N={i}', calc_pi(i))"}
{"in":"# 春：１　夏：２　秋：３　冬：４<nl>season = datetime.int.replace('11', '3')<nl>season = datetime.int.replace('12', '4')<nl>season = datetime.int.replace('1', '4')<nl>season = datetime.int.replace('2', '4')<nl>season = datetime.int.replace('3', '1')<nl>season = datetime.int.replace('4', '1')<nl>season = datetime.int.replace('5', '1')<nl>season = datetime.int.replace('6', '2')<nl>season = datetime.int.replace('7', '2')<nl>season = datetime.int.replace('8', '2')<nl>season = datetime.int.replace('9', '3')","out":"# 春:1<tab>夏:2<tab>秋:3<tab>冬:4<nl>season = datetime.int.replace('11', '3')<nl>season = datetime.int.replace('12', '4')<nl>season = datetime.int.replace('1', '4')<nl>season = datetime.int.replace('2', '4')<nl>season = datetime.int.replace('3', '1')<nl>season = datetime.int.replace('4', '1')<nl>season = datetime.int.replace('5', '1')<nl>season = datetime.int.replace('6', '2')<nl>season = datetime.int.replace('7', '2')<nl>season = datetime.int.replace('8', '2')<nl>season = datetime.int.replace('9', '3')"}
{"in":"def Sum(a,b):<nl><tab><tab>return (a+b)*(b-a+1)\/2<nl>def main():<nl><tab><tab>N = int(input())<nl><tab><tab>ans = sum(Sum(a,b = map(int,input().split())) for _ in range(N))<nl><tab><tab>return ans<nl><nl>print(main())","out":"def Sum(a,b):<nl><tab><tab>return (a+b)*(b-a+1)\/2<nl>def main():<nl><tab><tab>N = int(input())<nl><tab><tab>ans = sum(Sum(a,b = map(int,input().split())) for<tab>in range(N))<nl><tab><tab>return ans<nl><nl>print(main())"}
{"in":"improt math <nl><nl>for w in range(40,100,5):<nl><tab><tab>h =math.sqrt(w \/ 22.0) <nl><tab><tab>print('体重:', w ,'身長:' , h)","out":"import math <nl><nl>for w in range(40,100,5):<nl><tab><tab>h =math.sqrt(w \/ 22.0) <nl><tab><tab>print('体重:', w ,'身長:' , h)"}
{"in":"r, p=pearsonr(df[\"築年数\"], df[\"住宅価格\"])<nl>print(\"相対係数：\", r)<nl>pritn(\"p値：\", p)","out":"r, p=pearsonr(df[\"築年数\"], df[\"住宅価格\"])<nl>print(\"相対係数:\", r)<nl>pritn(\"p値:\", p)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split()) # 決まり文句<nl><nl>print(A, BA, B)<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split()) # 決まり文句<nl><nl>print(A, B*A, B)<nl>"}
{"in":"w=65.0<nl>h=1.75<nl>BMI　　 = w \/ h ** 2<nl><nl>print('BMI', BMI)<nl><nl>if BMI < 18.5:<nl><tab><tab>print('低体重')<nl>elif BMI >=18.5 and BMI < 25.0:<nl><tab><tab>print('標準')<nl>else:<nl><tab><tab>print('太り過ぎ')","out":"w=65.0<nl>h=1.75<nl>BMI = w \/ h ** 2<nl><nl>print('BMI', BMI)<nl><nl>if BMI < 18.5:<nl><tab><tab>print('低体重')<nl>elif BMI >=18.5 and BMI < 25.0:<nl><tab><tab>print('標準')<nl>else:<nl><tab><tab>print('太り過ぎ')"}
{"in":"x=15<nl>prit('x')","out":"x=15<nl>print('x')"}
{"in":"def calc(s:str)->float:<nl><tab>\"1+10\":1+10<nl><tab><tab>return float(s)<nl>calc(\"1+10\")","out":"def calc(s:str)->float:<nl><tab># \"1+10\":1+10<nl><tab>return float(s)<nl>calc(\"1+10\")"}
{"in":"d=20070122<nl>while d>=10:#二桁の時は繰り返す<nl>　 D = list(map(int,str(d)))<nl>　 #print(D)<nl>　 d = sum(D)<nl>　 #print(d)<nl>　 if d==11 or d== 22 or d==33 or d==44:<nl><tab><tab><tab> break#条件を満たしたらループを抜ける<nl>print('ソールナンバー:',d)","out":"d=20070122<nl>while d>=10:#二桁の時は繰り返す<nl><tab> D = list(map(int,str(d)))<nl><tab> #print(D)<nl><tab> d = sum(D)<nl><tab> #print(d)<nl><tab> if d==11 or d== 22 or d==33 or d==44:<nl><tab><tab><tab> break#条件を満たしたらループを抜ける<nl>print('ソールナンバー:',d)"}
{"in":"from sklearn.ensemble import RandomForestRegressor<nl><nl># RandomForestのパラメータ設定<nl>randomforest= RandomForestRegressor(n_estimators=100,max_depth=4,random_state=2018)<nl><nl>##予測値<nl>y_train_pred= model.predict(X)<nl><nl># 残差 = 実測値 - 予測値 を求める<nl>pred_sub=y-y_train_pred<nl><nl># RandomForestの説明変数には全てのカラムを使う<nl>randomforest_X_train=X<nl><nl># randomforest_X_trainを説明変数、pred_sub（残差）を目的変数にし、モデル作成<nl>randomforest.fit(randomforest_X_train,pred_sub)","out":"from sklearn.ensemble import RandomForestRegressor<nl><nl># RandomForestのパラメータ設定<nl>randomforest= RandomForestRegressor(n_estimators=100,max_depth=4,random_state=2018)<nl><nl>##予測値<nl>y_train_pred= model.predict(X)<nl><nl># 残差 = 実測値 - 予測値 を求める<nl>pred_sub=y-y_train_pred<nl><nl># RandomForestの説明変数には全てのカラムを使う<nl>randomforest_X_train=X<nl><nl># randomforest_X_trainを説明変数、pred_sub(残差)を目的変数にし、モデル作成<nl>randomforest.fit(randomforest_X_train,pred_sub)"}
{"in":"integrate(x*log(x**2+1),(x,0,1)","out":"integrate(x*log(x**2+1),(x,0,1))"}
{"in":"df('犯罪率')","out":"df['犯罪率']"}
{"in":"d=20070122<nl>while d>=10:#二桁の時は繰り返す<nl>　　D=list(map(int,str(d)))<nl>　　print(D)<nl>　　d=sum(D)<nl>　　print(d)","out":"d=20070122<nl>while d>=10:#二桁の時は繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)"}
{"in":"# 春：１　夏：２　秋：３　冬：４<nl>season = s.str.replace('11', '3')<nl>season = s.str.replace('12', '4')<nl>season = s.str.replace('1', '4')<nl>season = s.str.replace('2', '4')<nl>season = s.str.replace('3', '1')<nl>season = s.str.replace('4', '1')<nl>season = s.str.replace('5', '1')<nl>season = s.str.replace('6', '2')<nl>season = s.str.replace('7', '2')<nl>season = s.str.replace('8', '2')<nl>season = s.str.replace('9', '3')","out":"# 春:1<tab>夏:2<tab>秋:3<tab>冬:4<nl>season = s.str.replace('11', '3')<nl>season = s.str.replace('12', '4')<nl>season = s.str.replace('1', '4')<nl>season = s.str.replace('2', '4')<nl>season = s.str.replace('3', '1')<nl>season = s.str.replace('4', '1')<nl>season = s.str.replace('5', '1')<nl>season = s.str.replace('6', '2')<nl>season = s.str.replace('7', '2')<nl>season = s.str.replace('8', '2')<nl>season = s.str.replace('9', '3')"}
{"in":"w = 42.0<nl>h = 1.58<nl>BMI = w \/ (h * h)<nl><nl>print(BMI)<nl><nl>if BMI < 17.5<nl><tab><tab>print('低体重')<nl>elif BMI >=17.5 and BMI < 25.0:<nl><tab><tab>print('標準')<nl>else:<nl><tab><tab>print('太りすぎ')","out":"w = 42.0<nl>h = 1.58<nl>BMI = w \/ (h * h)<nl><nl>print(BMI)<nl><nl>if BMI < 17.5:<nl><tab><tab>print('低体重')<nl>elif BMI >=17.5 and BMI < 25.0:<nl><tab><tab>print('標準')<nl>else:<nl><tab><tab>print('太りすぎ')"}
{"in":"A, B = map(int, input().split())<nl><nl>def S(n):<nl><tab><tab>y = list(str(n))<nl><tab><tab>for i in range(len(y)):<nl><tab><tab>y[i] = int(y[i])<nl><tab><tab>t = sum(y)<nl><nl>print(max(S(A),S(B)))","out":"A, B = map(int, input().split())<nl><nl>def S(n):<nl><tab><tab>y = list(str(n))<nl><tab><tab>for i in range(len(y)):<nl><tab><tab><tab>y[i] = int(y[i])<nl><tab><tab><tab>t = sum(y)<nl><nl>print(max(S(A),S(B)))"}
{"in":"s=''<nl>print(s.length)","out":"s=''<nl>print(len(s))"}
{"in":"<nl>X_list = map(int, list(input()).split())<nl>print(X_list)","out":"<nl>X_list = map(int, list(input().split()))<nl>print(X_list)"}
{"in":"S = str(input())<nl><nl>m = len(S)<nl># print(m)<nl><nl>for i in range(m):<nl><tab>x = S[i:]<nl><tab>y = S[:i]<nl><tab># print(x)<nl><tab># print(y)<nl><tab>print(x+y)<nl><tab>r = x+y<nl>r.list()<nl>print(r)","out":"S = str(input())<nl><nl>m = len(S)<nl># print(m)<nl><nl>for i in range(m):<nl><tab>x = S[i:]<nl><tab>y = S[:i]<nl><tab># print(x)<nl><tab># print(y)<nl><tab>print(x+y)<nl><tab>r = x+y<nl>r = list(r)<nl>print(r)"}
{"in":"s=input()<nl><nl>x=s.text[1::2]<nl><nl>print(x)","out":"s=input()<nl><nl>x=s[1::2]<nl><nl>print(x)"}
{"in":"weight=[40,45,50,55,60,65,70]<nl>for x in weight:<nl><tab>print(w)=1.6**2<nl><tab>BMI=x\/1.6**2<nl><tab>print(BMI)","out":"weight=[40,45,50,55,60,65,70]<nl>for x in weight:<nl><tab>print(w)<nl><tab>BMI=x\/1.6**2<nl><tab>print(BMI)"}
{"in":"for i in range(5)<nl><tab>print(\"a\",end=\"\")","out":"for i in range(5):<nl><tab>print(\"a\",end=\"\")"}
{"in":"newdata=[]<nl>for x in data:<nl><tab>newdata.append(x*x)<nl><nl><tab>print(newdata)","out":"newdata=[]<nl>for x in newdata:<nl><tab>newdata.append(x*x)<nl><nl><tab>print(newdata)"}
{"in":"head! boston.csv","out":"!head boston.csv"}
{"in":"plt.hist(df['部屋数'], bins=20)<nl>plt.xlabel('部屋数')<nl>ply.show()","out":"plt.hist(df['部屋数'], bins=20)<nl>plt.xlabel('部屋数')<nl>plt.show()"}
{"in":"<nl>A,B,C = map(int, input().split())<nl><nl>a = [A,B,C]<nl>b = a.sorted()<nl><nl>if b[2]-b[1] == b[1]-b[0]:<nl><tab>print('Yes')<nl><nl>else:<nl><tab>print('No')","out":"<nl>A,B,C = map(int, input().split())<nl><nl>a = [A,B,C]<nl>b = sorted(a)<nl><nl>if b[2]-b[1] == b[1]-b[0]:<nl><tab>print('Yes')<nl><nl>else:<nl><tab>print('No')"}
{"in":"S, T = char(input())<nl>print(T+S)","out":"S, T = chr(input())<nl>print(T+S)"}
{"in":"from scipy.stats import pearsonr<nl><nl>rho　= pearsonr(df['降水量'], df['スギ花粉飛散量'])<nl><nl>print('相関係数:', rho)","out":"from scipy.stats import pearsonr<nl><nl>rho<tab>= pearsonr(df['降水量'], df['スギ花粉飛散量'])<nl><nl>print('相関係数:', rho)"}
{"in":"#やってみよう<nl>x = 30<nl>y = math.sin(30)<nl>prit(y)","out":"#やってみよう<nl>x = 30<nl>y = math.sin(30)<nl>print(y)"}
{"in":"w ＝47.4<nl>h =1.65<nl>BMI=w \/ (h * h)<nl><nl>print(BMI) #","out":"w =47.4<nl>h =1.65<nl>BMI=w \/ (h * h)<nl><nl>print(BMI) #"}
{"in":"from scipy.stats import pearsonr<nl><nl>for column in df.select_dtypes('int64').columns:<nl><tab><tab>r,p=pearsonrr(df[column],df['G3'])<nl><tab><tab>print(f'[column]-G3: ρ=[r]')","out":"from scipy.stats import pearsonr<nl><nl>for column in df.select_dtypes('int64').columns:<nl><tab><tab>r,p=pearsonr(df[column],df['G3'])<nl><tab><tab>print(f'[column]-G3: ρ=[r]')"}
{"in":"def calc(s:str) -> float:<nl><tab>s=\"1+10\"<nl><tab>return float(s)<nl><tab>print(calc(s:str))","out":"def calc(s:str) -> float:<nl><tab>s=\"1+10\"<nl><tab>return float(s)<nl>print(calc(s))"}
{"in":"plt.figure(figsize=(8,8))<nl>plt.scatter(df['部屋数'],df['住宅価格'],alpha=0.5,cplor=pink)<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()","out":"plt.figure(figsize=(8,8))<nl>plt.scatter(df['部屋数'],df['住宅価格'],alpha=0.5,color=\"pink\")<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()"}
{"in":"weights = [40, 45, 50, 55, 60, 65, 70]<nl>h = 1.75<nl>newdata[] #計算したBMIを入れてみる<nl>for w in weights:<nl><tab><tab>BMI = w \/ (h**2)<nl><tab><tab>print(newdata)","out":"weights = [40, 45, 50, 55, 60, 65, 70]<nl>h = 1.75<nl>newdata=[] #計算したBMIを入れてみる<nl>for w in weights:<nl><tab><tab>BMI = w \/ (h**2)<nl><tab><tab>print(newdata)"}
{"in":"for column in de.columns[:-1]:<nl><tab>print(column)<nl><tab>X=df[[column]]<nl><tab>y=df['住宅価格']<nl><tab>model=LinearRegression()<nl><tab>model.fit(X, y)<nl><tab>y_pred=model.predict(X)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print('決定係数(R2):', r2)","out":"for column in df.columns[:-1]:<nl><tab>print(column)<nl><tab>X=df[[column]]<nl><tab>y=df['住宅価格']<nl><tab>model=LinearRegression()<nl><tab>model.fit(X, y)<nl><tab>y_pred=model.predict(X)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print('決定係数(R2):', r2)"}
{"in":"x=1<nl>if x>0: #コロン<nl><tab> print(\"正の数\")　#　字下げ(インデント)<nl>else:　#　そうでなければ<nl><tab> print(\"正の数正でない\")","out":"x=1<nl>if x>0: #コロン<nl><tab> print(\"正の数\")<tab>#<tab>字下げ(インデント)<nl>else:<tab>#<tab>そうでなければ<nl><tab> print(\"正の数正でない\")"}
{"in":"plt.plot(西暦, 降水量)","out":"plt.plot(df[\"西暦\"], df[\"降水量\"])"}
{"in":"plt.boxplot(df['父親の職業')<nl>plt.grid(True)<nl>#plt.xlabel(['G1','G2','G3'])<nl>#plt.ylabel('成績')<nl>plt.show()","out":"plt.boxplot(df['父親の職業'])<nl>plt.grid(True)<nl>#plt.xlabel(['G1','G2','G3'])<nl>#plt.ylabel('成績')<nl>plt.show()"}
{"in":"print(aaaa)","out":"print(\"aaaa\")"}
{"in":"P = input().split()<nl>l = []<nl>for i in range(len(P)):<nl><tab>P[i] = int(P[i])<nl><tab>s = chr(P[i] + 64)<nl><tab>s = s\/lower()<nl><tab>l.append(s)<nl><nl>print(''.join(l))","out":"P = input().split()<nl>l = []<nl>for i in range(len(P)):<nl><tab>P[i] = int(P[i])<nl><tab>s = chr(P[i] + 64)<nl><tab>s = s.lower()<nl><tab>l.append(s)<nl><nl>print(''.join(l))"}
{"in":"class Ratio(object):<nl><tab>a:int<nl><tab>b:int<nl><tab>def __init__(self,a,b=1):<nl><tab><tab>self.a=a\/\/math.gcd(a,b)<nl><tab><tab>self.b=b\/\/math.gcd(a,b)<nl><tab>def __repr__(self):<nl><tab><tab>if self.b==1:<nl><tab><tab><tab>return str(self.a)<nl><tab><tab>return f'{self.a}\/{self.b}'<nl><tab>def add(self,x):<nl><tab><tab>a=self.a<nl><tab><tab>b=self.b<nl><tab><tab>c=x.a<nl><tab><tab>d=x.b<nl><tab><tab>return Ratio(a*d+b*c, b*d)<nl><nl>Ratio(2,4)","out":"class Ratio(object):<nl><tab>a:int<nl><tab>b:int<nl><tab>def _init__(self,a,b=1):<nl><tab><tab>self.a=a\/\/math.gcd(a,b)<nl><tab><tab>self.b=b\/\/math.gcd(a,b)<nl><tab>def _repr__(self):<nl><tab><tab>if self.b==1:<nl><tab><tab><tab>return str(self.a)<nl><tab><tab>return f'{self.a}\/{self.b}'<nl><tab>def add(self,x):<nl><tab><tab>a=self.a<nl><tab><tab>b=self.b<nl><tab><tab>c=x.a<nl><tab><tab>d=x.b<nl><tab><tab>return Ratio(a*d+b*c, b*d)<nl><nl>Ratio(2,4)"}
{"in":"class Counter(object):<nl><tab>counter : int<nl><tab>def __init__(self):<nl><tab><tab>self.counter = 0<nl><tab>def count(self):<tab><tab>#動詞+目的語<nl><tab><tab>self.counter += 1<nl><tab>#def count(self):<nl><tab>#<tab>self.count = 0<nl><tab>def show(self):<nl><tab><tab>print(self.counter)<nl><tab>def __repr__(self):<tab> #オブジェクトが文字列で見える<nl><tab><tab>return f'counter':[self.counter]","out":"class Counter(object):<nl><tab>counter : int<nl><tab>def __init__(self):<nl><tab><tab>self.counter = 0<nl><tab>def count(self):<tab><tab>#動詞+目的語<nl><tab><tab>self.counter += 1<nl><tab>#def count(self):<nl><tab>#<tab>self.count = 0<nl><tab>def show(self):<nl><tab><tab>print(self.counter)<nl><tab>def __repr__(self):<tab> #オブジェクトが文字列で見える<nl><tab><tab>return f'counter: {self.counter}'"}
{"in":"x = BMI<nl>if x < 18.5:<nl><tab>print(\"低体重（やせ）\")<nl><tab>else:<nl><tab><tab>if 18.5 < x < 25<nl><tab><tab><tab> print(\"普通体重\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"肥満\")","out":"x = BMI<nl>if x < 18.5:<nl><tab>print(\"低体重(やせ)\")<nl>else:<nl><tab>if 18.5 < x < 25<nl><tab><tab>print(\"普通体重\")<nl><tab>else:<nl><tab><tab>print(\"肥満\")"}
{"in":"#Hello Worldを出力する<nl>print(\"Hello World\"","out":"#Hello Worldを出力する<nl>print(\"Hello World\")"}
{"in":"if BMI=25.00:<nl><tab>print('太りすぎ')<nl>else:<nl><tab>print('太りすぎでない')","out":"if BMI>=25.00:<nl><tab>print('太りすぎ')<nl>else:<nl><tab>print('太りすぎでない')"}
{"in":"<nl>S,T = map(int,input().split())<nl>combos=[]<nl>for a in range(10):<nl><tab><tab>for b in range(10):<nl><tab><tab><tab><tab>for c in range(10):<nl><tab><tab><tab><tab><tab><tab>if a+b+c <= S and a*b*c <= T:<nl><tab><tab><tab><tab><tab><tab><tab><tab>combs.append((a,b,c))<nl>print(len(combs))","out":"<nl>S,T = map(int,input().split())<nl>combs=[]<nl>for a in range(10):<nl><tab><tab>for b in range(10):<nl><tab><tab><tab><tab>for c in range(10):<nl><tab><tab><tab><tab><tab><tab>if a+b+c <= S and a*b*c <= T:<nl><tab><tab><tab><tab><tab><tab><tab><tab>combs.append((a,b,c))<nl>print(len(combs))"}
{"in":"d = 20060524<nl>while d >=10:<nl> D = list(map(int, str(d)))<nl> print(D)<nl> d = sum(D)<nl> print(d)<nl>if d == 11 or d == 22 or d == 33 or d == 44:<nl><tab><tab>break<nl>print(\"ソールナンバーソールナンバー:\", d)","out":"d = 20060524<nl>while d >=10:<nl><tab>D = list(map(int, str(d)))<nl><tab>print(D)<nl><tab>d = sum(D)<nl><tab>print(d)<nl><tab>if d == 11 or d == 22 or d == 33 or d == 44:<nl><tab><tab>break<nl>print(\"ソールナンバソールナンバー:\", d)"}
{"in":"n=int(input())<nl>a=str(ihput().split())<nl>print(a)<nl>a.sort()<nl>print(a)<nl>b=[]<nl>for i in range(n):<nl><tab>b+=str(i+1)<nl>print(b)","out":"n=int(input())<nl>a=input().split()<nl>print(a)<nl>a.sort()<nl>print(a)<nl>b=[]<nl>for i in range(n):<nl><tab>b+=str(i+1)<nl>print(b)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split())<nl>p=0:<nl>c[0]=0:<nl>C[1]=abs(h[1]-h[0]):<nl><nl>C1[i]=C[i-2]+abs(h[i]-h[i-2])<nl>C2[i]=C[i-1]+abs(h[i]-h[i-1])<nl>C[i]=min(C1,C2)<nl>print(C[N-1])<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split()))<nl>p=0:<nl>c[0]=0:<nl>C[1]=abs(h[1]-h[0]):<nl><nl>C1[i]=C[i-2]+abs(h[i]-h[i-2])<nl>C2[i]=C[i-1]+abs(h[i]-h[i-1])<nl>C[i]=min(C1,C2)<nl>print(C[N-1])<nl>"}
{"in":"plt.figure(figsize=(8,8))<nl>plt.scatter(df['部屋数'],df['住宅価格'],alpha=0,5)<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()","out":"plt.figure(figsize=(8,8))<nl>plt.scatter(df['部屋数'],df['住宅価格'],alpha=0.5)<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()"}
{"in":"if BMI < 18.50 :<nl><tab>print(\"低体重\")<nl>else BMI >= 18.50:<nl><tab><tab>print(\"低体重でない\")","out":"if BMI < 18.50 :<nl><tab>print(\"低体重\")<nl>else:<nl><tab><tab>print(\"低体重でない\")"}
{"in":"for x in deta: <nl>print(x)","out":"for x in deta: <nl><tab>print(x)"}
{"in":"d = 20041108<nl>whlie d >=10: #二桁の時は繰り返す<nl><tab><tab>D = list(map(int , str(d)))<nl><tab><tab>print(D) # 結果を表示<nl><tab><tab>d = sum(D)<nl><tab><tab>print(d) #結果を表示","out":"d = 20041108<nl>while d >=10: #二桁の時は繰り返す<nl><tab><tab>D = list(map(int , str(d)))<nl><tab><tab>print(D) # 結果を表示<nl><tab><tab>d = sum(D)<nl><tab><tab>print(d) #結果を表示"}
{"in":"x = 30<nl>y = math.sin(x","out":"x = 30<nl>y = math.sin(x)"}
{"in":"w = 42<nl>h = 1.55<nl>BMI = w\/(h ** 2)<nl>print('BMI')print(BMI)","out":"w = 42<nl>h = 1.55<nl>BMI = w\/(h ** 2)<nl>print('BMI')<nl>print(BMI)"}
{"in":"$$<nl>h=BMI<nl>w=52<nl>h=1.67<nl>BMI=w\/(h**2)<nl>print(BMI)<nl>print(f'BMI:{BMI:3f}') #小数点以下3桁<nl>$$","out":"h=BMI<nl>w=52<nl>h=1.67<nl>BMI=w\/(h**2)<nl>print(BMI)<nl>print(f'BMI:{BMI:3f}') #小数点以下3桁"}
{"in":"N,A,X,Y=map(int,input().split)<nl>print(X*A+(N-A)*Y)","out":"N,A,X,Y=map(int,input().split())<nl>print(X*A+(N-A)*Y)"}
{"in":"df.pollen.csv()","out":"df = pd.read_csv('pollen.csv')"}
{"in":"[] dh.head()","out":"dh.head()"}
{"in":"W = 46.0<nl>h = 1.50<nl>BMI = w \/ (h:h)<nl>print(BMI) #表示されます","out":"W = 46.0<nl>h = 1.50<nl>BMI = w \/ (h*h)<nl>print(BMI) #表示されます"}
{"in":"def show(lives):<nl><tab>N,M=lives.shape<nl><tab>for y in range(N):<nl><tab><tab>for x in range(M):<nl><tab><tab><tab><tab>c=count(lives,x,y)<nl><tab><tab><tab><tab>if lives[y,x]==1: <nl><tab><tab><tab><tab><tab><tab>if c==2 or c==3: #生存<nl><tab><tab><tab><tab><tab><tab>　　print('🐣',end='')<nl><tab><tab><tab><tab><tab><tab><tab> pass<nl><tab><tab><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab><tab><tab> lives[y,x]=0<nl><tab><tab><tab><tab>elif c==3:<nl><tab><tab><tab><tab><tab>lives[y,x]=1<nl><tab><tab>print()<nl><tab><tab><tab><tab><nl>show(lives)","out":"def show(lives):<nl><tab>N,M=lives.shape<nl><tab>for y in range(N):<nl><tab><tab>for x in range(M):<nl><tab><tab><tab><tab>c=count(lives,x,y)<nl><tab><tab><tab><tab>if lives[y,x]==1: <nl><tab><tab><tab><tab><tab><tab>if c==2 or c==3: #生存<nl><tab><tab><tab><tab><tab><tab><tab><tab>print('🐣',end='')<nl><tab><tab><tab><tab><tab><tab><tab> pass<nl><tab><tab><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab><tab><tab> lives[y,x]=0<nl><tab><tab><tab><tab>elif c==3:<nl><tab><tab><tab><tab><tab>lives[y,x]=1<nl><tab><tab>print()<nl><tab><tab><tab><tab><nl>show(lives)"}
{"in":"tupe(c)","out":"tuple(c)"}
{"in":"ｗ　＝４６．６<nl>ｈ　＝１．６１<nl>BMI　＝ｗ ／ ｈ＊＊２","out":"w<tab>=46.6<nl>h<tab>=1.61<nl>BMI<tab>=w \/ h**2"}
{"in":"N=int(input())<nl>for _ in range(N):<nl><tab>name = input()<nl><tab>if name in d:<nl><tab><tab>d[name]+=1<nl><tab>else:<nl><tab><tab>d[name]=1<nl>max_vote = max(d.values())<nl>for name, vote in d.items():<nl><tab>if vote == max_vote:<nl><tab><tab>print(name)<nl><tab><tab>break","out":"N=int(input())<nl>d={}<nl>for<tab>in range(N):<nl><tab>name = input()<nl><tab>if name in d:<nl><tab><tab>d[name]+=1<nl><tab>else:<nl><tab><tab>d[name]=1<nl>max_vote = max(d.values())<nl>for name, vote in d.items():<nl><tab>if vote == max_vote:<nl><tab><tab>print(name)<nl><tab><tab>break"}
{"in":"d = 2005514<nl>while d >=10:<nl>D =list(map(int, str(d)))<nl>print(D)<nl>d = sum(D)<nl>print(D)","out":"d = 2005514<nl>while d >=10:<nl><tab>D =list(map(int, str(d)))<nl><tab>print(D)<nl><tab>d = sum(D)<nl>print(D)"}
{"in":"atcoder https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl>A,B,=map(int,input().split())<nl>print((A-B)\/3+B)","out":"#atcoder https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl>A,B=map(int,input().split())<nl>print((A-B)\/3+B)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B=(map(int, input().split())<nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl> else:<nl><tab>print(A)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B=map(int, input().split())<nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl>else:<nl><tab>print(A)"}
{"in":"plt.figure(figsize=(13, 23))<nl>i=1<nl>for column in df.columns[:-1]:<nl><tab>for column2 in df.columns[:-1]:<nl><tab><tab>for column3 in df.columns[:-1]:<nl><tab><tab><tab>X = df[[column, column2,column3]] #1つ選ぶ<nl><tab><tab><tab>y = df['住宅価格']<nl><nl><tab><tab>model = LinearRegression()<nl><tab><tab>model.fit(X, y)<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>r2= r2_score(y, y_pred)<nl><tab><tab>print(column,column2,colums3)<nl><tab><tab>print('決定係数(R2):', r2)","out":"plt.figure(figsize=(13, 23))<nl>i=1<nl>for column in df.columns[:-1]:<nl><tab>for column2 in df.columns[:-1]:<nl><tab><tab>for column3 in df.columns[:-1]:<nl><tab><tab><tab>X = df[[column, column2,column3]] #1つ選ぶ<nl><tab><tab><tab>y = df['住宅価格']<nl><nl><tab><tab>model = LinearRegression()<nl><tab><tab>model.fit(X, y)<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>r2= r2_score(y, y_pred)<nl><tab><tab>print(column,column2,column3)<nl><tab><tab>print('決定係数(R2):', r2)"}
{"in":"kogiも忘れずに<nl><nl>import numpy as np<nl>import pandas as pd<nl>import matplotlib.pyplot as plt<nl>import seaborn as sns<nl>try:<nl><tab><tab>import japanize_matplotlib #matplotlibの日本語化<tab><nl>except ModuleNotFoundError:<nl><tab><tab>!pip install japanize_matplotlib<nl><tab><tab>import japanize_matplotlib <nl>sns.set(font=\"IPAexGothic\") #日本語フォント設定<nl>!pip install -q kogi<nl>import kogi<nl>","out":"# kogiも忘れずに<nl><nl>import numpy as np<nl>import pandas as pd<nl>import matplotlib.pyplot as plt<nl>import seaborn as sns<nl>try:<nl><tab><tab>import japanize_matplotlib #matplotlibの日本語化<tab><nl>except ModuleNotFoundError:<nl><tab><tab>!pip install japanize_matplotlib<nl><tab><tab>import japanize_matplotlib <nl>sns.set(font=\"IPAexGothic\") #日本語フォント設定<nl>!pip install -q kogi<nl>import kogi<nl>"}
{"in":"pollen.mean(df['平均気温'])","out":"df['平均気温'].mean()"}
{"in":"class Animal(object):<nl><tab><tab>def face(self):<nl><tab><tab><tab><tab>return '🐽'<nl><tab><tab>def sound(self):<nl><tab><tab><tab><tab>return 'ギャギャ'<nl><tab><tab>def leg(self):<nl><tab><tab><tab><tab>return 4<nl><nl>class Sheep(Animal):<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab><tab>return '🐏'<nl><tab><tab>def sound(self): # Override<nl><tab><tab><tab><tab>return 'メエ～'<nl><nl>class Dog(Animal):<nl><tab><tab>name:str<nl><tab><tab>def __init__(self, name):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab><tab>return f'🐕 {self.name}'<nl><tab><tab>def face(self):<nl><tab><tab><tab><tab>return '🐺'<nl><tab><tab>def sound(self):<nl><tab><tab><tab><tab>return 'バウワウ' # ISOスタンダード<nl><nl>class Gorilla(Animal):<nl><tab><nl><nl>dog = Dog('ピキ')<nl>dog.leg()","out":"class Animal(object):<nl><tab><tab>def face(self):<nl><tab><tab><tab><tab>return '🐽'<nl><tab><tab>def sound(self):<nl><tab><tab><tab><tab>return 'ギャギャ'<nl><tab><tab>def leg(self):<nl><tab><tab><tab><tab>return 4<nl><nl>class Sheep(Animal):<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab><tab>return '🐏'<nl><tab><tab>def sound(self): # Override<nl><tab><tab><tab><tab>return 'メエ~'<nl><nl>class Dog(Animal):<nl><tab><tab>name:str<nl><tab><tab>def __init__(self, name):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab><tab>return f'🐕 {self.name}'<nl><tab><tab>def face(self):<nl><tab><tab><tab><tab>return '🐺'<nl><tab><tab>def sound(self):<nl><tab><tab><tab><tab>return 'バウワウ' # ISOスタンダード<nl><nl>class Gorilla(Animal):<nl><tab><nl><nl>dog = Dog('ピキ')<nl>dog.leg()"}
{"in":"df.select_types('object')","out":"df.select_dtypes('object')"}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc277\/tasks\/abc277_a<nl>N,X=map(int,input().split())<nl>P=list(map(int,input().split())<nl><nl>print(P[3])","out":"# kogi https:\/\/atcoder.jp\/contests\/abc277\/tasks\/abc277_a<nl>N,X=map(int,input().split())<nl>P=list(map(int,input().split()))<nl><nl>print(P[3])"}
{"in":"order_by = ['なし', , 'GP高', 'MS高', ]<nl>sns.boxplot(x=df['学校名'], y=df['最終成績'], order=order_by)<nl>plt.title('学校名が最終成績に与える影響')<nl>plt.xlabel('学校名')<nl>plt.ylabel('成績')<nl>plt.show()","out":"order_by = ['なし', 'GP高', 'MS高', ]<nl>sns.boxplot(x=df['学校名'], y=df['最終成績'], order=order_by)<nl>plt.title('学校名が最終成績に与える影響')<nl>plt.xlabel('学校名')<nl>plt.ylabel('成績')<nl>plt.show()"}
{"in":"for i in range(100)<nl><tab><tab> print(i+1)","out":"for i in range(100):<nl><tab><tab> print(i+1)"}
{"in":"a = ferelibenterhominesidquodvoluntcredunt<nl>len(a)","out":"a = \"ferelibenterhominesidquodvoluntcredunt\"<nl>len(a)"}
{"in":"ｗ　＝４６．６<nl>ｈ　＝１．６１<nl>BMI　＝ｗ<tab>／ ｈ ＊＊ ２","out":"w<tab>=46.6<nl>h<tab>=1.61<nl>BMI<tab>=w<tab>\/ h ** 2"}
{"in":"x = BMI<nl>if x < 18.5:<nl><tab>print(\"低体重（やせ）\")<nl>else:<nl><tab><tab>if 18.5 ≦ x < 25<nl><tab><tab><tab> print(\"普通体重\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"肥満\")","out":"x = BMI<nl>if x < 18.5:<nl><tab>print(\"低体重(やせ)\")<nl>else:<nl><tab><tab>if 18.5 <= x < 25<nl><tab><tab><tab> print(\"普通体重\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"肥満\")"}
{"in":"import math<nl><nl>for w in range(40,100,5):<nl><tab>h= math.sqrt(w\/22.0)<nl><tab>print ('体重', w '身長', h)","out":"import math<nl><nl>for w in range(40,100,5):<nl><tab>h= math.sqrt(w\/22.0)<nl><tab>print ('体重', w, '身長', h)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc272\/tasks\/abc272_b<nl>n,m=map(int,input().split())<nl>a=list()<nl>b=[[1]*n]*n]<nl>for i in range(m):<nl><tab>a=a+[list(map(int,input().split()))]<nl><nl>for j in range(n):<nl><tab>b[j][j]=0<nl><nl><nl><nl>print(a,b)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc272\/tasks\/abc272_b<nl>n,m=map(int,input().split())<nl>a=list()<nl>b=[[1]*n]*n<nl>for i in range(m):<nl><tab>a=a+[list(map(int,input().split()))]<nl><nl>for j in range(n):<nl><tab>b[j][j]=0<nl><nl><nl><nl>print(a,b)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc200\/tasks\/abc200_a<nl>'N'='list(map(int,input().split()))'<nl>print(N)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc200\/tasks\/abc200_a<nl>N=list(map(int,input().split()))<nl>print(N)"}
{"in":"df=(pollen.csv)<nl>df","out":"df = pd.read_csv(\"pollen.csv\")<nl>df"}
{"in":"<nl>N=int(input())<nl>S=list(input())<nl>answer = ''<nl>for letter in len(S):<nl><tab><tab>answer += chr(ord('A') + (ord(letter)-ord('A')+n) % 26)","out":"<nl>N=int(input())<nl>S=list(input())<nl>answer = ''<nl>for letter in S:<nl><tab><tab>answer += chr(ord('A') + (ord(letter)-ord('A')+n) % 26)"}
{"in":"def main():<nl><tab>A=list(map(int,input().split()))<nl><tab>A.sort()<nl>if A[3]-A[2]==A[2]-A[1]:<nl><tab>print(\"Yes\")<nl>else:<nl><tab>print(\"No\")<nl><nl>if<tab>__name__ == '__main__':<nl><tab>main()","out":"def main():<nl><tab>A=list(map(int,input().split()))<nl><tab>A.sort()<nl>if A[3]-A[2]==A[2]-A[1]:<nl><tab>print(\"Yes\")<nl>else:<nl><tab>print(\"No\")<nl><nl>if<tab>_name__ == '__main__':<nl><tab>main()"}
{"in":"<nl>N=int,input()<nl><nl>for i in range (1,10**9):<nl><tab>A=1\/2(2*1+(i-1)*1)<nl><tab>if A>=N:<nl><tab><tab><tab>print(i)","out":"<nl>N=int,input()<nl><nl>for i in range (1,10**9):<nl><tab>A=1\/2*(2*1+(i-1)*1)<nl><tab>if A>=N:<nl><tab><tab><tab>print(i)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split()))<nl>C = [0]*N<nl><nl>C[0]=0<nl>C[1]=abs(h[1]-h[0])<nl><nl>for i in range(2,N):<nl> C1=C[i-2] + abs(h[i]-h[i-2])<nl> C2=C{i-1} + abs(h[i]-h[i-1])<nl> C[i]=min(C1,C2)<nl>print(C[N-1])","out":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split()))<nl>C = [0]*N<nl><nl>C[0]=0<nl>C[1]=abs(h[1]-h[0])<nl><nl>for i in range(2,N):<nl> C1=C[i-2] + abs(h[i]-h[i-2])<nl> C2=C[i-1] + abs(h[i]-h[i-1])<nl> C[i]=min(C1,C2)<nl>print(C[N-1])"}
{"in":"class PersonW（object）:<nl><tab>name: str<nl><tab>height: int<nl><tab>weight: float<nl><tab>def __init__(self，name,height,weight):<nl><tab><tab>self.name = name<nl><tab><tab>self.height=height<nl><tab><tab>self.weight=weight","out":"class PersonW(object):<nl><tab>name: str<nl><tab>height: int<nl><tab>weight: float<nl><tab>def __init__(self,name,height,weight):<nl><tab><tab>self.name = name<nl><tab><tab>self.height=height<nl><tab><tab>self.weight=weight"}
{"in":"x=2<nl>if x>0:<nl><tab>print(\"正\")<nl><tab>else:<nl><tab><tab>if x==0:<nl><tab><tab><tab>print(\"ゼロ\")<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>print(\"負\")","out":"x=2<nl>if x>0:<nl><tab>print(\"正\")<nl>else:<nl><tab>if x==0:<nl><tab><tab>print(\"ゼロ\")<nl><tab>else:<nl><tab><tab>print(\"負\")"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl><nl>A, B,C = map(int, input().split())<nl>if A==B;<nl> print (C)<nl> break:<nl>else if A==C:<nl><tab>print(B)<nl><tab> break:<nl>els:<nl> print(A)<nl><tab>break:<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B=map(int, input().split())<nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl>else:<nl><tab>print(A)"}
{"in":"w＝４４、０<nl>h＝１、６０<nl>BMI＝w \/h**2<nl>print(BMI)","out":"w=44.0<nl>h=1.60<nl>BMI=w \/h**2<nl>print(BMI)"}
{"in":"df=<nl>df.read_csv('pollen.csv')<nl>df.head()","out":"df=pd.read_csv('pollen.csv')<nl>df.head()"}
{"in":"for column in df.columns[:-1]:<nl><tab>print(column)<nl><tab>X = df[['column']]<tab># ひとつ選ぶ<nl><tab>y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fit(X, y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print(f'[column] 決定係数(R2):', r2)","out":"for column in df.columns[:-1]:<nl><tab>print(column)<nl><tab>X = df[[column]]<tab># ひとつ選ぶ<nl><tab>y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fit(X, y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print(f'[column] 決定係数(R2):', r2)"}
{"in":"n= 1\/3<nl>print( Fraction(str(n))","out":"n= 1\/3<nl>print( Fraction(str(n)))"}
{"in":"np.random.<nl>rand(100)","out":"np.random.rand(100)"}
{"in":"math.sin(30","out":"math.sin(30)"}
{"in":"w＝47.4<nl>h=1.65<nl>BMI=w \/ (h * h)<nl><nl>print(BMI) #","out":"w=47.4<nl>h=1.65<nl>BMI=w \/ (h * h)<nl><nl>print(BMI) #"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc137\/tasks\/abc137_a<nl><nl>a, b = map(int, input().split())<nl>c=a+b<nl>d=a-b<nl>e=a*b<nl>print((max)c,d,e)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc137\/tasks\/abc137_a<nl><nl>a, b = map(int, input().split())<nl>c=a+b<nl>d=a-b<nl>e=a*b<nl>print(max(c,d,e))"}
{"in":"print(f'平均値：{df['A'].mean()}')","out":"print(f'平均値:{df['A'].mean()}')"}
{"in":"def show(lives):<nl><tab><tab>N, M = lives.shape<nl><tab><tab>for x in range(M):<nl><tab><tab>","out":"def show(lives):<nl><tab><tab>N, M = lives.shape<nl><tab><tab>for x in range(M):<nl><tab><tab><tab>pass"}
{"in":"col=df.columns[:-1]<nl>y = df['住宅価格']<nl>M_r2=0<nl>for y in range(0,len(col)):<nl><tab>for z in range(y+1,len(col)+1):<nl><tab><tab>X = df[col[y],col[z]]<nl><tab><tab>model = LinearRegression()<nl><tab><tab>model.fit(X, y)<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>if M_r2<r2_score(y, y_pred):<nl><tab><tab><tab>M_r2=r2_score(y, y_pred)<nl><tab><tab><tab><nl>print(M_col,M_col2,M_r2)","out":"col=df.columns[:-1]<nl>y = df['住宅価格']<nl>M_r2=0<nl>for y in range(0,len(col)):<nl><tab>for z in range(y+1,len(col)+1):<nl><tab><tab>X = df[[col[y],col[z]]]<nl><tab><tab>model = LinearRegression()<nl><tab><tab>model.fit(X, y)<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>if M_r2<r2_score(y, y_pred):<nl><tab><tab><tab>M_r2=r2_score(y, y_pred)<nl><tab><tab><tab><nl>print(M_col,M_col2,M_r2)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl>a,b=map(int,input(),split())<nl>c,d=map(int,input(),split())<nl><nl>ans=a*d-b*c<nl>print()","out":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A,B=map(int, input().split()) #決まり文句決まり文句<nl><nl>D=A-B<nl>print((D\/A)*100)<nl>#割引率<nl>"}
{"in":"x=18.5<nl>if X > 25:<nl><tab>print(\"肥満\")<nl>else:<nl><tab>if 18.5 <= x < 25 :<nl><tab><tab>print(\"普通体重\")<nl><tab>else:<nl><tab><tab>print(\"低体重（\"やせ\"))","out":"x=18.5<nl>if X > 25:<nl><tab>print(\"肥満\")<nl>else:<nl><tab>if 18.5 <= x < 25 :<nl><tab><tab>print(\"普通体重\")<nl><tab>else:<nl><tab><tab>print(\"低体重(やせ)\")"}
{"in":"def gcd(a,b):<nl> if b==0:<nl><tab>return a<nl>else:<nl><tab>return gcd(b,a%b)","out":"def gcd(a,b):<nl><tab>if b==0:<nl><tab><tab>return a<nl><tab>else:<nl><tab><tab>return gcd(b,a%b)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc270\/tasks\/abc270_c<nl><nl>import sys<nl> #sys:Pythonのインタプリタや実行環境に関する情報を扱うためのライブラリ<nl>sys.setrecursionlimit(10 ** 6)<nl>#sys.setrecursionlimit()で再帰突入回数の上限を変更できます（デフォルトは通常1000）<nl> <nl>n,x,y = map(int, input().split())<nl>a = [[] for i in range(n+1)]<nl>#n+1個リストの中にリストを入れる<nl> <nl>for i in range(n-1):<nl><tab>u, v = map(int, input().split())<nl><tab>a[u].append(v)<nl><tab>a[v].append(u)<nl><tab>#中のリストのa[x]に数に入っている値が頂点xとつながっている頂点の番号<nl> <nl>paths = []<nl> <nl>def dfs(v, p,i):<nl><tab>i+=1<nl><tab>print(i)<nl><tab>if v == y:<nl><tab><tab>print('if',v,' ',p,' ',y)<nl><tab><tab>return True<nl><tab>else:<nl><tab><tab>print(v,' ',p,' ',y)<nl><tab>for nodes in a[v]:<nl><tab><tab>if nodes == p: continue<nl><tab><tab>if dfs(nodes, v):<nl><tab><tab><tab>paths.append(nodes)<nl><tab><tab><tab>print('pa',paths)<nl><tab><tab><tab>return True<nl><tab>return False<nl> <nl>dfs(x, -1,0)<nl> <nl>paths.reverse()<nl>paths.insert(0,x)<nl> <nl>for val in paths:<nl><tab>print(val, sep=\"\", end=\" \")","out":"#kogi https:\/\/atcoder.jp\/contests\/abc270\/tasks\/abc270_c<nl><nl>import sys<nl> #sys:Pythonのインタプリタや実行環境に関する情報を扱うためのライブラリ<nl>sys.setrecursionlimit(10 ** 6)<nl>#sys.setrecursionlimit()で再帰突入回数の上限を変更できます(デフォルトは通常1000)<nl> <nl>n,x,y = map(int, input().split())<nl>a = [[] for i in range(n+1)]<nl>#n+1個リストの中にリストを入れる<nl> <nl>for i in range(n-1):<nl><tab>u, v = map(int, input().split())<nl><tab>a[u].append(v)<nl><tab>a[v].append(u)<nl><tab>#中のリストのa[x]に数に入っている値が頂点xとつながっている頂点の番号<nl> <nl>paths = []<nl> <nl>def dfs(v, p,i):<nl><tab>i+=1<nl><tab>print(i)<nl><tab>if v == y:<nl><tab><tab>print('if',v,' ',p,' ',y)<nl><tab><tab>return True<nl><tab>else:<nl><tab><tab>print(v,' ',p,' ',y)<nl><tab>for nodes in a[v]:<nl><tab><tab>if nodes == p: continue<nl><tab><tab>if dfs(nodes, v):<nl><tab><tab><tab>paths.append(nodes)<nl><tab><tab><tab>print('pa',paths)<nl><tab><tab><tab>return True<nl><tab>return False<nl> <nl>dfs(x, -1,0)<nl> <nl>paths.reverse()<nl>paths.insert(0,x)<nl> <nl>for val in paths:<nl><tab>print(val, sep=\"\", end=\" \")"}
{"in":"class Counter(object):<nl><tab>counter: int<nl><tab>def __init__(self):<nl><tab><tab>self.counter = 0<nl><tab>def count(self): #動詞＋目的語<nl><tab><tab>self.counter += 1<nl><tab>def add(self.x):<nl><tab><tab>self.counter += x.counter<nl><tab>def reset(self):<nl><tab><tab>self.counter = 0<nl><tab>def show(self):<nl><tab><tab>print(self.counter)<nl><tab>def __repr__(self): #オブジェクトが文字列で見える<nl><tab><tab>return f'counter:　{self.counter}'<nl><tab>def __str__(self): #printの時はこちら<nl><tab><tab>return str(self.counter)","out":"class Counter(object):<nl><tab>counter: int<nl><tab>def __init__(self):<nl><tab><tab>self.counter = 0<nl><tab>def count(self): #動詞+目的語<nl><tab><tab>self.counter += 1<nl><tab>def add(self, x):<nl><tab><tab>self.counter += x.counter<nl><tab>def reset(self):<nl><tab><tab>self.counter = 0<nl><tab>def show(self):<nl><tab><tab>print(self.counter)<nl><tab>def __repr__(self): #オブジェクトが文字列で見える<nl><tab><tab>return f'counter:<tab>{self.counter}'<nl><tab>def __str__(self): #printの時はこちら<nl><tab><tab>return str(self.counter)"}
{"in":"説明変数: Index(['犯罪率', '緑地', '工場', '川近', '大気汚染', '部屋数', '築年', '通勤', <nl><tab><tab>'交通', '資産税', '教員比','低所得率'], dtype='object') 次元: (506, 12)<nl>MSE:<tab>22.429681439489933<nl>R2 0.7343070437613075","out":"説明変数: Index(['犯罪率', '緑地', '工場', '川近', '大気汚染', '部屋数', '築年', '通勤', <nl><tab><tab>'交通', '資産税', '教員比','低所得率'], dtype='object') 次元: (506, 12)<nl># MSE:<tab>22.429681439489933<nl># R2 0.7343070437613075"}
{"in":"plt.plot('平均気温', '降水量’)","out":"plt.plot(df['平均気温'], df['降水量'])"}
{"in":"train.loc[:, 'TicketFreq'] = train.groupby(['Ticket'])['PassengerId'].transform('count')<nl>train.query(\"train\"').groupby(['TicketFreq'])['Survived'].agg(['mean','count'])","out":"train.loc[:, 'TicketFreq'] = train.groupby(['Ticket'])['PassengerId'].transform('count')<nl>train.query(\"train\").groupby(['TicketFreq'])['Survived'].agg(['mean','count'])"}
{"in":"N=int(input())<nl>S=list(map(int,input().split()))<nl><nl>ans=0<nl>for s in S:<nl><tab>check=0<nl> <nl><tab><tab><tab>if 4*a*b+3*(a+b)==s:<nl><tab><tab><tab><tab>ans+=1<nl><tab><tab><tab><tab>check=1<nl><tab><tab><tab><tab>break<nl><tab><tab>if check==1:<nl><tab><tab><tab>break<nl>print(N-ans)","out":"N=int(input())<nl>S=list(map(int,input().split()))<nl><nl>ans=0<nl>for s in S:<nl><tab>check=0<nl> <nl><tab>if 4*a*b+3*(a+b)==s:<nl><tab><tab><tab><tab>ans+=1<nl><tab><tab><tab><tab>check=1<nl><tab><tab><tab><tab>break<nl><tab>if check==1:<nl><tab><tab><tab>break<nl>print(N-ans)"}
{"in":"ply.plot(weights,newdata)<nl>plt.xlabel('weights')<nl>plt.ylabel('newdata')<nl>plt.legend()<nl>plt.show","out":"plt.plot(weights,newdata)<nl>plt.xlabel('weights')<nl>plt.ylabel('newdata')<nl>plt.legend()<nl>plt.show"}
{"in":"N,M=map(int,input().split())<nl>A=list(input() for _ in range(2*N))<nl>results=[[0,i] for i in range(2*N)]<nl><nl>#ラウンド<nl>for j in range(M):<nl><tab>print(results)<nl><tab>for i in range(N):<nl><tab><tab>X=results[2*i][1]#一人目<nl><tab><tab>Y=results[2*i+1][1]#二人目<nl><nl><tab><tab>x=A[X][j]#一人目の手<nl><tab><tab>y=A[Y][j]#二人目の手<nl><nl><tab><tab>if x==\"G\" and y==\"C\":<nl><tab><tab><tab>results[X][0]+=1<nl><tab><tab>elif x==\"C\" and y==\"P\":<nl><tab><tab><tab>results[X][0]+=1<nl><tab><tab>elif x==\"P\" and y==\"G\":<nl><tab><tab><tab>results[X][0]+=1<nl><tab><tab>elif x==y:<nl><tab><tab><tab>pass<nl><tab><tab>else:<nl><tab><tab><tab>results[Y][0]+=1<nl><tab><tab>print(resulta)<nl><tab>results.sort(reverse=True)<nl><nl><nl>for i in range(2*N):<nl><tab>print(results[i][1]+1)","out":"N,M=map(int,input().split())<nl>A=list(input() for<tab>in range(2*N))<nl>results=[[0,i] for i in range(2*N)]<nl><nl>#ラウンド<nl>for j in range(M):<nl><tab>print(results)<nl><tab>for i in range(N):<nl><tab><tab>X=results[2*i][1]#一人目<nl><tab><tab>Y=results[2*i+1][1]#二人目<nl><nl><tab><tab>x=A[X][j]#一人目の手<nl><tab><tab>y=A[Y][j]#二人目の手<nl><nl><tab><tab>if x==\"G\" and y==\"C\":<nl><tab><tab><tab>results[X][0]+=1<nl><tab><tab>elif x==\"C\" and y==\"P\":<nl><tab><tab><tab>results[X][0]+=1<nl><tab><tab>elif x==\"P\" and y==\"G\":<nl><tab><tab><tab>results[X][0]+=1<nl><tab><tab>elif x==y:<nl><tab><tab><tab>pass<nl><tab><tab>else:<nl><tab><tab><tab>results[Y][0]+=1<nl><tab><tab>print(results)<nl><tab>results.sort(reverse=True)<nl><nl><nl>for i in range(2*N):<nl><tab>print(results[i][1]+1)"}
{"in":"d=20070308<nl>while d >=10: #二桁野ときは繰り返す<tab><tab><nl>　D=list(map(int,str(d)))<nl><tab>print(D)<nl><tab>d=sum(D)<nl><tab>print(d)<nl>if d==11 or d==22 or d==33 or d==44:<nl><tab>break#条件を満たしたらループを抜ける<nl><tab>print('ソールナンバー：',d)","out":"d=20070308<nl>while d >=10: #二桁野ときは繰り返す<tab><tab><nl><tab>D=list(map(int,str(d)))<nl><tab>print(D)<nl><tab>d=sum(D)<nl><tab>print(d)<nl>if d==11 or d==22 or d==33 or d==44:<nl><tab>break#条件を満たしたらループを抜ける<nl><tab>print('ソールナンバー:',d)"}
{"in":"a =1<nl>for num in range(10):<nl><tab><tab>a += 1\/(4*(num+1+1)<nl><tab><tab>a -= 1\/(4*(num+1)-1)<nl>print(4*a)","out":"a =1<nl>for num in range(10):<nl><tab><tab>a += 1\/(4*(num+1)+1)<nl><tab><tab>a -= 1\/(4*(num+1)-1)<nl>print(4*a)"}
{"in":"モデルを作りたい","out":"#モデルを作りたい"}
{"in":"s,t=input(),split()<nl>print(s+t)","out":"<nl>a,b=input().split()<nl>x=0<nl><nl>for i in range(min(len(a),len(b))):<nl><nl><tab>if int(a[-i-1]+b[-i-1])>=10:<nl><tab><tab>print('Hard')<nl><tab><tab>x=1<nl><tab><tab>break<nl>if x==0:<nl><tab>print('Easy')"}
{"in":"d = 20080113<nl><nl>while d >=10: #二桁の時は繰り返す<nl>　　D = list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d = sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d == 11 or d == 22 or d == 33 or d == 44 :<nl><tab><tab><tab>break #条件を満たしたらループを抜ける","out":"d = 20080113<nl><nl>while d >=10: #二桁の時は繰り返す<nl><tab><tab>D = list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d = sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d == 11 or d == 22 or d == 33 or d == 44 :<nl><tab><tab><tab>break #条件を満たしたらループを抜ける"}
{"in":"ｗ ＝46.4<nl>ｈ ＝1.61<nl>BMI ＝ W \/ H ** 2<nl>print(BMI)","out":"w =46.4<nl>h =1.61<nl>BMI = W \/ H ** 2<nl>print(BMI)"}
{"in":"class Ratio(object):<nl><tab>a:int<nl><tab>b:int<nl><tab>def __init__(self,a,b=1):<nl><tab><tab>self.a = a \/\/ math.gcd(a,b)<nl><tab><tab>self.b = b \/\/ math.gcd(a,b)<nl><tab>def __repr__(self):<nl><tab><tab>if self.b==1:<nl><tab><tab><tab>return str(self.a)<nl><tab><tab>return f'{self.a}\/{self.b}'<nl><tab>def add(self,x):<nl><tab><tab>a=self.a<nl><tab><tab>b=self.b<nl><tab><tab>c=x.a<nl><tab><tab>d=x.b<nl><tab><tab>return Ratio(a*d+b*c, b*d)<nl><nl>Ratio(2,4)","out":"class Ratio(object):<nl><tab>a:int<nl><tab>b:int<nl><tab>def _init__(self,a,b=1):<nl><tab><tab>self.a = a \/\/ math.gcd(a,b)<nl><tab><tab>self.b = b \/\/ math.gcd(a,b)<nl><tab>def _repr__(self):<nl><tab><tab>if self.b==1:<nl><tab><tab><tab>return str(self.a)<nl><tab><tab>return f'{self.a}\/{self.b}'<nl><tab>def add(self,x):<nl><tab><tab>a=self.a<nl><tab><tab>b=self.b<nl><tab><tab>c=x.a<nl><tab><tab>d=x.b<nl><tab><tab>return Ratio(a*d+b*c, b*d)<nl><nl>Ratio(2,4)"}
{"in":"plt.plot(x, y)<nl>grid(x, y)","out":"plt.plot(x, y)<nl>plt.grid(True)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split())<nl>C=[0]*N<nl><nl>C[0]=0<nl>C[1]=abs(h[1]-h[0]):<nl>for i<tab>in range(2,N):<nl>C1=C[i-2]+abs(h[i]-h[i-2])<nl>C2=C[i-1]+abs(h[i]-h[i-1])<nl>C[i]=min(C1,C2)<nl>print(C[N-1])<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split()))<nl>C=[0]*N<nl><nl>C[0]=0<nl>C[1]=abs(h[1]-h[0]):<nl>for i<tab>in range(2,N):<nl>C1=C[i-2]+abs(h[i]-h[i-2])<nl>C2=C[i-1]+abs(h[i]-h[i-1])<nl>C[i]=min(C1,C2)<nl>print(C[N-1])<nl>"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_b<nl>s = [input()) for _ in range(10)]<nl><nl>a = []<nl>b = []<nl>for i in range(10):<nl><tab>for j in range(10):<nl><tab><tab>if s[i][j]=='#':<nl><tab><tab><tab>a.append(i+1)<nl><tab><tab><tab>b.append(j+1)<nl>print(a[0], a[-1])<nl>print(b[0], b[-1])<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_b<nl>s = [input() for _ in range(10)]<nl><nl>a = []<nl>b = []<nl>for i in range(10):<nl><tab>for j in range(10):<nl><tab><tab>if s[i][j]=='#':<nl><tab><tab><tab>a.append(i+1)<nl><tab><tab><tab>b.append(j+1)<nl>print(a[0], a[-1])<nl>print(b[0], b[-1])<nl>"}
{"in":"X = df[['GENDER_num', 'AGE', 'SMOKING', <nl><tab><tab><tab><tab>'CHRONIC DISEASE',<tab>'WHEEZING', 'ALCOHOL CONSUMING',<nl><tab><tab><tab><tab>, 'CHEST PAIN']] <nl>y = df['LUNG_CANCER_num']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(4,4))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 30)<nl>r2= r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)","out":"X = df[['GENDER_num', 'AGE', 'SMOKING', <nl><tab><tab><tab><tab>'CHRONIC DISEASE',<tab>'WHEEZING', 'ALCOHOL CONSUMING',<nl><tab><tab><tab><tab>'CHEST PAIN']] <nl>y = df['LUNG_CANCER_num']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(4,4))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 30)<nl>r2= r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)"}
{"in":"x=int(input())<nl>n=1<nl>sum=n(n+1)\/2<nl>while sum<x:<nl><tab>print(n)<nl><tab>i+=1","out":"x=int(input())<nl>n=1<nl>sum=n*(n+1)\/2<nl>while sum<x:<nl><tab>print(n)<nl><tab>i+=1"}
{"in":"# %%atcoder https:\/\/atcoder.jp\/contests\/abc192\/tasks\/abc192_c <nl><nl>def g1(x) :<nl><tab>str_x_list = list(str(x))<nl><tab>str_x_list__.reverse()<nl><tab>print(str_x_list)<nl><nl>N, K = map(int, input().split())<nl>g1(N)","out":"# %%atcoder https:\/\/atcoder.jp\/contests\/abc192\/tasks\/abc192_c <nl><nl>def g1(x) :<nl><tab>str_x_list = list(str(x))<nl><tab>str_x_list.reverse()<nl><tab>print(str_x_list)<nl><nl>N, K = map(int, input().split())<nl>g1(N)"}
{"in":"<nl>H, W = map(int, input().split())<nl>A=[]<nl>for h in H:<nl><tab><tab>w = list(map(int, input().split()))<nl><tab><tab>A.append(w)<nl>print(A)","out":"<nl>H, W = map(int, input().split())<nl>A=[]<nl>for h in range(H):<nl><tab><tab>w = list(map(int, input().split()))<nl><tab><tab>A.append(w)<nl>print(A)"}
{"in":"sum〔animal.leg() for animal in animals〕<nl><tab>","out":"sum([animal.leg() for animal in animals)])<nl><tab>"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc149\/tasks\/abc149_a<nl><nl>A,B=int,input().split()<nl>D = A−B<nl>print(32**D)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc149\/tasks\/abc149_a<nl><nl>A,B=map(int, input().split())<nl>D = A−B<nl>print(32**D)"}
{"in":"for i,x in enumerate(InfiniteZero()):<nl><tab>print(i,x)<nl><tab>if i > 100:<nl><tab>print()","out":"for i,x in enumerate(InfiniteZero()):<nl><tab>print(i,x)<nl><tab>if i > 100:<nl><tab><tab>print()"}
{"in":"print(\"Hello World\"<tab> ","out":"print(\"Hello World\")"}
{"in":"integrate(log(x+1),(x,0,1)","out":"integrate(log(x+1),(x,0,1))"}
{"in":"N,Q=map(int,input().split())<nl>for i in range(N):<nl><tab>map(int(input().split())<nl>for k in range(Q):<nl><tab>map(int(input().split())","out":"N,Q=map(int,input().split())<nl>for i in range(N):<nl><tab>map(int(input().split()))<nl>for k in range(Q):<nl><tab>map(int(input().split()))"}
{"in":"#内積<nl><nl>N=int(input())<nl>A=list(map(int,input().split()))<nl>B=list(map(int,input().split()))<nl>C=0<nl><nl>for i in range(N):<nl><tab><tab>C+=A[i]*B[i]<nl><nl>if c==0:<nl><tab>print('Yes')<nl>else:<nl><tab>print('No')","out":"#内積<nl><nl>N=int(input())<nl>A=list(map(int,input().split()))<nl>B=list(map(int,input().split()))<nl>C=0<nl><nl>for i in range(N):<nl><tab><tab>C+=A[i]*B[i]<nl><nl>if C==0:<nl><tab>print('Yes')<nl>else:<nl><tab>print('No')"}
{"in":"x=-1<nl>if x > 0:<nl><tab><tab>print(\"正の数\")<nl>elif:<nl><tab><tab><tab>print(\"正の数デナイ\")","out":"x=-1<nl>if x > 0:<nl><tab><tab>print(\"正の数\")<nl>else:<nl><tab><tab>print(\"正の数デナイ\")"}
{"in":"<nl>a,b = map(str,input().split())<nl>A = a*(int(b))<nl>B = b*(int(a))<nl><nl>list = [A,B]<nl>x = soeted(list)<nl>print(x[0])","out":"<nl>a,b = map(str,input().split())<nl>A = a*(int(b))<nl>B = b*(int(a))<nl><nl>list = [A,B]<nl>x = sorted(list)<nl>print(x[0])"}
{"in":"N=int(input())<nl>S=list(map(int, input().split()))<nl><nl>AREA=set()<nl><nl>for a in range(1,17):<nl><tab>for b in range(1,17):<nl><tab><tab>S=4*a*b+3*a+3*b<nl><tab><tab>AREA.add(S)<nl><tab><tab>#print(f'(a,b)=({a},{b})',S)<nl>for s in S:<nl><tab>if s not in AREA:<nl><tab><tab>c+=1<nl><nl>print(c)","out":"N=int(input())<nl>S=list(map(int, input().split()))<nl><nl>AREA=set()<nl><nl>for a in range(1,17):<nl><tab>for b in range(1,17):<nl><tab><tab>s=4*a*b+3*a+3*b<nl><tab><tab>AREA.add(s)<nl><tab><tab>#print(f'(a,b)=({a},{b})',S)<nl>for s in S:<nl><tab>if s not in AREA:<nl><tab><tab>c+=1<nl><nl>print(c)"}
{"in":"class PersonD(object):<nl><tab>def __init__(self, name, year, month, day):<nl><tab><tab>self.name = name<nl><tab><tab>self.year = year<nl><tab><tab>self.month = month<nl><tab><tab>self.day = day<nl><tab>def __repr__(self):<nl><tab><tab>return str ([self.name, self.year, self.month, self.day])<nl><tab>def age(self):<nl><tab><tab>return 2022 - self.year<nl><tab>def deff(self,p):<nl><tab><tab>return abs(self.age() - p.age())<nl><nl><tab>p = PersonD(\"かんな\", 1999, 2, 3)<nl><tab>p2 = PersonD(\"く\", 1972, 12, 19)<nl><tab>p.age()<nl><tab>p.diff(p2)","out":"class PersonD(object):<nl><tab>def _init__(self, name, year, month, day):<nl><tab><tab>self.name = name<nl><tab><tab>self.year = year<nl><tab><tab>self.month = month<nl><tab><tab>self.day = day<nl><tab>def _repr__(self):<nl><tab><tab>return str ([self.name, self.year, self.month, self.day])<nl><tab>def age(self):<nl><tab><tab>return 2022 - self.year<nl><tab>def deff(self,p):<nl><tab><tab>return abs(self.age() - p.age())<nl><nl><tab>p = PersonD(\"かんな\", 1999, 2, 3)<nl><tab>p2 = PersonD(\"く\", 1972, 12, 19)<nl><tab>p.age()<nl><tab>p.diff(p2)"}
{"in":"X = df[['\t低所得率','教員比']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(6,6))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)","out":"X = df[['低所得率','教員比']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(6,6))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc200\/tasks\/abc200_a<nl>N=;ist(map(int,input().split()))<nl>print(N)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc200\/tasks\/abc200_a<nl>N=list(map(int,input().split()))<nl>print(N)"}
{"in":"Sx,Sy,Gx,Gy=map(int, input().split())<nl>#Sy=-Sxa+b<nl>#Gy=Gxa+b<nl>#Sy-Gy=-(Sx+Gx)a<nl>#a=<nl>#b=Sx((Sy-Gy)\/-(Sx+Gx))<nl>x=((-Sx(Sy-Gy)\/(Sx+Gx))\/((Sy-Gy)\/(-Sx-Gx)))<nl>print('{:.10f}'.format(x))<nl>","out":"Sx,Sy,Gx,Gy=map(int, input().split())<nl>#Sy=-Sxa+b<nl>#Gy=Gxa+b<nl>#Sy-Gy=-(Sx+Gx)a<nl>#a=<nl>#b=Sx((Sy-Gy)\/-(Sx+Gx))<nl>x=((-Sx*(Sy-Gy)\/(Sx+Gx))\/((Sy-Gy)\/(-Sx-Gx)))<nl>print('{:.10f}'.format(x))<nl>"}
{"in":"if BMI < 18.50:<nl>print(\"低体重\")<nl>else BMI >= 18.50:<nl>print(\"低体重でない\")","out":"if BMI < 18.50:<nl><tab>print(\"低体重\")<nl>else:<nl><tab>print(\"低体重でない\")"}
{"in":"def calc(s: str)->float:<nl><tab>a, b = map(float, s.split('+')<nl><tab>return a+b<nl><tab><tab>","out":"def calc(s: str)->float:<nl><tab>a, b = map(float, s.split('+'))<nl><tab>return a+b<nl><tab><tab>"}
{"in":"def gcd(a,b):<nl>if b==0:<nl><tab>return a<nl>else:<nl><tab>return gcd(b,a%b)<nl> <nl><tab>acd(6215,4746)","out":"def gcd(a,b):<nl><tab>if b==0:<nl><tab><tab>return a<nl><tab>else:<nl><tab><tab>return gcd(b,a%b)<nl> <nl>gcd(6215,4746)"}
{"in":"if BMI < 22.2 :<nl><tab>print(肥満)<nl>else :<nl><tab>print(肥満ではない) <nl><tab>","out":"if BMI < 22.2 :<nl><tab>print(\"肥満\")<nl>else :<nl><tab>print(\"肥満ではない\") <nl><tab>"}
{"in":"S=str(input())<nl>A=[]<nl>for i in S:<nl><tab>if i=='0':<nl><tab><tab>A.append(0)<nl><tab>if i=='1':<nl><tab><tab>A.append(1)<nl><tab>if i=='6':<nl><tab><tab>A.append(9)<nl><tab>if i=='8':<nl><tab><tab>A.append(8)<nl><tab>if i=='9':<nl><tab><tab>A.append(6)<nl>print(''.sorted(int(A)))<nl><tab><nl>","out":"S=str(input())<nl>A=[]<nl>for i in S:<nl><tab>if i=='0':<nl><tab><tab>A.append(0)<nl><tab>if i=='1':<nl><tab><tab>A.append(1)<nl><tab>if i=='6':<nl><tab><tab>A.append(9)<nl><tab>if i=='8':<nl><tab><tab>A.append(8)<nl><tab>if i=='9':<nl><tab><tab>A.append(6)<nl>print('', sorted(int(A)))<nl><tab><nl>"}
{"in":"for x in data: #xにはデータ列の中の要素が順番に入る<nl>print(x)","out":"for x in data: #xにはデータ列の中の要素が順番に入る<nl><tab>print(x)"}
{"in":"sns.set(context=df['西暦','降水量'])","out":"sns.set(context=df[['西暦','降水量']])"}
{"in":"K=int(input())<nl>S=str(input())<nl>if lens(K)>lens(S):<nl><tab>print(S)<nl>else:<nl><tab>S[1:K+1:]+('...')","out":"K=int(input())<nl>S=str(input())<nl>if len(K)>len(S):<nl><tab>print(S)<nl>else:<nl><tab>S[1:K+1:]+('...')"}
{"in":"print(hello)","out":"print(\"hello\")"}
{"in":"A,B=map()(int,input().split))<nl><nl>print(((A-B)\/3)+B)","out":"A,B=map(int,input().split())<nl><nl>print(((A-B)\/3)+B)"}
{"in":"columns=['学校名', '性別', '年齢', '住所', '兄弟姉妹', '住居',<nl><tab><tab>'母学歴', '父学歴', '母職業', '父職業',<nl><tab><tab>'進学理由', '保護者', '通学時間', '学習時間',<nl><tab><tab>'落第数', '奨学金', '親もち', '塾', '部活', <nl><tab><tab>'幼稚園', '大学', 'ネット', '恋人', '家族', <nl><tab><tab>'自由時間', '外出', 'アルコール', 'パリピ',<nl><tab><tab>'健康状態', '欠席日', 'G1', 'G2', 'G3']<nl><tab><tab>df.colmns=columns","out":"columns=['学校名', '性別', '年齢', '住所', '兄弟姉妹', '住居',<nl><tab><tab>'母学歴', '父学歴', '母職業', '父職業',<nl><tab><tab>'進学理由', '保護者', '通学時間', '学習時間',<nl><tab><tab>'落第数', '奨学金', '親もち', '塾', '部活', <nl><tab><tab>'幼稚園', '大学', 'ネット', '恋人', '家族', <nl><tab><tab>'自由時間', '外出', 'アルコール', 'パリピ',<nl><tab><tab>'健康状態', '欠席日', 'G1', 'G2', 'G3']<nl>df.colmns=columns"}
{"in":"sorted(df['平均気温']).ascending()","out":"sorted(df['平均気温'], reverse=True)"}
{"in":"for colum in df.columns[:-1]:<nl><tab>X = df[column]<nl><tab>y = df['住宅価格']<nl><tab>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)","out":"for column in df.columns[:-1]:<nl><tab>X = df[column]<nl><tab>y = df['住宅価格']<nl><tab>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)"}
{"in":"from sklearn.preprocessing import StandardScaler<nl>sc = StandardScaler()<nl>X = sc.fit_transform(X_train_all[X_train_all.columns[1:]])<tab># スケーリング<nl><nl>pca = PCA(n_components=2)<tab># ２次元に<nl>df = pd.DataFrame(pca.fit_transform(X), columns=['pc1', 'pc2'])<nl>df = pd.concat([X_train_all[['target']], df], axis=1)<nl><nl>plt.figure(figsize=(7, 7))<nl>sns.scatterplot(data=df3, x='pc1', y='pc2', hue='target')<nl>plt.show()<nl>","out":"from sklearn.preprocessing import StandardScaler<nl>sc = StandardScaler()<nl>X = sc.fit_transform(X_train_all[X_train_all.columns[1:]])<tab># スケーリング<nl><nl>pca = PCA(n_components=2)<tab># 2次元に<nl>df = pd.DataFrame(pca.fit_transform(X), columns=['pc1', 'pc2'])<nl>df = pd.concat([X_train_all[['target']], df], axis=1)<nl><nl>plt.figure(figsize=(7, 7))<nl>sns.scatterplot(data=df3, x='pc1', y='pc2', hue='target')<nl>plt.show()<nl>"}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl>C=(A-B)\/3+B #平均血圧<nl>A,B=input(int())<nl>print(C)<nl>","out":"# kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl>A,B=input(int())<nl>C=(A-B)\/3+B #平均血圧<nl>print(C)<nl>"}
{"in":"for column in df.columns:<nl><tab>rho = corr(df[column], df['部屋数'])<nl><tab>print(f'{column}-価格: ρ={}')","out":"for column in df.columns:<nl><tab>rho = corr(df[column], df['部屋数'])<nl><tab>print(f'{column}-価格: ρ={rho}')"}
{"in":"S = str(input())<nl><nl>m = len(S)<nl># print(m)<nl><nl>for i in range(m):<nl><tab>x = S[i:]<nl><tab>y = S[:i]<nl><tab># print(x)<nl><tab># print(y)<nl><tab># print(x+y)<nl><tab>b = []<nl><tab>r = x+y<nl><tab>b.append(r)<nl><tab># print(r)<nl><tab>print(b,end=',')<nl><tab>list(b)<nl><tab>pirnt(b)<nl># max_b = max(b)<nl># min_b = min(b)<nl># print(min_b)<nl># print(max_b)","out":"S = str(input())<nl><nl>m = len(S)<nl># print(m)<nl><nl>for i in range(m):<nl><tab>x = S[i:]<nl><tab>y = S[:i]<nl><tab># print(x)<nl><tab># print(y)<nl><tab># print(x+y)<nl><tab>b = []<nl><tab>r = x+y<nl><tab>b.append(r)<nl><tab># print(r)<nl><tab>print(b,end=',')<nl><tab>list(b)<nl><tab>print(b)<nl># max_b = max(b)<nl># min_b = min(b)<nl># print(min_b)<nl># print(max_b)"}
{"in":"a\/norm(a)<nl>array(0.802,0.535,0.267)","out":"a\/norm(a)<nl>#array([0.802,0.535,0.267])"}
{"in":"# sample_list = keys_list<nl># Series = df_keys['keys']<nl><nl># S = []<nl># for _ in range(len(sample_list)):<nl>#<tab> S.append([])<nl>mean_list_all = []<nl>for key in Series:<nl><tab>str_list, num_list = data_sep(key)<nl><tab>for i in range(len(str_list)):<nl><tab><tab>s = str_list[i]<nl><tab><tab>num = num_list[i]<nl><tab><tab># print(i,s,num)<nl><tab><tab>for j in range(len(sample_list)) : <nl><tab><tab><tab>if s == sample_list[j]:<nl><tab><tab><tab><tab># print(s)<nl><tab><tab><tab><tab>S[j].append(num)<nl><tab># print(s,S)<nl><tab>mean_lists = [mean_list(S[k]) for k in range(len(sample_list))]<nl><tab>print(mean_lists)<nl><tab>mean_list_all.append(mean_lists)<nl><nl>","out":"# sample_list = keys_list<nl># Series = df_keys['keys']<nl><nl># S = []<nl># for<tab>in range(len(sample_list)):<nl>#<tab> S.append([])<nl>mean_list_all = []<nl>for key in Series:<nl><tab>str_list, num_list = data_sep(key)<nl><tab>for i in range(len(str_list)):<nl><tab><tab>s = str_list[i]<nl><tab><tab>num = num_list[i]<nl><tab><tab># print(i,s,num)<nl><tab><tab>for j in range(len(sample_list)) : <nl><tab><tab><tab>if s == sample_list[j]:<nl><tab><tab><tab><tab># print(s)<nl><tab><tab><tab><tab>S[j].append(num)<nl><tab># print(s,S)<nl><tab>mean_lists = [mean_list(S[k]) for k in range(len(sample_list))]<nl><tab>print(mean_lists)<nl><tab>mean_list_all.append(mean_lists)<nl><nl>"}
{"in":"animals = [Chikin(), Sheep(), Dog('HAchi')]","out":"animals = [Chiken(), Sheep(), Dog('HAchi')]"}
{"in":"s=\"1+10\"<nl>float(:s[len(\"+\")])","out":"s=\"1+10\"<nl>float(s[:len(\"+\")])"}
{"in":"d = 20090723<nl>while d >=10:<nl>D ＝list(map(intr)","out":"d = 20090723<nl>while d >=10:<nl><tab>D=list(map(int, input().split()))"}
{"in":"N = int(input())<nl>S = input()<nl>ss = [] #からのリストを追加<nl>for c in S:<nl><tab>a = ord(c) + N<nl><tab>if a >= ord('Z'):<nl><tab><tab>a -= ord('Z') + ord('A') - 1<nl><tab>ss.apend(chr(a)) #リストに追加<nl><tab>print(''.join(ss)) #リストを文字列に","out":"N = int(input())<nl>S = input()<nl>ss = [] #からのリストを追加<nl>for c in S:<nl><tab>a = ord(c) + N<nl><tab>if a >= ord('Z'):<nl><tab><tab>a -= ord('Z') + ord('A') - 1<nl><tab>ss.append(chr(a)) #リストに追加<nl><tab>print(''.join(ss)) #リストを文字列に"}
{"in":"send_slack('おはよう'","out":"send_slack('おはよう')"}
{"in":"bins = 20<nl>k = (df['住宅価格'].max() - df['住宅価格'].min()) \/ bins<tab># 区間幅<nl>x = np.linspace(df['住宅価格'].min(), df['住宅価格'].max(), 100)<nl>y = norm.pdf(x, df['住宅価格'].mean(), df['住宅価格'].std())* len(df['住宅価格']) * k<nl><nl>plt.hist(df['住宅価格'], bins=bins)<tab># ヒストグラム<nl>plt.plot(x, y, linestyle= solid) # 確率密度関数<nl>plt.show()","out":"bins = 20<nl>k = (df['住宅価格'].max() - df['住宅価格'].min()) \/ bins<tab># 区間幅<nl>x = np.linspace(df['住宅価格'].min(), df['住宅価格'].max(), 100)<nl>y = norm.pdf(x, df['住宅価格'].mean(), df['住宅価格'].std())* len(df['住宅価格']) * k<nl><nl>plt.hist(df['住宅価格'], bins=bins)<tab># ヒストグラム<nl>plt.plot(x, y, linestyle= \"solid\") # 確率密度関数<nl>plt.show()"}
{"in":"df['平均気温'].(5)","out":"df['平均気温'].head(5)"}
{"in":"if BMI < 18.50 :<nl><tab>print(\"低体重\")<nl><tab>elif<nl><tab><tab>print(\"低体重でない\")","out":"if BMI < 18.50 :<nl><tab>print(\"低体重\")<nl>else:<nl><tab>print(\"低体重でない\")"}
{"in":"X = train[[\"likes\",\"dislikes\", \"comment_count\"]<nl>y = train[\"y\"]","out":"X = train[[\"likes\",\"dislikes\", \"comment_count\"]]<nl>y = train[\"y\"]"}
{"in":"sns.set(font=\"IPAexGothic\")<tab># 文字化けしたら<nl>sns.countplot(x='G3',hue='性別', data=df, color=\"#ffadad\", color=\"#87CEFA\")<nl>plt.title('性別ごとの成績分布')<nl>plt.xlabel('G3')<nl>plt.ylabel('Count')<nl>plt.show()","out":"sns.set(font=\"IPAexGothic\")<tab># 文字化けしたら<nl>sns.countplot(x='G3',hue='性別', data=df, color=\"#ffadad\")<nl>plt.title('性別ごとの成績分布')<nl>plt.xlabel('G3')<nl>plt.ylabel('Count')<nl>plt.show()"}
{"in":"def sn(d): #関数 sn(d)を定義する<nl><tab><tab>while d > 9:<nl><tab><tab><tab>D=list(map(int, str(d)))<nl><tab><tab><tab>d=sum(D)<nl><tab><tab><tab>if d==11 or d==22 or d==33 or d=44:<nl><tab><tab><tab><tab>break # 強制的に抜ける<nl><tab><tab>return d #関数の結果を返す<nl><nl>sn(2004_12_15)","out":"def sn(d): #関数 sn(d)を定義する<nl><tab><tab>while d > 9:<nl><tab><tab><tab>D=list(map(int, str(d)))<nl><tab><tab><tab>d=sum(D)<nl><tab><tab><tab>if d==11 or d==22 or d==33 or d==44:<nl><tab><tab><tab><tab>break # 強制的に抜ける<nl><tab><tab>return d #関数の結果を返す<nl><nl>sn(2004_12_15)"}
{"in":"print(199999999999999999999999+2999999999","out":"print(199999999999999999999999+2999999999)"}
{"in":"df3.drop(5, axis=0, inplace=True)<nl>df3","out":"df3.drop(5, axis=1, inplace=True)<nl>df3"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>X=int(input())<nl>X=a*100<nl>if a*100<=X:<nl><tab>print('Yes')<nl>else a*100>=X:<nl><tab>print('No')","out":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>X=int(input())<nl>X=a*100<nl>if a*100<=X:<nl><tab>print('Yes')<nl>else:<nl><tab>print('No')"}
{"in":"nlp = spacy.load('ja_ginza')<nl>def wakachi(s):<nl><tab>doc = nlp(s)<nl><tab>list_s = []<nl><tab>list_w = []<nl><tab>for word in doc:<nl><tab><tab>if '名詞' in word.tag_:<nl><tab><tab><tab>list_w.append(word.orth_)<nl><tab><tab><tab>if '句点' in word_tag_:<nl><tab><tab><tab><tab>list_s.append(list_w)<nl><tab><tab><tab><tab>list_w = []<nl><tab>return list_s<nl><nl>print(wakachi('吾輩は猫である。名前はまだない。'))","out":"nlp = spacy.load('ja_ginza')<nl>def wakachi(s):<nl><tab>doc = nlp(s)<nl><tab>list_s = []<nl><tab>list_w = []<nl><tab>for word in doc:<nl><tab><tab>if '名詞' in word.tag_:<nl><tab><tab><tab>list_w.append(word.orth_)<nl><tab><tab><tab>if '句点' in word.tag_:<nl><tab><tab><tab><tab>list_s.append(list_w)<nl><tab><tab><tab><tab>list_w = []<nl><tab>return list_s<nl><nl>print(wakachi('吾輩は猫である。名前はまだない。'))"}
{"in":"X = df['通勤', '教員']<tab># 説明変数<nl>y = df['住宅価格'] # 目的変数<nl>pd.concat([X,y], axis=1).head() #最初の5件のみみてみる<nl>","out":"X = df[['通勤', '教員']]<tab># 説明変数<nl>y = df['住宅価格'] # 目的変数<nl>pd.concat([X,y], axis=1).head() #最初の5件のみみてみる<nl>"}
{"in":"https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl><nl>A,B=map(int,input().split())<nl>C=(A-B)\/3+B<nl>print(C)","out":"# https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl><nl>A,B=map(int,input().split())<nl>C=(A-B)\/3+B<nl>print(C)"}
{"in":"<nl>A,B,C = map(int, input().split())<nl><nl>a = [A,B,C]<nl>b = a.sorted()<nl><nl>if C-B == B-A:<nl><tab>print('Yes')<nl><nl>else:<nl><tab>print('No')","out":"<nl>A,B,C = map(int, input().split())<nl><nl>a = [A,B,C]<nl>b = sorted(a)<nl><nl>if C-B == B-A:<nl><tab>print('Yes')<nl><nl>else:<nl><tab>print('No')"}
{"in":"for col in de.columns:<nl><tab>print(col)<nl><tab>r,p=pearsonr(df[col],df['住宅価格'])<nl><tab>print(f'相関係数{cil}-住宅価格:{r}')","out":"for col in df.columns:<nl><tab>print(col)<nl><tab>r,p=pearsonr(df[col],df['住宅価格'])<nl><tab>print(f'相関係数{cil}-住宅価格:{r}')"}
{"in":"for columns in df.columns:<nl><tab>plt.hist(de[column],bins=30)<nl><tab>plt.xlabel(column)<nl><tab>plt.ylabel('件数')<nl><tab>plt.legend([str(df[column].describe())])<nl><tab>plt.show()","out":"for columns in df.columns:<nl><tab>plt.hist(df[column],bins=30)<nl><tab>plt.xlabel(column)<nl><tab>plt.ylabel('件数')<nl><tab>plt.legend([str(df[column].describe())])<nl><tab>plt.show()"}
{"in":"if BMI <17.5 :<nl><tab>print('低体重')<nl>else BMI>=17.5 and BMI<25.0:<nl><tab>print('標準')<nl>else:<nl><tab>print('太りすぎ')","out":"if BMI <17.5 :<nl><tab>print('低体重')<nl>elif BMI>=17.5 and BMI<25.0:<nl><tab>print('標準')<nl>else:<nl><tab>print('太りすぎ')"}
{"in":"a\/norm(a)<nl>array(0.802,0.535,0\/267)","out":"a\/norm(a)<nl>#array([0.802,0.535,0\/267])"}
{"in":"<nl><nl>N=input()<nl>N=int(N)<nl>A=input().split()<nl><nl>print(A)<nl><nl>N=2**N<nl>e=0<nl>c=0<nl>d=list()<nl><nl>while e<N:<nl><tab>a=int(A[e])<nl><tab>b=int(A[e+1])<nl><tab>print(a)<nl><tab>print(b)<nl><tab>if a<b:<nl><tab><tab>c=list(b)<nl><tab>elif b<a:<nl><tab><tab>c=list(a)<nl><tab>print(c)<nl><tab>d.append(c)<nl><tab>e += 2<nl>print(d)<nl>while <nl><nl><nl><nl><nl> ","out":"<nl><nl>N=input()<nl>N=int(N)<nl>A=input().split()<nl><nl>print(A)<nl><nl>N=2**N<nl>e=0<nl>c=0<nl>d=list()<nl><nl>while e<N:<nl><tab>a=int(A[e])<nl><tab>b=int(A[e+1])<nl><tab>print(a)<nl><tab>print(b)<nl><tab>if a<b:<nl><tab><tab>c=list(b)<nl><tab>elif b<a:<nl><tab><tab>c=list(a)<nl><tab>print(c)<nl><tab>d.append(c)<nl><tab>e += 2<nl>print(d)<nl><nl><nl><nl><nl><nl> "}
{"in":"df.head(pollen.csv)","out":"df.head()"}
{"in":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df['kcal','temperature']<tab># 価格以外を全て説明変数に<nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()","out":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df[['kcal','temperature']]<tab># 価格以外を全て説明変数に<nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()"}
{"in":"class Dog(object):<nl><tab><tab>name:str<nl><tab><tab>def __init__(self, name):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab>def __ repr__(self):<nl><tab><tab><tab><tab>return '🐕'<nl><tab><tab>def face(self):<nl><tab><tab><tab><tab>return '🐶'<nl><tab><tab>def sound(self):<nl><tab><tab><tab><tab>return 'バウワウ' #ISOスタンダート<nl><tab><tab>def leg(self):<nl><tab><tab><tab><tab>return 4<nl><nl>dog = Dog('はな')","out":"class Dog(object):<nl><tab><tab>name:str<nl><tab><tab>def __init__(self, name):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab><tab>return '🐕'<nl><tab><tab>def face(self):<nl><tab><tab><tab><tab>return '🐶'<nl><tab><tab>def sound(self):<nl><tab><tab><tab><tab>return 'バウワウ' #ISOスタンダート<nl><tab><tab>def leg(self):<nl><tab><tab><tab><tab>return 4<nl><nl>dog = Dog('はな')"}
{"in":"stones = 'ガーネット アメジスト アクアマリン ダイヤモンド エメラルド 養殖真珠 ルビー ペリドット サファイア オパール トパーズ ターコイズ'<nl><nl>class PersonD(object):<nl><tab>def __init__(self, name, year, month, day):<nl><tab><tab>self.name = name<nl><tab><tab>self.year = year<nl><tab><tab>self.month = month<nl><tab><tab>self.day = day<nl><tab>def __repr__(self):<nl><tab><tab>return str([self.name, self.year, self.month, self.day])<nl><tab>def age(self):<nl><tab><tab>return 2022-self.year<nl><tab>def stone(self):<nl><tab><tab>return stones[self.month-1]<nl><tab>def diff(self.p):<nl><tab><tab>return abs(self.age() - p,age())<nl><nl>p = PersonD(\"かんな\", 1999, 2, 3)<nl>p.age()<nl>p.stone()<nl>p.diff(p2)","out":"stones = 'ガーネット アメジスト アクアマリン ダイヤモンド エメラルド 養殖真珠 ルビー ペリドット サファイア オパール トパーズ ターコイズ'<nl><nl>class PersonD(object):<nl><tab>def __init__(self, name, year, month, day):<nl><tab><tab>self.name = name<nl><tab><tab>self.year = year<nl><tab><tab>self.month = month<nl><tab><tab>self.day = day<nl><tab>def __repr__(self):<nl><tab><tab>return str([self.name, self.year, self.month, self.day])<nl><tab>def age(self):<nl><tab><tab>return 2022-self.year<nl><tab>def stone(self):<nl><tab><tab>return stones[self.month-1]<nl><tab>def diff(self, p):<nl><tab><tab>return abs(self.age() - p,age())<nl><nl>p = PersonD(\"かんな\", 1999, 2, 3)<nl>p.age()<nl>p.stone()<nl>p.diff(p2)"}
{"in":"import math<nl><nl>class Ratio(object):<nl><tab>a: int<nl><tab>b: int<nl><tab>def __init__(self, a, b=1):<nl><tab><tab>self.a = a \/\/ math.gcd(a,b)<nl><tab><tab>self.b = b \/\/ math.gcd(a,b)<nl><tab>def __repr__(self):<nl><tab><tab>if self.b == 1:<nl><tab><tab><tab>return str(self.a)<nl><tab><tab>return f'{self.a}\/{self.b}'<nl><tab>def add(self, x):<nl><tab><tab>a = self.a<nl><tab><tab>b = self.b<nl><tab><tab>c = x.a<nl><tab><tab>d = x.b<nl><tab><tab>return Ratio(a*d+b*c,b*d)<nl><tab>def mul(self.x):<nl><tab><tab>a = self.a<nl><tab><tab>b = self.b<nl><tab><tab>c = x.a<nl><tab><tab>d = x.b<nl><tab><tab>return Ratio(a*c,b*d)<nl><tab>def __add__(self,x):<nl><tab><tab>return self.add(x)<nl><tab>def __mul__(self,x):<nl><tab><tab>return self.mul(x)<nl><tab>def __truediv__(self, x):<nl><tab><tab>if isinstance(x, int):<nl><tab><tab><tab>x = Ratio(x)<nl><tab><tab><tab>","out":"import math<nl><nl>class Ratio(object):<nl><tab>a: int<nl><tab>b: int<nl><tab>def __init__(self, a, b=1):<nl><tab><tab>self.a = a \/\/ math.gcd(a,b)<nl><tab><tab>self.b = b \/\/ math.gcd(a,b)<nl><tab>def __repr__(self):<nl><tab><tab>if self.b == 1:<nl><tab><tab><tab>return str(self.a)<nl><tab><tab>return f'{self.a}\/{self.b}'<nl><tab>def add(self, x):<nl><tab><tab>a = self.a<nl><tab><tab>b = self.b<nl><tab><tab>c = x.a<nl><tab><tab>d = x.b<nl><tab><tab>return Ratio(a*d+b*c,b*d)<nl><tab>def mul(self, x):<nl><tab><tab>a = self.a<nl><tab><tab>b = self.b<nl><tab><tab>c = x.a<nl><tab><tab>d = x.b<nl><tab><tab>return Ratio(a*c,b*d)<nl><tab>def __add__(self,x):<nl><tab><tab>return self.add(x)<nl><tab>def __mul__(self,x):<nl><tab><tab>return self.mul(x)<nl><tab>def __truediv__(self, x):<nl><tab><tab>if isinstance(x, int):<nl><tab><tab><tab>x = Ratio(x)<nl><tab><tab><tab>"}
{"in":"# rpartition<nl>pos = s.rfind('-')<nl>s[:pos], pos[pos+1:] => rpartition<nl><nl>def calc(s:str)->float:<nl><tab><tab>if '-' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('-')<nl><tab><tab><tab><tab>return calc(a)-calc(b)<nl><tab><tab>if '+' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('+')<nl><tab><tab><tab><tab>return calc(a)+calc(b)<nl><tab><tab>if '\/' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('\/')<nl><tab><tab><tab><tab>return calc(a)\/calc(b)<nl><tab><tab>if '*' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('*')<nl><tab><tab><tab><tab>return calc(a)*calc(b)<nl><tab><tab>return float(s)<nl><nl>print(calc(\"1 - 2 - 3 \"))","out":"# rpartition<nl>pos = s.rfind('-')<nl># s[:pos], pos[pos+1:] => rpartition<nl><nl>def calc(s:str)->float:<nl><tab><tab>if '-' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('-')<nl><tab><tab><tab><tab>return calc(a)-calc(b)<nl><tab><tab>if '+' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('+')<nl><tab><tab><tab><tab>return calc(a)+calc(b)<nl><tab><tab>if '\/' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('\/')<nl><tab><tab><tab><tab>return calc(a)\/calc(b)<nl><tab><tab>if '*' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('*')<nl><tab><tab><tab><tab>return calc(a)*calc(b)<nl><tab><tab>return float(s)<nl><nl>print(calc(\"1 - 2 - 3 \"))"}
{"in":"x=2<nl>if x>0:<nl><tab>print(\"正\")<nl>else:<nl><tab>if x==0:<nl><tab><tab>print(\"ゼロ\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"負\")","out":"x=2<nl>if x>0:<nl><tab>print(\"正\")<nl>else:<nl><tab>if x==0:<nl><tab><tab>print(\"ゼロ\")<nl><tab>else:<nl><tab><tab>print(\"負\")"}
{"in":"df.stats.pearsonr('降水量', 'スギ花粉飛散量')","out":"scipy.stats.pearsonr(df['降水量'], df['スギ花粉飛散量'])"}
{"in":"def calc(s;str)->float:<nl><tab>return eval(s)<nl><nl>calc(\"1+10\")","out":"def calc(s: str)->float:<nl><tab>return eval(s)<nl><nl>calc(\"1+10\")"}
{"in":"w = 50<nl>h = 1.6<nl>BMI = w \/ (h**2)<nl>if BMI <18.5:<nl><tab><tab>print(\"低体重(やせ)\")<nl>else:<nl><tab><tab>if BMI<tab>>=25.0:<nl><tab><tab><tab><tab>print(\"肥満\")<nl><tab><tab>else:<nl><tab><tab><tab><tab>print(\"\"普通体重)","out":"w = 50<nl>h = 1.6<nl>BMI = w \/ (h**2)<nl>if BMI <18.5:<nl><tab><tab>print(\"低体重(やせ)\")<nl>else:<nl><tab><tab>if BMI<tab>>=25.0:<nl><tab><tab><tab><tab>print(\"肥満\")<nl><tab><tab>else:<nl><tab><tab><tab><tab>print(\"普通体重\")"}
{"in":"if BMI<25.0 :<nl> 　 print(\"低体重”）<nl>else:<nl> 　 print(\"標準\")","out":"if BMI<25.0:<nl><tab><tab>print(\"低体重\")<nl>else:<nl><tab><tab>print(\"標準\")"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl><nl>A, B,C = map(int, input().split())<nl>if A==B;<nl> print (C)<nl> break<nl>else if A==C:<nl><tab>print(B)<nl><tab> break<nl>els:<nl> print(A)<nl><tab>break<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B=map(int, input().split())<nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl>else:<nl><tab>print(A)"}
{"in":"animals = [Chikin(), Sheep(), Dog('Hachi')]","out":"animals = [Chiken(), Sheep(), Dog('Hachi')]"}
{"in":"df = read_csv('pollen.csv')<nl>df.head(5)","out":"df = pd.read_csv('pollen.csv')<nl>df.head(5)"}
{"in":"class Ratio(object):<nl><tab>a: int<nl><tab>b: int<nl><tab>def __init__(self, a, b=1):<nl><tab><tab>self.a = a<nl><tab><tab>self.b = b<nl><tab>def __repr__(self):<nl><tab><tab>if self.b == 1:<nl><tab><tab><tab>return str(self.a)<nl><tab><tab>return f'[self.a]\/[self.b]'<nl><nl>def add(self, x):<nl><tab>","out":"class Ratio(object):<nl><tab>a: int<nl><tab>b: int<nl><tab>def __init__(self, a, b=1):<nl><tab><tab>self.a = a<nl><tab><tab>self.b = b<nl><tab>def __repr__(self):<nl><tab><tab>if self.b == 1:<nl><tab><tab><tab>return str(self.a)<nl><tab><tab>return f'[self.a]\/[self.b]'<nl><nl><tab>def add(self, x):<nl><tab><tab>pass"}
{"in":"test['Age'] = test['Age'].fillna(test['Age'].mean())<nl>test['Sex'] = test['Sex'].map(int(){'male':0, 'female':1})<nl>test['Cabin'] = test['Cabin'].fillna('なし')<nl>test['Fare']=test['Fare'].fillna(test['Fare'].mean())","out":"test['Age'] = test['Age'].fillna(test['Age'].mean())<nl>test['Sex'] = test['Sex'].map({'male':0, 'female':1})<nl>test['Cabin'] = test['Cabin'].fillna('なし')<nl>test['Fare']=test['Fare'].fillna(test['Fare'].mean())"}
{"in":"(x**2).sub(x,3)","out":"(x**2).subs(x,3)"}
{"in":"w = 40<nl>h = 1.56<nl>BMI = w\/ (h*h)<nl><nl>if BMI>25.00:<nl><tab>print('肥満　太り過ぎです')<nl>else:<nl>print('通常　大丈夫よー')<nl><nl>print(BMI)","out":"w = 40<nl>h = 1.56<nl>BMI = w\/ (h*h)<nl><nl>if BMI>25.00:<nl><tab>print('肥満<tab>太り過ぎです')<nl>else:<nl>print('通常<tab>大丈夫よー')<nl><nl>print(BMI)"}
{"in":"df=pd.read_pollen.csv<nl>df.hed()","out":"df=pd.read_csv('pollen.csv')<nl>df.head()"}
{"in":"<nl><nl>S = str(input())<nl><nl>ans = \"Yes\"<nl><nl>for n in range(len(S)) :<nl><tab>if n % 2 == 0 :<nl><tab><tab>if S[n].islower == False :<nl><tab><tab><tab>ans = \"No\"<nl><tab>elif n % 2 == 1 :<nl><tab><tab>S[n].isupper == False :<nl><tab><tab>ans = \"No\"<nl><nl>print(ans)","out":"<nl><nl>S = str(input())<nl><nl>ans = \"Yes\"<nl><nl>for n in range(len(S)) :<nl><tab>if n % 2 == 0 :<nl><tab><tab>if S[n].islower == False :<nl><tab><tab><tab>ans = \"No\"<nl><tab>elif n % 2 == 1 :<nl><tab><tab>if S[n].isupper == False :<nl><tab><tab><tab>ans = \"No\"<nl><nl>print(ans)"}
{"in":"d=1997112#朔間零<nl>while d>=10: #2桁のときは繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d==11or d==22 or d==33 or d==44:<nl><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print('ソウルナンバー:',d)<nl>if d=1:<nl><tab>print('一風変わった頭脳明晰な先駆者')<nl><nl>if d==3:<nl><tab>print('多才でパワフルな人気者')","out":"d=1997112#朔間零<nl>while d>=10: #2桁のときは繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d==11or d==22 or d==33 or d==44:<nl><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print('ソウルナンバー:',d)<nl>if d==1:<nl><tab>print('一風変わった頭脳明晰な先駆者')<nl><nl>if d==3:<nl><tab>print('多才でパワフルな人気者')"}
{"in":"<nl>S, T =<tab>map(int, input().split())<nl>for a in range(10):<nl><tab>for b in range(10):<nl><tab><tab>for c in range(10):<nl><tab><tab><tab>if a + b + c <= S and a*b*c <= T:<nl><tab><tab><tab><tab>combs.append((a,b,c))<nl>print(len(combs))","out":"<nl>S, T =<tab>map(int, input().split())<nl>combs = []<nl>for a in range(10):<nl><tab>for b in range(10):<nl><tab><tab>for c in range(10):<nl><tab><tab><tab>if a + b + c <= S and a*b*c <= T:<nl><tab><tab><tab><tab>combs.append((a,b,c))<nl>print(len(combs))"}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc178\/tasks\/abc178_a<nl>2 x = int(input)<nl>if x == 1:<nl> print(0)<nl>else:<nl><tab>print(1)","out":"# kogi https:\/\/atcoder.jp\/contests\/abc178\/tasks\/abc178_a<nl>x = int(input())<nl>if x == 1:<nl> print(0)<nl>else:<nl><tab>print(1)"}
{"in":"def show(lives):<nl><tab>N,M=lives.shape<nl><tab>for y in range(N):<nl><tab><tab>for x in range(M):<nl><tab><tab><tab>if lives[y,x]==1<nl><tab><tab><tab><tab>print('🐼',end='')<nl><tab><tab><tab><tab><nl>show(lives)","out":"def show(lives):<nl><tab>N,M=lives.shape<nl><tab>for y in range(N):<nl><tab><tab>for x in range(M):<nl><tab><tab><tab>if lives[y,x]==1:<nl><tab><tab><tab><tab>print('🐼',end='')<nl><tab><tab><tab><tab><nl>show(lives)"}
{"in":"pirnt(Hello World)","out":"pirnt(\"Hello World\")"}
{"in":"d=20070308<nl>while d >=10: #二桁野ときは繰り返す<tab><tab><nl>　<tab>D= list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl>if d==11 or d==22 or d==33 or d==44:<nl><tab>break#条件を満たしたらループを抜ける<nl><tab>print('ソールナンバー：',d)","out":"d=20070308<nl>while d >=10: #二桁野ときは繰り返す<tab><tab><nl><tab><tab>D= list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl>if d==11 or d==22 or d==33 or d==44:<nl><tab>break#条件を満たしたらループを抜ける<nl><tab>print('ソールナンバー:',d)"}
{"in":"df = pd_read.csv('pollen.csv')<nl>df.head()","out":"df = pd.read_csv('pollen.csv')<nl>df.head()"}
{"in":"a =1<nl>for num in range(10):<nl><tab><tab>a += -1\/(4*(num+1)-1) + 1\/(4*(num+1+1) <nl>print(4*a)","out":"a =1<nl>for num in range(10):<nl><tab><tab>a += -1\/(4*(num+1)-1) + 1\/(4*(num+1+1))<nl>print(4*a)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc272\/tasks\/abc272_b<nl>n,m=map(int,input().split())<nl>ans=[]<nl>new_k=[]<nl>member=[]<nl>if n==1:<nl><tab>ans.append(1)<nl>for i in range(1,n+1):<nl><tab>ans.append(i)<nl>#人数のリスト<nl><nl>for _ in range(m):<nl><tab>k=list(map(int,input().split()))<nl><tab>del k[0]<nl><tab>new_k.append(k)<nl><nl>for j in new_k:<nl><tab>a=str(set(k)-set(j))<nl><tab>member.append(b)<nl><nl>print(member)<nl>if ans==member:<nl><tab>print(\"Yes\")<nl>else:<nl><tab>print(\"No\")<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc272\/tasks\/abc272_b<nl>n,m=map(int,input().split())<nl>ans=[]<nl>new_k=[]<nl>member=[]<nl>if n==1:<nl><tab>ans.append(1)<nl>for i in range(1,n+1):<nl><tab>ans.append(i)<nl>#人数のリスト<nl><nl>for<tab>in range(m):<nl><tab>k=list(map(int,input().split()))<nl><tab>del k[0]<nl><tab>new_k.append(k)<nl><nl>for j in new_k:<nl><tab>a=str(set(k)-set(j))<nl><tab>member.append(b)<nl><nl>print(member)<nl>if ans==member:<nl><tab>print(\"Yes\")<nl>else:<nl><tab>print(\"No\")<nl>"}
{"in":"y = df['住宅価格']<nl>r2 = []<nl>for col in df.columns[-1]:<nl><tab>X = df[[col]]<nl><tab>y_pred = model.predict(X)<nl><tab>r2.append(r2_score(y, y_pred))<nl><nl>print()","out":"y = df['住宅価格']<nl>r2 = []<nl>for col in df.columns[:-1]:<nl><tab>X = df[[col]]<nl><tab>y_pred = model.predict(X)<nl><tab>r2.append(r2_score(y, y_pred))<nl><nl>print()"}
{"in":"[animal.leg() for animail in anials]","out":"[animal.leg() for animal in animals]"}
{"in":"コーギーくん","out":"#コーギーくん"}
{"in":"A,B,C = map(int,input().split())<nl>for i in C:<nl><tab><tab>print(C)<nl>if A<=X<=B:<nl><tab><tab>print(X)<nl>else:<nl><tab><tab>print('-1')","out":"A,B,C = map(int,input().split())<nl>for i in range(C):<nl><tab><tab>print(C)<nl>if A<=X<=B:<nl><tab><tab>print(X)<nl>else:<nl><tab><tab>print('-1')"}
{"in":"#やってみよう<nl>import math<nl>x = 30<nl>y = math.sin(x)<nl>print(y","out":"#やってみよう<nl>import math<nl>x = 30<nl>y = math.sin(x)<nl>print(y)"}
{"in":"import <nl>model = sklearn.linear_model.LinearRegression()<nl>x_model=df['平均気温']<nl>y_model=df['スギ花粉飛散量']<nl>model.fit(x_model,y_model)","out":"import sklearn.linear_model<nl>model = sklearn.linear_model.LinearRegression()<nl>x_model=df['平均気温']<nl>y_model=df['スギ花粉飛散量']<nl>model.fit(x_model,y_model)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>n = int(input())<nl>print(n)<nl>if X = 100*n and 100<=X<=1000:<nl><tab><tab>print(Yes)<nl>else :print(No)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>n = int(input())<nl>print(n)<nl>if X == 100*n and 100<=X<=1000:<nl><tab><tab>print(Yes)<nl>else :print(No)"}
{"in":"def S(n):<nl>s = str(n)<nl>sum = 0<nl>for c in s:<nl>sum += int(c)<nl>return sum","out":"def S(n):<nl><tab>s = str(n)<nl><tab>sum = 0<nl><tab>for c in s:<nl><tab><tab>sum += int(c)<nl><tab>return sum"}
{"in":"あまり変わらない？","out":"あまり変わらない?"}
{"in":"d = 2005514<nl>while d >= 10:<nl>D = list(map(int,str(d)))<nl>print(D)<nl><nl>d = sum(D)<nl>print(d)","out":"d = 2005514<nl>while d >= 10:<nl><tab>D = list(map(int,str(d)))<nl><tab>print(D)<nl><nl><tab>d = sum(D)<nl><tab>print(d)"}
{"in":"class Duck(onject):<nl><tab>def face(self):<nl><tab><tab>return '🦆'<nl><tab>def sound(self):<nl><tab><tab>return 'くわくわくわ'","out":"class Duck(object):<nl><tab>def face(self):<nl><tab><tab>return '🦆'<nl><tab>def sound(self):<nl><tab><tab>return 'くわくわくわ'"}
{"in":"w = 52.0<nl>h = 163.3<nl>BMI = w \/ h**<nl>print( BMI )","out":"w = 52.0<nl>h = 163.3<nl>BMI = w \/ h**2<nl>print( BMI )"}
{"in":"X_train_numa_p = pd.read_csv('https:\/\/drive.google.com\/file\/d\/1yWj9QG29CmUOufrvE2NITNBxwRlRtD7g\/view?usp=sharing'\/MyDrive\/train_Numa_print.csv)<nl># X_train_numa_a = pd.read_csv(\"\/Users\/shion\/Desktop\/OJT\/numa-chan\/\")<nl># X_test_numa_p = pd.read_csv(\"\/Users\/shion\/Desktop\/OJT\/numa-chan\/\")<nl># X_test_numa_a = pd.read_csv(\"\/Users\/shion\/Desktop\/OJT\/numa-chan\/\")","out":"X_train_numa_p = pd.read_csv('https:\/\/drive.google.com\/file\/d\/1yWj9QG29CmUOufrvE2NITNBxwRlRtD7g\/view?usp=sharing')<nl># X_train_numa_a = pd.read_csv(\"\/Users\/shion\/Desktop\/OJT\/numa-chan\/\")<nl># X_test_numa_p = pd.read_csv(\"\/Users\/shion\/Desktop\/OJT\/numa-chan\/\")<nl># X_test_numa_a = pd.read_csv(\"\/Users\/shion\/Desktop\/OJT\/numa-chan\/\")"}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc277\/tasks\/abc277_a<nl>N,X=map(int,input().split())<nl>P=list(map(int,input.split())<nl><nl>print(P.index('3'))","out":"# kogi https:\/\/atcoder.jp\/contests\/abc277\/tasks\/abc277_a<nl>N,X=map(int,input().split())<nl>P=list(map(int,input.split()))<nl><nl>print(P.index('3'))"}
{"in":"import math<nl>math.acos(np.dot(a,b)\/norm(a)*norm(b)))","out":"import math<nl>math.acos(np.dot(a, b) \/ (norm(a) * norm(b)))"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>X = int(input())<nl>if X==100 or X==200 or X==300 or X==400 or X==500 or X==600 or X==700 or X==800 or X==900 or X==1000:<nl><tab><tab>print(Yes)<nl>else :print(No)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>X = int(input())<nl>if X==100 or X==200 or X==300 or X==400 or X==500 or X==600 or X==700 or X==800 or X==900 or X==1000:<nl><tab><tab>print(\"Yes\")<nl>else :print(\"No\")"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split()<nl>print(A,B)<nl>#print(((A-B)\/A) *100)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split())<nl>print(A,B)<nl>#print(((A-B)\/A) *100)"}
{"in":"df = student-mat.csv","out":"df = \"student-mat.csv\""}
{"in":"plt(x=df['西暦'], y=df['降水量'])","out":"plt.plot(x=df['西暦'], y=df['降水量'])"}
{"in":"h = int(input(\"身長は?(cm)\"))<nl>w = int(input(\"体重は?(kg)\"))<nl>h = h*100<nl>BMI=w\/h*h<nl>if BMI < 18.5:<nl><tab>print(\"低体重（やせ)\")<nl>else:<nl><tab>if BMI >=18.5 and < 25 :<nl><tab><tab>print(\"普通体重\")<nl><tab>else:<nl><tab><tab>print(\"肥満\")","out":"h = int(input(\"身長は?(cm)\"))<nl>w = int(input(\"体重は?(kg)\"))<nl>h = h*100<nl>BMI=w\/h*h<nl>if BMI < 18.5:<nl><tab>print(\"低体重(やせ)\")<nl>else:<nl><tab>if BMI >=18.5 and BMI < 25 :<nl><tab><tab>print(\"普通体重\")<nl><tab>else:<nl><tab><tab>print(\"肥満\")"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_c<nl>n=list(bin(int(input())))<nl>p=list()<nl>x=1<nl>for i in range(len(n)):<nl><tab>if n[i]=='1':<nl><tab><tab>p.attend(i)<nl>print(p)<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_c<nl>n=list(bin(int(input())))<nl>p=list()<nl>x=1<nl>for i in range(len(n)):<nl><tab>if n[i]=='1':<nl><tab><tab>p.append(i)<nl>print(p)<nl>"}
{"in":"df['わかち書き'] = df['コメント'].map(lambda x: ' '.join(wakachi(x)))<nl>df.head()","out":"df['わかち書き'] = df['コメント忘れ'].map(lambda x: ' '.join(wakachi(x)))<nl>df.head()"}
{"in":"model.predict([(4.00,)])<nl>array([19.94203311])<nl>","out":"model.predict([(4.00,)])<nl>#array([19.94203311])<nl>"}
{"in":"a\/norm(a)<nl>array(0.267,0.535,0.802)","out":"a\/norm(a)<nl>#array([0.267,0.535,0.802])"}
{"in":"A,B=map(int,input().split())<nl>c== sum(list(map(int, str(A))))<nl>d== sum(list(map(int, str(B))))<nl>print(max(c,d))","out":"A,B=map(int,input().split())<nl>c = sum(list(map(int, str(A))))<nl>d = sum(list(map(int, str(B))))<nl>print(max(c,d))"}
{"in":"def summ(n):<nl><tab><tab>if n ==1 : return 1<nl><tab><tab>else : return i+=summ(n)","out":"def summ(n):<nl><tab><tab>if n ==1 : return 1<nl><tab><tab>else : return 1+summ(n)"}
{"in":"#ABC269_A<nl>#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_a<nl>a, b, c, d =map(int, input(). split())<nl>print(( a + b ) * ( c - d ))<nl>ptint(Takahashi)<nl>","out":"#ABC269_A<nl>#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_a<nl>a, b, c, d =map(int, input(). split())<nl>print(( a + b ) * ( c - d ))<nl>print(Takahashi)<nl>"}
{"in":"X=df[['部屋数','築年']]<nl>Y=['住宅価格']<nl>print(X.shape)<nl>print(Y.shape)","out":"X=df[['部屋数','築年']]<nl>Y=df['住宅価格']<nl>print(X.shape)<nl>print(Y.shape)"}
{"in":"scipy.stats.pearsonr(df['降水量'],df['スギ花粉飛散量']<nl>math.comb(x, y)","out":"scipy.stats.pearsonr(df['降水量'],df['スギ花粉飛散量'])<nl>math.comb(x, y)"}
{"in":"def.info()","out":"df.info()"}
{"in":"class Animal(object):<nl><tab>def face(self):<nl><tab><tab>return '?'<nl><tab>def sound(self):<nl><tab><tab>return 'ピー'<nl><tab>def __repr__(self):<nl><tab><tab>return self.__class__.__name__#クラス名<nl><tab>def leg(self):<nl><tab><tab>raise NotImplemented()#例外<nl><tab><tab>return 0<nl>class Bird(Animal):<nl><tab>def leg(self):<nl><tab><tab>return 2<nl>class chikin(Mammal):<nl><tab>def __repr__(self):<nl><tab><tab>return '🐔'<tab><nl><tab>def sound(self):#override<nl><tab><tab>return 'コケコッコー'<nl><nl>class Mammal(Animal):<nl><tab>def leg(self):<nl><tab><tab>return 2<nl>class Sheep(Mammal):<nl><tab>def __repr__(self):<nl><tab><tab>return '🐏'<tab><nl><tab>def sound(self):#override<nl><tab><tab>return 'メエ～'<nl><nl>class Dog(Mammal):<nl><tab>name:str<nl><tab>def __init__(self,name):<nl><tab><tab>self.name=name<nl><tab>def __repr__(self):<nl><tab><tab>return f'🐕{self.name}' <nl><tab>def face(self):<nl><tab><tab>return '🐩'<nl><tab>def sound(self):<nl><tab><tab>return 'ワン'","out":"class Animal(object):<nl><tab>def face(self):<nl><tab><tab>return '?'<nl><tab>def sound(self):<nl><tab><tab>return 'ピー'<nl><tab>def _repr__(self):<nl><tab><tab>return self.__class__.__name__#クラス名<nl><tab>def leg(self):<nl><tab><tab>raise NotImplemented()#例外<nl><tab><tab>return 0<nl>class Bird(Animal):<nl><tab>def leg(self):<nl><tab><tab>return 2<nl>class chikin(Mammal):<nl><tab>def _repr__(self):<nl><tab><tab>return '🐔'<tab><nl><tab>def sound(self):#override<nl><tab><tab>return 'コケコッコー'<nl><nl>class Mammal(Animal):<nl><tab>def leg(self):<nl><tab><tab>return 2<nl>class Sheep(Mammal):<nl><tab>def _repr__(self):<nl><tab><tab>return '🐏'<tab><nl><tab>def sound(self):#override<nl><tab><tab>return 'メエ~'<nl><nl>class Dog(Mammal):<nl><tab>name:str<nl><tab>def _init__(self,name):<nl><tab><tab>self.name=name<nl><tab>def _repr__(self):<nl><tab><tab>return f'🐕{self.name}' <nl><tab>def face(self):<nl><tab><tab>return '🐩'<nl><tab>def sound(self):<nl><tab><tab>return 'ワン'"}
{"in":"if BMI > 25.00 :<nl><tab><tab>print('太り過ぎ')<nl>else:<nl><tab><tab>print(’太り過ぎでない’)<tab><tab>","out":"if BMI > 25.00:<nl><tab><tab>print('太り過ぎ')<nl>else:<nl><tab><tab>print('太り過ぎでない')<tab><tab>"}
{"in":"Fraction(' -3\/7 ')<nl>n= 1\/3<nl>print(Fraction(str(n))","out":"Fraction(' -3\/7 ')<nl>n= 1\/3<nl>print(Fraction(str(n)))"}
{"in":"N,M=map(int,input().split())<nl>a=[]<nl>[a.append([]) for _ in range(N)]<nl>for i in range(M):<nl><tab>A,B=map(int,input().split())<nl><tab>a[A-1].append(B)<nl><tab>a[B-1].append(A)<nl>for i in range(N):<nl><tab>a[i].sort()<nl><tab>if len(a[i])==0:<nl><tab><tab>print(0)<nl><tab>else:<nl><tab><tab>print(len(a),end=' ')<nl><tab><tab>for x in range(len(a[i]):<nl><tab><tab><tab>print(a[i][x],end=' ')<nl><tab><tab>print(end='\\n')","out":"N,M=map(int,input().split())<nl>a=[]<nl>[a.append([]) for _ in range(N)]<nl>for i in range(M):<nl><tab>A,B=map(int,input().split())<nl><tab>a[A-1].append(B)<nl><tab>a[B-1].append(A)<nl>for i in range(N):<nl><tab>a[i].sort()<nl><tab>if len(a[i])==0:<nl><tab><tab>print(0)<nl><tab>else:<nl><tab><tab>print(len(a),end=' ')<nl><tab><tab>for x in range(len(a[i])):<nl><tab><tab><tab>print(a[i][x],end=' ')<nl><tab><tab>print(end='\\n')"}
{"in":"<nl>def corr(x, y):<nl><tab><tab>x = np.array(x)<nl><tab><tab>y = np.array(y)<nl><tab><tab>x_diff = x - np.mean(x)<nl><tab><tab>y_diff = y - np.mean(y)<nl><tab><tab>return np.dot(x_diff, y_diff) \/ (np.sqrt(sum(x_diff ** 2)) * np.sqrt(sum(y_diff ** 2)))<nl><tab><tab><nl>for column in df.columns[:-1]:<nl><tab>X = df[[colomn]]<nl><tab>Y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fix(X,y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 =r2_score(y,y_pred)<nl><tab>print(f'{column}決定係数(R2):',r2)","out":"<nl>def corr(x, y):<nl><tab><tab>x = np.array(x)<nl><tab><tab>y = np.array(y)<nl><tab><tab>x_diff = x - np.mean(x)<nl><tab><tab>y_diff = y - np.mean(y)<nl><tab><tab>return np.dot(x_diff, y_diff) \/ (np.sqrt(sum(x_diff ** 2)) * np.sqrt(sum(y_diff ** 2)))<nl><tab><tab><nl>for column in df.columns[:-1]:<nl><tab>X = df[[column]]<nl><tab>Y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fix(X,y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 =r2_score(y,y_pred)<nl><tab>print(f'{column}決定係数(R2):',r2)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>X=int(input())<nl>X=100X","out":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>X=int(input())<nl>X=X\/\/100+1"}
{"in":"d = 20060925<nl>while d >=10: #二桁のときは繰り返す<nl>　D = list(map(int, str(d)))<nl>　print(D)<nl>　d = sum(D)<nl>　print(D)<nl> if d == 11 or d == 22 or d == 33 or D == 44:<nl><tab>　 break #条件を満たしたらループを抜ける<nl><nl><tab>print('ソールナンバー：', d)","out":"d = 20060925<nl>while d >=10: #二桁のときは繰り返す<nl><tab>D = list(map(int, str(d)))<nl><tab>print(D)<nl><tab>d = sum(D)<nl><tab>print(D)<nl> if d == 11 or d == 22 or d == 33 or D == 44:<nl><tab><tab> break #条件を満たしたらループを抜ける<nl><nl><tab>print('ソールナンバー:', d)"}
{"in":"from sklearn.utils.validation import column_or_1d<nl>for colum in df.columns[:-1]:<nl><tab>x = df[[column]]<nl><tab>y = df['住宅価格']<nl><tab>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)","out":"from sklearn.utils.validation import column_or_1d<nl>for column in df.columns[:-1]:<nl><tab>x = df[[column]]<nl><tab>y = df['住宅価格']<nl><tab>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)"}
{"in":"a,b=map(int,input().split())<nl>A=str(a)<nl>B=str(B)<nl>x=A**b<nl>y=B**a<nl>if a>b:<nl><tab>print(y)<nl>else:<nl><tab>print(x)","out":"a,b=map(int,input().split())<nl>A=str(a)<nl>B=str(b)<nl>x=A**b<nl>y=B**a<nl>if a>b:<nl><tab>print(y)<nl>else:<nl><tab>print(x)"}
{"in":"S,T=map(int,input().split())<nl>for a in range(10):<nl><tab>for b in range(10):<nl><tab><tab>for c in range(10):<nl><tab><tab><tab>if a+b+c <=S and a*b*c<=T:<nl><tab><tab><tab><tab>comb.append((a,b,c))<nl>print(len(comb))","out":"S,T=map(int,input().split())<nl>comb = []<nl>for a in range(10):<nl><tab>for b in range(10):<nl><tab><tab>for c in range(10):<nl><tab><tab><tab>if a+b+c <=S and a*b*c<=T:<nl><tab><tab><tab><tab>comb.append((a,b,c))<nl>print(len(comb))"}
{"in":"def gcd(a,b):<nl> if b==0:<nl><tab> return a<nl> else:<nl><tab> return gcd(b,a%b)<nl>acd(6215,4746)","out":"def gcd(a,b):<nl> if b==0:<nl><tab> return a<nl> else:<nl><tab> return gcd(b,a%b)<nl>gcd(6215,4746)"}
{"in":"d = 20061225<nl><nl>while d>=10:<nl><tab>D= list(map(int,str(d)))<nl><tab>#print(D)<nl><tab>d=sum(D)<nl><tab>#print(d)<nl><nl><tab>if d==11 or d==22 or d==33 or d==44:<nl><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print (’ソールナンバー’,d)","out":"d = 20061225<nl><nl>while d>=10:<nl><tab>D= list(map(int,str(d)))<nl><tab>#print(D)<nl><tab>d=sum(D)<nl><tab>#print(d)<nl><nl><tab>if d==11 or d==22 or d==33 or d==44:<nl><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print ('ソールナンバー',d)"}
{"in":"df.select_dtypes('df['平均気温']')","out":"df.select_dtypes(df['平均気温'])"}
{"in":"pos = s.rfind('-')<nl>s[:pos], pos[pos+1:] => rpartition<nl><nl>def calc(s:str)->float:<nl><tab><tab>if '-' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('-')<nl><tab><tab><tab><tab>return calc(a)-calc(b)<nl><tab><tab>if '+' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('+')<nl><tab><tab><tab><tab>return calc(a)+calc(b)<nl><tab><tab>if '\/' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('\/')<nl><tab><tab><tab><tab>return calc(a)\/calc(b)<nl><tab><tab>if '*' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('*')<nl><tab><tab><tab><tab>return calc(a)*calc(b)<nl><tab><tab>return float(s)<nl><nl>print(calc(\"1+2*3\"))","out":"pos = s.rfind('-')<nl># s[:pos], pos[pos+1:] => rpartition<nl><nl>def calc(s:str)->float:<nl><tab><tab>if '-' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('-')<nl><tab><tab><tab><tab>return calc(a)-calc(b)<nl><tab><tab>if '+' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('+')<nl><tab><tab><tab><tab>return calc(a)+calc(b)<nl><tab><tab>if '\/' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('\/')<nl><tab><tab><tab><tab>return calc(a)\/calc(b)<nl><tab><tab>if '*' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('*')<nl><tab><tab><tab><tab>return calc(a)*calc(b)<nl><tab><tab>return float(s)<nl><nl>print(calc(\"1+2*3\"))"}
{"in":"pd.read_pollen.csv('file.mean', precision=True)","out":"pd.read_csv('pollen.csv', precision=True)"}
{"in":"df.read('pollen.csv')<nl>df.head(pollen.csv)","out":"df = pd.read('pollen.csv')<nl>df.head("}
{"in":"ｗ　＝４６．６<nl>ｈ　＝１．６１<nl>BMI　＝ｗ ／(ｈ＊＊２）","out":"w<tab>=46.6<nl>h<tab>=1.61<nl>BMI<tab>=w \/(h**2)"}
{"in":"plt.figure(figsize=(8, 8))<tab><tab>## 図の大きさ<nl>plt.scatter(df['部屋数'], df['住宅価格']), alpha=0.5<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()","out":"plt.figure(figsize=(8, 8))<tab><tab>## 図の大きさ<nl>plt.scatter(df['部屋数'], df['住宅価格'], alpha=0.5)<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()"}
{"in":"#内積<nl><nl>N=int(input())<nl>A=list(map(int,input().split()))<nl>B=list(map(int,input().split()))<nl><nl>C=0<nl>for i in range(N):<nl><tab><tab>C+=A[i]*B[i]<nl><nl>if c==0:<nl><tab>print('Yes')<nl>else:<nl><tab>print('No')","out":"#内積<nl><nl>N=int(input())<nl>A=list(map(int,input().split()))<nl>B=list(map(int,input().split()))<nl><nl>C=0<nl>for i in range(N):<nl><tab><tab>C+=A[i]*B[i]<nl><nl>if C==0:<nl><tab>print('Yes')<nl>else:<nl><tab>print('No')"}
{"in":"A,B,C = map(int,input().split())<nl>for i in C:<nl><tab><tab>if A<=C<=B:<nl><tab><tab><tab><tab>print(C)<nl><tab><tab>elif A<=C*2<=B:<nl><tab><tab><tab><tab>print(C*2)<nl><tab><tab>else:<nl><tab><tab><tab><tab>print('-1')","out":"A,B,C = map(int,input().split())<nl>for i in range(C):<nl><tab><tab>if A<=C<=B:<nl><tab><tab><tab><tab>print(C)<nl><tab><tab>elif A<=C*2<=B:<nl><tab><tab><tab><tab>print(C*2)<nl><tab><tab>else:<nl><tab><tab><tab><tab>print('-1')"}
{"in":"animals = [Chicken()], Sheep(), Dog('Hachi')]","out":"animals = [Chicken(), Sheep(), Dog('Hachi')]"}
{"in":"x=27<nl>if x>0:<nl><tab>　print(\"正の数\")<nl><tab>else:<nl><tab><tab>print(\"負の数\")","out":"x=27<nl>if x>0:<nl><tab><tab>print(\"正の数\")<nl>else:<nl><tab><tab>print(\"負の数\")"}
{"in":"x=0<nl>if x > 0:<nl><tab>print(\"正\")<nl>else:<nl><tab>if x==0:<nl><tab><tab>print(\"ゼロ\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"負\")","out":"x=0<nl>if x > 0:<nl><tab>print(\"正\")<nl>else:<nl><tab>if x==0:<nl><tab><tab>print(\"ゼロ\")<nl><tab>else:<nl><tab><tab>print(\"負\")"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split()))<nl>C = [0]*N<nl><nl>C[0]=0<nl>C[1]=abs(h[1]-h[0])<nl><nl>for i in range(2,N)<nl>C1=C[i-2]+abs(h[i]-h[i-2])<nl>C2=C{i-1}+abs(h[i]-h[i-3])<nl>C[i]=min(C1,C2)<nl>print(C[N-1])","out":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split()))<nl>C = [0]*N<nl><nl>C[0]=0<nl>C[1]=abs(h[1]-h[0])<nl><nl>for i in range(2,N):<nl><tab>C1=C[i-2]+abs(h[i]-h[i-2])<nl><tab>C2=C{i-1}+abs(h[i]-h[i-3])<nl><tab>C[i]=min(C1,C2)<nl>print(C[N-1])"}
{"in":"p = PersonD(\"かんな\", 1999, 2, 3)<tab><nl>p.age()<nl>p.stone()<nl>p.diff(p2)<nl>p.(is_same_month)","out":"p = PersonD(\"かんな\", 1999, 2, 3)<tab><nl>p.age()<nl>p.stone()<nl>p.diff(p2)<nl>p.is_same_month()"}
{"in":"for i in range(10):<nl><tab>print(\".\"):<nl><tab>for j in range(10):<nl><tab><tab>print(\".\")","out":"for i in range(10):<nl><tab>print(\".\")<nl><tab>for j in range(10):<nl><tab><tab>print(\".\")"}
{"in":"def sn(math)<nl>for w in range(45, 100, 5):<nl><tab>h = math.sqrt(w \/ 22)<nl><tab>print(w,h)","out":"def sn(math):<nl><tab>for w in range(45, 100, 5):<nl><tab><tab>h = math.sqrt(w \/ 22)<nl><tab><tab>print(w,h)"}
{"in":"plt.plot(x=西暦, y=降水量)","out":"plt.plot(x=df[\"西暦\"], y=df[\"降水量\"])"}
{"in":"<nl>x = floar(input())<nl><nl>from decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN<nl>print(Decimal(str(x))(Decimal('0'), rounding=ROUND_HALF_UP))<nl>","out":"<nl>x = float(input())<nl><nl>from decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN<nl>print(Decimal(str(x))(Decimal('0'), rounding=ROUND_HALF_UP))<nl>"}
{"in":"def PersonD(self year, month, day):<nl><tab>return round(2022- self.year)<nl><nl>def stone(self):<nl><tab><tab>if self.month == 1:<nl><tab><tab><tab><tab>return \"ガーネット\"<nl><tab><tab>elif self.month == 2:<nl><tab><tab><tab>return \"アメジスト\"<nl><tab><tab>elif self.month == 3:<nl><tab><tab><tab>return \"アクアマリン\"<nl><tab><tab>elif self.month == 4:<nl><tab><tab><tab>return \"ダイアモンド\"<nl><tab><tab>elif self.month == 5:<nl><tab><tab><tab>return \"エメラルド\"<nl><tab><tab>elif self.month == 6:<nl><tab><tab><tab>return \"ムーンストーン\"<nl><tab><tab>elif self.month == 7:<nl><tab><tab><tab>return \"ルビー\"<nl><tab><tab>elif self.month == 8:<nl><tab><tab><tab>return \"ペリドット\"<nl><tab><tab>elif self.month == 9:<nl><tab><tab><tab>return \"サファイア\"<nl><tab><tab>elif self.month == 10:<nl><tab><tab><tab>return \"オパール\"<nl><tab><tab>elif self.month == 11:<nl><tab><tab><tab>return \"トパーズ\"<nl><tab><tab>else:<nl><tab><tab><tab>return \"トルコ石\"<nl><nl>age = age(self)<nl>stone = stone(self)<nl><nl>print(\"年齢:\"age)<nl>print(\"誕生石:\"stone)","out":"def PersonD(year, month, day):<nl><tab>return round(2022- self.year)<nl><nl>def stone(self):<nl><tab><tab>if self.month == 1:<nl><tab><tab><tab><tab>return \"ガーネット\"<nl><tab><tab>elif self.month == 2:<nl><tab><tab><tab>return \"アメジスト\"<nl><tab><tab>elif self.month == 3:<nl><tab><tab><tab>return \"アクアマリン\"<nl><tab><tab>elif self.month == 4:<nl><tab><tab><tab>return \"ダイアモンド\"<nl><tab><tab>elif self.month == 5:<nl><tab><tab><tab>return \"エメラルド\"<nl><tab><tab>elif self.month == 6:<nl><tab><tab><tab>return \"ムーンストーン\"<nl><tab><tab>elif self.month == 7:<nl><tab><tab><tab>return \"ルビー\"<nl><tab><tab>elif self.month == 8:<nl><tab><tab><tab>return \"ペリドット\"<nl><tab><tab>elif self.month == 9:<nl><tab><tab><tab>return \"サファイア\"<nl><tab><tab>elif self.month == 10:<nl><tab><tab><tab>return \"オパール\"<nl><tab><tab>elif self.month == 11:<nl><tab><tab><tab>return \"トパーズ\"<nl><tab><tab>else:<nl><tab><tab><tab>return \"トルコ石\"<nl><nl>age = age(self)<nl>stone = stone(self)<nl><nl>print(\"年齢:\"age)<nl>print(\"誕生石:\"stone)"}
{"in":"class Counter(object):<nl><tab>counter: int<nl><tab>def __init__(self):<nl><tab><tab>self.counter = 0<nl><tab>def count(self):<tab>#動詞＋目的語<nl><tab><tab>self.counter += 1<nl><tab>def reset(self):<nl><tab><tab>self.counter = 0<nl><tab>def show(self):<nl><tab><tab>print(self.counter)<nl><tab>def __str__(self): # オブジェクトが文字列で見える<nl><tab><tab>return f'counter: {self.counter}'<nl><tab>def __str__ = (self):<nl><tab><tab>return str(self.counter)","out":"class Counter(object):<nl><tab>counter: int<nl><tab>def __init__(self):<nl><tab><tab>self.counter = 0<nl><tab>def count(self):<tab>#動詞+目的語<nl><tab><tab>self.counter += 1<nl><tab>def reset(self):<nl><tab><tab>self.counter = 0<nl><tab>def show(self):<nl><tab><tab>print(self.counter)<nl><tab>def __str__(self): # オブジェクトが文字列で見える<nl><tab><tab>return f'counter: {self.counter}'<nl><tab>def __str__(self):<nl><tab><tab>return str(self.counter)"}
{"in":"import math<nl>h = math.sqrt(w\/22)<nl>print(\"体重\":,w, \"身長\",h)","out":"import math<nl>h = math.sqrt(w\/22)<nl>print(\"体重\", w, \"身長\", h)"}
{"in":"pd=df()<nl>df.read_csv('pollen.csv')<nl>df.head()","out":"df = pd.read_csv('pollen.csv')<nl>df.head()"}
{"in":"Hey,kogi","out":"\"Hey,kogi\""}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc277\/tasks\/abc277_b<nl><nl>n = int(input())<nl>s = [input() for _ in range(n)]<nl>fi = ['H','D','C','S']<nl>se = ['A',2, 3, 4, 5, 6, 7, 8, 9, 'T', 'J', 'Q', 'K']<nl>ans = 1<nl>if len(s) == len(set(s)):<nl><tab>for i in s:<nl><tab><tab>if s[0][0] in fi:<nl><tab><tab><tab>prints[0][1]<nl><tab><tab><tab>if s[0][1] not in se:<nl><tab><tab><tab><tab>ans = 0<nl>if ans==1:<nl><tab>print('Yes')<nl>else:<nl><tab>print('No')<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc277\/tasks\/abc277_b<nl><nl>n = int(input())<nl>s = [input() for<tab>in range(n)]<nl>fi = ['H','D','C','S']<nl>se = ['A',2, 3, 4, 5, 6, 7, 8, 9, 'T', 'J', 'Q', 'K']<nl>ans = 1<nl>if len(s) == len(set(s)):<nl><tab>for i in s:<nl><tab><tab>if s[0][0] in fi:<nl><tab><tab><tab>print(s[0][1])<nl><tab><tab><tab>if s[0][1] not in se:<nl><tab><tab><tab><tab>ans = 0<nl>if ans==1:<nl><tab>print('Yes')<nl>else:<nl><tab>print('No')<nl>"}
{"in":"A,B=map(int,input(),split())<nl>C=(A-B)\/3+B<nl>print(C)","out":"<nl>x,y = map(int,input().split())<nl>if x == y:<nl><tab><tab>print(x)<nl>else:<nl><tab><tab>if x+y == 3:<nl><tab><tab><tab><tab>print(0)<nl><tab><tab>elif x+y == 2:<nl><tab><tab><tab><tab>print(1)<nl><tab><tab>else:<nl><tab><tab><tab><tab>prnt(2)"}
{"in":"print(\"Hallo\"","out":"print(\"Hallo\")"}
{"in":"import numpy as np<nl>df = pd.DataFrame({'PassengerId','sex': test['PassengerId'<'sex'], 'Survived': y_pred})<nl>df.to_csv(\"result.csv\", index=False)","out":"import numpy as np<nl>df = pd.DataFrame({'PassengerId': test['PassengerId'], 'Survived': y_pred})<nl>df.to_csv(\"result.csv\", index=False)"}
{"in":"kogi #https:\/\/atcoder.jp\/contests\/abc269\/submit<nl><nl>a, b, c, d = map(int, input(split()))<nl>x = (a + b) * (c - d)<nl>print(x)<nl>print('Takahashi')","out":"# kogi https:\/\/atcoder.jp\/contests\/abc274\/tasks\/abc274_a<nl><nl>A, B = map(int,input().split())<nl>S = A\/\/B<nl>prinrt(S)"}
{"in":"<nl><nl><nl>N, M = map(int, input().split())<nl><nl>A = []<nl>for _ in range( 2 * N ) :<nl><tab>A.append(input())<nl><nl>rank = [ [0, i] for i in range( 2 * N ) ]<nl># rank = []<nl># for i in range( 2 * N ) :<nl>#<tab> rank.append([ i ])<nl><nl>def battle(a, b):<nl><tab>if a == b :<nl><tab><tab>return False<nl><tab>elif ( a == \"G\" and b == \"C\" ) or ( a == \"C\" and b == \"P\" ) or ( a == \"P\" and b == \"G\" ) :<nl><tab><tab>return True<nl><tab>else :<nl><tab><tab>return False<nl><nl><nl><nl>for j in range( M ) :<nl><tab>for i in range( N ) :<nl><tab><tab>n1 = rank[2 * i ][1]<nl><tab><tab>n1 = rank[2 * i + 1 ][1]<nl><tab><tab>if battle( A[ n1 ][ j ], A[ n2 ][ j ] ) :<nl><tab><tab><tab>rank[2 * i ][ 0 ] += 1<nl><tab><tab>elif battle( A[ n2 ][ j ], A[ n1 ][ j ] ) :<nl><tab><tab><tab>rank[2 * i + 1 ][ 0 ] += 1<nl><tab>rank.sort( reverse = True)<nl><nl><nl><nl><nl><nl><nl><nl>print(rank)<nl><nl><nl><nl><nl><nl># A = []<nl># for _ in range( 2 * N ) :<nl>#<tab> a =input()<nl>#<tab> A.append(a)","out":"<nl><nl><nl>N, M = map(int, input().split())<nl><nl>A = []<nl>for<tab>in range( 2 * N ) :<nl><tab>A.append(input())<nl><nl>rank = [ [0, i] for i in range( 2 * N ) ]<nl># rank = []<nl># for i in range( 2 * N ) :<nl>#<tab> rank.append([ i ])<nl><nl>def battle(a, b):<nl><tab>if a == b :<nl><tab><tab>return False<nl><tab>elif ( a == \"G\" and b == \"C\" ) or ( a == \"C\" and b == \"P\" ) or ( a == \"P\" and b == \"G\" ) :<nl><tab><tab>return True<nl><tab>else :<nl><tab><tab>return False<nl><nl><nl><nl>for j in range( M ) :<nl><tab>for i in range( N ) :<nl><tab><tab>n1 = rank[2 * i ][1]<nl><tab><tab>n1 = rank[2 * i + 1 ][1]<nl><tab><tab>if battle( A[ n1 ][ j ], A[ n2 ][ j ] ) :<nl><tab><tab><tab>rank[2 * i ][ 0 ] += 1<nl><tab><tab>elif battle( A[ n2 ][ j ], A[ n1 ][ j ] ) :<nl><tab><tab><tab>rank[2 * i + 1 ][ 0 ] += 1<nl><tab>rank.sort( reverse = True)<nl><nl><nl><nl><nl><nl><nl><nl>print(rank)<nl><nl><nl><nl><nl><nl># A = []<nl># for<tab>in range( 2 * N ) :<nl>#<tab> a =input()<nl>#<tab> A.append(a)"}
{"in":"print r","out":"print(r)"}
{"in":"D = int(input()<nl>print(D\/100)","out":"D = int(input())<nl>print(D\/100)"}
{"in":"N = int(input())<nl>S = input()<nl>ss = [] #空のリストを作る<nl>for c in S:<nl><tab>#a = ord(c) + N<nl><tab>#if a >= ord('Z'):<nl><tab><tab>#a = a - ord('Z') + ord('A') - 1<nl><tab><tab>a = ((ord(c)-ord('A')+N) % 26)+ord('A')<nl><tab><tab>ss.apend(chr(a)) #リストに追加<nl>print(''.join(ss)) #リストを文字列に","out":"N = int(input())<nl>S = input()<nl>ss = [] #空のリストを作る<nl>for c in S:<nl><tab>#a = ord(c) + N<nl><tab>#if a >= ord('Z'):<nl><tab><tab>#a = a - ord('Z') + ord('A') - 1<nl><tab><tab>a = ((ord(c)-ord('A')+N) % 26)+ord('A')<nl><tab><tab>ss.append(chr(a)) #リストに追加<nl>print(''.join(ss)) #リストを文字列に"}
{"in":"clsa<tab>PersonD(object):<nl><tab><tab>def __ init__(self, name, year, month, day):<nl><tab><tab><tab>self.name = name<nl><tab><tab><tab>self.year = year<nl><tab><tab><tab>self.month = month<nl><tab><tab><tab>self.day = day<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab>return str([self.name, self.year, self.month, self.day])<nl><tab><tab>def age(self):<nl><tab><tab><tab>return 2022 - self.yaer<nl><nl>p = PersonD(\"かんな\", 1999, 2, 3)<nl>p","out":"class<tab>PersonD(object):<nl><tab><tab>def __ init__(self, name, year, month, day):<nl><tab><tab><tab>self.name = name<nl><tab><tab><tab>self.year = year<nl><tab><tab><tab>self.month = month<nl><tab><tab><tab>self.day = day<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab>return str([self.name, self.year, self.month, self.day])<nl><tab><tab>def age(self):<nl><tab><tab><tab>return 2022 - self.yaer<nl><nl>p = PersonD(\"かんな\", 1999, 2, 3)<nl>p"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl>a,b = map(int,input().split())<nl>c,d = map(int,input().split())<nl><nl>ans = a:d-b:c<nl>print(ans)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl>a,b = map(int,input().split())<nl>c,d = map(int,input().split())<nl><nl>ans = a*d-b*c<nl>print(ans)"}
{"in":"for x in date: <nl><tab>print(x)<nl><tab>print(x,x*2)<nl><tab>print(x,x*x)","out":"for x in data: <nl><tab>print(x)<nl><tab>print(x,x*2)<nl><tab>print(x,x*x)"}
{"in":"weights = [40, 45, 50, 55, 60, 65, 70]<nl>for x in wights:<nl><tab>BMI=x\/h**2<nl><tab>print(BMI)","out":"weights = [40, 45, 50, 55, 60, 65, 70]<nl>for x in weights:<nl><tab>BMI=x\/h**2<nl><tab>print(BMI)"}
{"in":"h =<tab>int(input(\"身長は？(cm)\"))#ユーザの入力<tab>enter押して実行<nl>h = h \/ 100<nl>w =<tab>int(input(\"体重は？(kg)\"))<nl>BMI =<tab>w \/ (h**2)<nl><nl>if BMI < 18.5:<nl><tab>print(\"低体重(やせ)\")<nl>else:<nl><tab>if 18.5 <= BMI <25:<nl><tab>print(\"普通体重\")<nl><tab>else:<nl><tab><tab>print(\"肥満\")","out":"h =<tab>int(input(\"身長は?(cm)\"))#ユーザの入力<tab>enter押して実行<nl>h = h \/ 100<nl>w =<tab>int(input(\"体重は?(kg)\"))<nl>BMI =<tab>w \/ (h**2)<nl><nl>if BMI < 18.5:<nl><tab>print(\"低体重(やせ)\")<nl>else:<nl><tab>if 18.5 <= BMI <25:<nl><tab><tab>print(\"普通体重\")<nl><tab>else:<nl><tab><tab>print(\"肥満\")"}
{"in":"print('a=', model.coef_, ', b=', model.intercept_)<nl><nl><nl>print(((model.coef_) * 24 )+ (float(model.intercept_))","out":"print('a=', model.coef_, ', b=', model.intercept_)<nl><nl><nl>print(model.coef_ * 24 + float(model.intercept_))"}
{"in":"<nl>x,y = map(int,input()\/split())<nl>if x == y:<nl><tab><tab>print(x)<nl>else:<nl><tab><tab>if x+y == 3:<nl><tab><tab><tab><tab>print(0)<nl><tab><tab>elif x+y == 2:<nl><tab><tab><tab><tab>print(1)<nl><tab><tab>else:<nl><tab><tab><tab><tab>prnt(2)","out":"<nl>x,y = map(int,input().split())<nl>if x == y:<nl><tab><tab>print(x)<nl>else:<nl><tab><tab>if x+y == 3:<nl><tab><tab><tab><tab>print(0)<nl><tab><tab>elif x+y == 2:<nl><tab><tab><tab><tab>print(1)<nl><tab><tab>else:<nl><tab><tab><tab><tab>print(2)"}
{"in":"X = df['kal','soldout']<nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)","out":"X = df[['kal','soldout']]<nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)"}
{"in":"p=PersonW(hanako,150,45)","out":"p=PersonW(\"hanako\",150,45)"}
{"in":"d=str(input())<nl>s=0<nl>D=list(d)<nl>for j in range(1000):<nl><tab>for i in range(len(D)):<nl><tab><tab>s+=int(D[i])<nl><tab>if s<=9:<nl><tab><tab>print('ソウルナンバールナンバー:',s)<nl><tab><tab>break<nl><tab>elif d==11 or d==22 or d==33 or d==44:<nl><tab><tab>print('ソウルナンバー:'s)<nl><tab><tab>break<nl><tab>else:<nl><tab><tab>d=str(s)<nl><tab><tab>s=0<nl><tab><tab>D=list(d)","out":"d=str(input())<nl>s=0<nl>D=list(d)<nl>for j in range(1000):<nl><tab>for i in range(len(D)):<nl><tab><tab>s+=int(D[i])<nl><tab>if s<=9:<nl><tab><tab>print('ソウルナンバールナンバー:',s)<nl><tab><tab>break<nl><tab>elif d==11 or d==22 or d==33 or d==44:<nl><tab><tab>print('ソウルナンバー:',s)<nl><tab><tab>break<nl><tab>else:<nl><tab><tab>d=str(s)<nl><tab><tab>s=0<nl><tab><tab>D=list(d)"}
{"in":"d = 20060524<nl>while d >=10:<nl> D = list(map(int, str(d)))<nl> print(D)<nl> d = sum(D)<nl> print(d)<nl> if d == 11 or d == 22 or d == 33 or d == 44:<nl><tab><tab> break<nl>point(\"ソウルナンバー:\", d)","out":"d = 20060524<nl>while d >=10:<nl> D = list(map(int, str(d)))<nl> print(D)<nl> d = sum(D)<nl> print(d)<nl> if d == 11 or d == 22 or d == 33 or d == 44:<nl><tab><tab> break<nl>print(\"ソウルナンバー:\", d)"}
{"in":"hight= [130,140,150,160,170,180,190,200]<nl>BMI=18<nl>newdata=[]<nl>for w in weights:<nl><tab><tab>w=BMI*h**2<nl><tab><tab>newdata18.append(BMI)<nl>print(height)<nl>print(newdata)","out":"hight= [130,140,150,160,170,180,190,200]<nl>BMI=18<nl>newdata=[]<nl>for w in weights:<nl><tab><tab>w=BMI*h**2<nl><tab><tab>newdata.append(BMI)<nl>print(height)<nl>print(newdata)"}
{"in":"A, B, C = map(int, input().split())<nl>mylsit=[A, B, C]<nl>print(max(mylist))","out":"A, B, C = map(int, input().split())<nl>mylist=[A, B, C]<nl>print(max(mylist))"}
{"in":"sum[animal.leg() for animal in animals]","out":"sum(animal.leg() for animal in animals)"}
{"in":"N=int(input())<nl>ans=0<nl>for i in range(1,N+1):<nl><tab>s_decimal=str(i)<nl><tab>s_octal=format(i,'o')<nl><tab>if not(('7' in s_demical)or('7' in s_octal)):<nl><tab><tab>ans+= 1<nl>print(ans)","out":"N=int(input())<nl>ans=0<nl>for i in range(1,N+1):<nl><tab>s_decimal=str(i)<nl><tab>s_octal=format(i,'o')<nl><tab>if not(('7' in s_decimal)or('7' in s_octal)):<nl><tab><tab>ans+= 1<nl>print(ans)"}
{"in":"# %%atcoder https:\/\/atcoder.jp\/contests\/abc192\/tasks\/abc192_c <nl><nl>def g1(x) :<nl><tab>str_x_list = list(str(x))<nl><tab>str_x_list.sorted()<nl><tab>ans = str_x_list.join<nl><tab>return(ans)<nl><nl><nl>N, K = map(int, input().split())<nl>print(g1(N))","out":"# %%atcoder https:\/\/atcoder.jp\/contests\/abc192\/tasks\/abc192_c <nl><nl>def g1(x) :<nl><tab>str_x_list = list(str(x))<nl><tab>str_x_list = sorted(str_x_list)<nl><tab>ans = str_x_list.join<nl><tab>return(ans)<nl><nl><nl>N, K = map(int, input().split())<nl>print(g1(N))"}
{"in":"x=18.5<nl>if X > 25:<nl><tab>print(\"肥満\")<nl>else:<nl><tab>if 18.5 <= x < 25 :<nl><tab><tab>print(\"普通体重\")<nl><tab>else:<nl><tab><tab>print(\"低体重（やせ\"))","out":"x=18.5<nl>if X > 25:<nl><tab>print(\"肥満\")<nl>else:<nl><tab>if 18.5 <= x < 25 :<nl><tab><tab>print(\"普通体重\")<nl><tab>else:<nl><tab><tab>print(\"低体重やせ\")"}
{"in":"df[\"文字数\"] = df[\"コメント\"].str.len()<nl>df.head()<nl>","out":"df[\"文字数\"] = df[\"コメント忘れ\"].str.len()<nl>df.head()<nl>"}
{"in":"# rpartition<nl>#pos = s.rfind('-')<nl>#s[:pos], pos[pos+1:]<nl><nl>pip install goto<nl>from goto import goto, label<nl><nl>def calc(s:str)->float:<nl><nl>label .start<nl><tab>if '*' in s:<nl><tab><tab>a, op, b = s.rpartition('*')<nl><tab><tab>return calc(a)*calc(b)<nl><tab><tab>goto .start<nl><tab>if '\/' in s:<nl><tab><tab>a, op, b = s.rpartition('\/')<nl><tab><tab>return calc(a)\/calc(b)<nl><tab><tab>goto .start<tab><tab><tab> <nl><tab>if '-' in s:<nl><tab><tab>a, op, b = s.rpartition('-')<nl><tab><tab>return calc(a)-calc(b)<nl><tab>if '+' in s:<nl><tab><tab>a, op, b = s.rpartition('+')<nl><tab><tab>return calc(a)+calc(b)<nl><tab>return float(s)<nl><nl>print(calc(\"1 + 2 * 3 \"))","out":"# rpartition<nl>#pos = s.rfind('-')<nl>#s[:pos], pos[pos+1:]<nl><nl>!pip install goto<nl>from goto import goto, label<nl><nl>def calc(s:str)->float:<nl><nl>label .start<nl><tab>if '*' in s:<nl><tab><tab>a, op, b = s.rpartition('*')<nl><tab><tab>return calc(a)*calc(b)<nl><tab><tab>goto .start<nl><tab>if '\/' in s:<nl><tab><tab>a, op, b = s.rpartition('\/')<nl><tab><tab>return calc(a)\/calc(b)<nl><tab><tab>goto .start<tab><tab><tab> <nl><tab>if '-' in s:<nl><tab><tab>a, op, b = s.rpartition('-')<nl><tab><tab>return calc(a)-calc(b)<nl><tab>if '+' in s:<nl><tab><tab>a, op, b = s.rpartition('+')<nl><tab><tab>return calc(a)+calc(b)<nl><tab>return float(s)<nl><nl>print(calc(\"1 + 2 * 3 \"))"}
{"in":"name = tomo<nl>height = 162<nl>weight = 47","out":"name = \"tomo\"<nl>height = 162<nl>weight = 47"}
{"in":"n,m=map(int,input().split())<nl>a=list(map(int,input().split()))<nl>b=list(map(int,input().split()))<nl>a=sort.a<nl>b=sort.b<nl>print(a,b)","out":"n,m=map(int,input().split())<nl>a=list(map(int,input().split()))<nl>b=list(map(int,input().split()))<nl>a=sorted(a)<nl>b=sorted(b)<nl>print(a,b)"}
{"in":"import math<nl><nl>for w in range(40,100,5):<nl><tab>h= math.sqrt(w\/22.0)<nl><tab>print ('体重'w, '身長'h)","out":"import math<nl><nl>for w in range(40,100,5):<nl><tab>h= math.sqrt(w\/22.0)<nl><tab>print ('体重', w, '身長'h)"}
{"in":"df['通勤'].mean()<nl>print(mean,'平均値')<nl>df['通勤'].max()<nl>df['通勤'].min","out":"print(平均値', df['通勤'].mean())<nl>df['通勤'].max()<nl>df['通勤'].min"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>X = int(input())<nl>for n in range(100,1000,10)<nl><tab><tab>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>X = int(input())<nl>for n in range(100,1000,10):<nl><tab><tab>pass"}
{"in":"#変数代入<nl>X=df[df['平均気温']]<nl>y=df['スギ花粉飛散量']","out":"#変数代入<nl>X=df[['平均気温']]<nl>y=df['スギ花粉飛散量']"}
{"in":"array([19.94203311])<nl>","out":"#array([19.94203311])<nl>"}
{"in":"w = 37.6<nl>import math<nl>h = math.sqrt(w\/22)<nl>print(\"体重:\",w, \"身長:\",h)<nl><nl>for w in range(40,100,5)<nl><tab>h = math.sqrt(w \/ 22)<nl><tab>print(w, h)","out":"w = 37.6<nl>import math<nl>h = math.sqrt(w\/22)<nl>print(\"体重:\",w, \"身長:\",h)<nl><nl>for w in range(40,100,5):<nl><tab>h = math.sqrt(w \/ 22)<nl><tab>print(w, h)"}
{"in":"stones=\"ガーネット アメジスト アクアマリン<tab>ダイヤモンド\tエメラルド \t真珠 ルビー\tペリドット サファイア\tオパール<tab>トパーズ トルコ石'<nl>len(stones)","out":"stones=\"ガーネット アメジスト アクアマリン<tab>ダイヤモンド<tab><tab><tab><tab>エメラルド<tab><tab><tab><tab> 真珠 ルビー<tab><tab><tab><tab>ペリドット サファイア<tab><tab><tab><tab>オパール<tab>トパーズ トルコ石\"<nl>len(stones)"}
{"in":"r,p=pearsonr(df['住宅価格'],df['住宅価格'])<nl>print('相関係数:'r)<nl>print('p値:'p)","out":"r,p=pearsonr(df['住宅価格'],df['住宅価格'])<nl>print('相関係数:', r)<nl>print('p値:', p)"}
{"in":"X_test = test['Pclass','Sex', 'Age','Fare','Embarked']","out":"X_test = test[['Pclass','Sex', 'Age','Fare','Embarked']]"}
{"in":"P=list(map(int, input().split()))<nl>S=0<nl>A=[]<nl>def num2alpha(a):<nl><tab>return chr(a+64)<nl>for i in P:<nl><tab>S=num2alpha(i)<nl><tab>A_lower.append(S)<nl>print(A)","out":"P=list(map(int, input().split()))<nl>S=0<nl>A=[]<nl>def num2alpha(a):<nl><tab>return chr(a+64)<nl>for i in P:<nl><tab>S=num2alpha(i)<nl><tab>A.append(S.lower())<nl>print(A)"}
{"in":"N,M=map(int,input().split())<nl># for i in range(N):<nl>#<tab> a,b=map(int,input().split())<nl># n = int(input())<tab># nは入力回数<nl># n = int(input())<tab># nは入力回数<nl>num_list = []<nl>for i in range(n):<nl><tab><tab>num_list.append(list(map(int,input().split())))<nl>print(num_list)<nl>str_list = [list(input().split()) for _ in range(N)]","out":"N,M=map(int,input().split())<nl># for i in range(N):<nl>#<tab> a,b=map(int,input().split())<nl># n = int(input())<tab># nは入力回数<nl># n = int(input())<tab># nは入力回数<nl>num_list = []<nl>for i in range(n):<nl><tab><tab>num_list.append(list(map(int,input().split())))<nl>print(num_list)<nl>str_list = [list(input().split()) for<tab>in range(N)]"}
{"in":"import math<nl>h=math.sprt(w\/22.0)<nl>print(\"体重\",w,\"身長\",h)","out":"import math<nl>h=math.sqrt(w\/22.0)<nl>print(\"体重\",w,\"身長\",h)"}
{"in":"symplify((x+x*y)\/x)","out":"simplify((x+x*y)\/x)"}
{"in":"BMI=18=[]<nl>newdata18=[]<nl>for h in heights:<nl><tab> w= BMI*(h**2) <nl><tab> newdata18.append(w)<nl>print(heights)<nl>print(newdata18)","out":"BMI=18<nl>newdata18=[]<nl>for h in heights:<nl><tab> w= BMI*(h**2) <nl><tab> newdata18.append(w)<nl>print(heights)<nl>print(newdata18)"}
{"in":"df.plt.scatter(\"降水量\", \"スギ花粉飛散量\")","out":"plt.scatter(df[\"降水量\"], df[\"スギ花粉飛散量\"])"}
{"in":"#%%atcoder abc191_b<nl>N,X=map(int,input().split())<nl>A=list(map(int,input().split()))<nl>b==0<nl>for a in A:<nl><tab>if a==N:<nl><tab><tab>A.pop(b)<nl><tab>elif a==X:<nl><tab><tab>A.pop(b)<nl><tab>b+=1<nl><nl>print(A)","out":"#%%atcoder abc191_b<nl>N,X=map(int,input().split())<nl>A=list(map(int,input().split()))<nl>b=0<nl>for a in A:<nl><tab>if a==N:<nl><tab><tab>A.pop(b)<nl><tab>elif a==X:<nl><tab><tab>A.pop(b)<nl><tab>b+=1<nl><nl>print(A)"}
{"in":"d = 20060925<nl><nl>while d >=10: #二桁のときは繰り返す<nl>　<tab>D = list(map(int, str(d)))<nl><tab>　# print(D)<nl><tab>　d = sum(D)<nl><tab>　# print(d)<nl><tab> if d == 11 or d == 22 or d == 33 or D == 44:<nl><tab><tab> break #条件を満たしたらループを抜ける<nl><nl><tab>print('ソールナンバー：', d)","out":"d = 20060925<nl><nl>while d >=10: #二桁のときは繰り返す<nl><tab><tab>D = list(map(int, str(d)))<nl><tab><tab># print(D)<nl><tab><tab>d = sum(D)<nl><tab><tab># print(d)<nl><tab><tab>if d == 11 or d == 22 or d == 33 or D == 44:<nl><tab><tab> break #条件を満たしたらループを抜ける<nl><nl>print('ソールナンバー:', d)"}
{"in":"df['住宅価格'] describe()","out":"df['住宅価格'].describe()"}
{"in":"x=30<nl>if x>0:　#コロン<nl><tab>print(\"正の数\")　#字下げ（インデント）<nl>else:　#そうでない<nl><tab>print(\"正の数でない\")","out":"x=30<nl>if x>0:<tab>#コロン<nl><tab>print(\"正の数\")<tab>#字下げ(インデント)<nl>else:<tab>#そうでない<nl><tab>print(\"正の数でない\")"}
{"in":"#ABC274　C問題<nl>#https:\/\/atcoder.jp\/contests\/abc274\/editorial\/5019<nl>#kogi https:\/\/atcoder.jp\/contests\/abc274\/tasks\/abc274_c<nl><nl>N=int(input())<nl>A=list(map(int,input().split()))<nl>ans=[0]*(2*N+1)<nl>prin(ans)<nl>for i,a in enumerate(A):<nl><tab>#iがリストの入っている位置<nl><tab>#aがその位置に入っている数字、文字<nl><tab>ans[2*i+1]=ans[a-1]+1<nl><tab>ans[2*i+2]=ans[a-1]+1<nl>prin(ans)<nl><nl>print(*ans,sep=\"\\n\")<nl>","out":"#ABC274<tab>C問題<nl>#https:\/\/atcoder.jp\/contests\/abc274\/editorial\/5019<nl>#kogi https:\/\/atcoder.jp\/contests\/abc274\/tasks\/abc274_c<nl><nl>N=int(input())<nl>A=list(map(int,input().split()))<nl>ans=[0]*(2*N+1)<nl>prin(ans)<nl>for i,a in enumerate(A):<nl><tab>#iがリストの入っている位置<nl><tab>#aがその位置に入っている数字、文字<nl><tab>ans[2*i+1]=ans[a-1]+1<nl><tab>ans[2*i+2]=ans[a-1]+1<nl>print(ans)<nl><nl>print(*ans,sep=\"\\n\")<nl>"}
{"in":"pearsonr(df['部屋数'], df['住宅価格'])<nl>print('相関係数:', r)<nl>print('p値:',p)","out":"r, p = pearsonr(df['部屋数'], df['住宅価格'])<nl>print('相関係数:', r)<nl>print('p値:',p)"}
{"in":"df.stats.pearsonr(df['降水量'], df['スギ花粉飛散量'])","out":"scipy.stats.pearsonr(df['降水量'], df['スギ花粉飛散量'])"}
{"in":"A,B=map(int,input().split)<nl>c=1<nl>d=0<nl>while c<B:<nl><tab>c+=A-1<nl><tab>d+=A<nl>print(d)<nl>","out":"A,B=map(int,input().split())<nl>c=1<nl>d=0<nl>while c<B:<nl><tab>c+=A-1<nl><tab>d+=A<nl>print(d)<nl>"}
{"in":"r = Ratio(1, 2) #<nl>print(r) # 1\/2 と表示<nl><nl>r2 = Ratio(2, 6) #<nl>print(r2) # 約分して､1\/３と表示<nl><nl>print(r.add(r2)) # 加算 5\/６と表示<nl>print(r.mul(r2)) # 掛け算 1\/6 と表示","out":"r = Ratio(1, 2) #<nl>print(r) # 1\/2 と表示<nl><nl>r2 = Ratio(2, 6) #<nl>print(r2) # 約分して､1\/3と表示<nl><nl>print(r.add(r2)) # 加算 5\/6と表示<nl>print(r.mul(r2)) # 掛け算 1\/6 と表示"}
{"in":"def calc(s:str)->float:<nl><tab><tab>if '+' in s:<nl><tab><tab><tab>values = list(map(float, s.split('+')))<nl><tab><tab><tab>return sum(values)<nl><tab><tab>if '*' in s:<nl><tab><tab><tab>values = list(map(float, s.split('*')))<nl><tab><tab><tab>return values[0]*values[1]<nl><tab><tab>return float(s)<nl><tab><nl>print(caluc(\"2*3\"))","out":"def calc(s:str)->float:<nl><tab><tab>if '+' in s:<nl><tab><tab><tab>values = list(map(float, s.split('+')))<nl><tab><tab><tab>return sum(values)<nl><tab><tab>if '*' in s:<nl><tab><tab><tab>values = list(map(float, s.split('*')))<nl><tab><tab><tab>return values[0]*values[1]<nl><tab><tab>return float(s)<nl><tab><nl>print(calc(\"2*3\"))"}
{"in":"heights=[130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200]<nl>data=[]<nl>for h in heights:<nl>w = 18 * h * h","out":"heights=[130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200]<nl>data=[]<nl>for h in heights:<nl><tab>w = 18 * h * h"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A,B=map(int, input(),split()) #決まり文句決まり文句<nl><nl>D=A-B<nl>print((D\/A)*100)<nl>#割引率<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl>A, B = map(int, input().split())<nl>D = A-B<nl>print(D\/A*100)<nl>"}
{"in":"read_csv('pollen.csv')","out":"pd.read_csv('pollen.csv')"}
{"in":"x=37<nl>if X>0:<nl><tab>print(\"正の数\")<nl>else:<nl><tab>print(\"負の数\")","out":"x=37<nl>if x>0:<nl><tab>print(\"正の数\")<nl>else:<nl><tab>print(\"負の数\")"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl>A, B = map(int, input().split())<nl>C = (A - B)\/3 + B<nl>if 50 <= B and B <= A and A <= 300:<nl><nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl>A, B = map(int, input().split())<nl>C = (A - B)\/3 + B<nl>if 50 <= B and B <= A and A <= 300:<nl><tab>pass<nl>"}
{"in":"https:\/\/kuramitsulab.github.io\/data\/student-mat.csv","out":"!wget https:\/\/kuramitsulab.github.io\/data\/student-mat.csv"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B,(map(int,input().splist())<nl><nl>if A==B:<nl><tab>print(C)<nl>elif A==C<nl><tab>print(B)<nl> else:<nl><tab>print(A)<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B = map(int,input().split())<nl><nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl>else:<nl><tab>print(A)<nl>"}
{"in":"for i in sns.kdeplot(df.groupby('母学歴').get_group(n)['G3'], shade = True, label = 'n'):","out":"for i in sns.kdeplot(df.groupby('母学歴').get_group(n)['G3'], shade = True, label = 'n'):<nl><tab>pass"}
{"in":"def factorial(n):<nl><tab>v = i:<nl><tab>for i in range(1,n):<nl><tab><tab>v *= i<nl><tab>return v","out":"def factorial(n):<nl><tab>v = i<nl><tab>for i in range(1,n):<nl><tab><tab>v *= i<nl><tab>return v"}
{"in":"np scipy.stats.pearsonr(df['降水量'], df['スギ花粉飛散量'])","out":"scipy.stats.pearsonr(df['降水量'], df['スギ花粉飛散量'])"}
{"in":"#データセットの作成　唐揚げ<nl>kara_imgdir_path = pathlib.Path('..\/..\/karapu\/karaage\/')<nl>kara_file_list = sorted([str(path) for path in kara_imgdir_path.glob('*.jpg')])<nl><nl>kara_ds_path = tf.data.Dataset.from_tensor_slices(kara_file_list)<nl><nl>kara_image_ds = kara_ds_path.map(load_and_preprocess_image)<nl><nl>kara_image_labels = [1]*377 #唐揚げはラベル１<nl>kara_label_ds = tf.data.Dataset.from_tensor_slices(tf.cast(kara_image_labels, tf.int64))<nl>#ラベルと画像のデータの結合<nl>kara_image_label_ds = tf.data.Dataset.zip((image_ds, label_ds))<nl><nl>#データセットの作成プードル<nl>pu_imgdir_path = pathlib.Path('..\/..\/karapu\/poodle\/')<nl>pu_file_list = sorted([str(path) for path in pu_imgdir_path.glob('*.jpg')])<nl><nl>pu_ds_path = tf.data.Dataset.from_tensor_slices(pu_file_list)<nl><nl>pu_image_ds = pu_ds_path.map(load_and_preprocess_image)<nl><nl>pu_image_labels = [0]*402　#プードルはラベル0<nl><nl>pu_label_ds = tf.data.Dataset.from_tensor_slices(tf.cast(pu_image_labels, tf.int64))<nl>pu_image_label_ds = tf.data.Dataset.zip((pu_image_ds, pu_label_ds))<nl><nl>#唐揚げとプードルの結合<nl>ds = kara_image_label_ds.concatenate(pu_image_label_ds)<nl>#シャッフル<nl>ds_images_labels = ds.shuffle(779)<nl><nl>#trainとvalidにデータを分ける(train,valid)=(679, 100)<nl>tf.random.set_seed(1)<nl>ds_images_labels = ds_images_labels.shuffle(1000,reshuffle_each_iteration=False)<nl>train = ds_images_labels.take(679)<nl>valid = ds_images_labels.skip(679)<nl><nl>BATCH_SIZE = 32<nl>BUFFER_SIZE = 779<nl>IMAGE_SIZE = (128,128)<nl>steps_per_epoch = np.ceil(779\/BATCH_SIZE) #画像数\/バッチ数<nl>#dsが(img, label)のタプルのため、lambdaに二つ引数を渡す。<nl>ds_train = ds_images_labels.map(lambda x,i:preprocess(x,i,size=IMAGE_SIZE,mode='train'))<nl>ds_train = ds_train.shuffle(buffer_size=BUFFER_SIZE).repeat()<nl>ds_train = ds_train.batch(BATCH_SIZE)<nl><nl>ds_valid = valid.map(lambda x,i:preprocess(x,i,size=IMAGE_SIZE,mode='train'))<nl>ds_valid = ds_valid.batch(BATCH_SIZE)","out":"#データセットの作成<tab>唐揚げ<nl>kara_imgdir_path = pathlib.Path('..\/..\/karapu\/karaage\/')<nl>kara_file_list = sorted([str(path) for path in kara_imgdir_path.glob('*.jpg')])<nl><nl>kara_ds_path = tf.data.Dataset.from_tensor_slices(kara_file_list)<nl><nl>kara_image_ds = kara_ds_path.map(load_and_preprocess_image)<nl><nl>kara_image_labels = [1]*377 #唐揚げはラベル1<nl>kara_label_ds = tf.data.Dataset.from_tensor_slices(tf.cast(kara_image_labels, tf.int64))<nl>#ラベルと画像のデータの結合<nl>kara_image_label_ds = tf.data.Dataset.zip((image_ds, label_ds))<nl><nl>#データセットの作成プードル<nl>pu_imgdir_path = pathlib.Path('..\/..\/karapu\/poodle\/')<nl>pu_file_list = sorted([str(path) for path in pu_imgdir_path.glob('*.jpg')])<nl><nl>pu_ds_path = tf.data.Dataset.from_tensor_slices(pu_file_list)<nl><nl>pu_image_ds = pu_ds_path.map(load_and_preprocess_image)<nl><nl>pu_image_labels = [0]*402<tab>#プードルはラベル0<nl><nl>pu_label_ds = tf.data.Dataset.from_tensor_slices(tf.cast(pu_image_labels, tf.int64))<nl>pu_image_label_ds = tf.data.Dataset.zip((pu_image_ds, pu_label_ds))<nl><nl>#唐揚げとプードルの結合<nl>ds = kara_image_label_ds.concatenate(pu_image_label_ds)<nl>#シャッフル<nl>ds_images_labels = ds.shuffle(779)<nl><nl>#trainとvalidにデータを分ける(train,valid)=(679, 100)<nl>tf.random.set_seed(1)<nl>ds_images_labels = ds_images_labels.shuffle(1000,reshuffle_each_iteration=False)<nl>train = ds_images_labels.take(679)<nl>valid = ds_images_labels.skip(679)<nl><nl>BATCH_SIZE = 32<nl>BUFFER_SIZE = 779<nl>IMAGE_SIZE = (128,128)<nl>steps_per_epoch = np.ceil(779\/BATCH_SIZE) #画像数\/バッチ数<nl>#dsが(img, label)のタプルのため、lambdaに二つ引数を渡す。<nl>ds_train = ds_images_labels.map(lambda x,i:preprocess(x,i,size=IMAGE_SIZE,mode='train'))<nl>ds_train = ds_train.shuffle(buffer_size=BUFFER_SIZE).repeat()<nl>ds_train = ds_train.batch(BATCH_SIZE)<nl><nl>ds_valid = valid.map(lambda x,i:preprocess(x,i,size=IMAGE_SIZE,mode='train'))<nl>ds_valid = ds_valid.batch(BATCH_SIZE)"}
{"in":"lives[4,7] #０から数えて7行目、4列目","out":"lives[4,7] #0から数えて7行目、4列目"}
{"in":"N,M=map(int, input().split())<nl>A = list(map(lambda x: (int(x), 0), input().split()))<nl>B = list(map(lambda x: (int(x), 1), input().split()))<nl>AB = list(sorted(A+B))<nl>num, src = AB[0]<nl>S= []<nl>for i in range(1, len(ab)):<nl><tab>_num, _src = AB[i]<nl>if src != _src:<nl><tab>S.append(_num - num)<nl><tab>num = _num<nl><tab>src = _src<nl>print(min(S))","out":"N,M=map(int, input().split())<nl>A = list(map(lambda x: (int(x), 0), input().split()))<nl>B = list(map(lambda x: (int(x), 1), input().split()))<nl>AB = list(sorted(A+B))<nl>num, src = AB[0]<nl>S= []<nl>for i in range(1, len(AB)):<nl><tab>num, src = AB[i]<nl>if src != src:<nl><tab>S.append(_num - num)<nl><tab>num = num<nl><tab>src = src<nl>print(min(S))"}
{"in":"for colum in df .columns[:-1]:<nl><tab><tab>X = df[[犯罪率]]<nl><tab><tab>y = df['住宅価格']<nl><tab><tab>model = LinearRegression()<nl><tab><tab>model.fit(X, y)<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>r2 = r2_score(y, y_pred)<nl><tab><tab>print(f'[column]決定係数(R2):', r2)","out":"for colum in df .columns[:-1]:<nl><tab><tab>X = df[[\"犯罪率\"]]<nl><tab><tab>y = df['住宅価格']<nl><tab><tab>model = LinearRegression()<nl><tab><tab>model.fit(X, y)<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>r2 = r2_score(y, y_pred)<nl><tab><tab>print(f'[column]決定係数(R2):', r2)"}
{"in":"from IPython.lib.display import YouTubeVideo<nl>#kogi https:\/\/atcoder.jp\/contests\/abc233\/tasks\/abc233_a<nl>X, Y = map(int, input().split())<nl>C = 0<nl><nl>while X < Y<nl>X = X + 10<nl>C = C + 1","out":"from IPython.lib.display import YouTubeVideo<nl>#kogi https:\/\/atcoder.jp\/contests\/abc233\/tasks\/abc233_a<nl>X, Y = map(int, input().split())<nl>C = 0<nl><nl>while X < Y:<nl><tab>X = X + 10<nl><tab>C = C + 1"}
{"in":"plt.figure(figsize[7,7])<nl>plt.scatter(df['部屋数'], df['住宅価格'],alpha=0.3)<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()","out":"plt.figure(figsize=(7,7))<nl>plt.scatter(df['部屋数'], df['住宅価格'],alpha=0.3)<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()"}
{"in":"Hello,masako","out":"\"Hello,masako\""}
{"in":"class Duck(object):<nl><tab>def face(self):<nl><tab><tab>return \"🦆\"<nl><tab>def sound(self):<nl><tab><tab>return \"くわくわくわ\"<nl><tab>def _repr_html_(self):<nl><tab><tab>return f'<img width=\"200\" src=\"https:\/\/emoji-img.s3.ap-northeast-1.amazonaws.com\/svg\/1f986.svg\">","out":"class Duck(object):<nl><tab>def face(self):<nl><tab><tab>return \"🦆\"<nl><tab>def sound(self):<nl><tab><tab>return \"くわくわくわ\"<nl><tab>def _repr_html_(self):<nl><tab><tab>return f'<img width=\"200\" src=\"https:\/\/emoji-img.s3.ap-northeast-1.amazonaws.com\/svg\/1f986.svg\">'"}
{"in":"X_test = test[[['Pclass','Sex', 'Age','Fare','Embarked']]","out":"X_test = test[['Pclass','Sex', 'Age','Fare','Embarked']]"}
{"in":"plt.figure(figsize=(8, 8))<nl>plt.scatter(df['部屋数'],dh['住宅価格'],alpha=0.5, color='pulple')<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show","out":"plt.figure(figsize=(8, 8))<nl>plt.scatter(df['部屋数'],df['住宅価格'],alpha=0.5, color='pulple')<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B,C=(map(int,input().split()))<nl>if A==B:<nl><tab>print(C)<nl>if B==C:<nl><tab>print(A)<nl>else print(B)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B,C=(map(int,input().split()))<nl>if A==B:<nl><tab>print(C)<nl>if B==C:<nl><tab>print(A)<nl>else:<nl><tab>print(B)"}
{"in":"D=int(input()<nl>print(D\/100)","out":"D=int(input())<nl>print(D\/100)"}
{"in":"for name in zip(df['名前'], df['血液型']):<nl><tab>print(name, blood)<nl>","out":"for name, blood in zip(df['名前'], df['血液型']):<nl><tab>print(name, blood)<nl>"}
{"in":"d=20041214<nl><nl>while d >=10: #二桁の時は繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>#print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>#print(d)<nl><tab><tab>if d ==11or d ==22 or d ==33 or d== 44:<nl><tab><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print(\"ソウルナンバー\"：',d)<tab><tab><tab> ","out":"d=20041214<nl><nl>while d >=10: #二桁の時は繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>#print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>#print(d)<nl><tab><tab>if d ==11or d ==22 or d ==33 or d== 44:<nl><tab><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print(\"ソウルナンバー\":',d)<tab><tab><tab> "}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_b<nl>s = [[0]*10 for _ in range(10)]<nl>for i in range(10):<nl><tab>s[i] = input()<nl><nl>for i in range(10):<nl><tab>for j in range (10):<nl><tab><tab>if s[i][j] == '#':<nl><tab><tab><tab>A = s.index(#)<nl><tab><tab><tab>B = max(i)<nl><tab><tab><tab>#C = min(j)<nl><tab><tab><tab>#D = max(j)<nl><nl>print(A, ' ', B)<nl>#print(C, ' ', D)","out":"# kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_b<nl>s = [[0]*10 for _ in range(10)]<nl>for i in range(10):<nl><tab>s[i] = input()<nl><nl>for i in range(10):<nl><tab>for j in range (10):<nl><tab><tab>if s[i][j] == '#':<nl><tab><tab><tab>A = s.index(\"#\")<nl><tab><tab><tab>B = max(i)<nl><tab><tab><tab>#C = min(j)<nl><tab><tab><tab>#D = max(j)<nl><nl>print(A, ' ', B)<nl>#print(C, ' ', D)"}
{"in":"#説明変数、目的変数を選ぶ。<nl>X_train = train[[\"PassengerId\", \"Pclass\", \"Name\", \"Sex\", \"Age\",\t\"SibSp\", \"Parch\", \"Ticket\",\t\"Fare\",\t\"Cabin\", \"Embarked\"]]<nl>y_train = train[\"Survived\"]<nl>X_test = test[\"PassengerId\", \"Pclass\", \"Name\", \"Sex\", \"Age\",\t\"SibSp\", \"Parch\", \"Ticket\",\t\"Fare\",\t\"Cabin\", \"Embarked\"]]","out":"#説明変数、目的変数を選ぶ。<nl>X_train = train[[\"PassengerId\", \"Pclass\", \"Name\", \"Sex\", \"Age\",<tab><tab><tab><tab>\"SibSp\", \"Parch\", \"Ticket\",<tab><tab><tab><tab>\"Fare\",<tab><tab><tab><tab>\"Cabin\", \"Embarked\"]]<nl>y_train = train[\"Survived\"]<nl>X_test = test[[\"PassengerId\", \"Pclass\", \"Name\", \"Sex\", \"Age\",<tab><tab><tab><tab>\"SibSp\", \"Parch\", \"Ticket\",<tab><tab><tab><tab>\"Fare\",<tab><tab><tab><tab>\"Cabin\", \"Embarked\"]]"}
{"in":"pandaz.set_option('bento.csv',None)<nl>df['name'].value_counts()","out":"pandas.set_option('bento.csv',None)<nl>df['name'].value_counts()"}
{"in":"X = df['通勤', '教員']<tab># 説明変数<nl>y = df['住宅価格'] # 目的変数<nl>pd.concat([X,y], axis=1).head() #最初の5件のみみてみる","out":"X = df[['通勤', '教員']]<tab># 説明変数<nl>y = df['住宅価格'] # 目的変数<nl>pd.concat([X,y], axis=1).head() #最初の5件のみみてみる"}
{"in":"for col in df.columns:<nl><tab>#print(col)<nl><tab>r,p = pearsonr(df[col], df['住宅価格'])<nl><tab>print(f'相関係数{col}-{住宅価格}')","out":"for col in df.columns:<nl><tab>#print(col)<nl><tab>r,p = pearsonr(df[col], df['住宅価格'])<nl><tab>print(f'相関係数{col}-住宅価格')"}
{"in":"def func(x):<nl><tab><tab>if x > 10:<nl><tab><tab>print(x)<nl><tab><tab>func(x + 1)<nl>func(0)<nl><nl># output<nl># 0<nl># 1<nl># 2<nl># 3<nl># 4<nl># 5<nl># 6<nl># 7<nl># 8<nl># 9<nl># 10","out":"def func(x):<nl><tab><tab>if x > 10:<nl><tab><tab><tab>print(x)<nl><tab><tab><tab>func(x + 1)<nl>func(0)<nl><nl># output<nl># 0<nl># 1<nl># 2<nl># 3<nl># 4<nl># 5<nl># 6<nl># 7<nl># 8<nl># 9<nl># 10"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc214\/tasks\/abc214_b<nl>S, T = map(int, input().split()) # 入力処理<nl><nl>C=0<nl>for a in range(101):<nl><tab>for b in range(101):<nl><tab><tab>for c in range(101):<nl><tab><tab><tab><tab>if a+b+c<=S and a*b*c<=T<nl><tab><tab><tab><tab>C+=1<nl><nl>print(C)<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc214\/tasks\/abc214_b<nl>S, T = map(int, input().split()) # 入力処理<nl><nl>C=0<nl>for a in range(101):<nl><tab>for b in range(101):<nl><tab><tab>for c in range(101):<nl><tab><tab><tab><tab>if a+b+c<=S and a*b*c<=T:<nl><tab><tab><tab><tab><tab>C+=1<nl><nl>print(C)"}
{"in":"plt.scatter(df['築年']),df['住宅価格'])<nl>plt.xlabel('築年')<nl>plt.ylabel('住宅価格')<nl>plt.show()","out":"plt.scatter(df['築年'],df['住宅価格'])<nl>plt.xlabel('築年')<nl>plt.ylabel('住宅価格')<nl>plt.show()"}
{"in":"n,a,b = map(int, input().split())<nl>ans=0<nl>for item in range(n):<nl><tab>x = [int(i) for i in item]<nl><tab>if a <= sum(x) <= b:<nl><tab><tab>ans+=1<nl>print(ans)","out":"n,a,b = map(int, input().split())<nl>ans=0<nl>for item in range(n):<nl><tab>x = [int(i) for i in range(item)]<nl><tab>if a <= sum(x) <= b:<nl><tab><tab>ans+=1<nl>print(ans)"}
{"in":"if BMI < 18.50:<nl> print(\"低体重\")<nl>else if<tab>BMI >= 18.50:<nl>print(\"低体重でない\")","out":"if BMI < 18.50:<nl><tab>print(\"低体重\")<nl>elif<tab>BMI >= 18.50:<nl><tab>print(\"低体重でない\")"}
{"in":"weight=[40,45,50,55,60,65,70]<nl>for x in weight:<nl><tab>print(w)=x\/1.6**2<nl><tab>","out":"weight=[40,45,50,55,60,65,70]<nl>for x in weight:<nl><tab>print(w)<nl><tab>"}
{"in":"d=20070122<nl>while d>=10:#二桁の時は繰り返す<nl>　　D=list(map(int,　str(d)))<nl>　　print(D)<nl>　　d=sum(D)<nl>　　print(d)","out":"d=20070122<nl>while d>=10:#二桁の時は繰り返す<nl><tab><tab>D=list(map(int,<tab>str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)"}
{"in":"%%time<nl>X = df[[ i for i in columns[-1]]]<nl><nl>y = df['住宅価格']<nl>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>if max<r2:<nl>max=r2<nl>print(f'{column},{column1},{column2}と住宅価格の決定係数(R2):', r2)","out":"%%time<nl>X = df[[ i for i in columns[-1]]]<nl><nl>y = df['住宅価格']<nl>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>if max<r2:<nl><tab>max=r2<nl>print(f'{column},{column1},{column2}と住宅価格の決定係数(R2):', r2)"}
{"in":"A=[list(map(int, input().split())) for _ in range(3)]<nl><nl>b=[]<nl>N=int(input())<nl><nl>for _ in range(N):<nl><tab><tab>b.append(int(input()))<nl><tab><tab>print(b)<nl><tab><tab>#ビンゴを判定する<nl><tab><tab>for i in range(3):<nl><tab><tab><tab>for j in range(3):<nl><tab><tab><tab><tab>if a[i][j]==b:<nl><tab><tab><tab><tab><tab>a[i][j]=0","out":"A=[list(map(int, input().split())) for<tab>in range(3)]<nl><nl>b=[]<nl>N=int(input())<nl><nl>for<tab>in range(N):<nl><tab><tab>b.append(int(input()))<nl><tab><tab>print(b)<nl><tab><tab>#ビンゴを判定する<nl><tab><tab>for i in range(3):<nl><tab><tab><tab>for j in range(3):<nl><tab><tab><tab><tab>if a[i][j]==b:<nl><tab><tab><tab><tab><tab>a[i][j]=0"}
{"in":"X = df['通勤', '教員比']<nl>y = df['住宅価格']<nl><nl>model = LinearRegression<nl>model.fit(X,y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(6, 6))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3)<nl>plt.xlabel = '実測'<nl>plt.ylabel = '予測'<nl>plt.ylim(0, 50)","out":"X = df[['通勤', '教員比']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression<nl>model.fit(X,y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(6, 6))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3)<nl>plt.xlabel = '実測'<nl>plt.ylabel = '予測'<nl>plt.ylim(0, 50)"}
{"in":"df.read_csv('file.csv', sep=',')<nl>df.head(5)","out":"df = pd.read_csv('file.csv', sep=',')<nl>df.head(5)"}
{"in":"from scipy.stats import pearsonr<nl><nl>for column in df.select_dtypes('int64').columns:<nl><tab><tab>rho.p=pearsonrr(df[colums],df['G3'])<nl><tab><tab>print(f'[column]-G3: ρ=[r]')","out":"from scipy.stats import pearsonr<nl><nl>for column in df.select_dtypes('int64').columns:<nl><tab><tab>rho.p=pearsonr(df[colums],df['G3'])<nl><tab><tab>print(f'[column]-G3: ρ=[r]')"}
{"in":"def print_sim(index):<nl><tab><tab>similarity = cosine_similarity(X[index:index+1], X)[0]<nl><tab><tab>top10 = np.argsort(similariy)[::-1][:10]<nl><tab><tab>for i in top10:<nl><tab><tab><tab><tab>print(similarity[i], df[\"コメント\"][i])<nl><nl>print_sim(1)","out":"def print_sim(index):<nl><tab><tab>similarity = cosine_similarity(X[index:index+1], X)[0]<nl><tab><tab>top10 = np.argsort(similarity)[::-1][:10]<nl><tab><tab>for i in top10:<nl><tab><tab><tab><tab>print(similarity[i], df[\"コメント忘れ\"][i])<nl><nl>print_sim(1)"}
{"in":"class dog(object):<nl><tab>name:str<nl><tab>def __init__(self, name):<nl><tab><tab>self.name = name<nl><tab>def __repr__(self):<nl><tab><tab><tab>return '🐕'<nl><tab>def face(self):<nl><tab><tab><tab>return '🐶'<nl><tab>def sound(self):<nl><tab><tab><tab>return 'ワン'<nl><tab>def leg(self):<nl><tab><tab><tab>return 4<nl>dog = Dog('こむぎ')","out":"class Dog(object):<nl><tab>name:str<nl><tab>def _init__(self, name):<nl><tab><tab>self.name = name<nl><tab>def _repr__(self):<nl><tab><tab><tab>return '🐕'<nl><tab>def face(self):<nl><tab><tab><tab>return '🐶'<nl><tab>def sound(self):<nl><tab><tab><tab>return 'ワン'<nl><tab>def leg(self):<nl><tab><tab><tab>return 4<nl>dog = Dog('こむぎ')"}
{"in":"df=read_csv('pollen.csv')<nl>df.head()","out":"df=pd.read_csv('pollen.csv')<nl>df.head()"}
{"in":"x = BMI<nl>if x < 18.5:<nl><tab>print(\"低体重（やせ）\")<nl>else:<nl><tab><tab>if 18.5 < x < 25<nl><tab><tab><tab> print(\"普通体重\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"肥満\")","out":"x = BMI<nl>if x < 18.5:<nl><tab>print(\"低体重(やせ)\")<nl>else:<nl><tab><tab>if 18.5 < x < 25:<nl><tab><tab><tab> print(\"普通体重\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"肥満\")"}
{"in":"d=1997112#朔間零<nl>while d>=10: #2桁のときは繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d==11or d==22 or d==33 or d==44:<nl><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><tab><tab><nl>if d==3<nl><tab>print('多才でパワフルな人気者')<nl><nl>print('ソウルナンバー:',d)","out":"d=1997112#朔間零<nl>while d>=10: #2桁のときは繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d==11 or d==22 or d==33 or d==44:<nl><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><tab><tab><nl>if d==3:<nl><tab>print('多才でパワフルな人気者')<nl><nl>print('ソウルナンバー:',d)"}
{"in":"plt.hist(df[\"部屋数\"],bins=30<nl>plt.show()","out":"plt.hist(df[\"部屋数\"],bins=30)<nl>plt.show()"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>X=int(input())<nl><nl>if X\/10>1:<nl><tab>print('Yes')<nl>else X\/10<1:<nl><tab>print('No')<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>X=int(input())<nl><nl>if X\/10>1:<nl><tab>print('Yes')<nl>else:<nl><tab>print('No')<nl>"}
{"in":"X = df(['通勤', '教員'])<tab># 説明変数<nl>y = df['住宅価格'] # 目的変数<nl>pd.concat([X,y], axis=1).head() #最初の5件のみみてみる","out":"X = df[['通勤', '教員']]<tab># 説明変数<nl>y = df['住宅価格'] # 目的変数<nl>pd.concat([X,y], axis=1).head() #最初の5件のみみてみる"}
{"in":"d = 2008_01_13<nl><nl>while d >=10: #二桁の時は繰り返す<nl>　　d = list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d = sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d == 11 or d == 22 or d == 33 or d == 44 :<nl><tab><tab><tab>break #条件を満たしたらループを抜ける","out":"d = 2008_01_13<nl><nl>while d >=10: #二桁の時は繰り返す<nl><tab><tab>d = list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d = sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d == 11 or d == 22 or d == 33 or d == 44 :<nl><tab><tab><tab>break #条件を満たしたらループを抜ける"}
{"in":"df,head(5)","out":"df.head(5)"}
{"in":"df= read_csv('pollen.csv', sep=',')<nl>head.df","out":"df= pd.read_csv('pollen.csv', sep=',')<nl>head.df"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc214\/tasks\/abc214_b<nl>S, T = map(int, input().split()) # 入力処理<nl><nl>C=0<nl>for a in range(101):<nl><tab>for b in range(101):<nl><tab><tab>for c in range(101):<nl><tab><tab><tab>a+b+c<=S and a*b*c<=T<nl><nl>print(C):<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc214\/tasks\/abc214_b<nl>S, T = map(int, input().split()) # 入力処理<nl><nl>C=0<nl>for a in range(101):<nl><tab>for b in range(101):<nl><tab><tab>for c in range(101):<nl><tab><tab><tab>a+b+c<=S and a*b*c<=T<nl><nl>print(C)<nl>"}
{"in":"d=20041214<nl><nl>while d >=10: #二桁の時は繰り返す<nl>　　　　D=list(map(int,str(d)))<nl>　　　　print(D)<nl>　　　　d=sum(D)<nl>　　　　＃print(d)＃print(d)<nl>if d ==11or d ==22 or d ==33 or d== 44:<nl><tab> break #条件を満たしたらループを抜ける","out":"d=20041214<nl><nl>while d >=10: #二桁の時は繰り返す<nl><tab><tab><tab><tab>D=list(map(int,str(d)))<nl><tab><tab><tab><tab>print(D)<nl><tab><tab><tab><tab>d=sum(D)<nl><tab><tab><tab><tab>#print(d)#print(d)<nl>if d ==11or d ==22 or d ==33 or d== 44:<nl><tab> break #条件を満たしたらループを抜ける"}
{"in":"w = 37.6<nl>import math<nl>h = math.sqrt(w\/22)<nl>print(\"体重:\",w, \"身長:\",h)<nl><nl>for w in range(40,100,5)<nl><tab>h = math.sqrt(w \/ 22):<nl><tab><tab>print(w, h)","out":"w = 37.6<nl>import math<nl>h = math.sqrt(w\/22)<nl>print(\"体重:\",w, \"身長:\",h)<nl><nl>for w in range(40,100,5):<nl><tab>h = math.sqrt(w \/ 22):<nl><tab><tab>print(w, h)"}
{"in":"kaggle competitions download -c spaceship-titanic<nl>Use the Kaggle API to download the dataset.<nl>https:\/\/github.com\/Kaggle\/kaggle-api","out":"!kaggle competitions download -c spaceship-titanic<nl># Use the Kaggle API to download the dataset.<nl># https:\/\/github.com\/Kaggle\/kaggle-api"}
{"in":"# 別の書き方<nl>if BMI < 18.5:<nl><tab>print(\"低体重（やせ）\")<nl>elif 18.5<=BMI and BMI <25.0: #elif else ifのこと<nl>　print(\"普通体重\")<nl>elif BMI >= 25.0:<nl><tab>print(\"肥満\")","out":"# 別の書き方<nl>if BMI < 18.5:<nl><tab>print(\"低体重(やせ)\")<nl>elif 18.5<=BMI and BMI <25.0: #elif else ifのこと<nl><tab>print(\"普通体重\")<nl>elif BMI >= 25.0:<nl><tab>print(\"肥満\")"}
{"in":"d=int(input())<nl>D=list(map(int,str(d))<nl>print(D)<nl>sum=sum(D)","out":"d=int(input())<nl>D=list(map(int,str(d)))<nl>print(D)<nl>sum=sum(D)"}
{"in":"S = str(input())<nl><nl>m = len(S)<nl># print(m)<nl><nl>for i in range(m):<nl><tab>x = S[i:]<nl><tab>y = S[:i]<nl><tab># print(x)<nl><tab># print(y)<nl><tab># print(x+y)<nl><tab>b = []<nl><tab>r = x+y<nl><tab>b.append(r)<nl><tab># print(r)<nl><tab>print(b,end=',')<nl><tab>h = []<nl><tab>h.appned(b)<nl><tab>pirnt(h)<nl># max_b = max(b)<nl># min_b = min(b)<nl># print(min_b)<nl># print(max_b)","out":"S = str(input())<nl><nl>m = len(S)<nl># print(m)<nl><nl>for i in range(m):<nl><tab>x = S[i:]<nl><tab>y = S[:i]<nl><tab># print(x)<nl><tab># print(y)<nl><tab># print(x+y)<nl><tab>b = []<nl><tab>r = x+y<nl><tab>b.append(r)<nl><tab># print(r)<nl><tab>print(b,end=',')<nl><tab>h = []<nl><tab>h.append(b)<nl><tab>pirnt(h)<nl># max_b = max(b)<nl># min_b = min(b)<nl># print(min_b)<nl># print(max_b)"}
{"in":"import seaborn as sns<nl>plt.title('グラフの名称')<nl>plt.show()<nl>plt.show()[0m","out":"import seaborn as sns<nl>plt.title('グラフの名称')<nl>plt.show()<nl>plt.show()"}
{"in":"df=pd.read_csv('\/content\/bento.csv')<nl>d.head()","out":"df=pd.read_csv('\/content\/bento.csv')<nl>df.head()"}
{"in":"#A17(ABC238)<nl>n=int(input())<nl>if (2**(n\/2)+n)(2**(n\/2)-n)>0:<nl><tab>print('Yes')<nl>else:<nl><tab>print('No')","out":"#A17(ABC238)<nl>n=int(input())<nl>if (2**(n\/2)+n)*(2**(n\/2)-n)>0:<nl><tab>print('Yes')<nl>else:<nl><tab>print('No')"}
{"in":"BMI18=[]<nl>for h in heights:<nl><tab>w = 18*(h\/100)**2<nl><tab>BMI18.append(w)<nl><tab>for h in heights:<nl><tab>w = 19*(h\/100)**2<nl><tab>BMI19.append(w)<nl>plt.plot(heights,BMI18,label='BMI=18')<nl>plt.xlabel('heights')<nl>plt.ylabel('weights')<nl>plt.legend()<nl>plt.show()","out":"BMI18=[]<nl>for h in heights:<nl><tab>w = 18*(h\/100)**2<nl><tab>BMI18.append(w)<nl>for h in heights:<nl><tab>w = 19*(h\/100)**2<nl><tab>BMI19.append(w)<nl>plt.plot(heights,BMI18,label='BMI=18')<nl>plt.xlabel('heights')<nl>plt.ylabel('weights')<nl>plt.legend()<nl>plt.show()"}
{"in":"x=int(input())<nl>array=list(map(int,input().split()))<nl>s=0<nl>for i in range(x):<nl><tab>for k in range(1000):<nl><tab><tab>if (array[i]-(3*k))\/(3+(4*k))%1==0:<nl><tab><tab>print(array[i],k)<nl><tab><tab><tab>s+=1<nl>print(x-s)","out":"x=int(input())<nl>array=list(map(int,input().split()))<nl>s=0<nl>for i in range(x):<nl><tab>for k in range(1000):<nl><tab><tab>if (array[i]-(3*k))\/(3+(4*k))%1==0:<nl><tab><tab><tab>print(array[i],k)<nl><tab><tab><tab>s+=1<nl>print(x-s)"}
{"in":"X = train[[\"likes\",\"dislikes\", \"comment_count\"]<nl>y = df[\"y\"]","out":"X = train[[\"likes\",\"dislikes\", \"comment_count\"]]<nl>y = df[\"y\"]"}
{"in":"printttt(\"Hello World)\"<tab> # わざと構文エラー","out":"print(\"Hello World\")<tab> # わざと構文エラー"}
{"in":"d = 20050508<nl><nl>while d >=10: #二桁の時は繰り返す<nl>　D = list(map(int, str(d)))<nl>　print(D)<nl>　d = sum(D)<nl>　print(d)<nl>　if d == 11 or d == 22 or d == 33 or d == 44:<nl><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print('ソウルナンバー:', d)<tab><tab>","out":"d = 20050508<nl><nl>while d >=10: #二桁の時は繰り返す<nl><tab>D = list(map(int, str(d)))<nl><tab>print(D)<nl><tab>d = sum(D)<nl><tab>print(d)<nl><tab>if d == 11 or d == 22 or d == 33 or d == 44:<nl><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print('ソウルナンバー:', d)<tab><tab>"}
{"in":"X = d1[['Pclass', 'Sex_num', 'Age', 'SibSp', 'Parch', 'Fare']] <nl>y = df1['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(4,4))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 200)<nl>r2= r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)","out":"X = df1[['Pclass', 'Sex_num', 'Age', 'SibSp', 'Parch', 'Fare']] <nl>y = df1['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(4,4))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 200)<nl>r2= r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)"}
{"in":"def calc(s:str)->float:<nl><tab>if '+'in s:<nl><tab><tab>a, b = map(float,<tab>s.split('+')<nl><tab><tab>return a+b<nl><tab>return float(s)<nl><nl><tab>print(calc(\"1+10\"))<nl><tab>print(calc(\"-1\"))","out":"def calc(s:str)->float:<nl><tab>if '+'in s:<nl><tab><tab>a, b = map(float,<tab>s.split('+'))<nl><tab><tab>return a+b<nl><tab>return float(s)<nl><nl><tab>print(calc(\"1+10\"))<nl><tab>print(calc(\"-1\"))"}
{"in":"if BMI > 25.00:<nl><tab><tab>print (\"太りすぎ\")<nl><tab><tab>else:<nl><tab><tab>Print(\"太りすぎでない\")","out":"if BMI > 25.00:<nl><tab>print(\"太りすぎ\")<nl>else:<nl><tab>print(\"太りすぎでない\")"}
{"in":"def print_sim(index):<nl><tab><tab>vec = bags.toarray()<nl><tab><tab>similarity = cosine_similarity(vec[index:index+1], vec)[0]<nl><tab><tab>top10 = np.argsort(similariy)[::-1][:10]<nl><tab><tab>for i in top10:<nl><tab><tab><tab><tab>print(similarity[i], df[\"コメント\"][1])<nl><nl>print_sim(1)","out":"def print_sim(index):<nl><tab><tab>vec = bags.toarray()<nl><tab><tab>similarity = cosine_similarity(vec[index:index+1], vec)[0]<nl><tab><tab>top10 = np.argsort(similarity)[::-1][:10]<nl><tab><tab>for i in top10:<nl><tab><tab><tab><tab>print(similarity[i], df[\"コメント忘れ\"][1])<nl><nl>print_sim(1)"}
{"in":"%%time<nl>X = df[[ str(i) for i in df.columns[-1]]]<nl><nl>y = df['住宅価格']<nl>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)","out":"%%time<nl>X = df[[ str(i) for i in df.columns[:-1]]]<nl><nl>y = df['住宅価格']<nl>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)"}
{"in":"def clac(s:str)->:<nl><tab>s=list(=map(float,s.split('+')))<nl><tab>return sum(s)","out":"def clac(s:str):<nl><tab>s=list(=map(float,s.split('+')))<nl><tab>return sum(s)"}
{"in":"def calc(s: str)->float:<nl><tab>a, b = map(float, s.split('+')<nl><tab>return a+b<tab><tab>","out":"def calc(s: str)->float:<nl><tab>a, b = map(float, s.split('+'))<nl><tab>return a+b<tab><tab>"}
{"in":"A,B=map())(int,input().split<nl><nl>print(((A-B)\/3)+B)","out":"A,B=map(int,input().split())<nl><nl>print(((A-B)\/3)+B)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A,B = map(int, int().split()) #決まり文句<nl><nl>print(A-B)\/A*100","out":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A,B = map(int, input().split()) #決まり文句<nl><nl>print(A-B)\/A*100"}
{"in":"map(function, iterable, ...)<nl>x,y=map(int,input().split())<nl>a=list(map(int,input().split()))<nl>c=list(map(int,input().split()))<nl>def func(val):<nl><tab><tab>return val - (sum(a)+sum(c))\/(x+y)<nl><nl>a = map(func, a)<nl>c = map(func, c)<nl>print(a,c)<nl>s=1000000000<nl># if len(list(set(a) & set(c))):<nl>#<tab><tab> print('0')<nl># else:<nl>#<tab><tab> for i in range(x):<nl>#<tab><tab><tab><tab> for j in range(y):<nl>#<tab><tab><tab><tab><tab><tab> b=abs(int(a[i])-int(c[j]))<nl>#<tab><tab><tab><tab><tab><tab> if s>b:<nl>#<tab><tab><tab><tab><tab><tab><tab><tab> s=b<nl>#<tab><tab> print(s)","out":"# map(function, iterable, ...)<nl>x,y=map(int,input().split())<nl>a=list(map(int,input().split()))<nl>c=list(map(int,input().split()))<nl>def func(val):<nl><tab><tab>return val - (sum(a)+sum(c))\/(x+y)<nl><nl>a = map(func, a)<nl>c = map(func, c)<nl>print(a,c)<nl>s=1000000000<nl># if len(list(set(a) & set(c))):<nl>#<tab><tab> print('0')<nl># else:<nl>#<tab><tab> for i in range(x):<nl>#<tab><tab><tab><tab> for j in range(y):<nl>#<tab><tab><tab><tab><tab><tab> b=abs(int(a[i])-int(c[j]))<nl>#<tab><tab><tab><tab><tab><tab> if s>b:<nl>#<tab><tab><tab><tab><tab><tab><tab><tab> s=b<nl>#<tab><tab> print(s)"}
{"in":"x=0<nl>if x>0:<nl><tab> print(\"正\")<nl>else:<nl><tab> if x=0:<nl><tab><tab><tab>print(\"ゼロ\")<nl><tab> else:<nl><tab><tab><tab>print(\"負\")","out":"x=0<nl>if x>0:<nl><tab> print(\"正\")<nl>else:<nl><tab> if x==0:<nl><tab><tab><tab>print(\"ゼロ\")<nl><tab> else:<nl><tab><tab><tab>print(\"負\")"}
{"in":"a,b=map(int,input().split())<nl>A=str(a)<nl>B=str(B)<nl>a=A**b<nl>b=B**A<nl>print(a)","out":"a,b=map(int,input().split())<nl>A=str(a)<nl>B=str(b)<nl>a=A**b<nl>b=B**A<nl>print(a)"}
{"in":"class<tab>PersonD(object):<nl><tab><tab>def __init__(self, name, year, month, day):<nl><tab><tab><tab>self.name = name<nl><tab><tab><tab>self.year = year<nl><tab><tab><tab>self.month = month<nl><tab><tab><tab>self.day = day<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab>return str([self.name, self.year, self.month, self.day])<nl><tab><tab>def age(self):<nl><tab><tab><tab>return 2022 - self.yaer<nl><nl>p = PersonD(\"かんな\", 1999, 2, 3)<nl>p.age()","out":"class<tab>PersonD(object):<nl><tab><tab>def __init__(self, name, year, month, day):<nl><tab><tab><tab>self.name = name<nl><tab><tab><tab>self.year = year<nl><tab><tab><tab>self.month = month<nl><tab><tab><tab>self.day = day<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab>return str([self.name, self.year, self.month, self.day])<nl><tab><tab>def age(self):<nl><tab><tab><tab>return 2022 - self.year<nl><nl>p = PersonD(\"かんな\", 1999, 2, 3)<nl>p.age()"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc214\/tasks\/abc214_b<nl>S, T = map(int, input().split()) # 入力処理<nl><nl>C=0<nl>for a in range(101):<nl><tab>for b in range(101):<nl><tab><tab>for c in range(101):<nl><tab><tab><tab>a+b+c<=S and a*b*c<=T<nl><tab><tab><tab>C=C++<nl><nl>print(C):<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc214\/tasks\/abc214_b<nl>S, T = map(int, input().split()) # 入力処理<nl><nl>C=0<nl>for a in range(101):<nl><tab>for b in range(101):<nl><tab><tab>for c in range(101):<nl><tab><tab><tab>if a+b+c<=S and a*b*c<=T:<nl><tab><tab><tab><tab>C+=1<nl><nl>print(C):<nl>"}
{"in":"import sklearn.linear_model.LinearRegression()<nl>model = sklearn.linear_model.LinearRegression()<nl>x_model=df['平均気温']<nl>y_model=df['スギ花粉飛散量']<nl>model.fit(x_model,y_model)","out":"import sklearn.linear_model<nl>model = sklearn.linear_model.LinearRegression()<nl>x_model=df['平均気温']<nl>y_model=df['スギ花粉飛散量']<nl>model.fit(x_model,y_model)"}
{"in":"C=(A-B)\/3+B #平均血圧<nl>50≤B≤A≤300<nl>print(C)","out":"C=(A-B)\/3+B #平均血圧<nl>50<=B<=A<=300<nl>print(C)"}
{"in":"%%time<nl>X = df[[ [i] for i in df.columns[-1]]]<nl><nl>y = df['住宅価格']<nl>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)","out":"%%time<nl>X = df[[ [i] for i in df.columns[:-1]]]<nl><nl>y = df['住宅価格']<nl>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)"}
{"in":"from scipy.stats import pearsonr<nl><nl>for column in df.select_dtypes('int64').columns:<nl><tab><tab>r,=pearsonrr(df[column],df['G3'])<nl><tab><tab>print(f'[column]-G3: ρ=[r]')","out":"from scipy.stats import pearsonr<nl><nl>for column in df.select_dtypes('int64').columns:<nl><tab><tab>r,=pearsonr(df[column],df['G3'])<nl><tab><tab>print(f'[column]-G3: ρ=[r]')"}
{"in":"$ tar xvf ldcc-20140209.tar.gz","out":"! tar xvf ldcc-20140209.tar.gz"}
{"in":"def show(lives):<nl><tab>N,M=lives.shape<nl><tab>for y in range(N):<nl><tab><tab>for x in range(M):<nl><tab><tab><tab><tab>c=count(lives,x,y)<nl><tab><tab><tab><tab>if lives[y,x]==1: <nl><tab><tab><tab><tab><tab><tab>if c==2 or c==3: #生存<nl><tab><tab><tab><tab><tab><tab><tab><tab>print('🐣',end='')<tab><tab><nl><tab><tab><tab><tab><tab><tab><tab><tab><tab>pass<nl><tab><tab><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab><tab><tab><tab>lives[y,x]=0<nl><tab><tab><tab><tab>elif c==3:<nl><tab><tab><tab><tab><tab><tab>lives[y,x]=1<nl>return lives<nl><nl><tab><tab><tab><tab><tab><tab><tab> <nl>　","out":"def show(lives):<nl><tab>N,M=lives.shape<nl><tab>for y in range(N):<nl><tab><tab>for x in range(M):<nl><tab><tab><tab><tab>c=count(lives,x,y)<nl><tab><tab><tab><tab>if lives[y,x]==1: <nl><tab><tab><tab><tab><tab><tab>if c==2 or c==3: #生存<nl><tab><tab><tab><tab><tab><tab><tab><tab>print('🐣',end='')<tab><tab><nl><tab><tab><tab><tab><tab><tab><tab><tab><tab>pass<nl><tab><tab><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab><tab><tab><tab>lives[y,x]=0<nl><tab><tab><tab><tab>elif c==3:<nl><tab><tab><tab><tab><tab><tab>lives[y,x]=1<nl>return lives<nl><nl><tab><tab><tab><tab><tab><tab><tab> <nl><tab>"}
{"in":"S=input()<nl>if S.find(er):<nl><tab>print(\"er\")<nl>else:<nl><tab>print(\"ist\")","out":"S=input()<nl>if S.find(\"er\"):<nl><tab>print(\"er\")<nl>else:<nl><tab>print(\"ist\")"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl> A, B = map(int, input(), split())<nl><nl> print((D\/A)*100)<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl>A, B = map(int, input(), split())<nl><nl>print((D\/A)*100)<nl>"}
{"in":"df.plot(df['西暦'],df['降水量''])<nl>plt.ylabel('降水量(mm)')<nl>plt.show()","out":"df.plot(df['西暦'],df['降水量'])<nl>plt.ylabel('降水量(mm)')<nl>plt.show()"}
{"in":"if BMI < 18.50 :<nl><tab>print(\"低体重\")<nl><tab>else BMI => 18.50 :<nl><tab><tab>print(\"低体重でない\")","out":"if BMI < 18.50 :<nl><tab>print(\"低体重\")<nl>else:<nl><tab>print(\"低体重でない\")"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B,(map(int,input().splist())<nl><nl>if A==B:<nl><tab>print(C)<nl>elsf A==C<nl><tab>print(B)<nl> else:<nl><tab>print(A)<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B = map(int,input().split())<nl><nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl>else:<nl><tab>print(A)<nl>"}
{"in":"ABC273　C問題<nl>#kogi https:\/\/atcoder.jp\/contests\/abc273\/tasks\/abc273_c<nl>","out":"# ABC273<tab>C問題<nl>#kogi https:\/\/atcoder.jp\/contests\/abc273\/tasks\/abc273_c<nl>"}
{"in":"d = 20051219<nl>while d >=10: #二桁の時は繰り返す<nl>　　D = list(map(int,str(d)))<nl>　　#print(D)<nl>　　d = sum(D)<nl>　　#print(d)<nl>　　if d== 11 or d == 22 or d == 33 or d == 44:<nl><tab><tab><tab><tab>break <nl><nl><tab>print('ソールナンバー：', d)","out":"d = 20051219<nl>while d >=10: #二桁の時は繰り返す<nl><tab><tab>D = list(map(int,str(d)))<nl><tab><tab>#print(D)<nl><tab><tab>d = sum(D)<nl><tab><tab>#print(d)<nl><tab><tab>if d== 11 or d == 22 or d == 33 or d == 44:<nl><tab><tab><tab><tab>break <nl><nl><tab>print('ソールナンバー:', d)"}
{"in":"<nl>x,y=map(int,input().split())<nl>a=list(map(int,input().split()))<nl>c=list(map(int,input().split()))<nl>def func(val):<nl><tab><tab>return val - (sum(a)+sum(c))\/(x+y)<nl><nl>a = map(func, a)<nl>c = map(func, c)<nl>prit(a,c)<nl>s=1000000000<nl># if len(list(set(a) & set(c))):<nl>#<tab><tab> print('0')<nl># else:<nl>#<tab><tab> for i in range(x):<nl>#<tab><tab><tab><tab> for j in range(y):<nl>#<tab><tab><tab><tab><tab><tab> b=abs(int(a[i])-int(c[j]))<nl>#<tab><tab><tab><tab><tab><tab> if s>b:<nl>#<tab><tab><tab><tab><tab><tab><tab><tab> s=b<nl>#<tab><tab> print(s)","out":"<nl>x,y=map(int,input().split())<nl>a=list(map(int,input().split()))<nl>c=list(map(int,input().split()))<nl>def func(val):<nl><tab><tab>return val - (sum(a)+sum(c))\/(x+y)<nl><nl>a = map(func, a)<nl>c = map(func, c)<nl>print(a,c)<nl>s=1000000000<nl># if len(list(set(a) & set(c))):<nl>#<tab><tab> print('0')<nl># else:<nl>#<tab><tab> for i in range(x):<nl>#<tab><tab><tab><tab> for j in range(y):<nl>#<tab><tab><tab><tab><tab><tab> b=abs(int(a[i])-int(c[j]))<nl>#<tab><tab><tab><tab><tab><tab> if s>b:<nl>#<tab><tab><tab><tab><tab><tab><tab><tab> s=b<nl>#<tab><tab> print(s)"}
{"in":"for col in df. columns:('住宅価格')<nl><tab><tab>r,p=pearsor(df[col],df['住宅価格'])<nl><tab><tab>print(f'相関係数{col}-住宅価格: {r}')","out":"for col in df. columns:<nl><tab><tab>r,p=pearsor(df[col],df['住宅価格'])<nl><tab><tab>print(f'相関係数{col}-住宅価格: {r}')"}
{"in":"describe(df)","out":"df.describe()"}
{"in":"a = \"あああ\"<nl>return a","out":"a = \"あああ\"<nl>print(a)"}
{"in":"h = int(input(\"身長は？(cm)\"))<nl>w = int(input(\"体重は？(kg)\")) <nl>h = h \/100<nl>BMI = w \/ h**2<nl>if BMI < 18.5:<nl><tab>print(BMI,\"低体重（やせ）\")<nl>else:<nl><tab>if BMI >== 25:<nl><tab><tab>print(BMI,\"肥満\")<nl><tab>else:<nl><tab><tab>print(BMI,\"普通体重\")","out":"h = int(input(\"身長は?(cm)\"))<nl>w = int(input(\"体重は?(kg)\")) <nl>h = h \/100<nl>BMI = w \/ h**2<nl>if BMI < 18.5:<nl><tab>print(BMI,\"低体重(やせ)\")<nl>else:<nl><tab>if BMI >= 25:<nl><tab><tab>print(BMI,\"肥満\")<nl><tab>else:<nl><tab><tab>print(BMI,\"普通体重\")"}
{"in":"#例<nl>class<tab>PersonW(object):<nl><tab>name : str<nl><tab>height : float<nl><tab>weight : float<nl><nl><tab>def __init__(self,height,weight):<nl><tab><tab>self.height = height<nl><tab><tab>self.weight = weight<nl><nl><tab>def getHeight(self):<nl><tab><tab>return self.height<nl><tab>def getWeight(self):<nl><tab><tab>return self.weight<nl><nl><tab>def bmi(self):<nl><tab><tab>return self.weight \/ (self.height * self.height) * 10000<nl><nl><tab>def iwb(self):<nl><tab><tab>return self.(22 * self.height * self.height) \/ 10000<nl><nl><tab>def info(self):<tab> #オブジェクトが文字列で見える<nl><tab><tab>print('身長 : ' + str(self.height) + 'cm')<nl><tab><tab>print('体重 : ' + str(self.weight) + 'kg')<nl><tab><tab>print('BMI : ' + str(self.bmi()))<nl><tab><tab>print('理想体重 : ' + str(self.iwb()) + 'kg')<nl><nl>person1 = PersonW(Height , Weight)<nl>person2 = PersonW(161.0 , 45.0)<nl>persons = [person1 , person2]<nl><nl>index = 1<nl><nl>for person in persons:<nl><tab>print('---' + str(index) + '人目---')<nl><tab>person.info()<nl><tab>index += 1","out":"#例<nl>class<tab>PersonW(object):<nl><tab>name : str<nl><tab>height : float<nl><tab>weight : float<nl><nl><tab>def __init__(self,height,weight):<nl><tab><tab>self.height = height<nl><tab><tab>self.weight = weight<nl><nl><tab>def getHeight(self):<nl><tab><tab>return self.height<nl><tab>def getWeight(self):<nl><tab><tab>return self.weight<nl><nl><tab>def bmi(self):<nl><tab><tab>return self.weight \/ (self.height * self.height) * 10000<nl><nl><tab>def iwb(self):<nl><tab><tab>return (22 * self.height * self.height) \/ 10000<nl><nl><tab>def info(self):<tab> #オブジェクトが文字列で見える<nl><tab><tab>print('身長 : ' + str(self.height) + 'cm')<nl><tab><tab>print('体重 : ' + str(self.weight) + 'kg')<nl><tab><tab>print('BMI : ' + str(self.bmi()))<nl><tab><tab>print('理想体重 : ' + str(self.iwb()) + 'kg')<nl><nl>person1 = PersonW(Height , Weight)<nl>person2 = PersonW(161.0 , 45.0)<nl>persons = [person1 , person2]<nl><nl>index = 1<nl><nl>for person in persons:<nl><tab>print('---' + str(index) + '人目---')<nl><tab>person.info()<nl><tab>index += 1"}
{"in":"aaaa","out":"#aaaa"}
{"in":"S=input()<nl>ans=\"\"<nl>for i in range(len(S)):<nl><tab>if i%2==0<nl><tab><tab>ans+=S[i]<nl>print(ans)","out":"S=input()<nl>ans=\"\"<nl>for i in range(len(S)):<nl><tab>if i%2==0:<nl><tab><tab>ans+=S[i]<nl>print(ans)"}
{"in":"from sklearn.linear_model import LinearRegression()<nl>model = sklearn.linear_model.LinearRegression()","out":"from sklearn.linear_model import LinearRegression<nl>model = sklearn.linear_model.LinearRegression()"}
{"in":"mean＝df['通勤'].mean()","out":"mean=df['通勤'].mean()"}
{"in":"plt.plot(weights,newdata,label='175cm')　#計算したデータ列にあるものを使う<nl>plt.xlabel('weight')<nl>plt.ylabel('BMI')<nl>plt.legend() #凡例を表示する<nl>plt.show()","out":"plt.plot(weights,newdata,label='175cm')<tab>#計算したデータ列にあるものを使う<nl>plt.xlabel('weight')<nl>plt.ylabel('BMI')<nl>plt.legend() #凡例を表示する<nl>plt.show()"}
{"in":"w = 50<nl>h = 1.6<nl>BMI = w \/ (h**2)<nl>if BMI < 18.5:<nl><tab>print(\"低体重（やせ）\")<nl>else:<nl><tab><tab>if BMI > 25.0 <nl><tab><tab><tab> print(\"肥満\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"普通体重\")","out":"w = 50<nl>h = 1.6<nl>BMI = w \/ (h**2)<nl>if BMI < 18.5:<nl><tab>print(\"低体重(やせ)\")<nl>else:<nl><tab><tab>if BMI > 25.0 :<nl><tab><tab><tab> print(\"肥満\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"普通体重\")"}
{"in":"plt.hist[df('スギ花粉飛散量')]<nl>plt.show()","out":"plt.hist(df['スギ花粉飛散量'])<nl>plt.show()"}
{"in":"n,k=map(str,input().split())<nl>a=list(n)<nl>g1=a.sorted<nl>print(g1)","out":"n,k=map(str,input().split())<nl>a=list(n)<nl>g1=sorted(a)<nl>print(g1)"}
{"in":"d=200847<nl>while d >10:#二桁のときは繰り返す<nl>D=list(map(int,str(d))#<nl>#print(D)<nl>d=sum(d)<nl>#print(d)<nl>if d==11 or d==22 or d==33 or d==44<nl>break #条件を満たしたらループを抜ける<nl><nl>print('ソウルナンバー')(d)","out":"d=200847<nl>while d >10:#二桁のときは繰り返す<nl><tab>D=list(map(int,str(d))#<nl>#print(D)<nl><tab>d=sum(d)<nl>#print(d)<nl><tab>if d==11 or d==22 or d==33 or d==44<nl><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print('ソウルナンバー')(d)"}
{"in":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df(['kcal','soldout']) <nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()<nl>","out":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df[['kcal','soldout']]<nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()<nl>"}
{"in":"plt.figure(figsize=(8 , 8)) # 図の大きさ<nl>plt.scatter(df[\"部屋数\"], df[\"住宅価格\"], alpha=0.5, color=#ffadad)<nl>plt.xlabel(\"部屋数\")<nl>plt.ylabel(\"住宅価格\")<nl>plt.show()","out":"plt.figure(figsize=(8 , 8)) # 図の大きさ<nl>plt.scatter(df[\"部屋数\"], df[\"住宅価格\"], alpha=0.5, color=\"#ffadad\")<nl>plt.xlabel(\"部屋数\")<nl>plt.ylabel(\"住宅価格\")<nl>plt.show()"}
{"in":"calc(\"123\":str)->float","out":"calc(\"123\":str)"}
{"in":"<nl>A,B,C=map(int,input().split())<nl> <nl>for a in range (A,B+1):<nl><tab>if a%C!=0:<nl><tab><tab>continueif <nl><tab>elif a%C==0:<nl><tab><tab>break <nl><tab>elif a==B and a%C!=0:<nl><tab><tab>print(\"-1\")<nl>print(a)","out":"<nl>A,B,C=map(int,input().split())<nl> <nl>for a in range (A,B+1):<nl><tab>if a%C!=0:<nl><tab><tab>continue<nl><tab>elif a%C==0:<nl><tab><tab>break <nl><tab>elif a==B and a%C!=0:<nl><tab><tab>print(\"-1\")<nl>print(a)"}
{"in":"class Counter(object):<nl><tab><tab>counter: int<nl><tab><tab>#初期値を与えるメソッドinit<nl><tab><tab>def __init__(self):<nl><tab><tab><tab><tab>self.counter = 0<nl><tab><tab>def count(self): #メソッド名は動詞+目的語<nl><tab><tab><tab><tab>self.counter += 1<nl><tab><tab>def show(self):<nl><tab><tab><tab><tab>print(self.counter)<nl><tab><tab>def __str__(self): #printのときはこちら<nl><tab><tab><tab><tab>return str(self.counter)<nl><tab><tab>def __repr__(self): #オブジェクトが文字列で見える<nl><tab><tab><tab><tab>return f'counter:[self.counter]'<nl><tab><tab>def add(self, x):<nl><tab><tab><tab>","out":"class Counter(object):<nl><tab><tab>counter: int<nl><tab><tab>#初期値を与えるメソッドinit<nl><tab><tab>def __init__(self):<nl><tab><tab><tab><tab>self.counter = 0<nl><tab><tab>def count(self): #メソッド名は動詞+目的語<nl><tab><tab><tab><tab>self.counter += 1<nl><tab><tab>def show(self):<nl><tab><tab><tab><tab>print(self.counter)<nl><tab><tab>def __str__(self): #printのときはこちら<nl><tab><tab><tab><tab>return str(self.counter)<nl><tab><tab>def __repr__(self): #オブジェクトが文字列で見える<nl><tab><tab><tab><tab>return f'counter:[self.counter]'<nl><tab><tab>def add(self, x):<nl><tab><tab><tab><tab>pass"}
{"in":"d = 19791230<nl>D = list(map(int, str(d))<nl>print(D)","out":"d = 19791230<nl>D = list(map(int, str(d)))<nl>print(D)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc221\/tasks\/abc221_a<nl>A,B=map(int,input(.sprit()))<nl>print(A,B)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc221\/tasks\/abc221_a<nl>A,B=map(int,input().split())<nl>print(A,B)"}
{"in":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df(['kcal','payday']) <nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()<nl>","out":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df[['kcal','payday']] <nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()<nl>"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split()<nl>print(A,B)<nl>print(((A-B)\/A) *100)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split())<nl>print(A,B)<nl>print(((A-B)\/A) *100)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc271\/tasks\/abc271_a<nl>N = input(int())<nl>x = N %% 16<nl>print(x)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc271\/tasks\/abc271_a<nl>N = input(int())<nl>x = N % 16<nl>print(x)"}
{"in":"S=input()<nl>A=string[1:]<nl>print(S[-1]+S)","out":"S=input()<nl>A=S[1:]<nl>print(S[-1]+S)"}
{"in":"def norm(x):<nl><tab>retrun sum(a*a)**0.5","out":"def norm(x):<nl><tab>return sum(a*a)**0.5"}
{"in":"print(f'平均値：{df['大気汚染'].mean()}')","out":"print(f'平均値:{df['大気汚染'].mean()}')"}
{"in":"https:\/\/atcoder.jp\/contests\/abc270\/tasks\/abc270_a<nl><nl>A,B = map(int, input().split())<nl><nl>print( A | B )","out":"# https:\/\/atcoder.jp\/contests\/abc270\/tasks\/abc270_a<nl><nl>A,B = map(int, input().split())<nl><nl>print( A | B )"}
{"in":"<nl><nl><nl>N, M = map(int, input().split())<nl><nl>A = []<nl>for _ in range( 2 * N ) :<nl><tab>A.append(input())<nl><nl>rank = [ [0, i] for i in range( 2 * N ) ]<nl># rank = []<nl># for i in range( 2 * N ) :<nl>#<tab> rank.append([ i ])<nl><nl>def battle(a, b):<nl><tab>if a == b :<nl><tab><tab>return False<nl><tab>elif ( a == \"G\" and b == \"C\" ) or ( a == \"C\" and b == \"P\" ) or ( a == \"P\" and b == \"G\" ) :<nl><tab><tab>return True<nl><tab>else :<nl><tab><tab>return False<nl><nl><nl><nl>for j in range( M ) :<nl><tab>for i in range( N ) :<nl><tab><tab>n1 = rank[2 * i ][1]<nl><tab><tab>n2 = rank[2 * i + 1 ][1]<nl><tab><tab>if battle( A[ n1 ][ j ], A[ n2 ][ j ] ) :<nl><tab><tab><tab>rank[2 * i ][ 0 ] += 1<nl><tab><tab>elif battle( A[ n2 ][ j ], A[ n1 ][ j ] ) :<nl><tab><tab><tab>rank[2 * i + 1 ][ 0 ] += 1<nl><tab><tab>rank.sort( key = itemgetter(rank[i][1]))<nl><nl>for i in range( 2 * N ) :<nl><tab>print(rank[i][1]+1)<nl><nl><nl><nl><nl><nl><nl><nl><nl><nl># A = []<nl># for _ in range( 2 * N ) :<nl>#<tab> a =input()<nl>#<tab> A.append(a)","out":"<nl><nl><nl>N, M = map(int, input().split())<nl><nl>A = []<nl>for<tab>in range( 2 * N ) :<nl><tab>A.append(input())<nl><nl>rank = [ [0, i] for i in range( 2 * N ) ]<nl># rank = []<nl># for i in range( 2 * N ) :<nl>#<tab> rank.append([ i ])<nl><nl>def battle(a, b):<nl><tab>if a == b :<nl><tab><tab>return False<nl><tab>elif ( a == \"G\" and b == \"C\" ) or ( a == \"C\" and b == \"P\" ) or ( a == \"P\" and b == \"G\" ) :<nl><tab><tab>return True<nl><tab>else :<nl><tab><tab>return False<nl><nl><nl><nl>for j in range( M ) :<nl><tab>for i in range( N ) :<nl><tab><tab>n1 = rank[2 * i ][1]<nl><tab><tab>n2 = rank[2 * i + 1 ][1]<nl><tab><tab>if battle( A[ n1 ][ j ], A[ n2 ][ j ] ) :<nl><tab><tab><tab>rank[2 * i ][ 0 ] += 1<nl><tab><tab>elif battle( A[ n2 ][ j ], A[ n1 ][ j ] ) :<nl><tab><tab><tab>rank[2 * i + 1 ][ 0 ] += 1<nl><tab><tab>rank.sort( key = itemgetter(rank[i][1]))<nl><nl>for i in range( 2 * N ) :<nl><tab>print(rank[i][1]+1)<nl><nl><nl><nl><nl><nl><nl><nl><nl><nl># A = []<nl># for<tab>in range( 2 * N ) :<nl>#<tab> a =input()<nl>#<tab> A.append(a)"}
{"in":"def bsort(a):<nl><tab><tab>n = len(a)<nl><tab><tab>for i in range()<nl><tab><tab>sum(n)","out":"def bsort(a):<nl><tab><tab>n = len(a)<nl><tab><tab>for i in range():<nl><tab><tab>sum(n)"}
{"in":"plt.xlabel=('西暦')<nl>plt.ylabel=('降水量')<nl>plt.plot(xlabel,ylabel)<nl>plt.show()","out":"plt.xlabel('西暦')<nl>plt.ylabel('降水量')<nl>plt.plot(xlabel,ylabel)<nl>plt.show()"}
{"in":"df=describe('pollen.csv.1')","out":"df.describe()"}
{"in":"import numpy as np<nl>df = pd.DataFrame({'PassengerId','sex': test['PassengerId','sex'], 'Survived': y_pred})<nl>df.to_csv(\"result.csv\", index=False)","out":"import numpy as np<nl>df = pd.DataFrame({'PassengerId': test['PassengerId'], 'Survived': y_pred})<nl>df.to_csv(\"result.csv\", index=False)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc221\/tasks\/abc221_a<nl>A , B =map.(int, input().split())<nl>C = (A-B)<nl>print(32**C)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc221\/tasks\/abc221_a<nl>A , B =map(int, input().split())<nl>C = (A-B)<nl>print(32**C)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc200\/tasks\/abc200_a<nl>N = int(input())<nl>print(mod(N \/ 100))<nl>print(N\/100)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc200\/tasks\/abc200_a<nl>N = int(input())<nl>print(N % 100)<nl>print(N\/100)"}
{"in":"if BMI < 17.5:<nl><tab>print('低体重')<nl><nl><tab><tab><nl>else:<nl><tab>　print('太りすぎでない')","out":"if BMI < 17.5:<nl><tab>print('低体重')<nl><nl><tab><tab><nl>else:<nl><tab>print('太りすぎでない')"}
{"in":"w=22*h**2<nl>print(w)<nl>print（f'w: {w:.02f}')","out":"w=22*h**2<nl>print(w)<nl>print(f'w: {w:.02f}')"}
{"in":"pd.read_csv('pollen.csv', sep=',')<nl>df.head(5)","out":"df=pd.read_csv('pollen.csv', sep=',')<nl>df.head(5)"}
{"in":"def calc(1,10): return float(s)","out":"def calc(s): return float(s)"}
{"in":"def gcd(a,b):<nl> if b==0:<nl><tab>return a<nl>else:<nl><tab>return gcd(b,a%b)<nl><tab>acd(6215,4746","out":"def gcd(a,b):<nl> if b==0:<nl><tab>return a<nl>else:<nl><tab>return gcd(b,a%b)<nl>gcd(6215,4746)"}
{"in":"w = 45.0<nl>h = 1.55<nl>BMI = w \/ h**2;<nl><tab><tab>print(\"BMI\")","out":"w = 45.0<nl>h = 1.55<nl>BMI = w \/ h**2<nl>print(BMI)"}
{"in":"w ＝ 47.4<nl>h = 1.65<nl>BMI = w \/ (h * h)<nl><nl>print(BMI) #表示されます","out":"w = 47.4<nl>h = 1.65<nl>BMI = w \/ (h * h)<nl><nl>print(BMI) #表示されます"}
{"in":"for col in df.columns:<nl><tab>#print(col)<nl><tab>r,p = pearsonr(df[col], df['住宅価格'])<nl><tab>print(f'相関係数{col}-{住宅価格}: {r}')","out":"for col in df.columns:<nl><tab>#print(col)<nl><tab>r,p = pearsonr(df[col], df['住宅価格'])<nl><tab>print(f'相関係数{col}-住宅価格: {r}')"}
{"in":"test()","out":"test"}
{"in":"A, B = map(int, input().split())<nl>print C (((A-3)\/3) + B)","out":"A, B = map(int, input().split())<nl>print(C, (((A-3)\/3) + B))"}
{"in":"def hanoi(n, x, y, z):<tab> #n枚の円盤をｘからｚに移す<nl><tab><tab>if len(x) <<nl><tab><tab>hanoi(n-1, x, z, y)<nl><tab><tab>d = x.pop()<nl><tab><tab>y.append(d)<nl><tab><tab>hanoi(n-1, z, y, x)","out":"def hanoi(n, x, y, z):<tab> #n枚の円盤をxからzに移す<nl><tab><tab>if len(x) <<nl><tab><tab>hanoi(n-1, x, z, y)<nl><tab><tab>d = x.pop()<nl><tab><tab>y.append(d)<nl><tab><tab>hanoi(n-1, z, y, x)"}
{"in":"df = pd.DataFrame(プロ野球選手身長体重.csv)<nl>df","out":"df = pd.DataFrame(\"プロ野球選手身長体重.csv\")<nl>df"}
{"in":"d=1997112　#朔間零<nl>while d>=10: #2桁のときは繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d==11or d==22 or d==33 or d==44:<nl><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>if d=1<nl>print('ソウルナンバー:',d)","out":"d=1997112<tab>#朔間零<nl>while d>=10: #2桁のときは繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d==11or d==22 or d==33 or d==44:<nl><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>if d==1:<nl><tab>print('ソウルナンバー:',d)"}
{"in":"ｗ ＝４６．６<nl>ｈ ＝１．６１<nl>BMI ＝ｗ ／ ｈ＊＊２","out":"w =46.6<nl>h =1.61<nl>BMI =w \/ h**2"}
{"in":"print(a","out":"print(a)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split()<nl>print(A)<nl>#print(((A-B)\/A) *100)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split())<nl>print(A)<nl>#print(((A-B)\/A) *100)"}
{"in":"<nl><nl>df.stats.pearsonr('降水量', 'スギ花粉飛散量')","out":"<nl><nl>scipy.stats.pearsonr('降水量', 'スギ花粉飛散量')"}
{"in":"d = 20041108<nl>D = list(map(int , str(d)))<nl>print(D) # 結果を表示<nl>d = sum(D)<nl>print(d) #結果を表示<nl><nl>whlie d >= 10:<nl><tab><tab>D = list(map(int , str(d)))<nl><tab><tab>print(D)","out":"d = 20041108<nl>D = list(map(int , str(d)))<nl>print(D) # 結果を表示<nl>d = sum(D)<nl>print(d) #結果を表示<nl><nl>while d >= 10:<nl><tab><tab>D = list(map(int , str(d)))<nl><tab><tab>print(D)"}
{"in":"class Person(object):<nl><tab>def __init__(self, name, year, month, day):<nl><tab><tab>self.name = name<nl><tab><tab>self.year = year<nl><tab><tab>self.month = month<nl><tab><tab>self.day = day<nl><tab>def __repr__(self):<nl><tab><tab>return str ([self.name, self.year, self.month self.day])<nl><tab>def age(self):<nl><tab><tab>return 2022 - self.year<nl><nl><tab>p = PersonD(\"かんな\", 1999, 2, 3)","out":"class Person(object):<nl><tab>def __init__(self, name, year, month, day):<nl><tab><tab>self.name = name<nl><tab><tab>self.year = year<nl><tab><tab>self.month = month<nl><tab><tab>self.day = day<nl><tab>def __repr__(self):<nl><tab><tab>return str ([self.name, self.year, self.month, self.day])<nl><tab>def age(self):<nl><tab><tab>return 2022 - self.year<nl><nl><tab>p = PersonD(\"かんな\", 1999, 2, 3)"}
{"in":"stones= \"ガーネット\",\" \" アメジスト アクアマリン ダイヤモンド エメラルド\t養殖真珠 ルビー ペリドット サファイア オパール トパーズ ターコイズ\"<nl>len(stones)","out":"stones= \"ガーネット\",\" アメジスト アクアマリン ダイヤモンド エメラルド<tab><tab><tab><tab>養殖真珠 ルビー ペリドット サファイア オパール トパーズ ターコイズ\"<nl>len(stones)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc271\/tasks\/abc271_b<nl>N,Q=map(int,input().split())<nl>L=[list(map(int,input().split())) for _ in range(N)]<nl>T=[list(map(int,input().split())) for _ in range(Q)]<nl>for i,k in T:<nl><tab>print(L[i][b[k][1]])","out":"#kogi https:\/\/atcoder.jp\/contests\/abc271\/tasks\/abc271_b<nl>N,Q=map(int,input().split())<nl>L=[list(map(int,input().split())) for<tab>in range(N)]<nl>T=[list(map(int,input().split())) for<tab>in range(Q)]<nl>for i,k in T:<nl><tab>print(L[i][b[k][1]])"}
{"in":"a=[[1,2,3],[4,5,6]]<nl>a[1][0]=0<nl>b=[([1] for i in range(2))<nl><nl>print(a,b)","out":"a=[[1,2,3],[4,5,6]]<nl>a[1][0]=0<nl>b=[([1] for i in range(2))]<nl><nl>print(a,b)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_a<nl>a,b,c,d=map(int,input().split())<nl>print((a+b)*(c-d))<nl>print(Takahashi)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_a<nl>a,b,c,d=map(int,input().split())<nl>print((a+b)*(c-d))<nl>print(\"Takahashi\")"}
{"in":"w = 65.0<nl>h = 1.75<nl>BMI = w\/h**2<nl><nl><nl>print(\"BMI;BMI\")<nl><nl>if BMI < 18.5:<nl><tab>print(\"低体重\")<nl><tab>elif BMI>=18.5：： and BMI<25.0:<nl><tab><tab>print(\"標準\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"太りすぎ\")","out":"w = 65.0<nl>h = 1.75<nl>BMI = w\/h**2<nl><nl><nl>print(\"BMI;BMI\")<nl><nl>if BMI < 18.5:<nl><tab>print(\"低体重\")<nl>elif BMI>=18.5 and BMI<25.0:<nl><tab>print(\"標準\")<nl>else:<nl><tab>print(\"太りすぎ\")"}
{"in":"d = X.pop()　#Xから１枚とる<nl>X","out":"d = X.pop()<tab>#Xから1枚とる<nl>X"}
{"in":"sumplify(diff(y,x))","out":"simplify(diff(y,x))"}
{"in":"for i in df.columns[:-1]:<nl><tab>for n in df.columns[:-1]:<nl><tab><tab>X = df[[df[i], df[n]]] <nl><tab><tab>y = df['住宅価格'] <nl><tab><tab>model = LinearRegression()<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>r2 = r2_score(y, y_pred)<nl><tab><tab>print(i,n,'決定係数(R2):', r2)","out":"for i in df.columns[:-1]:<nl><tab>for n in df.columns[:-1]:<nl><tab><tab>X = df[[i, n]] <nl><tab><tab>y = df['住宅価格'] <nl><tab><tab>model = LinearRegression()<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>r2 = r2_score(y, y_pred)<nl><tab><tab>print(i,n,'決定係数(R2):', r2)"}
{"in":"df = pd.read_csv('.csv')mapping<nl>df.head()","out":"df = pd.read_csv('.csv')<nl>df.head()"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc231\/tasks\/abc231_a<nl><nl> A, B = map(int, input(), split())<nl><nl> D = A-B<nl> print((D\/A)*100)<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc231\/tasks\/abc231_a<nl><nl>A, B = map(int, input(), split())<nl><nl>D = A-B<nl>print((D\/A)*100)<nl>"}
{"in":"import matplotlib.pyplot as plt <nl>X=[]<nl>Y=[]<nl>for i in range(1,100);<nl><tab><tab>X.append(i)<nl><tab><tab>Y.append(calc_pi(i))<nl><nl>plt.plot","out":"import matplotlib.pyplot as plt <nl>X=[]<nl>Y=[]<nl>for i in range(1,100):<nl><tab><tab>X.append(i)<nl><tab><tab>Y.append(calc_pi(i))<nl><nl>plt.plot"}
{"in":"class PersonD(object):<nl><tab><tab>def __init__(self, name, year, month, day):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab><tab><tab>self.year = year<nl><tab><tab><tab><tab>self.month = month<nl><tab><tab><tab><tab>self.day = day<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab><tab>return str([self.name, self.year, self.month, self.day])<nl><tab><tab>def age(self):<nl><tab><tab><tab><tab>return 2022 - self.year<nl><tab><tab>def stone(self):<nl><tab><tab><tab><tab>return stones[self.month-1]<nl><tab><tab>def diff(self, p):<nl><tab><tab><tab><tab>return abs(self.age() - p.age())<nl><tab><tab>def is_same_month(self, p):<nl><tab><tab><tab><tab>return self.month == p.month<nl><nl><nl><tab><nl>p = PersonD(\"かんな\", 1999, 2, 3)<nl>p2 = PersonD(\"てるち\", 1999,11, 3)<nl>p.age()<nl>p.stone()<nl>p.diff(p2)","out":"class PersonD(object):<nl><tab><tab>def _init__(self, name, year, month, day):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab><tab><tab>self.year = year<nl><tab><tab><tab><tab>self.month = month<nl><tab><tab><tab><tab>self.day = day<nl><tab><tab>def _repr__(self):<nl><tab><tab><tab><tab>return str([self.name, self.year, self.month, self.day])<nl><tab><tab>def age(self):<nl><tab><tab><tab><tab>return 2022 - self.year<nl><tab><tab>def stone(self):<nl><tab><tab><tab><tab>return stones[self.month-1]<nl><tab><tab>def diff(self, p):<nl><tab><tab><tab><tab>return abs(self.age() - p.age())<nl><tab><tab>def is_same_month(self, p):<nl><tab><tab><tab><tab>return self.month == p.month<nl><nl><nl><tab><nl>p = PersonD(\"かんな\", 1999, 2, 3)<nl>p2 = PersonD(\"てるち\", 1999,11, 3)<nl>p.age()<nl>p.stone()<nl>p.diff(p2)"}
{"in":"d = 20050508<nl><nl>while d >=10: #二桁の時は繰り返す<nl>　D = list(map(int, str(d)))<nl>　# print(D)<nl>　d = sum(D)<nl>　# print(d)<nl>　if d == 11 or d == 22 or d == 33 or d == 44:<nl><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print('ソウルナンバー:', d)<tab><tab>","out":"d = 20050508<nl><nl>while d >=10: #二桁の時は繰り返す<nl><tab>D = list(map(int, str(d)))<nl><tab># print(D)<nl><tab>d = sum(D)<nl><tab># print(d)<nl><tab>if d == 11 or d == 22 or d == 33 or d == 44:<nl><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print('ソウルナンバー:', d)<tab><tab>"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B,(map(int,input().split())<nl><nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B=map(int,input().split())<nl><nl>"}
{"in":"＃＃","out":"##"}
{"in":"class PersonD(object):<nl><tab>def _init_(self, name, year, mounth, day):<nl><tab><tab>self.name = name<nl><tab><tab>self.year = year<nl><tab><tab>self.nmounth = mounth<nl><tab><tab>self.day = day<nl><tab>def _repr_(self):<nl><tab><tab>return str([self.name, self.year, self.mounth, self.day])<nl><tab>def _age_(self):<nl><tab><tab>return 2022- self.year<nl><tab>def diff(self, p):<nl><tab><tab>return abs(self.age() - p.age())<nl><nl>p PersonD(\"かんな\", 1999, 2, 3)<nl>p2 PersonD(\"てるち\", 1999, 12, 19)<nl>p.age()<nl>p.diff(p2)","out":"class PersonD(object):<nl><tab>def _init_(self, name, year, mounth, day):<nl><tab><tab>self.name = name<nl><tab><tab>self.year = year<nl><tab><tab>self.nmounth = mounth<nl><tab><tab>self.day = day<nl><tab>def _repr_(self):<nl><tab><tab>return str([self.name, self.year, self.mounth, self.day])<nl><tab>def _age_(self):<nl><tab><tab>return 2022- self.year<nl><tab>def diff(self, p):<nl><tab><tab>return abs(self.age() - p.age())<nl><nl>p = PersonD(\"かんな\", 1999, 2, 3)<nl>p2 = PersonD(\"てるち\", 1999, 12, 19)<nl>p.age()<nl>p.diff(p2)"}
{"in":"W = int(input())<nl>print(Wa\/\/100)<nl>","out":"W = int(input())<nl>print(W\/\/100)<nl>"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc272\/tasks\/abc272_b<nl>N,M=map(int,input().split())<nl>for i in range(M):<nl><tab>for k in range(N):<nl><tab><tab>map(int,input().split())<nl>if N==M:<nl><tab>print(\"Yes\")<nl><tab>else:<nl><tab><tab>print(\"No\")<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc272\/tasks\/abc272_b<nl>N,M=map(int,input().split())<nl>for i in range(M):<nl><tab>for k in range(N):<nl><tab><tab>map(int,input().split())<nl>if N==M:<nl><tab>print(\"Yes\")<nl>else:<nl><tab>print(\"No\")<nl>"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc270\/tasks\/abc270_c<nl><nl>import sys<nl> #sys:Pythonのインタプリタや実行環境に関する情報を扱うためのライブラリ<nl>sys.setrecursionlimit(10 ** 6)<nl>#sys.setrecursionlimit()で再帰突入回数の上限を変更できます（デフォルトは通常1000）<nl> <nl>n,x,y = map(int, input().split())<nl>a = [[] for i in range(n+1)]<nl>#n+1個リストの中にリストを入れる<nl> <nl>for i in range(n-1):<nl><tab>u, v = map(int, input().split())<nl><tab>a[u].append(v)<nl><tab>a[v].append(u)<nl><tab>#中のリストのa[x]に数に入っている値が頂点xとつながっている頂点の番号<nl> <nl>paths = []<nl> <nl>def dfs(v, p,i):<nl><tab>print(i)<nl><tab>if v == y:<nl><tab><tab>print('if',v,' ',p,' ',y)<nl><tab><tab>return True<nl><tab>else:<nl><tab><tab>print(v,' ',p,' ',y)<nl><tab>for nodes in a[v]:<nl><tab><tab>if nodes == p: continue<nl><tab><tab>if dfs(nodes, v, 0):<nl><tab><tab><tab>paths.append(nodes)<nl><tab><tab><tab>print('pa',paths)<nl><tab><tab><tab>return True<nl><tab>return False<nl> <nl>dfs(x, -1)<nl> <nl>paths.reverse()<nl>paths.insert(0,x)<nl> <nl>for val in paths:<nl><tab>print(val, sep=\"\", end=\" \")","out":"#kogi https:\/\/atcoder.jp\/contests\/abc270\/tasks\/abc270_c<nl><nl>import sys<nl> #sys:Pythonのインタプリタや実行環境に関する情報を扱うためのライブラリ<nl>sys.setrecursionlimit(10 ** 6)<nl>#sys.setrecursionlimit()で再帰突入回数の上限を変更できます(デフォルトは通常1000)<nl> <nl>n,x,y = map(int, input().split())<nl>a = [[] for i in range(n+1)]<nl>#n+1個リストの中にリストを入れる<nl> <nl>for i in range(n-1):<nl><tab>u, v = map(int, input().split())<nl><tab>a[u].append(v)<nl><tab>a[v].append(u)<nl><tab>#中のリストのa[x]に数に入っている値が頂点xとつながっている頂点の番号<nl> <nl>paths = []<nl> <nl>def dfs(v, p,i):<nl><tab>print(i)<nl><tab>if v == y:<nl><tab><tab>print('if',v,' ',p,' ',y)<nl><tab><tab>return True<nl><tab>else:<nl><tab><tab>print(v,' ',p,' ',y)<nl><tab>for nodes in a[v]:<nl><tab><tab>if nodes == p: continue<nl><tab><tab>if dfs(nodes, v, 0):<nl><tab><tab><tab>paths.append(nodes)<nl><tab><tab><tab>print('pa',paths)<nl><tab><tab><tab>return True<nl><tab>return False<nl> <nl>dfs(x, -1)<nl> <nl>paths.reverse()<nl>paths.insert(0,x)<nl> <nl>for val in paths:<nl><tab>print(val, sep=\"\", end=\" \")"}
{"in":"##ゴルフボールの魔法<nl>N = int(input())<nl>spells = []<nl>while N > 0:<nl><tab><tab>if N % 2 == 0:<nl><tab><tab><tab><tab>spells.append('B')<nl><tab><tab><tab><tab>N \/\/= 2<nl><tab><tab>else:<nl><tab><tab><tab><tab>spells.append('A')<nl><tab><tab><tab><tab>N -= 1<nl>print(''.join(spells[::-1])","out":"##ゴルフボールの魔法<nl>N = int(input())<nl>spells = []<nl>while N > 0:<nl><tab><tab>if N % 2 == 0:<nl><tab><tab><tab><tab>spells.append('B')<nl><tab><tab><tab><tab>N \/\/= 2<nl><tab><tab>else:<nl><tab><tab><tab><tab>spells.append('A')<nl><tab><tab><tab><tab>N -= 1<nl>print(''.join(spells[::-1]))"}
{"in":"！head boston.csv","out":"!head boston.csv"}
{"in":"stone = \"ガーネット　アメジスト　アクアマリン　ダイヤモンド　エメラルド　養殖真珠　ルビー　ペリドット　スピネル　サファイヤ　オパール　トルマリン\tトパーズ　シトリン　ターコイズ　ブルージルコン　タンザナイト\"<nl><nl>class PersonD(object):<nl><tab><tab>def __init__(self, name, year, month, day):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab><tab><tab>self.year = year<nl><tab><tab><tab><tab>self.month = month<nl><tab><tab><tab><tab>self.day = day<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab>return str([self.name, self.year, self.month, self.day])<nl><tab><tab>def age(self):<nl><tab><tab><tab>return 2022 - self.year<nl><tab><tab>def stone(self):<nl><tab><tab><tab>return stone[self.month-1]<nl><tab><tab>def diff(self, p):<nl><tab><tab><tab>return abs(self.age() - p.age())<nl><nl>p = PersonD(\"かんな\", 1999, 2, 3)<nl>p.age()<nl>p.stone()<nl>p.diff(p2)","out":"stone = \"ガーネット<tab>アメジスト<tab>アクアマリン<tab>ダイヤモンド<tab>エメラルド<tab>養殖真珠<tab>ルビー<tab>ペリドット<tab>スピネル<tab>サファイヤ<tab>オパール<tab>トルマリン<tab><tab><tab><tab>トパーズ<tab>シトリン<tab>ターコイズ<tab>ブルージルコン<tab>タンザナイト\"<nl><nl>class PersonD(object):<nl><tab><tab>def _init__(self, name, year, month, day):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab><tab><tab>self.year = year<nl><tab><tab><tab><tab>self.month = month<nl><tab><tab><tab><tab>self.day = day<nl><tab><tab>def _repr__(self):<nl><tab><tab><tab>return str([self.name, self.year, self.month, self.day])<nl><tab><tab>def age(self):<nl><tab><tab><tab>return 2022 - self.year<nl><tab><tab>def stone(self):<nl><tab><tab><tab>return stone[self.month-1]<nl><tab><tab>def diff(self, p):<nl><tab><tab><tab>return abs(self.age() - p.age())<nl><nl>p = PersonD(\"かんな\", 1999, 2, 3)<nl>p.age()<nl>p.stone()<nl>p.diff(p2)"}
{"in":"d=20070122<nl>while d>=10:#二桁の時は繰り返す<nl>　D=list(map(int, str(d)))<nl>　 #print(D)<nl>　 d=sum(D)<nl>　 #print(d)<nl>　 if d==11 or d== 22 or d==33 or d==44:<nl><tab> break#条件を満たしたら抜け出す","out":"d=20070122<nl>while d>=10:#二桁の時は繰り返す<nl><tab>D=list(map(int, str(d)))<nl><tab> #print(D)<nl><tab> d=sum(D)<nl><tab> #print(d)<nl><tab> if d==11 or d== 22 or d==33 or d==44:<nl><tab> break#条件を満たしたら抜け出す"}
{"in":"import math<nl>for w in range(45, 100, 5):<nl><tab>h = math.sqrt(w \/ 22)<nl><tab>print(\"体重:\"w , \"身長:\"h)","out":"import math<nl>for w in range(45, 100, 5):<nl><tab>h = math.sqrt(w \/ 22)<nl><tab>print(\"体重:\"w , \"身長:\"h), "}
{"in":"<nl><nl><nl>H, W, X, Y = map(int, input().split())<nl><nl>S=[0]*H<nl><nl>for h in range(H) :<nl><tab>S[h] = input()<nl><nl>c = 0<nl><nl><nl><nl># for i in range(H):<tab><tab><tab><tab><tab><tab><tab># (X, Y)の縦<nl>#<tab> print( S[ i ][ Y - 1 ] )<nl><nl># for j in range(W):<tab><tab><tab><tab><tab><tab> # (X, Y)の横<nl>#<tab> print( S[ X - 1 ][ j ] )<nl><nl># for i in range(H): <nl>#<tab> if S[ i ][ Y - 1 ]<nl><nl><nl>for j in range(W):<tab><tab><tab><tab><tab><tab> # (X, Y)の横<nl><tab>if not \"#\" in ( S[ X - 1 ][ j :Y-1] ) :<nl><tab><tab>print( S[ X - 1 ][ j :Y-1] )<nl><tab><tab>c+=1<nl><tab>elif not \"#\" in ( S[ X - 1 ][ Y-1:j] ) :<nl><tab><tab>print( S[ X - 1 ][ Y-1]:j )<nl><tab><tab>c+=1<nl><nl><nl><nl><nl><nl>#if S[ i ][ Y ]<nl><nl>print(c)","out":"<nl><nl><nl>H, W, X, Y = map(int, input().split())<nl><nl>S=[0]*H<nl><nl>for h in range(H) :<nl><tab>S[h] = input()<nl><nl>c = 0<nl><nl><nl><nl># for i in range(H):<tab><tab><tab><tab><tab><tab><tab># (X, Y)の縦<nl>#<tab> print( S[ i ][ Y - 1 ] )<nl><nl># for j in range(W):<tab><tab><tab><tab><tab><tab> # (X, Y)の横<nl>#<tab> print( S[ X - 1 ][ j ] )<nl><nl># for i in range(H): <nl>#<tab> if S[ i ][ Y - 1 ]<nl><nl><nl>for j in range(W):<tab><tab><tab><tab><tab><tab> # (X, Y)の横<nl><tab>if not \"#\" in ( S[ X - 1 ][ j :Y-1] ) :<nl><tab><tab>print( S[ X - 1 ][ j :Y-1] )<nl><tab><tab>c+=1<nl><tab>elif not \"#\" in ( S[ X - 1 ][ Y-1:j] ) :<nl><tab><tab>print( S[ X - 1 ][ Y-1:j] )<nl><tab><tab>c+=1<nl><nl><nl><nl><nl><nl>#if S[ i ][ Y ]<nl><nl>print(c)"}
{"in":"#for i in range(10):<nl><tab>for j in range(10):<nl><tab><tab>print(\".\")","out":"#for i in range(10):<nl>for j in range(10):<nl><tab><tab>print(\".\")"}
{"in":"import LinearRegression()<nl>model = sklearn.linear_model.LinearRegression()<nl>x_model=df['平均気温']<nl>y_model=df['スギ花粉飛散量']<nl>model.fit(x_model,y_model)","out":"import sklearn.linear_model<nl>model = sklearn.linear_model.LinearRegression()<nl>x_model=df['平均気温']<nl>y_model=df['スギ花粉飛散量']<nl>model.fit(x_model,y_model)"}
{"in":"h=int(input\"身長は?(cm)\")<nl>print(h)","out":"h=int(input(\"身長は?(cm)\"))<nl>print(h)"}
{"in":"weights = [40, 45, 50, 55, 60, 65, 70]<nl>for w in weights:<nl><tab>pritn(w)<nl><tab>BMI=w\/(h*h)<nl><tab>print(BMI)","out":"weights = [40, 45, 50, 55, 60, 65, 70]<nl>for w in weights:<nl><tab>print(w)<nl><tab>BMI=w\/(h*h)<nl><tab>print(BMI)"}
{"in":"hight= [130,140,150,160,170,180,190,200]<nl>BMI=18<nl>newdata=[]<nl>for w in weights:<nl><tab><tab>w=BMI*h**<nl><tab><tab>newdata18.append(BMI)<nl>print(height)<nl>print(newdata)","out":"hight= [130,140,150,160,170,180,190,200]<nl>BMI=18<nl>newdata=[]<nl>for w in weights:<nl><tab><tab>w=BMI*h**2<nl><tab><tab>newdata18.append(BMI)<nl>print(height)<nl>print(newdata)"}
{"in":"x=df[['部屋数']]<nl>y=df[['住宅価格']]<nl>print(X.shape)<nl>print(Y.hsape)","out":"x=df[['部屋数']]<nl>y=df[['住宅価格']]<nl>print(x.shape)<nl>print(y.hsape)"}
{"in":"d = 20051029<nl><nl>while d >=10: #二桁のときは繰り返す<nl> D = list(map(int,str(d)))<nl> print(D)<nl> d = sum(D)<nl> print(d)<nl><tab>if d ==11 or d ==22 d == 33 d == 44:<nl><tab><tab> break #条件を満たしたらループを抜ける<nl><tab><tab> <nl>print('ソウルナンバー:', d)","out":"d = 20051029<nl><nl>while d >=10: #二桁のときは繰り返す<nl> D = list(map(int,str(d)))<nl> print(D)<nl> d = sum(D)<nl> print(d)<nl> if d ==11 or d ==22 d == 33 d == 44:<nl><tab> break #条件を満たしたらループを抜ける<nl><tab><tab> <nl>print('ソウルナンバー:', d)"}
{"in":"<nl>s = input()<nl>r = s[-1:-2]<nl>t = s[-1:-3]<nl><nl>if r == er:<nl><tab><tab>print('er')<nl><nl>elif t == ist:<nl><tab><tab>print('ist')","out":"<nl>s = input()<nl>r = s[-1:-2]<nl>t = s[-1:-3]<nl><nl>if r == \"er\":<nl><tab><tab>print('er')<nl><nl>elif t == \"ist\":<nl><tab><tab>print('ist')"}
{"in":"from sklearn.metrics import r2_score<nl><nl>X = df_2[['weather_num','temperature','datetime_num']]<tab># 説明変数<nl>y = df_2['y'] # 目的変数<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>#y_pred　予測するものをxから取り込んだ。<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)<nl># pd.concat([X,y], axis=1).head() #最初の5件のみ見てみる","out":"from sklearn.metrics import r2_score<nl><nl>X = df_2[['weather_num','temperature','datetime_num']]<tab># 説明変数<nl>y = df_2['y'] # 目的変数<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>#y_pred<tab>予測するものをxから取り込んだ。<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)<nl># pd.concat([X,y], axis=1).head() #最初の5件のみ見てみる"}
{"in":"x = 30<nl>math.sin(x","out":"x = 30<nl>math.sin(x)"}
{"in":"# 3-2<nl># 星集め<nl><nl>kogi https:\/\/atcoder.jp\/contests\/abc192\/tasks\/abc192_a<nl><nl><nl><nl>X = int(input())<nl><nl>p = 100 - (X % 100)<nl>print(p)","out":"# 3-2<nl># 星集め<nl><nl># kogi https:\/\/atcoder.jp\/contests\/abc192\/tasks\/abc192_a<nl><nl><nl><nl>X = int(input())<nl><nl>p = 100 - (X % 100)<nl>print(p)"}
{"in":"plt.hist(df{'住宅価格'}),bins=20<nl>plt.xlabel('住宅価格')<nl>plt.show()","out":"plt.hist(df{'住宅価格'},bins=20)<nl>plt.xlabel('住宅価格')<nl>plt.show()"}
{"in":"sinxcosy","out":"sin(x)*cos(y)"}
{"in":"K=int(input())<nl>A,B=map(int, input().split())<nl>A=int(string(A),K)<nl>print(A)","out":"K=int(input())<nl>A,B=map(int, input().split())<nl>A=int(str(A),K)<nl>print(A)"}
{"in":"sum(animal.leg() for animal in animals","out":"sum(animal.leg() for animal in animals)"}
{"in":"X = df['部屋数', '低所得率']<tab># ひとつ選ぶ<nl>y = df['住宅価格']<nl>print(X.shape) #データ数と次元<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>pd.DataFrame({'実測': df['住宅価格'], '予測':y_pred}).head()<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)<nl><nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2:', r2)","out":"X = df[['部屋数', '低所得率']]<tab># ひとつ選ぶ<nl>y = df['住宅価格']<nl>print(X.shape) #データ数と次元<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>pd.DataFrame({'実測': df['住宅価格'], '予測':y_pred}).head()<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)<nl><nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2:', r2)"}
{"in":"df[''pollen.csv''].describe()","out":"df[\"pollen.csv\"].describe()"}
{"in":"N=int(input())<nl>S=input()<nl>for ic in S:<nl><tab><tab>a=ord(c)+N<nl><tab><tab>if a > ord('Z'):<nl><tab><tab><tab><tab>a=a-ord('Z')+ord('A')-1<nl><tab><tab>ss.append(chr(a))<nl>print(''.join(ss))","out":"N=int(input())<nl>S=input()<nl>for c in S:<nl><tab><tab>a=ord(c)+N<nl><tab><tab>if a > ord('Z'):<nl><tab><tab><tab><tab>a=a-ord('Z')+ord('A')-1<nl><tab><tab>ss.append(chr(a))<nl>print(''.join(ss))"}
{"in":"plt.plot(df['西暦'],df['降水量'],label='ラベル)","out":"plt.plot(df['西暦'],df['降水量'],label='ラベル')"}
{"in":"h =<tab>int(input(\"身長は？(cm)\"))#ユーザの入力<tab>enter押して実行<nl>h = h \/ 100<nl>w =<tab>int(input(\"体重は？(kg)\"))<nl>BMI =<tab>w \/ (h**2)<nl><nl>if BMI < 18.5:<nl><tab>print(\"低体重(やせ)\")<nl>else:<nl><tab>if 18.5 <= BMI <25<nl><tab> print(\"普通体重\")<nl><tab>else:<nl><tab><tab>print(\"肥満\")","out":"h =<tab>int(input(\"身長は?(cm)\"))#ユーザの入力<tab>enter押して実行<nl>h = h \/ 100<nl>w =<tab>int(input(\"体重は?(kg)\"))<nl>BMI =<tab>w \/ (h**2)<nl><nl>if BMI < 18.5:<nl><tab>print(\"低体重(やせ)\")<nl>else:<nl><tab>if 18.5 <= BMI <25:<nl><tab> print(\"普通体重\")<nl><tab>else:<nl><tab><tab>print(\"肥満\")"}
{"in":"A, B, C = map(int, input().split())<nl>if A == B :<nl><tab><tab>print(C)<nl><tab><tab>elif C == A :<nl><tab><tab><tab>print(B)<nl><tab><tab>else :<nl><tab><tab><tab>print(C)","out":"A, B, C = map(int, input().split())<nl>if A == B :<nl><tab><tab>print(C)<nl>elif C == A :<nl><tab><tab>print(B)<nl>else :<nl><tab><tab>print(C)"}
{"in":"説明変数: Index(['犯罪率', '緑地', '工場', '川近', '大気汚染', '部屋数', '築年', '通勤', <nl><tab><tab>'交通', '資産税', '教員比','低所得率'], dtype='object') 次元: (506, 12)","out":"説明変数: Index(['犯罪率', '緑地', '工場', '川近', '大気汚染', '部屋数', '築年', '通勤', <nl><tab><tab>'交通', '資産税', '教員比','低所得率'], dtype='object') # 次元: (506, 12)"}
{"in":"A,B,C = map(int,input().split())<nl>for i in C+C:<nl><tab><tab>print(C)<nl>if A<=C<=B:<nl><tab><tab>print(C)<nl>else:<nl><tab><tab>print('-1')","out":"A,B,C = map(int,input().split())<nl>for i in range(C+C):<nl><tab><tab>print(C)<nl>if A<=C<=B:<nl><tab><tab>print(C)<nl>else:<nl><tab><tab>print('-1')"}
{"in":"def summ(n):<nl><tab><tab>if n ==1 : return 1<nl><tab><tab>else : return n + summ(n＋1)","out":"def summ(n):<nl><tab><tab>if n ==1 : return 1<nl><tab><tab>else : return n + summ(n)"}
{"in":"if BMI > 25.00　：<nl><tab><tab> print('太りすぎ')<nl>else:<nl><tab>print('太りすぎでない')","out":"if BMI > 25.00<tab>:<nl><tab><tab> print('太りすぎ')<nl>else:<nl><tab><tab> print('太りすぎでない')"}
{"in":"X, Y = map(int, input().split())<nl> <nl>if X == 0:<nl><tab><tab>if Y == 0:<nl><tab><tab><tab><tab>print(0)<nl><tab><tab>elif Y == 1:<nl><tab><tab><tab><tab>print(2)<nl><tab><tab>elif Y == 2:<nl><tab><tab><tab><tab>print(1)<nl>elif X == 1:<nl><tab><tab>if Y == 0:<nl><tab><tab><tab><tab>print(2)<nl><tab><tab>elif Y == 1:<nl><tab><tab><tab><tab>print(1)<nl><tab><tab>elif Y == 2:","out":"X, Y = map(int, input().split())<nl> <nl>if X == 0:<nl><tab><tab>if Y == 0:<nl><tab><tab><tab><tab>print(0)<nl><tab><tab>elif Y == 1:<nl><tab><tab><tab><tab>print(2)<nl><tab><tab>elif Y == 2:<nl><tab><tab><tab><tab>print(1)<nl>elif X == 1:<nl><tab><tab>if Y == 0:<nl><tab><tab><tab><tab>print(2)<nl><tab><tab>elif Y == 1:<nl><tab><tab><tab><tab>print(1)<nl><tab><tab>elif Y == 2:<nl><tab><tab><tab><tab>pass"}
{"in":"class Duck(object):<nl><tab>def face(self):<nl><tab><tab>return \"🦆\":<nl><tab>def sound(self):<nl><tab><tab>return \"くわくわくわ\"","out":"class Duck(object):<nl><tab>def face(self):<nl><tab><tab>return \"🦆\"<nl><tab>def sound(self):<nl><tab><tab>return \"くわくわくわ\""}
{"in":"if BMI > 25.00 :<nl><tab>print(\"太りすぎ”)<nl>else :<nl><tab>print('太りすぎでない')","out":"if BMI > 25.00 :<nl><tab>print(\"太りすぎ\")<nl>else:<nl><tab>print('太りすぎでない')"}
{"in":"<nl>S, T = map(int, input().split())<nl>for a in range(10):<nl><tab>for b in range(10):<nl><tab><tab>for c in range(10):<nl><tab><tab><tab>if a+b+c <= S and a*b*c <= T:<nl><tab><tab><tab><tab>combs.append((a,b,c))<nl>#print(combs)<nl>print(len(combs))","out":"<nl>S, T = map(int, input().split())<nl>combs = []<nl>for a in range(10):<nl><tab>for b in range(10):<nl><tab><tab>for c in range(10):<nl><tab><tab><tab>if a+b+c <= S and a*b*c <= T:<nl><tab><tab><tab><tab>combs.append((a,b,c))<nl>#print(combs)<nl>print(len(combs))"}
{"in":"class PersonW:<nl><tab>counter: str<nl><tab>def __init__(self):<nl><tab><tab>self.counter = 0<nl><tab><tab>def count():<nl><tab><tab><tab>self.counter += 1<nl><tab><tab><tab>return self.counter<nl>show（）","out":"class PersonW:<nl><tab>counter: str<nl><tab>def __init__(self):<nl><tab><tab>self.counter = 0<nl><tab><tab>def count():<nl><tab><tab><tab>self.counter += 1<nl><tab><tab><tab>return self.counter<nl>show()"}
{"in":"S = str(input())<nl><nl>m = len(S)<nl># print(m)<nl><nl>for i in range(m):<nl><tab>x = S[i:]<nl><tab>y = S[:i]<nl><tab># print(x)<nl><tab># print(y)<nl><tab>print(x+y)<nl><nl>r = x+y<nl>r.list()<nl>print(r)","out":"S = str(input())<nl><nl>m = len(S)<nl># print(m)<nl><nl>for i in range(m):<nl><tab>x = S[i:]<nl><tab>y = S[:i]<nl><tab># print(x)<nl><tab># print(y)<nl><tab>print(x+y)<nl><nl>r = x+y<nl>r = list(r)<nl>print(r)"}
{"in":"N = int(input())<nl>S= map(int, input().split())<nl>AREA=set()<nl>for a in range (1, 5):<nl><tab>for b in range (1, 5):<nl><tab><tab>s = 4*a*b + 3 * a + 3*b<nl><tab><tab>AREA.add(s)<nl>print(sorted(AREA))<nl>print(count(set(S) & AREA))<nl><nl><nl>","out":"N = int(input())<nl>S= map(int, input().split())<nl>AREA=set()<nl>for a in range (1, 5):<nl><tab>for b in range (1, 5):<nl><tab><tab>s = 4*a*b + 3 * a + 3*b<nl><tab><tab>AREA.add(s)<nl>print(sorted(AREA))<nl>print(len(set(S) & AREA))<nl><nl><nl>"}
{"in":"class Animal(object):<nl><tab>def face(self):<nl><tab><tab><tab>return '🐽'<nl><tab>def sound(self):<nl><tab><tab><tab>return 'ギャギャ'<nl><tab>def leg(self):<nl><tab><tab><tab>return 4<nl><nl>class Sheep(Animal):<nl><tab>def __repr__(self):<nl><tab><tab><tab>return '🐑'<nl><tab>def sound(self): #Override<nl><tab><tab><tab>return 'メエ～'<nl><nl>class Dog(Animal):<nl><tab>name:str<nl><tab>def __init__(self, name):<nl><tab><tab>self.name = name<nl><tab>def __repr__(self):<nl><tab><tab><tab>return f'🐕 {self.name}'<nl><tab>def face(self):<nl><tab><tab><tab>return '🐶'<nl><tab>def sound(self):<nl><tab><tab><tab>return 'ワン'<nl><nl>class rabbit(Animal):<nl><tab>def face(self):<nl><tab><tab>return '🐰'<nl><tab>def sound(self):<nl><tab><tab>return 'ブーブー'<nl><nl>dog = Dog('こむぎ')<nl>dog.leg()<nl>rabbit.face()","out":"class Animal(object):<nl><tab>def face(self):<nl><tab><tab><tab>return '🐽'<nl><tab>def sound(self):<nl><tab><tab><tab>return 'ギャギャ'<nl><tab>def leg(self):<nl><tab><tab><tab>return 4<nl><nl>class Sheep(Animal):<nl><tab>def __repr__(self):<nl><tab><tab><tab>return '🐑'<nl><tab>def sound(self): #Override<nl><tab><tab><tab>return 'メエ~'<nl><nl>class Dog(Animal):<nl><tab>name:str<nl><tab>def __init__(self, name):<nl><tab><tab>self.name = name<nl><tab>def __repr__(self):<nl><tab><tab><tab>return f'🐕 {self.name}'<nl><tab>def face(self):<nl><tab><tab><tab>return '🐶'<nl><tab>def sound(self):<nl><tab><tab><tab>return 'ワン'<nl><nl>class rabbit(Animal):<nl><tab>def face(self):<nl><tab><tab>return '🐰'<nl><tab>def sound(self):<nl><tab><tab>return 'ブーブー'<nl><nl>dog = Dog('こむぎ')<nl>dog.leg()<nl>rabbit.face()"}
{"in":"plt.plot(df.'西暦',df.'降水量')","out":"plt.plot(df['西暦'],df['降水量'])"}
{"in":"showmeans('平均気温')","out":"df['平均気温'].mean()"}
{"in":"plt.boxplot(df[\"築年\", \"通勤\"])","out":"plt.boxplot(df[[\"築年\", \"通勤\"]])"}
{"in":"class Dog(object):<nl><tab>name:self<nl><tab>def __init__(self, name):<nl><tab><tab><tab>self.name = name<nl><tab>def __repr__(self):<nl><tab><tab><tab>return<tab>'🐕'<nl><tab>def face(self):<nl><tab><tab><tab>return '🐶'<nl><tab>def sound(self):<nl><tab><tab>return 'バウワウ' #<tab>ISOスタンダード<nl><tab>def leg(self):<nl><tab><tab>return 4<nl><nl>dog =Dog('ハナ')<nl>dog","out":"class Dog(object):<nl><tab>name:self<nl><tab>def _init__(self, name):<nl><tab><tab><tab>self.name = name<nl><tab>def _repr__(self):<nl><tab><tab><tab>return<tab>'🐕'<nl><tab>def face(self):<nl><tab><tab><tab>return '🐶'<nl><tab>def sound(self):<nl><tab><tab>return 'バウワウ' #<tab>ISOスタンダード<nl><tab>def leg(self):<nl><tab><tab>return 4<nl><nl>dog =Dog('ハナ')<nl>dog"}
{"in":"pearsonr(df['部屋数'],df['住宅価格'])<nl>print('相関係数:',rho)<nl>print('p値':,p)","out":"pearsonr(df['部屋数'],df['住宅価格'])<nl>print('相関係数:',rho)<nl>print('p値:',p)"}
{"in":"def gcd(a,b):<nl> if b==0:<nl><tab> return a<nl> else:<nl><tab> return gcd(b,a%b)<nl><tab> acd(6215,4746)<nl>print(acd)","out":"def gcd(a,b):<nl> if b==0:<nl><tab> return a<nl> else:<nl><tab> return gcd(b,a%b)<nl><tab> <nl>print(gcd(6215,4746))"}
{"in":"Ration(2, 4)","out":"Ratio(2, 4)"}
{"in":"X=1+2+3<nl>x","out":"X=1+2+3<nl>X"}
{"in":"for i,x in enumerate(InfiniteZero()):<nl><tab>print(i,x)<nl><tab>if i > 100:<nl><tab>return 0","out":"for i,x in enumerate(InfiniteZero()):<nl><tab>print(i,x)<nl><tab>if i > 100:<nl><tab><tab>return 0"}
{"in":"plt.figure(figsize=(12, 6))<nl>plt.scatter(dfdf['y'],['week'])<nl>plt.xlabel('week')<nl>plt.ylabel('y')<nl>plt.show()","out":"plt.figure(figsize=(12, 6))<nl>plt.scatter(df['y'],df['week'])<nl>plt.xlabel('week')<nl>plt.ylabel('y')<nl>plt.show()"}
{"in":"imort math<nl>class Ratio(object):<nl><tab>num = int<nl><tab>den = int<nl><tab>def __init__(self, num, den=1):<nl><tab><tab>self.num = num<nl><tab><tab>self.den = den<nl><tab><tab>g == math.gcd(abs(num),den)<nl><tab><tab>self.num == num\/\/g<nl><tab><tab>self.den == den\/\/g<nl><tab>def __repr__(self):<nl><tab><tab>return \"{}{}{}\".format(self.num,'\/',self.den)<nl><tab>def add(self,x):<nl><tab><tab>if isinstance(x, Ratio):<nl><tab><tab><tab>new_num = self.num*x.den+self.den*x.num<nl><tab><tab><tab>new_den = self.den*x.den<nl><tab><tab>return Ratio(new_num, new_den)<nl><tab><tab>if isinstance(x, int):<nl><tab><tab><tab>new_num = self.num + x*self.den<nl><tab><tab>return Ratio(new_num,new_den)","out":"import math<nl>class Ratio(object):<nl><tab>num = int<nl><tab>den = int<nl><tab>def __init__(self, num, den=1):<nl><tab><tab>self.num = num<nl><tab><tab>self.den = den<nl><tab><tab>g == math.gcd(abs(num),den)<nl><tab><tab>self.num == num\/\/g<nl><tab><tab>self.den == den\/\/g<nl><tab>def __repr__(self):<nl><tab><tab>return \"{}{}{}\".format(self.num,'\/',self.den)<nl><tab>def add(self,x):<nl><tab><tab>if isinstance(x, Ratio):<nl><tab><tab><tab>new_num = self.num*x.den+self.den*x.num<nl><tab><tab><tab>new_den = self.den*x.den<nl><tab><tab>return Ratio(new_num, new_den)<nl><tab><tab>if isinstance(x, int):<nl><tab><tab><tab>new_num = self.num + x*self.den<nl><tab><tab>return Ratio(new_num,new_den)"}
{"in":"import itertools<nl>def janken(x, y):<nl><tab><tab>if x==y:<nl><tab><tab><tab><tab>return \"aiko\"<nl><tab><tab>elif x==\"G\":<nl><tab><tab><tab><tab>if y==\"C\":<nl><tab><tab><tab><tab><tab><tab>return x<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab><tab>return y<nl><tab><tab>elif x==\"C\":<nl><tab><tab><tab><tab>if y==\"P\":<nl><tab><tab><tab><tab><tab><tab>return x<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab><tab>return y<nl><tab><tab>else:<nl><tab><tab><tab><tab>if y==\"G\":<nl><tab><tab><tab><tab><tab><tab>return x<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab><tab>return y<nl><nl>N, M = map(int, input().split())<nl>Alist = []<nl>count = []<nl>for i in range(2*N):<nl><tab><tab>Alist.append(list(input()))<nl><tab><tab>count.append([i+1,0])<nl>for i in range(M):<nl><tab><tab>print(i,count)<nl><tab><tab>print(Alist)<nl><tab><tab>for k in range(N):<nl><tab><tab><tab><tab>x = Alist[2*k][i]<nl><tab><tab><tab><tab>print(2*k,i,\"x:\",x)<nl><tab><tab><tab><tab>y = Alist[2*k+1][i]<nl><tab><tab><tab><tab>print(2*k+1,i,\"y:\",y)<nl><tab><tab><tab><tab>if janken(x, y) == x:<nl><tab><tab><tab><tab><tab><tab>count[2*k][1] += 1<nl><tab><tab><tab><tab>elif janken(x, y) == y:<nl><tab><tab><tab><tab><tab><tab>count[2*k+1][1] += 1<nl><tab><tab>print(count)<nl><tab><tab>for l in range(1, 2*N):<nl><tab><tab><tab><tab>for p in range(l):<nl><tab><tab><tab><tab><tab><tab>if count[p][1] < count[p+1][1]:<nl><tab><tab><tab><tab><tab><tab><tab><tab>count[p], count[p+1] = count[p+1], count[p]<nl><tab><tab><tab><tab><tab><tab><tab><tab>Alist[p], Alist[p+1] = Alist[p+1], Alist[p]<nl><tab><tab>for t in range(i+1):<nl><tab><tab><tab><tab>print(\"人でいれかえ\")<nl><tab><tab><tab><tab>print(count[t][0], count[t+1][0])<nl><tab><tab><tab><tab>if (count[t][0] > count[t+1][0]) and (count[t][1] = count[t+1][1]):<nl><tab><tab><tab><tab><tab><tab>count[t], count[t+1] = count[t+1], count[t]<nl><tab><tab><tab><tab><tab><tab>Alist[t], Alist[t+1] = Alist[t+1], Alist[t]<nl><tab><tab>print(\"入替後\",count)<nl>for i in range(2*N):<nl><tab><tab>print(count[i][0])","out":"import itertools<nl>def janken(x, y):<nl><tab><tab>if x==y:<nl><tab><tab><tab><tab>return \"aiko\"<nl><tab><tab>elif x==\"G\":<nl><tab><tab><tab><tab>if y==\"C\":<nl><tab><tab><tab><tab><tab><tab>return x<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab><tab>return y<nl><tab><tab>elif x==\"C\":<nl><tab><tab><tab><tab>if y==\"P\":<nl><tab><tab><tab><tab><tab><tab>return x<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab><tab>return y<nl><tab><tab>else:<nl><tab><tab><tab><tab>if y==\"G\":<nl><tab><tab><tab><tab><tab><tab>return x<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab><tab>return y<nl><nl>N, M = map(int, input().split())<nl>Alist = []<nl>count = []<nl>for i in range(2*N):<nl><tab><tab>Alist.append(list(input()))<nl><tab><tab>count.append([i+1,0])<nl>for i in range(M):<nl><tab><tab>print(i,count)<nl><tab><tab>print(Alist)<nl><tab><tab>for k in range(N):<nl><tab><tab><tab><tab>x = Alist[2*k][i]<nl><tab><tab><tab><tab>print(2*k,i,\"x:\",x)<nl><tab><tab><tab><tab>y = Alist[2*k+1][i]<nl><tab><tab><tab><tab>print(2*k+1,i,\"y:\",y)<nl><tab><tab><tab><tab>if janken(x, y) == x:<nl><tab><tab><tab><tab><tab><tab>count[2*k][1] += 1<nl><tab><tab><tab><tab>elif janken(x, y) == y:<nl><tab><tab><tab><tab><tab><tab>count[2*k+1][1] += 1<nl><tab><tab>print(count)<nl><tab><tab>for l in range(1, 2*N):<nl><tab><tab><tab><tab>for p in range(l):<nl><tab><tab><tab><tab><tab><tab>if count[p][1] < count[p+1][1]:<nl><tab><tab><tab><tab><tab><tab><tab><tab>count[p], count[p+1] = count[p+1], count[p]<nl><tab><tab><tab><tab><tab><tab><tab><tab>Alist[p], Alist[p+1] = Alist[p+1], Alist[p]<nl><tab><tab>for t in range(i+1):<nl><tab><tab><tab><tab>print(\"人でいれかえ\")<nl><tab><tab><tab><tab>print(count[t][0], count[t+1][0])<nl><tab><tab><tab><tab>if (count[t][0] > count[t+1][0]) and (count[t][1] == count[t+1][1]):<nl><tab><tab><tab><tab><tab><tab>count[t], count[t+1] = count[t+1], count[t]<nl><tab><tab><tab><tab><tab><tab>Alist[t], Alist[t+1] = Alist[t+1], Alist[t]<nl><tab><tab>print(\"入替後\",count)<nl>for i in range(2*N):<nl><tab><tab>print(count[i][0])"}
{"in":"d=int(input())<nl>while d>9:<nl><tab>D=list(map(int,str(d)))<nl><tab>d=sum(D)<nl><tab>print(d))","out":"d=int(input())<nl>while d>9:<nl><tab>D=list(map(int,str(d)))<nl><tab>d=sum(D)<nl><tab>print(d)"}
{"in":"showmeans(df['平均気温'])","out":"df['平均気温'].mean()"}
{"in":"a=[a,s,c]<nl>print(a)","out":"a=\"asc\"<nl>print(a)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_b<nl><nl>for i in range(10):<nl><tab><tab>S=list(map(str, input().split()))<nl><tab><tab>print(S)<nl><tab><tab>for i in range(10):<nl><tab><tab><tab>if S[i] = '#':<nl><tab><tab><tab><tab>A=i+1","out":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_b<nl><nl>for i in range(10):<nl><tab><tab>S=list(map(str, input().split()))<nl><tab><tab>print(S)<nl><tab><tab>for i in range(10):<nl><tab><tab><tab>if S[i] == '#':<nl><tab><tab><tab><tab>A=i+1"}
{"in":"<nl>S, T =<tab>map(int, input().split())<nl>for a in range(10):<nl><tab>for b in range(10):<nl><tab><tab>for c in range(10):<nl><tab><tab><tab>if a + b + c <= S and a*b*c <= T:<nl><tab><tab><tab><tab>combs.append((a,b,c))<nl>print(len(combps))","out":"<nl>S, T =<tab>map(int, input().split())<nl>combs = []<nl>for a in range(10):<nl><tab>for b in range(10):<nl><tab><tab>for c in range(10):<nl><tab><tab><tab>if a + b + c <= S and a*b*c <= T:<nl><tab><tab><tab><tab>combs.append((a,b,c))<nl>print(len(combps))"}
{"in":"n=str(input())<nl>n=replace(1,9) and replace(9,1)<nl>print(n)","out":"n=str(input())<nl>n=n.replace('1','9').replace('9','1')<nl>print(n)"}
{"in":"w = 80.0<nl>h = 1.80<nl>BMI = w \/ h ** 2<nl>print(\"BMI\"BMI)","out":"w = 80.0<nl>h = 1.80<nl>BMI = w \/ h ** 2<nl>print(\"BMI\", BMI)"}
{"in":"df.scatter('降水量', 'スギ花粉飛散量')","out":"plt.scatter(d['降水量'], df['スギ花粉飛散量'])"}
{"in":"mecab = MeCab.Tagger('-Ochasen')<nl>sent =\"昨日はHTMLの勉強をした\"<nl>print(mecab.parse(sent))<nl><nl>>>>出力結果<nl><nl>昨日\tキノウ\t昨日\t名詞-副詞可能\t\t<nl>は\tハ\tは\t助詞-係助詞\t\t<nl>HTML\tHTML\tHTML\t名詞-固有名詞-組織\t\t<nl>の\tノ\tの\t助詞-連体化\t\t<nl>勉強\tベンキョウ\t勉強\t名詞-サ変接続\t\t<nl>を\tヲ\tを\t助詞-格助詞-一般\t\t<nl>し\tシ\tする\t動詞-自立\tサ変・スル\t連用形<nl>た\tタ\tた\t助動詞\t特殊・タ\t基本形<nl>EOS","out":"mecab = MeCab.Tagger('-Ochasen')<nl>sent =\"昨日はHTMLの勉強をした\"<nl>print(mecab.parse(sent))<nl>'''<nl>>>>出力結果<nl><nl>昨日<tab><tab><tab><tab>キノウ<tab><tab><tab><tab>昨日<tab><tab><tab><tab>名詞-副詞可能<tab><tab><tab><tab><tab><tab><tab><tab><nl>は<tab><tab><tab><tab>ハ<tab><tab><tab><tab>は<tab><tab><tab><tab>助詞-係助詞<tab><tab><tab><tab><tab><tab><tab><tab><nl>HTML<tab><tab><tab><tab>HTML<tab><tab><tab><tab>HTML<tab><tab><tab><tab>名詞-固有名詞-組織<tab><tab><tab><tab><tab><tab><tab><tab><nl>の<tab><tab><tab><tab>ノ<tab><tab><tab><tab>の<tab><tab><tab><tab>助詞-連体化<tab><tab><tab><tab><tab><tab><tab><tab><nl>勉強<tab><tab><tab><tab>ベンキョウ<tab><tab><tab><tab>勉強<tab><tab><tab><tab>名詞-サ変接続<tab><tab><tab><tab><tab><tab><tab><tab><nl>を<tab><tab><tab><tab>ヲ<tab><tab><tab><tab>を<tab><tab><tab><tab>助詞-格助詞-一般<tab><tab><tab><tab><tab><tab><tab><tab><nl>し<tab><tab><tab><tab>シ<tab><tab><tab><tab>する<tab><tab><tab><tab>動詞-自立<tab><tab><tab><tab>サ変・スル<tab><tab><tab><tab>連用形<nl>た<tab><tab><tab><tab>タ<tab><tab><tab><tab>た<tab><tab><tab><tab>助動詞<tab><tab><tab><tab>特殊・タ<tab><tab><tab><tab>基本形<nl>EOS<nl>'''"}
{"in":"columns=['学校名', '性別', '年齢', '住所', '兄弟姉妹', '住居',<nl><tab><tab>'母学歴', '父学歴', '母職業', '父職業',<nl><tab><tab>'進学理由', '保護者', '通学時間', '学習時間',<nl><tab><tab>'落第数', '奨学金', '親もち', '塾', '部活', <nl><tab><tab>'幼稚園', '大学', 'ネット', '恋人', '家族', <nl><tab><tab>'自由時間', '外出', 'アルコール', 'パリピ',<nl><tab><tab>'健康状態', '欠席日', 'G1', 'G2', 'G3']<nl><tab><tab>df.columns=columns","out":"columns=['学校名', '性別', '年齢', '住所', '兄弟姉妹', '住居',<nl><tab><tab>'母学歴', '父学歴', '母職業', '父職業',<nl><tab><tab>'進学理由', '保護者', '通学時間', '学習時間',<nl><tab><tab>'落第数', '奨学金', '親もち', '塾', '部活', <nl><tab><tab>'幼稚園', '大学', 'ネット', '恋人', '家族', <nl><tab><tab>'自由時間', '外出', 'アルコール', 'パリピ',<nl><tab><tab>'健康状態', '欠席日', 'G1', 'G2', 'G3']<nl>df.columns=columns"}
{"in":"#説明変数、目的変数を選ぶ。<nl>X_train = train[[\"PassengerId\", \"Pclass\", \"Name\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Ticket\", \"Fare\", \"Cabin\", \"Embarked\"]]<nl>y_train = train[\"Survived\"]<nl>X_test = test[\"PassengerId\", \"Pclass\", \"Name\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Ticket\", \"Fare\", \"Cabin\", \"Embarked\"]]","out":"#説明変数、目的変数を選ぶ。<nl>X_train = train[[\"PassengerId\", \"Pclass\", \"Name\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Ticket\", \"Fare\", \"Cabin\", \"Embarked\"]]<nl>y_train = train[\"Survived\"]<nl>X_test = test[[\"PassengerId\", \"Pclass\", \"Name\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Ticket\", \"Fare\", \"Cabin\", \"Embarked\"]]"}
{"in":"S,T=map(int().input().split())<nl>ans=0<nl>for a in range(S+1):<nl><tab>for b in range(S+1):<nl><tab><tab>for c in range(S+1):<nl><tab><tab><tab>x=a+b+c<nl><tab><tab><tab>y=a*b*c<nl><tab><tab><tab>if x<=S and y<=T:<nl><tab><tab><tab><tab>ans+=1<nl>print(ans)<nl><nl>if __name__=='__main__':<nl><tab>main()","out":"S,T=map(int, input().split())<nl>ans=0<nl>for a in range(S+1):<nl><tab>for b in range(S+1):<nl><tab><tab>for c in range(S+1):<nl><tab><tab><tab>x=a+b+c<nl><tab><tab><tab>y=a*b*c<nl><tab><tab><tab>if x<=S and y<=T:<nl><tab><tab><tab><tab>ans+=1<nl>print(ans)<nl><nl>if __name__=='__main__':<nl><tab>main()"}
{"in":"print(おお)","out":"print(\"おお\")"}
{"in":"#やってみよう<nl>import math<nl>x = 30<nl>y = sin(x)<nl>print(y","out":"#やってみよう<nl>import math<nl>x = 30<nl>y = sin(x)<nl>print(y)"}
{"in":"if BMI < 17.5:<nl><tab>print('低体重')<nl>elif BMI >=17.5 and BMI <25.0:<nl><tab>print('標準')<nl>elif:<nl><tab>print('肥満')","out":"if BMI < 17.5:<nl><tab>print('低体重')<nl>elif BMI >=17.5 and BMI <25.0:<nl><tab>print('標準')<nl>else:<nl><tab>print('肥満')"}
{"in":"a,b,h,m=map(int(),input().split())<nl><nl>cosA=(h+(m\/60)+m*6)<nl>ans=a**2+b**2-2*b*a*cosA<nl><nl>print(ans\/\/2)","out":"a,b,h,m=map(int,input().split())<nl><nl>cosA=(h+(m\/60)+m*6)<nl>ans=a**2+b**2-2*b*a*cosA<nl><nl>print(ans\/\/2)"}
{"in":"train['Embarked'] = train['Embarked'].fillna(train['Embarked'].mode()) ","out":"train['Embarked'] = train['Embarked'].fillna(train['Embarked'].mode())"}
{"in":"sintyo=int(input(\"身長は？(cm)\"))<nl>taiju=int(input(\"体重は？(kg)\")) #入力<nl>BMI=taiju\/sintyo**2<nl>print(f'BMI: {BMI:.1f}')<nl>if BMI > 18.5:<nl><tab>print(\"低体重\")<nl>else:<nl><tab>if BMI <= 25:<nl><tab>print(\"肥満\")<nl><tab>else:<nl><tab><tab>print(\"普通体重\")","out":"sintyo=int(input(\"身長は?(cm)\"))<nl>taiju=int(input(\"体重は?(kg)\")) #入力<nl>BMI=taiju\/sintyo**2<nl>print(f'BMI: {BMI:.1f}')<nl>if BMI > 18.5:<nl><tab>print(\"低体重\")<nl>else:<nl><tab>if BMI <= 25:<nl><tab><tab>print(\"肥満\")<nl><tab>else:<nl><tab><tab>print(\"普通体重\")"}
{"in":"df.read_csv('file.csv', sep=',')","out":"df=pd.read_csv('file.csv', sep=',')"}
{"in":"class Counter(object):<nl><tab>counter: int<nl><tab>def __init__(self):　<nl><tab><tab>self.counter = 0<nl><tab>def count(self):<nl><tab><tab>self.counter += 1<nl><tab>def show(self):<nl><tab><tab>print(self.counter)","out":"class Counter(object):<nl><tab>counter: int<nl><tab>def __init__(self):<tab><nl><tab><tab>self.counter = 0<nl><tab>def count(self):<nl><tab><tab>self.counter += 1<nl><tab>def show(self):<nl><tab><tab>print(self.counter)"}
{"in":"<nl>N=int(input())<nl>S=list(input())<nl>print(len(S))<nl>answer = ''<nl>for letter in len(S):<nl><tab><tab>answer += chr(ord('A') + (ord(letter)-ord('A')+N) % 26)","out":"<nl>N=int(input())<nl>S=list(input())<nl>print(len(S))<nl>answer = ''<nl>for letter in S:<nl><tab><tab>answer += chr(ord('A') + (ord(letter)-ord('A')+N) % 26)"}
{"in":"X = df[['部屋数', '低所得率','工場','通勤','資産税','大気汚染','犯罪率','教員比',,'築年']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl># 予測と目的変数の散布図<nl>plt.figure(figsize=(5,5))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.xlim(0, 50)<nl>plt.ylim(0, 50)<nl>plt.show()<nl><nl># 残差<nl>plt.hist(y-y_pred, bins=50)<nl>plt.title('残差')<nl>plt.show()<nl><nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)","out":"X = df[['部屋数', '低所得率','工場','通勤','資産税','大気汚染','犯罪率','教員比','築年']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl># 予測と目的変数の散布図<nl>plt.figure(figsize=(5,5))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.xlim(0, 50)<nl>plt.ylim(0, 50)<nl>plt.show()<nl><nl># 残差<nl>plt.hist(y-y_pred, bins=50)<nl>plt.title('残差')<nl>plt.show()<nl><nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)"}
{"in":"df.read_csv('pollen.csv', sep='\\t')","out":"df=pd.read_csv('pollen.csv', sep='\\t')"}
{"in":"t = np.linspace(-np.pi, np.pi, 100)<nl>x = np.cos(3*.5t)<nl>y = np.sin(5*t)<nl>plt.figure(figsize=(5,5))<nl>plt.ylim(-1.1, 1.1)<nl>plt.plot(x, y)<nl>plt.show()","out":"t = np.linspace(-np.pi, np.pi, 100)<nl>x = np.cos(3.5*t)<nl>y = np.sin(5*t)<nl>plt.figure(figsize=(5,5))<nl>plt.ylim(-1.1, 1.1)<nl>plt.plot(x, y)<nl>plt.show()"}
{"in":"calc1(\"1+10\"):","out":"calc1(\"1+10\")"}
{"in":"d = 20050508<nl>while d >=10: #二桁の時は繰り返す<nl>　D = list(map(int, str(d)))<nl>　print(D)<nl>　d = sum(D)<nl>　print(d)<nl>　if d == 11 or d == 22 or d == 33 or d == 44:<nl><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print('ソウルナンバー:', d)<tab><tab>","out":"d = 20050508<nl>while d >=10: #二桁の時は繰り返す<nl><tab>D = list(map(int, str(d)))<nl><tab>print(D)<nl><tab>d = sum(D)<nl><tab>print(d)<nl><tab>if d == 11 or d == 22 or d == 33 or d == 44:<nl><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print('ソウルナンバー:', d)<tab><tab>"}
{"in":"import matplotlib.pyplot as plt<nl>X=[]<nl>Y=[]<nl>for i in range(1,100):<nl><tab><tab>X.append(i)<nl><tab><tab>Y.append(calc_pi(i))<nl><nl>plt.plot(X.Y)<nl>plt.xlabel('N')<nl>plt.ylabel('pi')<nl>plt.show()","out":"import matplotlib.pyplot as plt<nl>X=[]<nl>Y=[]<nl>for i in range(1,100):<nl><tab><tab>X.append(i)<nl><tab><tab>Y.append(calc_pi(i))<nl><nl>plt.plot(X,Y)<nl>plt.xlabel('N')<nl>plt.ylabel('pi')<nl>plt.show()"}
{"in":"plt(x='西暦', y='降水量')","out":"plt.plot(x=df['西暦'], y=df['降水量'])"}
{"in":"x=37<nl>if x>0:<tab>#コロン<nl><tab>print(\"正の数\")　#字下げ（インデント）<nl>else:<nl><tab>print(\"正の数でない\")","out":"x=37<nl>if x>0:<tab>#コロン<nl><tab>print(\"正の数\")<tab>#字下げ(インデント)<nl>else:<nl><tab>print(\"正の数でない\")"}
{"in":"w=50<nl>h=1.6<nl>BMI=w \/ (h**2)<nl>print(BMI)<nl>if BMI<18.5:<nl><tab><tab>print(\"低体重（やせ\")<nl>else:<nl><tab>if 18.5<=BMI<25:<nl><tab><tab>print(\"普通体重\")<nl><tab>else BMI>=25:<nl><tab><tab>print(\"肥満\")","out":"w=50<nl>h=1.6<nl>BMI=w \/ (h**2)<nl>print(BMI)<nl>if BMI<18.5:<nl><tab><tab>print(\"低体重(やせ\")<nl>else:<nl><tab>if 18.5<=BMI<25:<nl><tab><tab>print(\"普通体重\")<nl><tab>else :<nl><tab><tab>print(\"肥満\")"}
{"in":"import datetime<nl><nl>class PersonD(object):<nl><tab><tab>name:str<nl><tab><tab>year:int<nl><tab><tab>month:int<nl><tab><tab>day:int<nl><tab><tab>def __init__(self,name,year,month,day):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab><tab><tab>self.year = year <nl><tab><tab><tab><tab>self.month = month<nl><tab><tab><tab><tab>self.day = day <nl><tab><tab>def age(self):<nl><tab><tab><tab><tab>today = datetime.date.today()<nl><tab><tab><tab><tab>birthday = datetime.date(year, month, day)<nl><tab><tab><tab><tab>return (int(today.strftime(\"%Y%m%d\")) - int(birthday.strftime(\"%Y%m%d\"))) \/\/ 10000<nl><tab><tab>def stone(self):<nl><tab><tab><tab><tab>return #誕生石を返す<nl><tab><tab>def diff(self,p2):<nl><tab><tab><tab><tab>today = datetime.date.today()<nl><tab><tab><tab><tab>p_birthday = datetime.date(self.year, self.month, self.day)<nl><tab><tab><tab><tab>p_age = (int(today.strftime(\"%Y%m%d\")) - int(birthday.strftime(\"%Y%m%d\"))) \/\/ 10000<nl><tab><tab><tab><tab>p2_birthday = datetime.date(p2.year, p2.month, p.2day)<nl><tab><tab><tab><tab>p2_age = (int(today.strftime(\"%Y%m%d\")) - int(birthday.strftime(\"%Y%m%d\"))) \/\/ 10000<nl><tab><tab><tab><tab>return abs(p_age - p2_age)<nl><tab><tab>def is_same_month(self,p2):<nl><tab><tab><tab><tab>if self.month = p2.month:<nl><tab><tab><tab><tab><tab>return \"True\"<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab>return \"False\"<nl><nl><tab><tab>def soul_number():<nl><tab><tab><tab><tab>str = str(year) + str(month) + str(day)<nl><tab><tab><tab><tab>yourbirthday = list(str)<nl><tab><tab><tab><tab>sum = 0<nl><tab><tab><tab><tab>for i, day in enumerate(yourbirthday):<nl><tab><tab><tab><tab><tab>sum = sum + int(day)<nl><tab><tab><tab><tab>if sum == 11 or 22 or 33 or 44:<nl><tab><tab><tab><tab><tab>return sum<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab>sum = list(sum)<nl><tab><tab><tab><tab><tab>sum2 = 0<nl><tab><tab><tab><tab><tab>for i, number in enumerate(sum):<nl><tab><tab><tab><tab><tab><tab>sum2 = sum2 + int(number)<nl><tab><tab><tab><tab><tab>if sum2 <= 10:<nl><tab><tab><tab><tab><tab><tab>return sum2<nl><tab><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab><tab>sum2 = list(sum2)<nl><tab><tab><tab><tab><tab><tab>sum3 = 0<nl><tab><tab><tab><tab><tab><tab>for i, number2 in enumerate(sum2):<nl><tab><tab><tab><tab><tab><tab><tab>sum3 = sum3 + int(number2)<nl><tab><tab><tab><tab><tab><tab>return sum3<nl><tab><tab>def __str__(self):<nl><tab><tab><tab><tab>return str(self.name)","out":"import datetime<nl><nl>class PersonD(object):<nl><tab><tab>name:str<nl><tab><tab>year:int<nl><tab><tab>month:int<nl><tab><tab>day:int<nl><tab><tab>def __init__(self,name,year,month,day):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab><tab><tab>self.year = year <nl><tab><tab><tab><tab>self.month = month<nl><tab><tab><tab><tab>self.day = day <nl><tab><tab>def age(self):<nl><tab><tab><tab><tab>today = datetime.date.today()<nl><tab><tab><tab><tab>birthday = datetime.date(year, month, day)<nl><tab><tab><tab><tab>return (int(today.strftime(\"%Y%m%d\")) - int(birthday.strftime(\"%Y%m%d\"))) \/\/ 10000<nl><tab><tab>def stone(self):<nl><tab><tab><tab><tab>return #誕生石を返す<nl><tab><tab>def diff(self,p2):<nl><tab><tab><tab><tab>today = datetime.date.today()<nl><tab><tab><tab><tab>p_birthday = datetime.date(self.year, self.month, self.day)<nl><tab><tab><tab><tab>p_age = (int(today.strftime(\"%Y%m%d\")) - int(birthday.strftime(\"%Y%m%d\"))) \/\/ 10000<nl><tab><tab><tab><tab>p2_birthday = datetime.date(p2.year, p2.month, p2.day)<nl><tab><tab><tab><tab>p2_age = (int(today.strftime(\"%Y%m%d\")) - int(birthday.strftime(\"%Y%m%d\"))) \/\/ 10000<nl><tab><tab><tab><tab>return abs(p_age - p2_age)<nl><tab><tab>def is_same_month(self,p2):<nl><tab><tab><tab><tab>if self.month = p2.month:<nl><tab><tab><tab><tab><tab>return \"True\"<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab>return \"False\"<nl><nl><tab><tab>def soul_number():<nl><tab><tab><tab><tab>str = str(year) + str(month) + str(day)<nl><tab><tab><tab><tab>yourbirthday = list(str)<nl><tab><tab><tab><tab>sum = 0<nl><tab><tab><tab><tab>for i, day in enumerate(yourbirthday):<nl><tab><tab><tab><tab><tab>sum = sum + int(day)<nl><tab><tab><tab><tab>if sum == 11 or 22 or 33 or 44:<nl><tab><tab><tab><tab><tab>return sum<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab>sum = list(sum)<nl><tab><tab><tab><tab><tab>sum2 = 0<nl><tab><tab><tab><tab><tab>for i, number in enumerate(sum):<nl><tab><tab><tab><tab><tab><tab>sum2 = sum2 + int(number)<nl><tab><tab><tab><tab><tab>if sum2 <= 10:<nl><tab><tab><tab><tab><tab><tab>return sum2<nl><tab><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab><tab>sum2 = list(sum2)<nl><tab><tab><tab><tab><tab><tab>sum3 = 0<nl><tab><tab><tab><tab><tab><tab>for i, number2 in enumerate(sum2):<nl><tab><tab><tab><tab><tab><tab><tab>sum3 = sum3 + int(number2)<nl><tab><tab><tab><tab><tab><tab>return sum3<nl><tab><tab>def __str__(self):<nl><tab><tab><tab><tab>return str(self.name)"}
{"in":"S, T = string(input())<nl>print(T+S)","out":"S, T = str(input())<nl>print(T+S)"}
{"in":"heights = [145, 150, 155, 160, 165, 170, 175, 180, 185]<nl>w = 50.0<nl>newdata = []<nl>for h in heights:<nl><tab><tab>BMI = w \/ ((h\/100)**2)<nl><tab><tab>newdata[] = BMI<nl><tab><tab>print(h, BMI)<nl><nl>print(newdata)","out":"heights = [145, 150, 155, 160, 165, 170, 175, 180, 185]<nl>w = 50.0<nl>newdata = []<nl>for h in heights:<nl><tab><tab>BMI = w \/ ((h\/100)**2)<nl><tab><tab>newdata.append(BMI)<nl><tab><tab>print(h, BMI)<nl><nl>print(newdata)"}
{"in":"a=[1,2,3]<nl>a.remove(1)<nl>print(a)<nl>a.append(4)<nl>print(a)<nl>a.remove(4)<nl>print(a)<nl>s=a.min(a)<nl>print(s)","out":"a=[1,2,3]<nl>a.remove(1)<nl>print(a)<nl>a.append(4)<nl>print(a)<nl>a.remove(4)<nl>print(a)<nl>s=min(a)<nl>print(s)"}
{"in":"class dog(object):<nl><tab>name:str<nl><tab>def __init__(self, name):<nl><tab><tab>self.name = name<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab>return '🐕'<nl><tab><tab>def face(self):<nl><tab><tab><tab>return '🐶'<nl><tab><tab>def sound(self):<nl><tab><tab><tab>return 'ワン'<nl><tab><tab>def leg(self):<nl><tab><tab><tab>return 4<nl>dog = Dog('こむぎ')","out":"class Dog(object):<nl><tab>name:str<nl><tab>def _init__(self, name):<nl><tab><tab>self.name = name<nl><tab><tab>def _repr__(self):<nl><tab><tab><tab>return '🐕'<nl><tab><tab>def face(self):<nl><tab><tab><tab>return '🐶'<nl><tab><tab>def sound(self):<nl><tab><tab><tab>return 'ワン'<nl><tab><tab>def leg(self):<nl><tab><tab><tab>return 4<nl>dog = Dog('こむぎ')"}
{"in":"plt.figure(figsize=(7.7))<nl>plt.scatter(df['部屋数'],df['住宅価格'],color='purple',alpha=0.5)<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()","out":"plt.figure(figsize=(7,7))<nl>plt.scatter(df['部屋数'],df['住宅価格'],color='purple',alpha=0.5)<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()"}
{"in":"A,B=map())(int,input().split)<nl><nl>print(((A-B)\/3)+B)","out":"A,B=map(int,input().split())<nl><nl>print(((A-B)\/3)+B)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc178\/tasks\/abc178_a<nl>x = map(int, input())<nl>if x == 1:<nl><tab>print\"0\"()<nl>elif x == 0:<nl><tab>print\"1\"()<nl>else:","out":"#kogi https:\/\/atcoder.jp\/contests\/abc178\/tasks\/abc178_a<nl>x = map(int, input())<nl>if x == 1:<nl><tab>print(\"0\")<nl>elif x == 0:<nl><tab>print(\"1\")"}
{"in":"<nl>N, P = map(int, input().split())<nl>list = [int(i) for i in list(inpt)]","out":"<nl>N, P = map(int, input().split())<nl>list = [int(i) for i in list(input())]"}
{"in":"kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc270_a<nl><nl>A,B=map(int,input().split())<nl><nl>print(A|B)","out":"# kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc270_a<nl><nl>A,B=map(int,input().split())<nl><nl>print(A|B)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B:(map(int,input().splist())<nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl> else:<nl><tab>print(A)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B = map(int,input().split())<nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl>else:<nl><tab>print(A)"}
{"in":"N = str(input())<nl>while True():<nl><tab>if len(N) == 4 :<nl><tab><tab>break<nl><tab>N = '0' + N<nl>print(N)","out":"N = str(input())<nl>while True:<nl><tab>if len(N) == 4 :<nl><tab><tab>break<nl><tab>N = '0' + N<nl>print(N)"}
{"in":"words = []<nl>for text in df[\"コメント\"]:<nl><tab><tab>doc = nlp(text)<nl><tab><tab>for word in doc:<nl><tab><tab><tab><tab># 動詞(VERB), 名詞(NOUN), 形容詞(ADJ)のみ抽出<nl><tab><tab><tab><tab>if word.pos_ == 'VERB' or word.pos_ == 'NOUN' or word.pos_ == 'ADJ':<nl><tab><tab><tab><tab><tab><tab>words.append(word.lemma_)<tab>#標準形に変換する<nl>print(len(words))<nl>print(words[:30]) #先頭30語だけ","out":"words = []<nl>for text in df[\"コメント忘れ\"]:<nl><tab><tab>doc = nlp(text)<nl><tab><tab>for word in doc:<nl><tab><tab><tab><tab># 動詞(VERB), 名詞(NOUN), 形容詞(ADJ)のみ抽出<nl><tab><tab><tab><tab>if word.pos_ == 'VERB' or word.pos_ == 'NOUN' or word.pos_ == 'ADJ':<nl><tab><tab><tab><tab><tab><tab>words.append(word.lemma_)<tab>#標準形に変換する<nl>print(len(words))<nl>print(words[:30]) #先頭30語だけ"}
{"in":"<nl>N = int(input())<nl>if N % 2 == 0 :<nl><tab><tab>print(White)<nl>else :<nl><tab><tab>print(Black)","out":"<nl>N = int(input())<nl>if N % 2 == 0 :<nl><tab><tab>print(\"White\")<nl>else :<nl><tab><tab>print(\"Black\")"}
{"in":"df.column","out":"df.columns"}
{"in":"#ホールドアウト&単回帰分析LinearRegression<nl>from sklearn.model_selection import train_test_split<nl>from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X_L=list(X)<nl>print(X_L)<nl>L=len(X_L)<nl>X1_L=[]<nl>MSE_L=[]<nl>R2_L=[]<nl><nl>y = df['y']<nl><nl>for i in L:<nl><tab>if i==L-1:<nl><tab><tab>break<nl><tab>for j in (i+1,L):<nl><tab><tab>X=df[df[X_L(i)],df[X_L(j)]]<nl><tab><tab>X1_L.append(X)<nl><tab><tab>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)<nl><tab><tab>model=LinearRegression()<nl><tab><tab>y_pred=model.predict(X_test)<nl><tab><tab>model.fit(X_train,y_train)<nl><tab><tab>mse=mean_squared_error(y_test, y_pred)<nl><tab><tab>MSE_L.append(mse)<nl><tab><tab>r2=r2_score(X_test,y_pred)<nl><tab><tab>R2_L.append(r2)<nl><nl>print('MSE=',mse)<nl>print('R2_L=',R2_L)<nl>","out":"#ホールドアウト&単回帰分析LinearRegression<nl>from sklearn.model_selection import train_test_split<nl>from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X_L=list(X)<nl>print(X_L)<nl>L=len(X_L)<nl>X1_L=[]<nl>MSE_L=[]<nl>R2_L=[]<nl><nl>y = df['y']<nl><nl>for i in range(L):<nl><tab>if i==L-1:<nl><tab><tab>break<nl><tab>for j in range(i+1,L):<nl><tab><tab>X=df[df[X_L(i)],df[X_L(j)]]<nl><tab><tab>X1_L.append(X)<nl><tab><tab>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)<nl><tab><tab>model=LinearRegression()<nl><tab><tab>y_pred=model.predict(X_test)<nl><tab><tab>model.fit(X_train,y_train)<nl><tab><tab>mse=mean_squared_error(y_test, y_pred)<nl><tab><tab>MSE_L.append(mse)<nl><tab><tab>r2=r2_score(X_test,y_pred)<nl><tab><tab>R2_L.append(r2)<nl><nl>print('MSE=',mse)<nl>print('R2_L=',R2_L)<nl>"}
{"in":"heights = [145, 150, 155, 160, 165, 170, 175, 180, 185]<nl>w = 50.0<nl>newdata = []<nl>for h in heights:<nl><tab><tab>BMI = w \/ ((h\/100)**2)<nl><tab><tab>newdata.append(BMI)<nl><tab><tab>print(h, BMI)<nl><nl>print(int(newdata[]))","out":"heights = [145, 150, 155, 160, 165, 170, 175, 180, 185]<nl>w = 50.0<nl>newdata = []<nl>for h in heights:<nl><tab><tab>BMI = w \/ ((h\/100)**2)<nl><tab><tab>newdata.append(BMI)<nl><tab><tab>print(h, BMI)<nl><nl>print(int(newdata))"}
{"in":"S = [input() for i in range(10)]<nl>a = 11<nl>b = 0<nl>c = 11<nl>d = 0<nl><nl>for i in range(10):<nl><tab>for j in range(10):<nl><tab><tab>S[i][j] == \"#\":<nl><tab><tab><tab>a = min(a, S[i])<nl><tab><tab><tab>b = max(b, S[i])<nl><tab><tab><tab>c = min(c, S[j])<nl><tab><tab><tab>d = max(d, S[j])","out":"S = [input() for i in range(10)]<nl>a = 11<nl>b = 0<nl>c = 11<nl>d = 0<nl><nl>for i in range(10):<nl><tab>for j in range(10):<nl><tab><tab>if S[i][j] == \"#\":<nl><tab><tab><tab>a = min(a, S[i])<nl><tab><tab><tab>b = max(b, S[i])<nl><tab><tab><tab>c = min(c, S[j])<nl><tab><tab><tab>d = max(d, S[j])"}
{"in":"pearsomr(df['築年'],df['住宅価格'])<nl>print('相関係数：',r)<nl>print('p値：',p)","out":"pearsomr(df['築年'],df['住宅価格'])<nl>print('相関係数:',r)<nl>print('p値:',p)"}
{"in":"<nl>A,B,C = map(int, input().split())<nl><nl>list = [A,B,C]<nl>newlist = list.sorted()<nl><nl>print(newlist)<nl>#if b[2]-b[1] == b[1]-b[0]:<nl><tab>#print('Yes')<nl><nl>#else:<nl> # print('No')","out":"<nl>A,B,C = map(int, input().split())<nl><nl>list = [A,B,C]<nl>newlist = sorted(list)<nl><nl>print(newlist)<nl>#if b[2]-b[1] == b[1]-b[0]:<nl><tab>#print('Yes')<nl><nl>#else:<nl> # print('No')"}
{"in":"W ＝ 47.4<nl>h = 1.65<nl>BMI = w \/ (h * h)<nl><nl>print(BMI) #表示されます","out":"w = 47.4<nl>h = 1.65<nl>BMI = w \/ (h * h)<nl><nl>print(BMI) #表示されます"}
{"in":"コギー<nl>import math <nl>h=math.sqrt(w \/ 22.0)<nl>　　　　print(\"w\", \"h\")","out":"コギー<nl>import math <nl>h=math.sqrt(w \/ 22.0)<nl><tab><tab><tab><tab>print(\"w\", \"h\")"}
{"in":"w=22*h**2<nl>print(w)<nl>print（f'w: {w:.2f}')","out":"w=22*h**2<nl>print(w)<nl>print(f'w: {w:.2f}')"}
{"in":"S = str(input())<nl><nl>t = len(S)<nl><nl>h = []<nl>for i in range(t):<nl><tab>x = S[i:]<nl><tab>y = S[:i]<nl><tab>r = x + y<nl>h.appned(r)<nl>print(r)","out":"S = str(input())<nl><nl>t = len(S)<nl><nl>h = []<nl>for i in range(t):<nl><tab>x = S[i:]<nl><tab>y = S[:i]<nl><tab>r = x + y<nl>h.append(r)<nl>print(r)"}
{"in":"import math <nl>math.sqrt(w \/ 22.0)<nl>print('体重:'w ,'身長:'h)","out":"import math <nl>math.sqrt(w \/ 22.0)<nl>print('体重:', w ,'身長:', h)"}
{"in":"plt.hist(df['大気汚染'].12)<nl>plt.show","out":"plt.hist(df['大気汚染'],12)<nl>plt.show"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl><nl>A, B,C = map(int, input().split())<nl>if A==B:<nl> print(C)<nl> break<nl>else if A==C:<nl><tab>print(B)<nl><tab> break<nl>els:<nl> print(A)<nl><tab>break<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl><nl>A, B,C = map(int, input().split())<nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl>else:<nl><tab>print(A)"}
{"in":"class Duck(object):<nl><tab>def face(self):<nl><tab><tab>return \"🦆\"<nl><tab>def sound(self):<nl><tab><tab>return \"クワクワクワ\"<nl><tab>def __repr__html(self):<nl><tab><tab>return f 'https:\/\/emoji-img.s3.ap-northeast-1.amazonaws.com\/svg\/1f986.svg'","out":"class Duck(object):<nl><tab>def face(self):<nl><tab><tab>return \"🦆\"<nl><tab>def sound(self):<nl><tab><tab>return \"クワクワクワ\"<nl><tab>def __repr__html(self):<nl><tab><tab>return f'https:\/\/emoji-img.s3.ap-northeast-1.amazonaws.com\/svg\/1f986.svg'"}
{"in":"df.sort_values('平均気温')<nl>df.head(sort_values('平均気温'))","out":"df.sort_values('平均気温')<nl>df.sort_values('平均気温').head()"}
{"in":"model = LinearSVRr()<nl>model.fit(X_train, y_train)<nl><nl>y_pred = model.predict(X_test)<nl><nl>print(\"MSE: \", mean_squared_error(y_test, y_pred))<nl>#print('R2', r2_score(y_test, y_pred))<nl><nl>print('R2(訓練):', r2_score(y_train, model.predict(X_train)))<nl>print('R2(テスト):', r2_score(y_test, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y_test, y_pred, c='red', alpha=0.3)<nl>plt.show()","out":"model = LinearSVR()<nl>model.fit(X_train, y_train)<nl><nl>y_pred = model.predict(X_test)<nl><nl>print(\"MSE: \", mean_squared_error(y_test, y_pred))<nl>#print('R2', r2_score(y_test, y_pred))<nl><nl>print('R2(訓練):', r2_score(y_train, model.predict(X_train)))<nl>print('R2(テスト):', r2_score(y_test, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y_test, y_pred, c='red', alpha=0.3)<nl>plt.show()"}
{"in":"w= 46.0<nl>h = 1.50<nl>BMI = w \/ (h*hh*h)<nl>print(BMI) #表示されます","out":"w= 46.0<nl>h = 1.50<nl>BMI = w \/ (h*h)<nl>print(BMI) #表示されます"}
{"in":"if BMI < 18.50:<nl> print(\"低体重\")<nl>else :<nl><tab> BMI >= 18.50:<nl>print(\"低体重でない\")","out":"if BMI < 18.50:<nl><tab>print(\"低体重\")<nl>else :<nl><tab>assert BMI >= 18.50:<nl><tab>print(\"低体重でない\")"}
{"in":"ｗ ＝46.4<nl>ｈ ＝1.61<nl>BMI ＝ W ／ H ＊＊ 2<nl>print(BMI)","out":"w =46.4<nl>h =1.61<nl>BMI = w \/ h ** 2<nl>print(BMI)"}
{"in":"d = 19690405<nl><nl>while d >= 10:<nl><tab>D = list(map(int, str(d)))<nl><tab>print('D=' D)<nl><tab>d = sum(D)<nl><tab>print('d=' d)","out":"d = 19690405<nl><nl>while d >= 10:<nl><tab>D = list(map(int, str(d)))<nl><tab>print('D=' D)<nl><tab>d = sum(D)<nl><tab>print('d=', d)"}
{"in":"animal.leg()　for animal in animals","out":"list(animal.leg()<tab>for animal in animals)"}
{"in":"import collections<nl>n=int(input())<nl>s=[]<nl>for i in range(n):<nl><tab>s.append(input())<nl>ans=collections.counter(s)<nl>print(ans.most_common)","out":"import collections<nl>n=int(input())<nl>s=[]<nl>for i in range(n):<nl><tab>s.append(input())<nl>ans=collections.Counter(s)<nl>print(ans.most_common)"}
{"in":"df.['西暦','平均気温','降水量','日照時間','スギ花粉飛散量'].describe","out":"df[['西暦','平均気温','降水量','日照時間','スギ花粉飛散量']].describe()"}
{"in":"plt.boxplot(df['住宅価格'])<nl>df['住宅価格']describe()<nl>plt.show","out":"plt.boxplot(df['住宅価格'])<nl>df['住宅価格'].describe()<nl>plt.show()"}
{"in":"a = 0<nl>b = 0<nl>for n in range(100):<nl><tab>a += (1\/((2*n)-1)) * ((-1)**(n+!))<nl>print(4*a)","out":"a = 0<nl>b = 0<nl>for n in range(100):<nl><tab>a += (1\/((2*n)-1)) * ((-1)**(n+1))<nl>print(4*a)"}
{"in":"N=10<nl>for i in range(N):<nl><tab>x=random.random()<nl><tab>y=random.random()<nl>if x<=1.0:<nl><tab>if y<=1.0:<nl><tab><tab>print(\"赤\"i,x,y)","out":"N=10<nl>for i in range(N):<nl><tab>x=random.random()<nl><tab>y=random.random()<nl>if x<=1.0:<nl><tab>if y<=1.0:<nl><tab><tab>print(\"赤\", i,x,y)"}
{"in":"a,b=map(int,input().split())<nl>A=str(a)<nl>B=str(B)<nl>x=A**b<nl>y=B**A<nl>if a>b:<nl><tab>print(y)<nl>else:<nl><tab>print(x)","out":"a,b=map(int,input().split())<nl>A=str(a)<nl>B=str(b)<nl>x=A**b<nl>y=B**A<nl>if a>b:<nl><tab>print(y)<nl>else:<nl><tab>print(x)"}
{"in":"sample_list = keys_list<nl><nl><nl>S = []<nl><tab># for _ in range(len(sample_list)):<nl><tab>#<tab> S.append([])<nl>mean_list_all = []<nl>str_list, num_list = data_sep(df_keys['keys'][0])<nl><nl>for i in range(len(sample_list)) : <nl><tab>sl = sample_list[i]<nl><tab>for j in range(len(str_list)):<nl><tab><tab>s = str_list[j]<nl><tab><tab>num = num_list[j]<nl><tab><tab>if sl == s:<nl><tab><tab><tab>S.append(num)<nl>print(S)<nl># mean_lists = [mean_list(S[k]) for k in range(len(sample_list))]<nl><tab><tab># print(mean_lists)<nl>mean_list_all.append(mean_lists)<nl>","out":"sample_list = keys_list<nl><nl><nl>S = []<nl><tab># for<tab>in range(len(sample_list)):<nl><tab>#<tab> S.append([])<nl>mean_list_all = []<nl>str_list, num_list = data_sep(df_keys['keys'][0])<nl><nl>for i in range(len(sample_list)) : <nl><tab>sl = sample_list[i]<nl><tab>for j in range(len(str_list)):<nl><tab><tab>s = str_list[j]<nl><tab><tab>num = num_list[j]<nl><tab><tab>if sl == s:<nl><tab><tab><tab>S.append(num)<nl>print(S)<nl># mean_lists = [mean_list(S[k]) for k in range(len(sample_list))]<nl><tab><tab># print(mean_lists)<nl>mean_list_all.append(mean_lists)<nl>"}
{"in":"stones = 'ガーネット アメジスト アクアマリン ダイヤモンド エメラルド 養殖真珠 ルビー ペリドット サファイア オパール トパーズ ターコイズ<nl><nl>class PersonD(object):<nl><tab>def __init__(self, name, year, month, day):<nl><tab><tab>self.name = name<nl><tab><tab>self.year = year<nl><tab><tab>self.month = month<nl><tab><tab>self.day = day<nl><tab>def __repr__(self):<nl><tab><tab>return str([self.name, self.year, self.month, self.day])<nl><tab>def age(self):<nl><tab><tab>return 2022-self.year<nl><tab>def stone(self):<nl><tab><tab>return stones[self.month-1]<nl><nl>p = PersonD(\"かんな\", 1999, 2, 3)<nl>p.age()<nl>p.stone()","out":"stones = 'ガーネット アメジスト アクアマリン ダイヤモンド エメラルド 養殖真珠 ルビー ペリドット サファイア オパール トパーズ ターコイズ'<nl><nl>class PersonD(object):<nl><tab>def __init__(self, name, year, month, day):<nl><tab><tab>self.name = name<nl><tab><tab>self.year = year<nl><tab><tab>self.month = month<nl><tab><tab>self.day = day<nl><tab>def __repr__(self):<nl><tab><tab>return str([self.name, self.year, self.month, self.day])<nl><tab>def age(self):<nl><tab><tab>return 2022-self.year<nl><tab>def stone(self):<nl><tab><tab>return stones[self.month-1]<nl><nl>p = PersonD(\"かんな\", 1999, 2, 3)<nl>p.age()<nl>p.stone()"}
{"in":"<nl>A, B= map(int, input().split())<nl><nl>def digitSum(n):<nl><tab> <nl><tab><tab>s = str(n)<nl><tab> <nl><tab><tab>array = list(map(int, s))<nl><tab> <nl><tab><tab>return sum(array)<nl><nl>if digitSum(A)>digitSum(B):<nl><tab>print(digitSum(A))<nl>elif digitSumS(A)<digitSumS(B):<nl><tab>print(digitSum(B))","out":"<nl>A, B= map(int, input().split())<nl><nl>def digitSum(n):<nl><tab> <nl><tab><tab>s = str(n)<nl><tab> <nl><tab><tab>array = list(map(int, s))<nl><tab> <nl><tab><tab>return sum(array)<nl><nl>if digitSum(A)>digitSum(B):<nl><tab>print(digitSum(A))<nl>elif digitSum(A)<digitSum(B):<nl><tab>print(digitSum(B))"}
{"in":"plt.hist(df['スギ花粉飛散量']))","out":"plt.hist(df['スギ花粉飛散量'])"}
{"in":"x = str(ayayayayaya)<nl><nl>print(x)","out":"x = str(\"ayayayayaya\")<nl><nl>print(x)"}
{"in":"<nl>N,P = map(int,input().split())<nl>a = list(map(int, input().split()))<nl>b = 0<nl>for i in range(N):<nl><tab><tab>if int(a[i-1]) < P:<nl><tab><tab><tab><tab>b += 1<nl>ptiny(b)","out":"<nl>N,P = map(int,input().split())<nl>a = list(map(int, input().split()))<nl>b = 0<nl>for i in range(N):<nl><tab><tab>if int(a[i-1]) < P:<nl><tab><tab><tab><tab>b += 1<nl>print(b)"}
{"in":"S, T = map(int, input().split())<nl>for a in range(10):<nl><tab>for b in range(10):<nl><tab><tab>for c in range(10):<nl><tab><tab><tab>if a+b+c <= S and a*b*c <=T :<nl><tab><tab><tab><tab>combs.append((a,b,c))<nl>print(len(combs))","out":"S, T = map(int, input().split())<nl>combs = []<nl>for a in range(10):<nl><tab>for b in range(10):<nl><tab><tab>for c in range(10):<nl><tab><tab><tab>if a+b+c <= S and a*b*c <=T :<nl><tab><tab><tab><tab>combs.append((a,b,c))<nl>print(len(combs))"}
{"in":"#6-4<nl>from kogi.atcoder import *<nl>A, B = map(int, input().split())<nl><nl>def S(x):<nl><tab>#x = str(x)<nl><tab>sum = 0<nl><tab>for c in x:<nl><tab><tab>sum += int(x[c])<nl><tab>return int(sum)<nl><nl>print(max(S(A), S(B)))","out":"#6-4<nl>from kogi.atcoder import *<nl>A, B = map(int, input().split())<nl><nl>def S(x):<nl><tab>#x = str(x)<nl><tab>sum = 0<nl><tab>for c in range(x):<nl><tab><tab>sum += int(x[c])<nl><tab>return int(sum)<nl><nl>print(max(S(A), S(B)))"}
{"in":"def summ(n):<nl><tab><tab>if n==1: return 1:<nl><tab><tab>else : return i+=sum(n)","out":"def summ(n):<nl><tab><tab>if n==1: return 1<nl><tab><tab>else : return i+=sum(n)"}
{"in":"A, B, C = map(int, input().split())<nl>if A == B :<nl><tab><tab>print(C)<nl><tab><tab>else if C == A :<nl><tab><tab><tab>print(B)<nl><tab><tab>else :<nl><tab><tab><tab>print(C)","out":"A, B, C = map(int, input().split())<nl>if A == B :<nl><tab><tab>print(C)<nl>elif C == A :<nl><tab><tab>print(B)<nl>else :<nl><tab><tab>print(C)"}
{"in":"class Ratio(object):<nl><tab><tab>def __init__(self, top, bottom = 1):<tab># 動詞+目的語<nl><tab><tab><tab><tab>self.num = top<nl><tab><tab><tab><tab>self.den = bottom<nl><tab><tab>def show(self):<nl><tab><tab><tab><tab>print self.num, '\/', self.den<nl><tab><tab>","out":"class Ratio(object):<nl><tab><tab>def __init__(self, top, bottom = 1):<tab># 動詞+目的語<nl><tab><tab><tab><tab>self.num = top<nl><tab><tab><tab><tab>self.den = bottom<nl><tab><tab>def show(self):<nl><tab><tab><tab><tab>print(self.num, '\/', self.den)<nl><tab><tab>"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split()) # 入力処理 決まり文句<nl>D＝ A-B<nl>print(D)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split()) # 入力処理 決まり文句<nl>D= A-B<nl>print(D)"}
{"in":"df.read_csv('pollen.csv',header=5)","out":"df=pd.read_csv('pollen.csv',header=5)"}
{"in":"w = 42.0<nl>h = 1.58<nl>BMI = w \/ (h * h)<nl><nl>print(BMI)<nl><nl>if B<I < 17.5<nl><tab><tab>print('低体重')<nl>elif BMI >=17.5 and BMI < 25.0:<nl><tab><tab>print('標準')<nl>else:<nl><tab><tab>print('太りすぎ')","out":"w = 42.0<nl>h = 1.58<nl>BMI = w \/ (h * h)<nl><nl>print(BMI)<nl><nl>if BMI < 17.5:<nl><tab><tab>print('低体重')<nl>elif BMI >=17.5 and BMI < 25.0:<nl><tab><tab>print('標準')<nl>else:<nl><tab><tab>print('太りすぎ')"}
{"in":"h=int(input(\"身長は？(m)<nl>\"))<nl>print(h)","out":"h=int(input(\"身長は?(m)\"))<nl>print(h)"}
{"in":"sum〔animal.leg() for animal in animals]〕<nl><tab>","out":"sum([animal.leg() for animal in animals])<nl><tab>"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split()))<nl>C = [0]*N<nl><nl>C[0]=0<nl>C[1]=abs(h[1]-h[0])<nl><nl>for i in range(2,N):<nl>C1=C[i-2]+abs(h[i]-h[i-2])<nl>C2=C{i-1}+abs(h[i]-h[i-1])<nl>C[i]=min(C1,C2)<nl>print(C[N-1])","out":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split()))<nl>C = [0]*N<nl><nl>C[0]=0<nl>C[1]=abs(h[1]-h[0])<nl><nl>for i in range(2,N):<nl><tab>C1=C[i-2]+abs(h[i]-h[i-2])<nl><tab>C2=C{i-1}+abs(h[i]-h[i-1])<nl><tab>C[i]=min(C1,C2)<nl><tab>print(C[N-1])"}
{"in":"def g(x):<nl><tab>str(x)<nl><tab>x=[::-1]<nl><tab>return g(x)","out":"def g(x):<nl><tab>str(x)<nl><tab>x=x[::-1]<nl><tab>return x"}
{"in":"X = df['通勤','教員比']<nl>y = df['住宅価格']<nl><nl>model = LinearRegression(x)<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(x)<nl>plt.figure(figsize=(6,6))<nl>plt.xlabel('実装')<nl>plt.ylabel('予想')<nl>plt.ylim(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R２)：', r2)<nl>","out":"X = df[['通勤','教員比']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression(x)<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(x)<nl>plt.figure(figsize=(6,6))<nl>plt.xlabel('実装')<nl>plt.ylabel('予想')<nl>plt.ylim(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)<nl>"}
{"in":"A=[list(map(int, input().split())) for a in range(3)]<nl>N=int(input())<nl>B=[]<nl>for b in N:<nl><tab>b=int(input())<nl><tab>B+=b<nl>print(A)<nl>print(B)","out":"A=[list(map(int, input().split())) for a in range(3)]<nl>N=int(input())<nl>B=[]<nl>for b in range(N):<nl><tab>b=int(input())<nl><tab>B+=b<nl>print(A)<nl>print(B)"}
{"in":"for column in df.colums:<nl><tab><tab>plt.hist(df[column], bins = 30)<nl><tab><tab>plt.xlabel(column)<nl><tab><tab>plt.ylabel('件数')<nl><tab><tab>plt.legend([str(df[column].describe())]])<nl><tab><tab>plt.show()","out":"for column in df.colums:<nl><tab><tab>plt.hist(df[column], bins = 30)<nl><tab><tab>plt.xlabel(column)<nl><tab><tab>plt.ylabel('件数')<nl><tab><tab>plt.legend([str(df[column].describe())])<nl><tab><tab>plt.show()"}
{"in":"d=20070122<nl>while d>=10:#二桁の時は繰り返す<nl>　 D = list(map(int,str(d)))<nl>　 #print(D)<nl>　 d = sum(D)<nl>　 #print(d)<nl>　 if d==11 or d== 22 or d==33 or d==44:<nl><tab> break#条件を満たしたらループを抜ける","out":"d=20070122<nl>while d>=10:#二桁の時は繰り返す<nl><tab> D = list(map(int,str(d)))<nl><tab> #print(D)<nl><tab> d = sum(D)<nl><tab> #print(d)<nl><tab> if d==11 or d== 22 or d==33 or d==44:<nl><tab> break#条件を満たしたらループを抜ける"}
{"in":"heights = [130,140,150,160,170,180,190,200]<nl>BMI=18<nl>newdata18=[]<nl>for w in weights:<nl><tab> w= BMI*(h**2) <nl><tab> newdata18.appdata(w)<nl>print(heights)<nl>print(newdata18)","out":"heights = [130,140,150,160,170,180,190,200]<nl>BMI=18<nl>newdata18=[]<nl>for w in weights:<nl><tab> w= BMI*(h**2) <nl><tab> newdata18.append(w)<nl>print(heights)<nl>print(newdata18)"}
{"in":"A1,A2,A3 = map(int,input().split())<nl>cin >> A1 >> A2 >> A3<nl>if A3-A2 == A2-A1:<nl><tab>print('Yes')<nl>elif A2-A3 == A3-A1:<nl><tab>print('Yes')<nl>elif A3-A1 == A1-A2:<nl><tab>print('yes')<nl>elif A1-A3 == A3-A2:<nl><tab>print('Yes')<nl>elif A2-A1 == A1-A3:<nl><tab>print('Yes')<nl>elif A1-A2 == A2-A3:<nl><tab>print('Yes')<nl>else:<nl><tab>print('No')","out":"A1,A2,A3 = map(int,input().split())<nl># cin >> A1 >> A2 >> A3<nl>if A3-A2 == A2-A1:<nl><tab>print('Yes')<nl>elif A2-A3 == A3-A1:<nl><tab>print('Yes')<nl>elif A3-A1 == A1-A2:<nl><tab>print('yes')<nl>elif A1-A3 == A3-A2:<nl><tab>print('Yes')<nl>elif A2-A1 == A1-A3:<nl><tab>print('Yes')<nl>elif A1-A2 == A2-A3:<nl><tab>print('Yes')<nl>else:<nl><tab>print('No')"}
{"in":"mathsin(30","out":"math.sin(30)"}
{"in":"S=input()<nl>if S[2]==S[3] or S[4]==S[5]:<nl><tab><tab>print(Yes)<nl>else:<nl><tab><tab>print(No)","out":"S=input()<nl>if S[2]==S[3] or S[4]==S[5]:<nl><tab><tab>print(\"Yes\")<nl>else:<nl><tab><tab>print(\"No\")"}
{"in":"X = int(input())<nl>if X%100==0:<nl><tab><tab>print(Yes)<nl>else:<nl><tab>print(No)","out":"X = int(input())<nl>if X%100==0:<nl><tab><tab>print(\"Yes\")<nl>else:<nl><tab>print(\"No\")"}
{"in":"x=df[['部屋数']]<nl>y=df[['住宅価格']]<nl>print(X.shape)<nl>print(Y.shape)","out":"x=df[['部屋数']]<nl>y=df[['住宅価格']]<nl>print(x.shape)<nl>print(y.shape)"}
{"in":"import sys<nl>sys.float_info\/epsilon","out":"import sys<nl>sys.float_info.epsilon"}
{"in":"http:\/\/www.mikiotaniguchi.com\/image\/08\/08041003s.pdf","out":"# http:\/\/www.mikiotaniguchi.com\/image\/08\/08041003s.pdf"}
{"in":"df = pd,read_csv(\"file.csv\")","out":"df = pd.read_csv(\"file.csv\")"}
{"in":"df[\"住宅価格\"].values.tolist.","out":"df[\"住宅価格\"].values.tolist()"}
{"in":"if BMI < 18.50 :<nl><tab>print(\"低体重\")<nl><tab>else :<nl><tab><tab>print(\"低体重でない\")","out":"if BMI < 18.50 :<nl><tab>print(\"低体重\")<nl>else :<nl><tab>print(\"低体重でない\")"}
{"in":"if BMI < 17.50:<nl><tab><tab>print(\"低体重\")<nl>elif BMI >= 17.50 and BMI < 25.0<nl><tab><tab>print(\"標準\")<nl>else :<nl><tab><tab>print(太りすぎ)<nl><tab> ","out":"if BMI < 17.50:<nl><tab><tab>print(\"低体重\")<nl>elif BMI >= 17.50 and BMI < 25.0:<nl><tab><tab>print(\"標準\")<nl>else :<nl><tab><tab>print(\"太りすぎ\")<nl><tab> "}
{"in":"d=1997112　#朔間零<nl>while d>=10: #2桁のときは繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d==11or d==22 or d==33 or d==44:<nl><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><tab><tab><nl><nl>print('ソウルナンバー:',d)","out":"d=1997112<tab>#朔間零<nl>while d>=10: #2桁のときは繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d==11or d==22 or d==33 or d==44:<nl><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><tab><tab><nl><nl>print('ソウルナンバー:',d)"}
{"in":"N=int(input())<nl>A=list(list(map(int,input().split())) for _ in range(N))<nl><nl>for i in range(0,N-2):<nl><tab>for j in range(1,N-1):<nl><tab><tab>for k in range(2,N):<nl><tab><tab><tab>dx=A[j][0]-A[i][0]<nl><tab><tab><tab>if dx1==0:<nl><tab><tab><tab><tab>a1=0<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>a1=(A[j][1]-A[i][1])\/dx<nl><tab><tab><tab><nl><tab><tab><tab>dx2=A[j][0]-A[i][0]<nl><tab><tab><tab>if dx2==0:<nl><tab><tab><tab><tab>a2=0<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>a2=(A[k][1]-A[i][1])\/dx2<nl><tab><tab><tab><nl><tab><tab><tab>if a1==a2:<nl><tab><tab><tab><tab>ans+=1<nl>print(N-ans)","out":"N=int(input())<nl>A=list(list(map(int,input().split())) for<tab>in range(N))<nl><nl>for i in range(0,N-2):<nl><tab>for j in range(1,N-1):<nl><tab><tab>for k in range(2,N):<nl><tab><tab><tab>dx=A[j][0]-A[i][0]<nl><tab><tab><tab>if dx==0:<nl><tab><tab><tab><tab>a1=0<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>a1=(A[j][1]-A[i][1])\/dx<nl><tab><tab><tab><nl><tab><tab><tab>dx2=A[j][0]-A[i][0]<nl><tab><tab><tab>if dx2==0:<nl><tab><tab><tab><tab>a2=0<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>a2=(A[k][1]-A[i][1])\/dx2<nl><tab><tab><tab><nl><tab><tab><tab>if a1==a2:<nl><tab><tab><tab><tab>ans+=1<nl>print(N-ans)"}
{"in":"def gcd(a,b):<nl> if b==0:<nl><tab> return a<nl> else:<nl><tab> return gcd(b,a%b)<nl><tab> acd(6215,4746)<nl><tab> acd=777<nl>print(acd)","out":"def gcd(a,b):<nl> if b==0:<nl><tab> return a<nl> else:<nl><tab> return gcd(b,a%b)<nl><tab> acd(6215,4746)<nl><tab> acd=777<nl>print(gcd)"}
{"in":"d=20070308<nl>while d >=10: #二桁野ときは繰り返す<tab><tab><nl>　<tab>D=list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl>if d==11 or d==22 or d==33 or d==44:<nl><tab>break#条件を満たしたらループを抜ける<nl><tab>print('ソールナンバー：',d)","out":"d=20070308<nl>while d >=10: #二桁野ときは繰り返す<tab><tab><nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl>if d==11 or d==22 or d==33 or d==44:<nl><tab>break#条件を満たしたらループを抜ける<nl><tab>print('ソールナンバー:',d)"}
{"in":"A, B, C = map(int, input().split())<nl>printmax (A + B or B + C or A + C)","out":"A, B, C = map(int, input().split())<nl>print(max (A + B, B + C, A + C))"}
{"in":"M = 8<nl>N = 5<nl>lives = np.random.randint(0,2. M*N)<nl>lives = lives.reshape(M,N)","out":"M = 8<nl>N = 5<nl>lives = np.random.randint(0,2, M*N)<nl>lives = lives.reshape(M,N)"}
{"in":"calc(\"1+10\")->float","out":"calc(\"1+10\")"}
{"in":"d = 2005514<nl>while d >=10:<nl>D = list(map(int,str(d)))<nl>print(D)<nl><nl>d = sum(D)<nl>print(d)","out":"d = 2005514<nl>while d >=10:<nl><tab>D = list(map(int,str(d)))<nl><tab>print(D)<nl><nl><tab>d = sum(D)<nl>print(d)"}
{"in":"def calc(s:str)->float:<nl><tab>a, b = map(float, s.split('+')<nl><tab>return a+b<nl><tab><tab>","out":"def calc(s:str)->float:<nl><tab>a, b = map(float, s.split('+'))<nl><tab>return a+b<nl><tab><tab>"}
{"in":"df()","out":"df"}
{"in":"#ICPC2022_B<nl>n=int(input())<nl>c=map(int,input().split() for _ in range(n))<nl>print(c)","out":"#ICPC2022_B<nl>n=int(input())<nl>c=list(map(int,input().split()))<nl>for i in range(n):<nl><tab>print(c[i])"}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl>A=input(int())<nl>B=input(int())<nl>C==((A-B)\/3)+B #平均血圧<nl>print(C)<nl>","out":"# kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl>A=input(int())<nl>B=input(int())<nl>C=((A-B)\/3)+B #平均血圧<nl>print(C)<nl>"}
{"in":"x,y=map(int,input().split())<nl>if X == 0:<nl><tab><tab>if Y == 0:<nl><tab><tab><tab><tab>print(0)<nl><tab><tab>elif Y == 1:<nl><tab><tab><tab><tab>print(2)<nl><tab><tab>elif Y == 2:<nl><tab><tab><tab><tab>print(1)<nl>elif X == 1:<nl><tab><tab>if Y == 0:<nl><tab><tab><tab><tab>print(2)<nl><tab><tab>elif Y == 1:<nl><tab><tab><tab><tab>print(1)<nl><tab><tab>elif Y == 2:","out":"x,y=map(int,input().split())<nl>if X == 0:<nl><tab><tab>if Y == 0:<nl><tab><tab><tab><tab>print(0)<nl><tab><tab>elif Y == 1:<nl><tab><tab><tab><tab>print(2)<nl><tab><tab>elif Y == 2:<nl><tab><tab><tab><tab>print(1)<nl>elif X == 1:<nl><tab><tab>if Y == 0:<nl><tab><tab><tab><tab>print(2)<nl><tab><tab>elif Y == 1:<nl><tab><tab><tab><tab>print(1)<nl><tab><tab>elif Y == 2:<nl><tab><tab><tab><tab>pass"}
{"in":"A,B=map(int,input().split)<nl><nl>print(((A-B)\/3)+B)","out":"A,B=map(int,input().split())<nl><nl>print(((A-B)\/3)+B)"}
{"in":"w=int(input(\"体重は？(kg)\"))<nl>w=22*h**2math.sqrt<nl>print(\"平均身長\")","out":"w=int(input(\"体重は?(kg)\"))<nl>w=math.sqrt(22*h**2)<nl>print(\"平均身長\")"}
{"in":"plt.boxplot([df['G1'],df['G2'],df['G3']])<nl>plt.grid(True)<nl>plt.xlabel('G1','G2','G3')<nl>plt.show()","out":"plt.boxplot([df['G1'],df['G2'],df['G3']])<nl>plt.grid(True)<nl>plt.xlabel(['G1','G2','G3'])<nl>plt.show()"}
{"in":"if BMI > 25.00:<nl><tab><tab>prin(\"太りすぎ\")<nl>else:<nl><tab><tab>Print(\"太りすぎでない\")","out":"if BMI > 25.00:<nl><tab><tab>print(\"太りすぎ\")<nl>else:<nl><tab><tab>print(\"太りすぎでない\")"}
{"in":"pearsonr(df['部屋数'],df['住宅価格'])<nl>print('相関係数:',r)<nl>print('p値:',p)","out":"r, p = pearsonr(df['部屋数'],df['住宅価格'])<nl>print('相関係数:',r)<nl>print('p値:',p)"}
{"in":"plt.plot(df['西暦', '降水量'])","out":"plt.plot(df[['西暦', '降水量']])"}
{"in":"print(1+2","out":"print(1+2)"}
{"in":"d = 20060925<nl><nl>while d >=10: #二桁のときは繰り返す<nl>　D = list(map(int, str(d)))<nl>　print(D)<nl>　d = sum(D)<nl>　print(D)<nl> if d == 11 or d == 22 or d == 33 or D == 44:<nl><tab>　 break #条件を満たしたらループを抜ける<nl><nl><tab>print('ソールナンバー：', d)","out":"d = 20060925<nl><nl>while d >=10: #二桁のときは繰り返す<nl><tab>D = list(map(int, str(d)))<nl><tab>print(D)<nl><tab>d = sum(D)<nl><tab>print(D)<nl> if d == 11 or d == 22 or d == 33 or D == 44:<nl><tab><tab> break #条件を満たしたらループを抜ける<nl><nl><tab>print('ソールナンバー:', d)"}
{"in":"plt.plot(wights,newdata,label='175cm')<nl>plt.xlabel('weight')<nl>plt.ylabel('BMI')<nl>plt.legend()<nl>plt.show()","out":"plt.plot(weights,newdata,label='175cm')<nl>plt.xlabel('weight')<nl>plt.ylabel('BMI')<nl>plt.legend()<nl>plt.show()"}
{"in":"# 春：１　夏：２　秋：３　冬：４<nl>df['season'] = datetime.int.replace('11', '3')<nl>df['season'] = datetime.int.replace('12', '4')<nl>df['season'] = datetime.int.replace('1', '4')<nl>df['season'] = datetime.int.replace('2', '4')<nl>df['season'] = datetime.int.replace('3', '1')<nl>df['season'] = datetime.int.replace('4', '1')<nl>df['season'] = datetime.int.replace('5', '1')<nl>df['season'] = datetime.int.replace('6', '2')<nl>df['season'] = datetime.int.replace('7', '2')<nl>df['season'] = datetime.int.replace('8', '2')<nl>df['season'] = datetime.int.replace('9', '3')","out":"# 春:1<tab>夏:2<tab>秋:3<tab>冬:4<nl>df['season'] = datetime.int.replace('11', '3')<nl>df['season'] = datetime.int.replace('12', '4')<nl>df['season'] = datetime.int.replace('1', '4')<nl>df['season'] = datetime.int.replace('2', '4')<nl>df['season'] = datetime.int.replace('3', '1')<nl>df['season'] = datetime.int.replace('4', '1')<nl>df['season'] = datetime.int.replace('5', '1')<nl>df['season'] = datetime.int.replace('6', '2')<nl>df['season'] = datetime.int.replace('7', '2')<nl>df['season'] = datetime.int.replace('8', '2')<nl>df['season'] = datetime.int.replace('9', '3')"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc137\/tasks\/abc137_a<nl><nl>a, b = map(int, input().split())<nl>c=a+b:<nl>d=a-b:<nl>e=a*b:<nl>print(max(c,d,e))","out":"#kogi https:\/\/atcoder.jp\/contests\/abc137\/tasks\/abc137_a<nl><nl>a, b = map(int, input().split())<nl>c=a+b<nl>d=a-b<nl>e=a*b<nl>print(max(c,d,e))"}
{"in":"df[df['平均気温']]","out":"df['平均気温']"}
{"in":"if BMI > 25.00:<nl><tab><tab>print (\"太りすぎ\")<nl><tab><tab>else;<nl><tab><tab>Print(\"太りすぎでない\")","out":"if BMI > 25.00:<nl><tab><tab>print(\"太りすぎ\")<nl>else:<nl><tab><tab>print(\"太りすぎでない\")"}
{"in":"scipy　stats.pearsonr(df['降水量'], df['スギ花粉飛散量'])","out":"scipy<tab>stats.pearsonr(df['降水量'], df['スギ花粉飛散量'])"}
{"in":"np.where(a < pibot)","out":"np.where(a < pivot)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split()<nl>D=A-B:<nl><nl>print((D\/A) *100)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split())<nl>D=A-B<nl><nl>print((D\/A) *100)"}
{"in":"class PersonW(object):<nl><tab>name: str<nl><tab>height: int<nl><tab>weight: float<nl><tab>def __init__(self, name height, weight):<nl><tab><tab>self.name = name<nl><tab><tab>self.height = height<nl><tab><tab>self.weight = weight<nl><nl><tab>def bmi(self):<nl><tab><tab>return self.weight \/ self.height^2<nl><tab>def iwb(self):<nl><tab><tab>return self.height^2 * 22<nl><tab>def diff(self):<nl><tab><tab>self.weight - self.bmi(self)<nl><tab><tab>","out":"class PersonW(object):<nl><tab>name: str<nl><tab>height: int<nl><tab>weight: float<nl><tab>def __init__(self, name, height, weight):<nl><tab><tab>self.name = name<nl><tab><tab>self.height = height<nl><tab><tab>self.weight = weight<nl><nl><tab>def bmi(self):<nl><tab><tab>return self.weight \/ self.height^2<nl><tab>def iwb(self):<nl><tab><tab>return self.height^2 * 22<nl><tab>def diff(self):<nl><tab><tab>self.weight - self.bmi(self)<nl><tab><tab>"}
{"in":"import pandas as pd<nl><nl>df = pd_read.csv('pollen.csv')<nl>df.head()","out":"import pandas as pd<nl><nl>df = pd.read_csv('pollen.csv')<nl>df.head()"}
{"in":"plt.figure(figsize=(7.7))","out":"plt.figure(figsize=(7,7))"}
{"in":"sns.kdeplot(df.groupby('性別').get_group('男性')['G3'], shade = True)<nl>sns.kdeplot(df.groupby('性別').get_group('女性')['G3'], shade = True)<nl>sns.kdeplot(,hue='性別', data=df)<nl>plt.xlabel('G3')<nl>plt.ylabel('% data distribution')<nl>plt.show()","out":"sns.kdeplot(df.groupby('性別').get_group('男性')['G3'], shade = True)<nl>sns.kdeplot(df.groupby('性別').get_group('女性')['G3'], shade = True)<nl>sns.kdeplot(hue='性別', data=df)<nl>plt.xlabel('G3')<nl>plt.ylabel('% data distribution')<nl>plt.show()"}
{"in":"X = df['通勤', '教員比']<tab># 説明変数<nl>y = df['住宅価格'] # 目的変数<nl>pd.concat([X,y], axis=1).head() #最初の5件のみみてみる","out":"X = df[['通勤', '教員比']]<tab># 説明変数<nl>y = df['住宅価格'] # 目的変数<nl>pd.concat([X,y], axis=1).head() #最初の5件のみみてみる"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_d<nl>nextList = [[1,1], [1,0], [0,1], [-1,0], [0,-1], [-1,-1]]<nl>N = int(input())<nl>black = []<nl>for i in range(N):<nl><tab>X,Y = map(int, input().split())<nl><tab>black.append([X,Y])<nl><nl>next = [] # i番目とj番目のマスが隣り合っていたら保存<nl>for i in range(N-1):<nl><tab>next.append([i])<nl><tab>for j in range(i+1, N):<nl><tab><tab>sub = [black[i][0]-black[j][0], black[i][1]-black[j][1]]<nl><tab><tab>if sub in nextList:<nl><tab><tab><tab>next[i].append(j)<nl><nl><nl>if next == []:<nl><tab>pass<nl>else: # 連結部分をまとめる<nl><tab>for i in range(len(next)-1):<nl><tab><tab>j = -1<nl><tab><tab>while j<0:<nl><tab><tab><tab>if -len(next)+i==j:<nl><tab><tab><tab><tab>pass<nl><tab><tab><tab>elif len(next[j]+next[i])!=len(next[j]+next[i].set()): <nl><tab><tab><tab><tab>next[i] += next[j]<nl><tab><tab><tab><tab>next.pop(j)<nl><tab><tab><tab><tab>next[i].set()<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>j -= 1<nl><nl>print(next)<nl>print(len(next))","out":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_d<nl>nextList = [[1,1], [1,0], [0,1], [-1,0], [0,-1], [-1,-1]]<nl>N = int(input())<nl>black = []<nl>for i in range(N):<nl><tab>X,Y = map(int, input().split())<nl><tab>black.append([X,Y])<nl><nl>next = [] # i番目とj番目のマスが隣り合っていたら保存<nl>for i in range(N-1):<nl><tab>next.append([i])<nl><tab>for j in range(i+1, N):<nl><tab><tab>sub = [black[i][0]-black[j][0], black[i][1]-black[j][1]]<nl><tab><tab>if sub in nextList:<nl><tab><tab><tab>next[i].append(j)<nl><nl><nl>if next == []:<nl><tab>pass<nl>else: # 連結部分をまとめる<nl><tab>for i in range(len(next)-1):<nl><tab><tab>j = -1<nl><tab><tab>while j<0:<nl><tab><tab><tab>if -len(next)+i==j:<nl><tab><tab><tab><tab>pass<nl><tab><tab><tab>elif len(next[j]+next[i])!=len(next[j]+next[i]): <nl><tab><tab><tab><tab>next[i] += next[j]<nl><tab><tab><tab><tab>next.pop(j)<nl><tab><tab><tab><tab>next[i].set()<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>j -= 1<nl><nl>print(next)<nl>print(len(next))"}
{"in":"df= pd.read('pollen.csv')","out":"df= pd.read_csv('pollen.csv')"}
{"in":"plt.scatter(df['部屋数'],dh['住宅価格'],alpha=0.5, color='pulple')<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show","out":"plt.scatter(df['部屋数'],df['住宅価格'],alpha=0.5, color='pulple')<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show"}
{"in":"plt.figure(figsize=8,8)<nl>plt.scatter(df['部屋数'],df['住宅価格'])<nl>plt.show()","out":"plt.figure(figsize=(8,8))<nl>plt.scatter(df['部屋数'],df['住宅価格'])<nl>plt.show()"}
{"in":"def summ(n):<nl><tab><tab>if n==1: return 1:<nl><tab><tab>else : return i+=summ(n)","out":"def summ(n):<nl><tab><tab>if n==1: return 1<nl><tab><tab>else : return 1+summ(n)"}
{"in":"d=20070308<nl>while d >=10:#二桁野ときは繰り返す<tab><tab><nl>　D=list(map(int,str(d)))<nl>print(D)<nl>d=sum(D)<nl>print(d)<nl>if d==11 or d==22 or d==33 or d==44:<nl><tab>break#条件を満たしたらループを抜ける<nl><tab>print('ソールナンバー：',d)","out":"d=20070308<nl>while d >=10:#二桁野ときは繰り返す<tab><tab><nl><tab>D=list(map(int,str(d)))<nl>print(D)<nl>d=sum(D)<nl>print(d)<nl>if d==11 or d==22 or d==33 or d==44:<nl><tab>break#条件を満たしたらループを抜ける<nl><tab>print('ソールナンバー:',d)"}
{"in":"for colum in df.columns[:-1]:<nl><tab>x = df[[column]]<nl><tab>y = df['住宅価格']<nl><tab>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)","out":"for column in df.columns[:-1]:<nl><tab>x = df[[column]]<nl><tab>y = df['住宅価格']<nl><tab>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)"}
{"in":"<nl><nl><nl>N, W = map(int, input().split())<nl><nl>L = []<nl>A = []<nl>B = []<nl>for _ in range(N) :<nl><tab>AB= list(map(str, input().split()))<nl><tab>L.append(AB)<nl>for n in range(N):<nl><tab>A.append(int(L[n][0]))<nl><tab>B.append(int(L[n][1]))<nl><nl># A[ j ]*B[ j ]<nl><nl>a = sorted(A,reverse=True)<nl><nl>g_sum = 0<nl>oisisa_sum = 0<nl><nl>for i in range(N) :<tab><nl><tab>if B[A.index(a[ i ])] + g_sum <= W :<nl><tab><tab>g = B[A.index(a[ i ])]<nl><tab><tab>oisisa = a[ i ] * g<nl><tab><tab>g_sum += g<nl><tab><tab>oisisa_sum += oisisa<nl><tab><tab>print(g_sum += g)<nl><tab>else :<nl><tab><tab>g = B[A.index(a[ i ])] - g_sum<nl><tab><tab>oisisa = a[ i ] * g<nl><tab><tab>g_sum += g<nl><tab><tab>oisisa_sum += oisisa<nl><tab><tab>print(g_sum += g)<nl><tab><tab>break<nl><nl>print(oisisa_sum)<nl><nl><nl><nl><nl># print(A)<nl># print(B)<nl># print(a)","out":"<nl><nl><nl>N, W = map(int, input().split())<nl><nl>L = []<nl>A = []<nl>B = []<nl>for _ in range(N) :<nl><tab>AB= list(map(str, input().split()))<nl><tab>L.append(AB)<nl>for n in range(N):<nl><tab>A.append(int(L[n][0]))<nl><tab>B.append(int(L[n][1]))<nl><nl># A[ j ]*B[ j ]<nl><nl>a = sorted(A,reverse=True)<nl><nl>g_sum = 0<nl>oisisa_sum = 0<nl><nl>for i in range(N) :<tab><nl><tab>if B[A.index(a[ i ])] + g_sum <= W :<nl><tab><tab>g = B[A.index(a[ i ])]<nl><tab><tab>oisisa = a[ i ] * g<nl><tab><tab>g_sum += g<nl><tab><tab>oisisa_sum += oisisa<nl><tab><tab>print(g_sum += g)<nl><tab>else :<nl><tab><tab>g = B[A.index(a[ i ])] - g_sum<nl><tab><tab>oisisa = a[ i ] * g<nl><tab><tab>g_sum += g<nl><tab><tab>oisisa_sum += oisisa<nl><tab><tab>print(g_sum + g)<nl><tab><tab>break<nl><nl>print(oisisa_sum)<nl><nl><nl><nl><nl># print(A)<nl># print(B)<nl># print(a)"}
{"in":"S = str(input())<nl><nl>m = len(S)<nl># print(m)<nl><nl>for i in range(m):<nl><tab>x = S[i:]<nl><tab>y = S[:i]<nl><tab># print(x)<nl><tab># print(y)<nl><tab>print(x+y)<nl><tab>r = x+y<nl><tab>r.list()<nl><tab>print(r)","out":"S = str(input())<nl><nl>m = len(S)<nl># print(m)<nl><nl>for i in range(m):<nl><tab>x = S[i:]<nl><tab>y = S[:i]<nl><tab># print(x)<nl><tab># print(y)<nl><tab>print(x+y)<nl><tab>r = x+y<nl><tab>r = list(r)<nl><tab>print(r)"}
{"in":"df.describe()()","out":"df.describe()"}
{"in":"plt.scatter(df['降水量'], df=['スギ花粉飛散量'])<nl>plt.xlabel('降水量')<nl>plt.show()","out":"plt.scatter(df['降水量'], df['スギ花粉飛散量'])<nl>plt.xlabel('降水量')<nl>plt.show()"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl>A,B=map(int,input().split) #決まり文句<nl><nl>print(A,B)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl>A,B=map(int,input().split()) #決まり文句<nl><nl>print(A,B)"}
{"in":"x=－22<nl>if x >0:<nl><tab>print(\"正の数\")<nl>else:<nl><tab><tab>print(\"正の数でない\")","out":"x=-22<nl>if x >0:<nl><tab>print(\"正の数\")<nl>else:<nl><tab><tab>print(\"正の数でない\")"}
{"in":"n=int(input())<nl>a=list()<nl>b=list()<nl>for i in range(n):<nl><tab>ab=list(map(int,input().split()))<nl><tab>a=a+[ab[0]]<nl><tab>b=b+[ab[1]]<nl>mina=min(a)<nl>minb=min(b)<nl>if a.index(min(a))!=b.index(min(b)):<nl><tab>print(max(mina,minb)) <nl>else:<nl><tab>sort(a)<nl><tab>sort(b)<nl><tab>print(a,b,min(a[0]+b[0],a[1],b[2]))<nl><nl>","out":"n=int(input())<nl>a=list()<nl>b=list()<nl>for i in range(n):<nl><tab>ab=list(map(int,input().split()))<nl><tab>a=a+[ab[0]]<nl><tab>b=b+[ab[1]]<nl>mina=min(a)<nl>minb=min(b)<nl>if a.index(min(a))!=b.index(min(b)):<nl><tab>print(max(mina,minb)) <nl>else:<nl><tab>a.sort()<nl><tab>b.sort()<nl><tab>print(a,b,min(a[0]+b[0],a[1],b[2]))<nl><nl>"}
{"in":"a=list()<nl>if a=list():<nl><tab>print(1)","out":"a=list()<nl>if a==list():<nl><tab>print(1)"}
{"in":"bmi = PersonWex() ","out":"bmi = PersonWex()"}
{"in":"X = df[['部屋数', '低所得率','工場','通勤','資産税','']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl># 予測と目的変数の散布図<nl>plt.figure(figsize=(5,5))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.xlim(0, 50)<nl>plt.ylim(0, 50)<nl>plt.show()<nl><nl># 残差<nl>plt.hist(y-y_pred, bins=50)<nl>plt.title('残差')<nl>plt.show()<nl><nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)","out":"X = df[['部屋数', '低所得率','工場','通勤','資産税']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl># 予測と目的変数の散布図<nl>plt.figure(figsize=(5,5))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.xlim(0, 50)<nl>plt.ylim(0, 50)<nl>plt.show()<nl><nl># 残差<nl>plt.hist(y-y_pred, bins=50)<nl>plt.title('残差')<nl>plt.show()<nl><nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)"}
{"in":"class Counter(object):<nl><tab><tab> counter:int<nl><tab><tab> def __init__(self):<tab> #c#だとconstructer<nl><tab><tab><tab> self.counter = 0<tab>#selfはthis<nl><tab><tab> def count(self):<nl><tab><tab><tab> self.counter +=1<nl><tab><tab> def reset(self):<nl><tab><tab><tab> self.counter = 0<nl><tab><tab> def show(self):<nl><tab><tab><tab> print(self.counter)<nl><tab><tab><tab> def __repr_(self):<nl><tab><tab><tab><tab> return f'counter: {self.counter}'_","out":"class Counter(object):<nl><tab><tab> counter:int<nl><tab><tab> def __init__(self):<tab> #c#だとconstructer<nl><tab><tab><tab> self.counter = 0<tab>#selfはthis<nl><tab><tab> def count(self):<nl><tab><tab><tab> self.counter +=1<nl><tab><tab> def reset(self):<nl><tab><tab><tab> self.counter = 0<nl><tab><tab> def show(self):<nl><tab><tab><tab> print(self.counter)<nl><tab><tab><tab> def __repr_(self):<nl><tab><tab><tab><tab> return f'counter: {self.counter}'"}
{"in":"import matplotlib.pyplot as plt <nl>X=[]<nl>Y=[]<nl>for i in rande(1,100):<nl><tab><tab>X.append(i)","out":"import matplotlib.pyplot as plt <nl>X=[]<nl>Y=[]<nl>for i in range(1,100):<nl><tab><tab>X.append(i)"}
{"in":"<nl><nl>if BMI <17.5 :<nl><tab>print('低体重')<nl>else BMI>=17.5 and BMI<25.0:<nl><tab>print('標準')<nl>else:<nl><tab>print('太りすぎ')","out":"<nl><nl>if BMI <17.5 :<nl><tab>print('低体重')<nl>elif BMI>=17.5 and BMI<25.0:<nl><tab>print('標準')<nl>else:<nl><tab>print('太りすぎ')"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl>A,B=map(int,input().split) #決まり文句<nl><nl>D=A-B<nl>print((D\/A)*100) #割引率","out":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl>A,B=map(int,input().split()) #決まり文句<nl><nl>D=A-B<nl>print((D\/A)*100) #割引率"}
{"in":"#6-6<nl>A, B = map(str,input().split())<nl><nl>ans = 'easy'<nl><nl>for i in int(A):<nl><tab>sum = A[i] + B[i]<nl><tab>if sum >= 10:<nl><tab><tab>ans = 'hard'<nl><tab><tab>break<nl><nl>print(ans)","out":"#6-6<nl>A, B = map(str,input().split())<nl><nl>ans = 'easy'<nl><nl>for i in range(len(A)):<nl><tab>sum = A[i] + B[i]<nl><tab>if sum >= 10:<nl><tab><tab>ans = 'hard'<nl><tab><tab>break<nl><nl>print(ans)"}
{"in":"print(\"Hello World\"）<nl><tab><tab><tab># わざと構文エラー","out":"print(\"Hello World\")<nl><tab><tab><tab># わざと構文エラー"}
{"in":"if BMI > 25.00：<nl><tab><tab> print('太りすぎ')<nl>else:<nl><tab>print('太りすぎでない')","out":"if BMI > 25.00:<nl><tab>print('太りすぎ')<nl>else:<nl><tab>print('太りすぎでない')"}
{"in":"d=20041215<nl>while d >= 10:<nl><tab>D=list(map(int,str(d)))<nl><tab>print(D) #結果を表示<nl><nl><tab>d=sum(D)<nl><tab>print(d) #結果を表示<nl><tab>if d==11 or d==22 or d= 33 or d=44:<nl><tab><tab>break<nl><nl>print('ソウルナンバー:', d)","out":"d=20041215<nl>while d >= 10:<nl><tab>D=list(map(int,str(d)))<nl><tab>print(D) #結果を表示<nl><nl><tab>d=sum(D)<nl><tab>print(d) #結果を表示<nl><tab>if d==11 or d==22 or d==33 or d==44:<nl><tab><tab>break<nl><nl>print('ソウルナンバー:', d)"}
{"in":"<nl>N=input()<nl><nl>for i in range (1,10**9):<nl><tab>A=1\/2(2*1+(i-1)*1)<nl><tab>if A>=N:<nl><tab><tab><tab>print(i)","out":"<nl>N=input()<nl><nl>for i in range (1,10**9):<nl><tab>A=1\/2*(2*1+(i-1)*1)<nl><tab>if A>=N:<nl><tab><tab><tab>print(i)"}
{"in":"hight= [130,140,150,160,170,180,190,200]<nl>BMI=18<nl>newdata18=[]<nl>for w in weights:<nl><tab><tab>w=BMI*h**2<nl><tab><tab>newdata18.append(BMI)<nl>print(height)<nl>print(newdata)","out":"height= [130,140,150,160,170,180,190,200]<nl>BMI=18<nl>newdata18=[]<nl>for w in weights:<nl><tab><tab>w=BMI*h**2<nl><tab><tab>newdata18.append(BMI)<nl>print(height)<nl>print(newdata)"}
{"in":"w = 90.0<nl>h = 1.80<nl>BMI = w \/ h ** 2<nl>print(\"BMI\",BMI)<nl><nl>if BMI >= 25:<nl><tab><tab>print(\"太りすぎ\")<nl>else:<nl><tab><tab>print(\"keep it!\")<nl><nl>for w in range(50, 100, 1)<nl><tab><tab>h = math.sqrt(w \/ 22)<nl><tab><tab>print(w, h)","out":"w = 90.0<nl>h = 1.80<nl>BMI = w \/ h ** 2<nl>print(\"BMI\",BMI)<nl><nl>if BMI >= 25:<nl><tab><tab>print(\"太りすぎ\")<nl>else:<nl><tab><tab>print(\"keep it!\")<nl><nl>for w in range(50, 100, 1):<nl><tab><tab>h = math.sqrt(w \/ 22)<nl><tab><tab>print(w, h)"}
{"in":"def main():<nl><tab><tab>N, M = map(int,input().split())<nl><tab><tab>A = list(set(list(map(int,input().split())))).sorted()<nl><tab><tab>B = list(set(list(map(int,input().split())))).sorted()<nl><tab><tab>ans = 0<nl><tab><tab>print(A)<nl><tab><tab>print(B)<nl><tab><tab>return ans<nl><nl>print(main())","out":"def main():<nl><tab><tab>N, M = map(int,input().split())<nl><tab><tab>A = sorted(list(set(list(map(int,input().split())))))<nl><tab><tab>B = sorted(list(set(list(map(int,input().split())))))<nl><tab><tab>ans = 0<nl><tab><tab>print(A)<nl><tab><tab>print(B)<nl><tab><tab>return ans<nl><nl>print(main())"}
{"in":"sin(30","out":"sin(30)"}
{"in":"if BMI > 25.00 :<nl><tab>print(\"太りすぎ)<nl>else :<nl><tab>print('太りすぎでない')","out":"if BMI > 25.00 :<nl><tab>print(\"太りすぎ\")<nl>else :<nl><tab>print('太りすぎでない')"}
{"in":"def calc(s:str+t:str)->float:<nl><tab>return float(s)+float(t)","out":"def calc(s:str, t:str)->float:<nl><tab>return float(s)+float(t)"}
{"in":"from abc import ABC<nl>#kogi https:\/\/atcoder.jp\/contests\/abc271\/tasks\/abc271_a<nl><nl>N=int(input())<nl><nl>A=N\/\/16<nl>B<nl>print(A)","out":"from abc import ABC<nl>#kogi https:\/\/atcoder.jp\/contests\/abc271\/tasks\/abc271_a<nl><nl>N=int(input())<nl><nl>A=N\/\/16<nl># B<nl>print(A)"}
{"in":"print(\"Hello World\"）","out":"print(\"Hello World\")"}
{"in":"d=20041214<nl><nl>while d >=10: #二桁の時は繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>#print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>＃print(d)<nl><tab><tab>if d ==11or d ==22 or d ==33 or d== 44:<nl><tab><tab><tab><tab>break #条件を満たしたらループを抜ける","out":"d=20041214<nl><nl>while d >=10: #二桁の時は繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>#print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>#print(d)<nl><tab><tab>if d ==11or d ==22 or d ==33 or d== 44:<nl><tab><tab><tab><tab>break #条件を満たしたらループを抜ける"}
{"in":"d=20061225<nl>D = list(map(int,str(d))<nl>print(D)","out":"d=20061225<nl>D = list(map(int,str(d)))<nl>print(D)"}
{"in":"def s.count(lives, x, y):<nl><tab><tab>N, M = lives.shape<nl><tab><tab>s= -lives[x, y]<nl><tab><tab>for i in range(x-1, x+2):<nl><tab><tab><tab>for j in range(y-1, y+2):<nl><tab><tab><tab><tab>if lives[i, j] == 1:<nl><tab><tab><tab><tab><tab>s += 1<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab>continue<nl><tab><tab>return s","out":"def count(lives, x, y):<nl><tab><tab>N, M = lives.shape<nl><tab><tab>s= -lives[x, y]<nl><tab><tab>for i in range(x-1, x+2):<nl><tab><tab><tab>for j in range(y-1, y+2):<nl><tab><tab><tab><tab>if lives[i, j] == 1:<nl><tab><tab><tab><tab><tab>s += 1<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab>continue<nl><tab><tab>return s"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl>a,b = map(int, input().split())<nl>c,d = map(int, input().split())<nl>print(ad-bc)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl>a,b = map(int, input().split())<nl>c,d = map(int, input().split())<nl>print(a*d-b*c)"}
{"in":"def g1(x):<nl><tab>int(''.join(sorted(list(str(x)),reverse=True)))<nl>def g2(x):<nl><tab>int(''.join(sorted(list(str(x)))))<nl>def f(x):<nl><tab>return g1(x)-g2(x)<nl>N,K=map(int,input().split)<nl>a=N<nl>for _ in range(K):<nl><tab>a=f(a)<nl>print(a)","out":"def g1(x):<nl><tab>int(''.join(sorted(list(str(x)),reverse=True)))<nl>def g2(x):<nl><tab>int(''.join(sorted(list(str(x)))))<nl>def f(x):<nl><tab>return g1(x)-g2(x)<nl>N,K=map(int,input().split())<nl>a=N<nl>for _ in range(K):<nl><tab>a=f(a)<nl>print(a)"}
{"in":"df.(head)","out":"df.head()"}
{"in":"sklearn.preprocessing.LabelEncoder().fit_transform('降水量'))<nl><nl>plt.xlabel('西暦')<nl>plt.ylabel('降水量')","out":"sklearn.preprocessing.LabelEncoder().fit_transform('降水量')<nl><nl>plt.xlabel('西暦')<nl>plt.ylabel('降水量')"}
{"in":"plt.figure(figsize(8.8))<nl>plt.scatter(df['築年'],df['住宅価格'],alpha=0.5,color='purple')<nl>plt.xlabel('築年')<nl>plt.ylabel('住宅価格')<nl>plt.show","out":"plt.figure(figsize=(8.8))<nl>plt.scatter(df['築年'],df['住宅価格'],alpha=0.5,color='purple')<nl>plt.xlabel('築年')<nl>plt.ylabel('住宅価格')<nl>plt.show"}
{"in":"weight=[40,45,50,55,60,65,70]<nl>for w in weight:<nl><tab>print(w)=x\/1.6**2<nl><tab>","out":"weight=[40,45,50,55,60,65,70]<nl>for w in weight:<nl><tab>print(w)<nl><tab>"}
{"in":"S=str(input())<nl>#print(S[-2::])<nl>if S[-2::]==er:<nl><tab>print('er')<nl>elif S[-3::]==ist:<nl><tab>print('ist')","out":"S=str(input())<nl>#print(S[-2::])<nl>if S[-2::]==\"er\":<nl><tab>print('er')<nl>elif S[-3::]==\"ist\":<nl><tab>print('ist')"}
{"in":"def show(lives):<nl><tab><tab>N, M = lives.shape<nl><tab><tab><tab>for x in range(M):<nl><tab><tab><tab><tab>for i in range(N):<nl><tab><tab><tab><tab><tab>print('🎃',end='')<nl>show(lives)","out":"def show(lives):<nl><tab>N, M = lives.shape()<nl><tab><tab>for x in range(M):<nl><tab><tab><tab>for i in range(N):<nl><tab><tab><tab><tab>print('🎃')<nl>show(lives)"}
{"in":"X = df[['部屋数','低所得率']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(6,6))<nl>plt.xlabel('実装')<nl>plt.ylabel('予想')<nl>plt.ylim(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R２)：', r2)<nl>","out":"X = df[['部屋数','低所得率']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(6,6))<nl>plt.xlabel('実装')<nl>plt.ylabel('予想')<nl>plt.ylim(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)<nl>"}
{"in":"df_train[index]","out":"df_train.index"}
{"in":"a=[[1,2,3],[4,5,6]]<nl>a[1][0]=0<nl>b=[([1] for i in range(2))] <nl>b=b for j in range(3)<nl>b[1][0]=2<nl>print(a,b)","out":"a=[[1,2,3],[4,5,6]]<nl>a[1][0]=0<nl>b=[([1] for i in range(2))] <nl>b=[b for j in range(3)]<nl>b[1][0]=2<nl>print(a,b)"}
{"in":"plt.scatter(df['降水量'], df['スギ花粉飛散量'], alpha=0.5)<nl>plt.xlabel('降水量)<nl>plt.ylabel('スギ花粉飛散量')<nl>plt.show()","out":"plt.scatter(df['降水量'], df['スギ花粉飛散量'], alpha=0.5)<nl>plt.xlabel('降水量')<nl>plt.ylabel('スギ花粉飛散量')<nl>plt.show()"}
{"in":"df3=df3.drop(5, axis=0)<nl>df3","out":"df3=df3.drop(5, axis=1)<nl>df3"}
{"in":"test{'Fare'}=test['Fare'].fillna(test['Fare'].mean())","out":"test['Fare']=test['Fare'].fillna(test['Fare'].mean())"}
{"in":"x=2<nl>if x>0:<nl><tab>print(\"正\")<nl>else:<nl><tab>if x=0:<nl><tab><tab>print(\"ゼロ\")<nl><tab>else:<nl><tab><tab>print(\"負\")","out":"x=2<nl>if x>0:<nl><tab>print(\"正\")<nl>else:<nl><tab>if x==0:<nl><tab><tab>print(\"ゼロ\")<nl><tab>else:<nl><tab><tab>print(\"負\")"}
{"in":"#pd.corr(df['降水量'], df['スギ花粉飛散量'])<nl>df.stats.pearsonr(df['降水量'], df['スギ花粉飛散量'])","out":"#pd.corr(df['降水量'], df['スギ花粉飛散量'])<nl>scipy.stats.pearsonr(df['降水量'], df['スギ花粉飛散量'])"}
{"in":"h,w=map(int,input().split())<nl>b=[]<nl>for i in range(h):<nl><tab>a=list(map(int,input().split()))<nl><tab>b+=a<nl>b_min=min(b)<nl>sort.b<nl>print(b_min)","out":"h,w=map(int,input().split())<nl>b=[]<nl>for i in range(h):<nl><tab>a=list(map(int,input().split()))<nl><tab>b+=a<nl>b_min=min(b)<nl>b.sort()<nl>print(b_min)"}
{"in":"d=20041214<nl>while d >=10: #二桁の時は繰り返す<nl>D=list(map(int,str(d)))<nl>print(D)<nl>d=sum(D)<nl>if d ==11or d ==22 or d ==33 or d== 44:<nl><tab> break #条件を満たしたらループを抜ける","out":"d=20041214<nl>while d >=10: #二桁の時は繰り返す<nl><tab>D=list(map(int,str(d)))<nl><tab>print(D)<nl><tab>d=sum(D)<nl><tab>if d ==11 or d ==22 or d ==33 or d== 44:<nl><tab><tab>break #条件を満たしたらループを抜ける"}
{"in":"from fractions import Fraction<nl><nl>class Ratio(object):<nl><tab><tab>bunshi:int<nl><tab><tab>bunbo:int<nl><nl><tab><tab>def __init__(self,bunshi,bunbo):<nl><tab><tab><tab><tab>self.bunshi = bunshi<nl><tab><tab><tab><tab>self.bunbo = bunbo<nl><nl><tab><tab>#コンストラクタ<nl><tab><tab>def __str__(self): <nl><tab><tab><tab><tab>bunsu = Fraction(self.bunshi, self.bunbo)<nl><tab><tab><tab><tab>return f'{bunsu}'<nl><nl><tab><tab>#加算<nl><tab><tab>def add(self, x): <nl><tab><tab><tab><tab>bunsu1_add = Fraction(self.bunshi, self.bunbo)<nl><tab><tab><tab><tab>bunsu2_add = Fraction(x.bunshi, x.bunbo)<nl><tab><tab><tab><tab>return bunsu1_add + bunsu2_add<nl><nl><tab><tab>#掛け算<nl><tab><tab>def mul(self, x):<nl><tab><tab><tab><tab>bunsu1_mul = Fraction(self.bunshi, self.bunbo)<nl><tab><tab><tab><tab>bunsu2_mul = Fraction(x.bunshi, x.bunbo)<nl><tab><tab><tab><tab>return bunsu1_mul * bunsu2_mul<tab><tab><nl><nl><tab><tab>def __float__(self)<nl><tab><tab><tab><tab>bunsu = Fraction(self.bunshi, self.bunbo)<nl><tab><tab><tab><tab>return float(bunsu)","out":"from fractions import Fraction<nl><nl>class Ratio(object):<nl><tab><tab>bunshi:int<nl><tab><tab>bunbo:int<nl><nl><tab><tab>def __init__(self,bunshi,bunbo):<nl><tab><tab><tab><tab>self.bunshi = bunshi<nl><tab><tab><tab><tab>self.bunbo = bunbo<nl><nl><tab><tab>#コンストラクタ<nl><tab><tab>def __str__(self): <nl><tab><tab><tab><tab>bunsu = Fraction(self.bunshi, self.bunbo)<nl><tab><tab><tab><tab>return f'{bunsu}'<nl><nl><tab><tab>#加算<nl><tab><tab>def add(self, x): <nl><tab><tab><tab><tab>bunsu1_add = Fraction(self.bunshi, self.bunbo)<nl><tab><tab><tab><tab>bunsu2_add = Fraction(x.bunshi, x.bunbo)<nl><tab><tab><tab><tab>return bunsu1_add + bunsu2_add<nl><nl><tab><tab>#掛け算<nl><tab><tab>def mul(self, x):<nl><tab><tab><tab><tab>bunsu1_mul = Fraction(self.bunshi, self.bunbo)<nl><tab><tab><tab><tab>bunsu2_mul = Fraction(x.bunshi, x.bunbo)<nl><tab><tab><tab><tab>return bunsu1_mul * bunsu2_mul<tab><tab><nl><nl><tab><tab>def __float__(self):<nl><tab><tab><tab><tab>bunsu = Fraction(self.bunshi, self.bunbo)<nl><tab><tab><tab><tab>return float(bunsu)"}
{"in":"df.colum","out":"df.columns"}
{"in":"plt.scatter(y, y_pred, coloer = 'red', alpa = 0.3)<nl>plt.figure(figsize=(6, 6))<nl>plt.xlabel('実測')<nl>plt.yrabel('予測')<nl>plt.ylim(0, 50)","out":"plt.scatter(y, y_pred, color = 'red', alpa = 0.3)<nl>plt.figure(figsize=(6, 6))<nl>plt.xlabel('実測')<nl>plt.yrabel('予測')<nl>plt.ylim(0, 50)"}
{"in":"import math<nl><nl>class Ratio(object):<nl><tab>a: int<nl><tab>b: int<nl><tab>def __init__(self, a, b=1):<nl><tab><tab>self.a = a \/\/ math.gcd(a,b)<nl><tab><tab>self.b = b \/\/ math.acg(a,b)<nl><tab>def __repr__(self):<nl><tab><tab>if self.b == 1:<nl><tab><tab><tab>return str(self.a)<nl><tab><tab>return f'[self.a]\/[self.b]'<nl><tab>def add(self, x):<nl><tab><tab>a = self.a<nl><tab><tab>b = self.b<nl><tab><tab>c = x.a<nl><tab><tab>d = x.b<nl><tab><tab>return Ratio(a*c, b*d)<nl><tab>def __float__(self):<nl><tab><tab>return self.a \/ self.b<nl><tab>def __add__(self, x):<nl><tab><tab>return self.add(x)<nl><tab>def __mul_(self, x):<nl><tab><tab>return self.mul(x)<nl><tab>def __truediv__(self, x):<nl><tab><tab>if isinstance(x, int):<nl><tab><tab><tab>x = Ratio(x)<nl><tab><tab>a = self.a<nl><tab><tab>b = self.b<nl><tab><tab>c = x.a<nl><tab><tab>d = x.b<nl><tab><tab>return Ratio(a*d b*c)","out":"import math<nl><nl>class Ratio(object):<nl><tab>a: int<nl><tab>b: int<nl><tab>def __init__(self, a, b=1):<nl><tab><tab>self.a = a \/\/ math.gcd(a,b)<nl><tab><tab>self.b = b \/\/ math.acg(a,b)<nl><tab>def __repr__(self):<nl><tab><tab>if self.b == 1:<nl><tab><tab><tab>return str(self.a)<nl><tab><tab>return f'[self.a]\/[self.b]'<nl><tab>def add(self, x):<nl><tab><tab>a = self.a<nl><tab><tab>b = self.b<nl><tab><tab>c = x.a<nl><tab><tab>d = x.b<nl><tab><tab>return Ratio(a*c, b*d)<nl><tab>def __float__(self):<nl><tab><tab>return self.a \/ self.b<nl><tab>def __add__(self, x):<nl><tab><tab>return self.add(x)<nl><tab>def __mul_(self, x):<nl><tab><tab>return self.mul(x)<nl><tab>def __truediv__(self, x):<nl><tab><tab>if isinstance(x, int):<nl><tab><tab><tab>x = Ratio(x)<nl><tab><tab>a = self.a<nl><tab><tab>b = self.b<nl><tab><tab>c = x.a<nl><tab><tab>d = x.b<nl><tab><tab>return Ratio(a*d, b*c)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc149\/tasks\/abc149_a<nl><nl>A,B=int,input().split()<nl>D = A<tab>B<nl>print(32**D)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc149\/tasks\/abc149_a<nl><nl>A,B=map(int,input().split())<nl>D = A<tab>B<nl>print(32**D)"}
{"in":"df = pd,read_csv(\"file.tsv\", sep='\\t')","out":"df = pd.read_csv(\"file.tsv\", sep='\\t')"}
{"in":"df.short_values('平均気温').head(5)","out":"df.sort_values('平均気温').head(5)"}
{"in":"if BMI < 17.5<nl>print(\"低体重\")<nl>else :<nl><tab>print(“瘦せすぎでない”)","out":"if BMI < 17.5:<nl><tab>print(\"低体重\")<nl>else:<nl><tab>print(“瘦せすぎでない\")"}
{"in":"df.head[]","out":"df.head()"}
{"in":"if BMI＞25.00:<nl><tab>print('太りすぎ')<nl>else:<nl><tab>print('太りすぎでない')","out":"if BMI>25.00:<nl><tab>print('太りすぎ')<nl>else:<nl><tab>print('太りすぎでない')"}
{"in":"M=8　　　#列数<nl>N=5　　　#行数<nl>lives=np.random.randint(0,2,M*N)<nl>lives=lives.reshape(M,N)","out":"M=8<tab><tab><tab>#列数<nl>N=5<tab><tab><tab>#行数<nl>lives=np.random.randint(0,2,M*N)<nl>lives=lives.reshape(M,N)"}
{"in":"sintyo=int(input(\"身長は？(cm)\"))<nl>taiju=int(input(\"体重は？(kg)\")) #入力<nl>BMI=taiju\/sintyo**2<nl>print(f'BMI: {BMI:.1f}')<nl>if BMI > 18.5:<nl><tab>print(\"低体重\")<nl>else:<nl><tab>if BMI <= 25:<nl><tab>print(\"肥満\")<nl><tab><tab> else:<nl><tab><tab><tab> print(\"普通体重\")","out":"sintyo=int(input(\"身長は?(cm)\"))<nl>taiju=int(input(\"体重は?(kg)\")) #入力<nl>BMI=taiju\/sintyo**2<nl>print(f'BMI: {BMI:.1f}')<nl>if BMI > 18.5:<nl><tab>print(\"低体重\")<nl>else:<nl><tab>if BMI <= 25:<nl><tab><tab>print(\"肥満\")<nl><tab>else:<nl><tab><tab>print(\"普通体重\")"}
{"in":"H,W=map(int,input().split())<nl>c=[]<nl>for i in range(H):<nl><tab>kai=0<nl><tab>x=str(input())<nl><tab>C=list(x)<nl><tab>for j in range(W):<nl><tab><tab>if C[j]=='#':<nl><tab><tab><tab>kai+=1<nl><tab>c.appned(kai)<nl>for i in range(W):<nl><tab>print(kai[i],end='')","out":"H,W=map(int,input().split())<nl>c=[]<nl>for i in range(H):<nl><tab>kai=0<nl><tab>x=str(input())<nl><tab>C=list(x)<nl><tab>for j in range(W):<nl><tab><tab>if C[j]=='#':<nl><tab><tab><tab>kai+=1<nl><tab>c.append(kai)<nl>for i in range(W):<nl><tab>print(kai[i],end='')"}
{"in":"class PersonD(object):<nl><tab><tab>def __init__(self, name, year, month, day):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab><tab><tab>self.year = year<nl><tab><tab><tab><tab>self.month = month<nl><tab><tab><tab><tab>self.day = day<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab><tab>return str([self.name, self.year, self.month, self.day])<nl><tab><tab>def age(self):<nl><tab><tab><tab><tab>return 2022 - self.year<nl><tab><tab>def stone(self):<nl><tab><tab><tab>return stones[self.month-1]<nl><tab><tab>def diff(self.p):<nl><tab><tab><tab>return abs(self.age() - p.age())<nl><nl>p = PersonD(\"かんな\", 1999, 2, 3)<nl>p2 = PersonD(\"く\", 1972,12,19)<nl>p.age()<nl>p.stone()<nl>p.diff(p2)<nl>p.is_same_month(p2)","out":"class PersonD(object):<nl><tab><tab>def __init__(self, name, year, month, day):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab><tab><tab>self.year = year<nl><tab><tab><tab><tab>self.month = month<nl><tab><tab><tab><tab>self.day = day<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab><tab>return str([self.name, self.year, self.month, self.day])<nl><tab><tab>def age(self):<nl><tab><tab><tab><tab>return 2022 - self.year<nl><tab><tab>def stone(self):<nl><tab><tab><tab>return stones[self.month-1]<nl><tab><tab>def diff(self, p):<nl><tab><tab><tab>return abs(self.age() - p.age())<nl><nl>p = PersonD(\"かんな\", 1999, 2, 3)<nl>p2 = PersonD(\"く\", 1972,12,19)<nl>p.age()<nl>p.stone()<nl>p.diff(p2)<nl>p.is_same_month(p2)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B,(map(int, input().split())<nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl> else:<nl><tab>print(A)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B=map(int, input().split())<nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl>else:<nl><tab>print(A)"}
{"in":"print(HelloWorld)","out":"print(\"HelloWorld\")"}
{"in":"d=20070308<nl>while d >=10: #二桁野ときは繰り返す<tab><tab><nl>　<tab>D= list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d==11 or d==22 or d==33 or d==44:<nl><tab><tab><tab><tab> break#条件を満たしたらループを抜ける<nl> <nl><tab>print('ソールナンバー：',d)","out":"d=20070308<nl>while d >=10: #二桁野ときは繰り返す<tab><tab><nl><tab><tab>D= list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d==11 or d==22 or d==33 or d==44:<nl><tab><tab><tab><tab> break#条件を満たしたらループを抜ける<nl> <nl>print('ソールナンバー:',d)"}
{"in":"w = 50<nl>h = 1.6<nl>BMI = w \/ (h**2)<nl>if BMI < 18.5:<nl><tab>print(\"低体重（やせ）\")<nl>else:<nl><tab><tab>if 18.5 < BMI < 25<nl><tab><tab><tab> print(\"普通体重\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"肥満\")","out":"w = 50<nl>h = 1.6<nl>BMI = w \/ (h**2)<nl>if BMI < 18.5:<nl><tab>print(\"低体重(やせ)\")<nl>else:<nl><tab><tab>if 18.5 < BMI < 25:<nl><tab><tab><tab> print(\"普通体重\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"肥満\")"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>X = int(input())<nl>if X=100 or X=200 or X=300 or X=400 or X=500 or X=600 or X=700 or X=800 or X=900 or X=1000:<nl><tab><tab>print(Yes)<nl>else :print(No)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>X = int(input())<nl>if X==100 or X==200 or X==300 or X==400 or X==500 or X==600 or X==700 or X==800 or X==900 or X==1000:<nl><tab><tab>print(\"Yes\")<nl>else :print(\"No\")"}
{"in":"d=20050831<nl>while d >10: #二桁の時は繰り返す<nl><tab><tab>D=list(map(into,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d == 11 or d ==22 or d==33 or d==44:<nl><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print('ソールナンバー')","out":"d=20050831<nl>while d >10: #二桁の時は繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d == 11 or d ==22 or d==33 or d==44:<nl><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print('ソールナンバー')"}
{"in":"heights = [145, 150, 155, 160, 165, 170, 175, 180, 185]<nl>BMI = 22<nl>for h in heights:<nl><tab>h = h \/ 100<nl><tab>w = (h**2) * BMI <nl><tab>print(\"身長が\", h \"cmのとき\",\"標準体重は\", w, \"kg\")","out":"heights = [145, 150, 155, 160, 165, 170, 175, 180, 185]<nl>BMI = 22<nl>for h in heights:<nl><tab>h = h \/ 100<nl><tab>w = (h**2) * BMI <nl><tab>print(\"身長が\", h, \"cmのとき\",\"標準体重は\", w, \"kg\")"}
{"in":"df.to_csv('pollen.csv')<nl>df.hed()","out":"df.to_csv('pollen.csv')<nl>df.head()"}
{"in":"def summ(n):<nl><tab><tab>if n ==1 : return 1<nl><tab><tab>else : return n + = summ(n)","out":"def summ(n):<nl><tab><tab>if n ==1 : return 1<nl><tab><tab>else : return n +<tab>summ(n)"}
{"in":"sample_list = keys_list<nl>Series = df_keys['keys']<nl><nl>S = []<nl>SS = []<nl>for _ in range(len(sample_list)):<nl><nl><tab><tab>S.append([])<nl>for map in range(len(df)):<nl><tab>SS.append(S[m])<nl>mean_list_all = []<nl>SS[0][1].append(0)<nl><nl>print(SS)<nl># for l in range(len(Series)):<nl>#<tab> str_list, num_list = data_sep(Series[l])<nl>#<tab> for i in range(len(sample_list)) : <nl>#<tab><tab> sl = sample_list[i]<nl>#<tab><tab> for j in range(len(str_list)):<nl>#<tab><tab><tab> s = str_list[j]<nl>#<tab><tab><tab> num = num_list[j]<nl>#<tab><tab><tab> if sl == s:<nl>#<tab><tab><tab><tab> SS[i].append(num)<nl>#<tab> print(SS)<nl># # mean_lists = [mean_list(S[k]) for k in range(len(sample_list))]<nl>#<tab><tab> # print(mean_lists)<nl># # mean_list_all.append(mean_lists)<nl>","out":"sample_list = keys_list<nl>Series = df_keys['keys']<nl><nl>S = []<nl>SS = []<nl>for<tab>in range(len(sample_list)):<nl><nl><tab><tab>S.append([])<nl>for map in range(len(df)):<nl><tab>SS.append(S[m])<nl>mean_list_all = []<nl>SS[0][1].append(0)<nl><nl>print(SS)<nl># for l in range(len(Series)):<nl>#<tab> str_list, num_list = data_sep(Series[l])<nl>#<tab> for i in range(len(sample_list)) : <nl>#<tab><tab> sl = sample_list[i]<nl>#<tab><tab> for j in range(len(str_list)):<nl>#<tab><tab><tab> s = str_list[j]<nl>#<tab><tab><tab> num = num_list[j]<nl>#<tab><tab><tab> if sl == s:<nl>#<tab><tab><tab><tab> SS[i].append(num)<nl>#<tab> print(SS)<nl># # mean_lists = [mean_list(S[k]) for k in range(len(sample_list))]<nl>#<tab><tab> # print(mean_lists)<nl># # mean_list_all.append(mean_lists)<nl>"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc272\/tasks\/abc272_b<nl>n,m=map(int,input().split())<nl>a=list()<nl>b=[1]*n]*n<nl>for i in range(m):<nl><tab>a=a+[list(map(int,input().split()))]<nl><nl>for j in range(n):<nl><tab>b[j][j]=0<nl><nl><nl><nl>print(a,b)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc272\/tasks\/abc272_b<nl>n,m=map(int,input().split())<nl>a=list()<nl>b=[1]*n<nl>for i in range(m):<nl><tab>a=a+[list(map(int,input().split()))]<nl><nl>for j in range(n):<nl><tab>b[j][j]=0<nl><nl><nl><nl>print(a,b)"}
{"in":"df,sample()","out":"df.sample()"}
{"in":"(x-1)*(x+2)-12*!5","out":"(x-1)*(x+2)-12*15"}
{"in":"#平方根を求める関数mysqrt(n)を定義し、mysqrt(2), mysqrt(3), mysqrt(5)と求めてみよう。2分法やニュートン法にもチャレンジしてみよう。<nl>a, b, c) = map(input().split())<nl>a = 2**0.5<nl>b = 3**0.5<nl>c = 5**0.5<nl>print(a, b, c)","out":"#平方根を求める関数mysqrt(n)を定義し、mysqrt(2), mysqrt(3), mysqrt(5)と求めてみよう。2分法やニュートン法にもチャレンジしてみよう。<nl>a, b, c = map(input().split())<nl>a = 2**0.5<nl>b = 3**0.5<nl>c = 5**0.5<nl>print(a, b, c)"}
{"in":"class Ratio(object):<nl><tab>bunsi: int<nl><tab>bunbo: int<nl><tab>def __init__(self, bunsi,bunbo):<nl><tab><tab>self.bunsi = bunsi<nl><tab><tab>self.bunbo = bunbo<nl><tab>def gcd(a, b):<nl><tab><tab>while b:<nl><tab><tab><tab>a, b = b, a%b<nl><tab><tab>return a<nl><tab>def Ratio(self):<nl><tab><tab>if self.bunbo % self.bunsi == 0:<nl><tab><tab><tab>common = gcd(self.bunsi, self.bunbo)<nl><tab><tab><tab>print(str(self.bunsi \/\/ common) + '\/' + str(self.bunbo \/\/ common))<nl><tab><tab>else:<nl><tab><tab><tab>print(str(self.bunsi) + '\/' + str(self.bunbo))<nl><tab>def add(self, x):<nl><tab><tab>","out":"class Ratio(object):<nl><tab>bunsi: int<nl><tab>bunbo: int<nl><tab>def __init__(self, bunsi,bunbo):<nl><tab><tab>self.bunsi = bunsi<nl><tab><tab>self.bunbo = bunbo<nl><tab>def gcd(a, b):<nl><tab><tab>while b:<nl><tab><tab><tab>a, b = b, a%b<nl><tab><tab>return a<nl><tab>def Ratio(self):<nl><tab><tab>if self.bunbo % self.bunsi == 0:<nl><tab><tab><tab>common = gcd(self.bunsi, self.bunbo)<nl><tab><tab><tab>print(str(self.bunsi \/\/ common) + '\/' + str(self.bunbo \/\/ common))<nl><tab><tab>else:<nl><tab><tab><tab>print(str(self.bunsi) + '\/' + str(self.bunbo))<nl><tab>def add(self, x):<nl><tab><tab>pass"}
{"in":"A,B=map(str,input().split)<nl><nl>print(((A-B)\/3)+B)","out":"A,B=map(str,input().split())<nl><nl>print(((A-B)\/3)+B)"}
{"in":"S=input()<nl>for i, c in enumerate(S):<nl><tab><tab>print(i)<nl><nl>if i%2==1:<nl><tab>if c.isupper==True:<nl><tab><tab>print(Yes)<nl><tab>else:<nl><tab><tab>print(No)<nl>else:<nl><tab>if c.islower==True:<nl><tab><tab>print(Yes)<nl><tab>else:<nl><tab><tab>print(No)","out":"S=input()<nl>for i, c in enumerate(S):<nl><tab><tab>print(i)<nl><nl>if i%2==1:<nl><tab>if c.isupper==True:<nl><tab><tab>print(\"Yes\")<nl><tab>else:<nl><tab><tab>print(\"No\")<nl>else:<nl><tab>if c.islower==True:<nl><tab><tab>print(\"Yes\")<nl><tab>else:<nl><tab><tab>print(\"No\")"}
{"in":"from import math","out":"import math"}
{"in":"peasonr(df['部屋数'], df['住宅価格'])","out":"pearsonr(df['部屋数'], df['住宅価格'])"}
{"in":"%%time<nl>X = df[[ifor i in columns[-1]]]<nl><nl>y = df['住宅価格']<nl>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>if max<r2:<nl>max=r2<nl>print(f'{column},{column1},{column2}と住宅価格の決定係数(R2):', r2)","out":"%%time<nl>X = df[[i for i in columns[-1]]]<nl><nl>y = df['住宅価格']<nl>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>if max<r2:<nl><tab>max=r2<nl>print(f'{column},{column1},{column2}と住宅価格の決定係数(R2):', r2)"}
{"in":"plt.plot(df['西暦'],de['降水量'])<nl>plt.title('グラフの名称')<nl>plt.show()<nl>plt.show()","out":"plt.plot(df['西暦'],df['降水量'])<nl>plt.title('グラフの名称')<nl>plt.show()<nl>plt.show()"}
{"in":"https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_a<nl><nl>a, b, c, d = map(int, input().split())<nl>print(int((a+b)*(c-d)))","out":"# https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_a<nl><nl>a, b, c, d = map(int, input().split())<nl>print(int((a+b)*(c-d)))"}
{"in":"calc(\"1+10\":str)","out":"calc(\"1+10\")"}
{"in":"N=int(input())<nl>S=list(map(int,input().split()))<nl><nl>memo=[]<nl>for a in range(1,1001):<nl><tab>for b in range(a,1001):<nl><tab><tab>x=4*a*b+3(a+b)<nl><tab><tab>memo.append(x)<nl><nl>print(memo)<nl><nl>","out":"N=int(input())<nl>S=list(map(int,input().split()))<nl><nl>memo=[]<nl>for a in range(1,1001):<nl><tab>for b in range(a,1001):<nl><tab><tab>x=4*a*b+3*(a+b)<nl><tab><tab>memo.append(x)<nl><nl>print(memo)<nl><nl>"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split())<nl>C=0:<nl>C[1]=abs(h[1]-h[0]):<nl><nl>C1[i]=C[i-2]+abs(h[i]-h[i-2])<nl>C2[i]=C[i-1]+abs(h[i]-h[i-1])<nl>C[i]=min(C1,C2)<nl>print(C[N-1])<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split()))<nl>C=0:<nl>C[1]=abs(h[1]-h[0]):<nl><nl>C1[i]=C[i-2]+abs(h[i]-h[i-2])<nl>C2[i]=C[i-1]+abs(h[i]-h[i-1])<nl>C[i]=min(C1,C2)<nl>print(C[N-1])<nl>"}
{"in":"A, B, C = map(int, input().split())<nl>print　max (A + B or B + C or A + C)","out":"A, B, C = map(int, input().split())<nl>print(max(A + B ,<tab>B + C , A + C))"}
{"in":"def gcd(a,b):<nl> if b==0:<nl><tab>return a<nl><tab>else:<nl><tab>return gcd(b,a%b)<nl> <nl><tab>acd(6215,4746)","out":"def gcd(a,b):<nl><tab>if b==0:<nl><tab><tab>return a<nl><tab>else:<nl><tab><tab>return gcd(b,a%b)<nl> <nl>gcd(6215,4746)"}
{"in":"import matplotlib.pyplot as plt<nl>X=[]<nl>Y=[]<nl>for i ijn range(1,100):<nl><tab>X.append(i)<nl><tab>Y.append(calc_pi(i))<nl><nl>plt.plot(X,Y)<nl>plt.xlabel('N')<nl>plt.ylabel('pi')<nl>plt.show()","out":"import matplotlib.pyplot as plt<nl>X=[]<nl>Y=[]<nl>for i in range(1,100):<nl><tab>X.append(i)<nl><tab>Y.append(calc_pi(i))<nl><nl>plt.plot(X,Y)<nl>plt.xlabel('N')<nl>plt.ylabel('pi')<nl>plt.show()"}
{"in":"print(\"Ao\"","out":"print(\"Ao\")"}
{"in":"if BMI > 25.00 :<nl><tab>print('太り過ぎ')<nl><tab>else:<nl><tab><tab>print('太り過ぎでない')","out":"if BMI > 25.00 :<nl><tab>print('太り過ぎ')<nl>else:<nl><tab>print('太り過ぎでない')"}
{"in":"def calc(s:str)->float:<nl><tab>if '+' in s:<nl><tab><tab>values=list(map(float,s.split('+')))<nl><tab><tab>return sum(values)<nl><tab>return float(s)<nl><tab><nl>cals(\"1+2+3\")","out":"def calc(s:str)->float:<nl><tab>if '+' in s:<nl><tab><tab>values=list(map(float,s.split('+')))<nl><tab><tab>return sum(values)<nl><tab>return float(s)<nl><tab><nl>calc(\"1+2+3\")"}
{"in":"d = 20061225<nl><nl>while d>=10:<nl><tab>D= list(map(int,str(d)))<nl><tab>#print(D)<nl><tab>d=sum(D)<nl><tab>#print(d)<nl><nl><tab>if d==11 or d==22 or d==33 or d==44:<nl><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print(’ソールナンバー’,d)","out":"d = 20061225<nl><nl>while d>=10:<nl><tab>D= list(map(int,str(d)))<nl><tab>#print(D)<nl><tab>d=sum(D)<nl><tab>#print(d)<nl><nl><tab>if d==11 or d==22 or d==33 or d==44:<nl><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><nl>print('ソールナンバー',d)"}
{"in":"d = 20060222<nl>while d >=10:<nl><tab>D = list(map(int,str(d)))<nl><tab>d = sum(D)<nl><tab>if d == 11 or d == 22 or d == 33:<nl><tab><tab>break<nl>return d","out":"d = 20060222<nl>while d >=10:<nl><tab>D = list(map(int,str(d)))<nl><tab>d = sum(D)<nl><tab>if d == 11 or d == 22 or d == 33:<nl><tab><tab>break<nl>print(d)"}
{"in":"import matplotlib.pyplot as plt <nl>X=[]<nl>Y=[]<nl>for i in range(1,100):<nl><tab><tab>x=i\/100<nl><tab><tab>X.append(x)<nl><tab><tab>Y.append(f(x))<nl><nl>plt.plot(X.Y)<nl>plt.xlabel('x')<nl>plt.ylabel('y')<nl>plt.show()","out":"import matplotlib.pyplot as plt <nl>X=[]<nl>Y=[]<nl>for i in range(1,100):<nl><tab><tab>x=i\/100<nl><tab><tab>X.append(x)<nl><tab><tab>Y.append(f(x))<nl><nl>plt.plot(X, Y)<nl>plt.xlabel('x')<nl>plt.ylabel('y')<nl>plt.show()"}
{"in":"if BMI < 18.50 :<nl><tab>print(\"低体重\")<nl><tab>else BMI = 18.50 :<nl><tab><tab>print(\"低体重でない\")","out":"if BMI < 18.50 :<nl><tab>print(\"低体重\")<nl>else:<nl><tab>print(\"低体重でない\")"}
{"in":"def calc(s:str)->float:<nl><tab>\"1+10\":1+10<nl><tab>return float(s)<nl>calc(\"1+10\")","out":"def calc(s:str)->float:<nl><tab># \"1+10\":1+10<nl><tab>return float(s)<nl>calc(\"1+10\")"}
{"in":"d=20070308<nl>while d >=10:#二桁野ときは繰り返す<nl>　　　D=list(map(int,str(d)))<nl>print(D)<nl>d=sum(D)<nl>print(d)<nl>if d==11 or d==22 or d==33 or d==44:<nl><tab>break#条件を満たしたらループを抜ける<nl><tab>print('ソールナンバー：',d)","out":"d=20070308<nl>while d >=10:#二桁野ときは繰り返す<nl><tab><tab><tab>D=list(map(int,str(d)))<nl>print(D)<nl>d=sum(D)<nl>print(d)<nl>if d==11 or d==22 or d==33 or d==44:<nl><tab>break#条件を満たしたらループを抜ける<nl><tab>print('ソールナンバー:',d)"}
{"in":"w = 80.0<nl>h = 1.80<nl>BMI = w \/ h ** 2<nl>print(\"BMI=\" BMI)","out":"w = 80.0<nl>h = 1.80<nl>BMI = w \/ h ** 2<nl>print(\"BMI=\", BMI)"}
{"in":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df['soldout','kcal','temperature']<tab># 価格以外を全て説明変数に<nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()","out":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df[['soldout','kcal','temperature']]<tab># 価格以外を全て説明変数に<nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()"}
{"in":"w = 52.0<nl>h = 1.63<nl>BMI = w \/ h ** 2<nl>print( \"BMI\", BMI )<nl><nl>(\/if, BMI, >=)","out":"w = 52.0<nl>h = 1.63<nl>BMI = w \/ h ** 2<nl>print( \"BMI\", BMI )<nl><nl>#(\/if, BMI, >=)"}
{"in":"X=int(input())<nl>if　X\/100-X\/\/100>1:<nl><tab>print('Yes')<nl>else:<nl><tab>print('No')","out":"X=int(input())<nl>if<tab>X\/100-X\/\/100>1:<nl><tab>print('Yes')<nl>else:<nl><tab>print('No')"}
{"in":"def d(n):<nl><tab>if n < 10:<nl><tab><tab>return 1<nl><tab>else:<nl><tab><tab>n >= 10:<nl><tab><tab>return 1 + d(n \/\/ 10)","out":"def d(n):<nl><tab>if n < 10:<nl><tab><tab>return 1<nl><tab>else:<nl><tab><tab>assert n >= 10<nl><tab><tab>return 1 + d(n \/\/ 10)"}
{"in":"for colmun1 in df.columns[:-1]:<nl><tab>for column2 in df.columns[:-1]:<nl><tab><tab>X=df[[column1,column2]]<nl><tab><tab>y=df['住宅価格']<nl><tab><tab>model=LinearRegression()<nl><tab><tab>model.fit(X,y)<nl><tab><tab>y_pred=model.predict(X)<nl><tab><tab>r2=r2_score(y,y_pred)<nl><tab><tab>print(f'{column}決定係数(R2):',r2)","out":"for column1 in df.columns[:-1]:<nl><tab>for column2 in df.columns[:-1]:<nl><tab><tab>X=df[[column1,column2]]<nl><tab><tab>y=df['住宅価格']<nl><tab><tab>model=LinearRegression()<nl><tab><tab>model.fit(X,y)<nl><tab><tab>y_pred=model.predict(X)<nl><tab><tab>r2=r2_score(y,y_pred)<nl><tab><tab>print(f'{column}決定係数(R2):',r2)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B=map(int, input().split())<nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl>else B==C:<nl><tab>print(A)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B=map(int, input().split())<nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl>else:<nl><tab>print(A)"}
{"in":"d = 2008_01_13<nl><nl>while d >=10: #二桁の時は繰り返す<nl>　　D = list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d = sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d == 11 or d == 22 or d == 33 or d == 44 :<nl><tab><tab><tab>break #条件を満たしたらループを抜ける","out":"d = 2008_01_13<nl><nl>while d >=10: #二桁の時は繰り返す<nl><tab><tab>D = list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d = sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d == 11 or d == 22 or d == 33 or d == 44 :<nl><tab><tab><tab>break #条件を満たしたらループを抜ける"}
{"in":"sx,sy,gx,gy = map(inbt,input().strip().split())<nl>if sx < gx:<nl><tab>dx=gx-sx<nl><tab>dy = sy+gy<nl><tab>k=dy\/dx<nl><tab>xzero = sx+sy\/k<nl><tab>print(xzero)<nl>else:<nl><tab>dx=sx-gx<nl><tab>dy=sy+gy<nl><tab>k=dy\/dx<nl><tab>xzero= sx-sy\/k<nl><tab>print(xzero)","out":"sx,sy,gx,gy = map(int,input().strip().split())<nl>if sx < gx:<nl><tab>dx=gx-sx<nl><tab>dy = sy+gy<nl><tab>k=dy\/dx<nl><tab>xzero = sx+sy\/k<nl><tab>print(xzero)<nl>else:<nl><tab>dx=sx-gx<nl><tab>dy=sy+gy<nl><tab>k=dy\/dx<nl><tab>xzero= sx-sy\/k<nl><tab>print(xzero)"}
{"in":"while 文: 条件を満たす間、繰り返す<nl><nl>while d >= 16:<nl><tab><tab>D = list(map(int, str(d)))<nl><tab><tab>print(D)<nl><tab><tab>","out":"#while 文: 条件を満たす間、繰り返す<nl><nl>while d >= 16:<nl><tab><tab>D = list(map(int, str(d)))<nl><tab><tab>print(D)<nl><tab><tab>"}
{"in":"df=pd.read_csv('pollen.csv')<nl>df.hed()","out":"df=pd.read_csv('pollen.csv')<nl>df.head()"}
{"in":"<nl><nl>S = str(input())<nl><nl>k = 2*n<nl>g = 2*n + 1<nl>k_max = math.ceil(len(S)\/2)<nl>g_max = math.floor(len(S)\/2)<nl><nl>ans = \"Yes\"<nl><nl>for k in range(k_max) :<nl><tab>for g in range(g_max) :<nl><tab><tab>if S[k].islower == False :<nl><tab><tab><tab>ans = \"No\"<nl><tab><tab>print(ans)<nl><tab><tab>else :<nl><tab><tab><tab>if S[g].isupper == False :<nl><tab><tab><tab><tab>ans = \"No\"<nl><tab><tab><tab><tab>print(ans)<nl><nl>print(k_max)<nl>print(g_max)<nl>print()<nl>print()<nl><nl>print(ans)","out":"<nl><nl>S = str(input())<nl><nl>k = 2*n<nl>g = 2*n + 1<nl>k_max = math.ceil(len(S)\/2)<nl>g_max = math.floor(len(S)\/2)<nl><nl>ans = \"Yes\"<nl><nl>for k in range(k_max) :<nl><tab>for g in range(g_max) :<nl><tab><tab>if S[k].islower == False :<nl><tab><tab><tab>ans = \"No\"<nl><tab><tab><tab>print(ans)<nl><tab><tab>else:<nl><tab><tab><tab>if S[g].isupper == False :<nl><tab><tab><tab><tab>ans = \"No\"<nl><tab><tab><tab><tab>print(ans)<nl><nl>print(k_max)<nl>print(g_max)<nl>print()<nl>print()<nl><nl>print(ans)"}
{"in":"animals = [Chilin(), Sheep(), Dog('Hachi')]","out":"animals = [Chiken(), Sheep(), Dog('Hachi')]"}
{"in":"#%%atcoder https:\/\/atcoder.jp\/contests\/abc194\/tasks\/abc194_b<nl><nl>N = int(input()) <nl>a = [ 0 for i in range(N)]<nl>b = [ 0 for i in range(N)]<nl>for i in range(N):<nl><tab><tab>a[i],b[i] = map(int,input().split())<nl><nl>for i in range(N):<nl><tab><tab>for j in range(N):","out":"#%%atcoder https:\/\/atcoder.jp\/contests\/abc194\/tasks\/abc194_b<nl><nl>N = int(input()) <nl>a = [ 0 for i in range(N)]<nl>b = [ 0 for i in range(N)]<nl>for i in range(N):<nl><tab><tab>a[i],b[i] = map(int,input().split())<nl><nl>for i in range(N):<nl><tab><tab>for j in range(N):<nl><tab><tab><tab>pass"}
{"in":"d = 20060222<nl>while d >=10:<nl><tab>D = list(map(int,str(d)))<nl><tab>d = sum(D)<nl><tab>if d == 11 or d == 22 or d == 33:<nl><tab><tab>break<nl><tab>return d","out":"d = 20060222<nl>while d >=10:<nl><tab>D = list(map(int,str(d)))<nl><tab>d = sum(D)<nl><tab>if d == 11 or d == 22 or d == 33:<nl><tab><tab>break<nl>return(d)"}
{"in":"def calc(s:str)->float:<nl><tab>calc(s:str)<nl><tab>num1=calc[0]<nl><tab>num2=calc[3]<nl><tab>sum=num1+num2<nl><tab>return float(s)","out":"def calc(s:str)->float:<nl><tab>num1=calc[0]<nl><tab>num2=calc[3]<nl><tab>sum=num1+num2<nl><tab>return float(s)"}
{"in":"<nl>N=int(input())<nl>S=list(input())<nl>answer = ''<nl>for letter in len(S):<nl><tab><tab>answer += chr(ord('A') + (ord(letter)-ord('A')+N) % 26)","out":"<nl>N=int(input())<nl>S=list(input())<nl>answer = ''<nl>for letter in S:<nl><tab><tab>answer += chr(ord('A') + (ord(letter)-ord('A')+N) % 26)"}
{"in":"for column in df.columns[:-1]:<nl><tab>print(colum)<nl><tab>X = df[column]<nl><tab>y = df['住宅価格']<nl><nl><tab>model = LinearRegression()<nl><tab>model.fit(X, y)<nl><nl><tab>y_pred = model.predict(X)<nl><tab>#plt.figure(figsize=(6,6))<nl><tab>#plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl><tab>#plt.xlabel('実測')<nl><tab>#plt.ylabel('予測')<nl><tab>#plt.ylim(0, 50)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print(f'{column}決定係数(R2):', r2)","out":"for column in df.columns[:-1]:<nl><tab>print(column)<nl><tab>X = df[[column]]<nl><tab>y = df['住宅価格']<nl><nl><tab>model = LinearRegression()<nl><tab>model.fit(X, y)<nl><nl><tab>y_pred = model.predict(X)<nl><tab>#plt.figure(figsize=(6,6))<nl><tab>#plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl><tab>#plt.xlabel('実測')<nl><tab>#plt.ylabel('予測')<nl><tab>#plt.ylim(0, 50)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print(f'{column}決定係数(R2):', r2)"}
{"in":"animals = [Chikin(), Sheep(), Dog(ハナ)]","out":"animals = [Chikin(), Sheep(), Dog(\"ハナ\")]"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc214\/tasks\/abc214_b<nl><nl><nl>C=0<nl><nl>#0～100<nl>for a in range(100):<nl><tab>for b in range(100):<nl><tab><tab>for c in range(100):<nl><nl><tab><tab><tab>if a+b+c<=S and a*b*c<=T:<nl><tab><tab><tab><tab>C+=1<nl><nl>print(C)<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc214\/tasks\/abc214_b<nl><nl><nl>C=0<nl><nl>#0~100<nl>for a in range(100):<nl><tab>for b in range(100):<nl><tab><tab>for c in range(100):<nl><nl><tab><tab><tab>if a+b+c<=S and a*b*c<=T:<nl><tab><tab><tab><tab>C+=1<nl><nl>print(C)<nl>"}
{"in":"df.scatter('降水量','スギ花粉飛散量')","out":"plt.scatter(df[\"降水量\"], df[\"スギ花粉飛散量\"])"}
{"in":"説明変数: Index(['犯罪率', '緑地', '工場', '川近', '大気汚染', '部屋数', '築年', '通勤', <nl><tab><tab>'交通', '資産税', '教員比','低所得率'], dtype='object') ","out":"# 説明変数: Index(['犯罪率', '緑地', '工場', '川近', '大気汚染', '部屋数', '築年', '通勤', <nl><tab><tab>'交通', '資産税', '教員比','低所得率'], dtype='object') "}
{"in":"<nl>H, W = map(int, input().split())<nl>A = []<nl>for i in range(H) :<nl><tab>A.append(list(map(int, input().split())))<nl>print(A.min())<nl>print(A)","out":"<nl>H, W = map(int, input().split())<nl>A = []<nl>for i in range(H) :<nl><tab>A.append(list(map(int, input().split())))<nl>print(min(A))<nl>print(A)"}
{"in":"N,M=map(int,input().split())<nl>A=list(map(int,input().split())<nl>B=list(map(int,input().split())","out":"N,M=map(int,input().split())<nl>A=list(map(int,input().split()))<nl>B=list(map(int,input().split()))"}
{"in":"def sn(math):<nl>for w in range(45, 100, 5):<nl><tab>h = math.sqrt(w \/ 22)<nl><tab>print(w,h)","out":"def sn(math):<nl><tab>for w in range(45, 100, 5):<nl><tab><tab>h = math.sqrt(w \/ 22)<nl><tab><tab>print(w,h)"}
{"in":"class InfiniteZero(object):<nl><tab>def __iter__(self):<nl><tab><tab>return self<nl><tab>def __next__(self):<nl><tab><tab>return 0 <nl><nl>A=InfiniteZero()<nl>itef(A)","out":"class InfiniteZero(object):<nl><tab>def _iter__(self):<nl><tab><tab>return self<nl><tab>def _next__(self):<nl><tab><tab>return 0 <nl><nl>A=InfiniteZero()<nl>iter(A)"}
{"in":"print(1+2）","out":"print(1+2)"}
{"in":"df['大気汚染']describe()","out":"df['大気汚染'].describe()"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl>A,B=map(int,input().split)<nl><nl>print(A,B)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl>A,B=map(int,input().split())<nl><nl>print(A,B)"}
{"in":"import math<nl><nl>y = np.frompyfunc(math.sin,1,1)<nl>x = np.linspace(-10,10,100)<nl>y = sin(x)<nl>plt.plot(x,y)<nl>plt.grid(True)","out":"import math<nl><nl>sin = np.frompyfunc(math.sin,1,1)<nl>x = np.linspace(-10,10,100)<nl>y = sin(x)<nl>plt.plot(x,y)<nl>plt.grid(True)"}
{"in":"D = 1000<nl> print(D\/100)","out":"D = 1000<nl>print(D\/100)"}
{"in":"for a in range(1:2:10):<nl><tab>print(1-1\/a)","out":"for a in range(1,2,10):<nl><tab>print(1-1\/a)"}
{"in":"import matplotlib.pyplot as plt<nl>H = [] <nl>for w in range(40,100,5)<nl><tab>h = math.sqrt(w\/22.0)<nl><tab>H.append(h)<nl><nl>plt.plot(range(40,100,5),H)<nl>plt.show()<nl>import math","out":"import matplotlib.pyplot as plt<nl>H = [] <nl>for w in range(40,100,5):<nl><tab>h = math.sqrt(w\/22.0)<nl><tab>H.append(h)<nl><nl>plt.plot(range(40,100,5),H)<nl>plt.show()<nl>import math"}
{"in":"p.soul_number():","out":"p.soul_number()"}
{"in":"plt.figure(figsize=(7.7))<nl>plt.scatter(df['部屋数'], df['住宅価格'],color='pueple',alpha='0.5')<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()","out":"plt.figure(figsize=(7,7))<nl>plt.scatter(df['部屋数'], df['住宅価格'],color='pueple',alpha='0.5')<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()"}
{"in":"W = 46.0<nl>h = 1.50<nl>BMI = w \/ (h*hh*h)<nl>print(BMI) #表示されます","out":"w = 46.0<nl>h = 1.50<nl>BMI = w \/ (h*h)<nl>print(BMI) #表示されます"}
{"in":"<nl><nl><nl>N, M = map(int, input().split())<nl><nl>A = list(map(int, input().split()))<nl>B = list(map(int, input().split()))<nl>A.sort()<nl>B.sort()<nl><nl>S = A[-1]<nl><nl>for i in range( N ) :<nl><tab>for j in range( M ) :<nl><tab><tab>if S > abs(A[ i ]-B[ j ])) :<nl><tab><tab><tab>S = abs(A[ i ]-B[ j ]))<nl><nl><nl>print(S)<nl><nl><nl><nl><nl><nl><nl><nl><nl># # 遅い<nl># N, M = map(int, input().split())<nl><nl># A = list(map(int, input().split()))<nl># B = list(map(int, input().split()))<nl><nl># S = []<nl><nl># for i in range( N ) :<nl>#<tab> for j in range( M ) :<nl>#<tab><tab> S.append(abs(A[ i ]-B[ j ]))<nl><nl># print(min(S))","out":"<nl><nl><nl>N, M = map(int, input().split())<nl><nl>A = list(map(int, input().split()))<nl>B = list(map(int, input().split()))<nl>A.sort()<nl>B.sort()<nl><nl>S = A[-1]<nl><nl>for i in range( N ) :<nl><tab>for j in range( M ) :<nl><tab><tab>if S > abs(A[ i ]-B[ j ]) :<nl><tab><tab><tab>S = abs(A[ i ]-B[ j ])<nl><nl><nl>print(S)<nl><nl><nl><nl><nl><nl><nl><nl><nl># # 遅い<nl># N, M = map(int, input().split())<nl><nl># A = list(map(int, input().split()))<nl># B = list(map(int, input().split()))<nl><nl># S = []<nl><nl># for i in range( N ) :<nl>#<tab> for j in range( M ) :<nl>#<tab><tab> S.append(abs(A[ i ]-B[ j ]))<nl><nl># print(min(S))"}
{"in":"model.predict([(4.00,)])<nl>array([19.94203311])<nl>y_pred = model.predict(X)<nl>print(y_pred)","out":"model.predict([(4.00,)])<nl>#array([19.94203311])<nl>y_pred = model.predict(X)<nl>print(y_pred)"}
{"in":"n % 10 ","out":"n % 10"}
{"in":"train.csv['Survived'].groupby(train_raw['Ticket'].map(lambda x: str(x)[0])).agg(['mean','count'])","out":"train['Survived'].groupby(train_raw['Ticket'].map(lambda x: str(x)[0])).agg(['mean','count'])"}
{"in":"w=50.0<nl>h=1.60<nl>BMI=w(h＊＊h)<nl><nl>print(BMI) #表示されます","out":"w=50.0<nl>h=1.60<nl>BMI=w\/(h*h)<nl><nl>print(BMI) #表示されます"}
{"in":"d=20070122<nl>while d>=10:#二桁の時は繰り返す<nl>　 D = list(map(int,str(d)))<nl>　 #print(D)<nl>　 d=sum(D)<nl>　 #print(d)<nl>　 if d==11 or d== 22 or d==33 or d==44:<nl><tab> break#条件を満たしたら抜け出す","out":"d=20070122<nl>while d>=10:#二桁の時は繰り返す<nl><tab> D = list(map(int,str(d)))<nl><tab> #print(D)<nl><tab> d=sum(D)<nl><tab> #print(d)<nl><tab> if d==11 or d== 22 or d==33 or d==44:<nl><tab> break#条件を満たしたら抜け出す"}
{"in":"a=[1,2,4,3]<nl>b=a.sorted<nl>print(a,b)<nl>","out":"a=[1,2,4,3]<nl>b=sorted(a)<nl>print(a,b)<nl>"}
{"in":"x=22<nl>if x >0:<nl><tab>print(\"正の数\")<nl><tab>else:<nl><tab><tab>print(\"負の数\")","out":"x=22<nl>if x >0:<nl><tab>print(\"正の数\")<nl>else:<nl><tab>print(\"負の数\")"}
{"in":"S,T,X=map(int,input().split())<nl>ans=\"No\"<nl>if S<=X<T:<nl><tab>ans=\"Yes\"<nl>if T<S:<nl><tab>T=T+24<nl><tab>if S<=X:<nl><tab><tab>X=X+24<nl><tab><tab>if S<=X<T:<nl><tab><tab>ans=\"Yes\"<nl>print(ans)","out":"S,T,X=map(int,input().split())<nl>ans=\"No\"<nl>if S<=X<T:<nl><tab>ans=\"Yes\"<nl>if T<S:<nl><tab>T=T+24<nl><tab>if S<=X:<nl><tab><tab>X=X+24<nl><tab><tab>if S<=X<T:<nl><tab><tab><tab>ans=\"Yes\"<nl>print(ans)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl><nl>A, B,C = map(int, input().split())<nl>if A==B;<nl> print(C)<nl> break<nl>else if A==C:<nl><tab>print(B)<nl><tab> break<nl>els:<nl> print(A)<nl><tab>break<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B=map(int, input().split())<nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl>else:<nl><tab>print(A)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_a<nl><nl>a, b, c, d=map(int, input.split())<nl>print(((a+b)*(c-d))<nl>print(\"Takahashi\")","out":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_a<nl><nl>a, b, c, d=map(int, input.split())<nl>print((a+b)*(c-d))<nl>print(\"Takahashi\")"}
{"in":"A,B = map(int.input().split())","out":"A,B = map(int,input().split())"}
{"in":"<nl>import numpy as np<nl>H, W = map(int, input().split())<nl>A = []<nl>for i in range(H) :<nl><tab>A.append(list(map(int, input().split())))<nl>print(A.min())<nl>print(A)","out":"<nl>import numpy as np<nl>H, W = map(int, input().split())<nl>A = []<nl>for i in range(H) :<nl><tab>A.append(list(map(int, input().split())))<nl>print(min(A))<nl>print(A)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc178\/tasks\/abc178_a<nl>x=int(input())<nl>if x==1:<nl><tab>print(0)<nl><tab>else:<nl><tab>print(1)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc178\/tasks\/abc178_a<nl>x=int(input())<nl>if x==1:<nl><tab>print(0)<nl>else:<nl><tab>print(1)"}
{"in":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df['充電器の数','島']<tab><nl>y = df['充電器の位置']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()","out":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df[['充電器の数','島']]<tab><nl>y = df['充電器の位置']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()"}
{"in":"keys_list<nl><nl>k_l = []<nl><nl>for i in keys_list:<nl><tab>for j in keys_list:<nl><tab><tab>k_l.append([i.j])<nl><nl>","out":"keys_list<nl><nl>k_l = []<nl><nl>for i in keys_list:<nl><tab>for j in keys_list:<nl><tab><tab>k_l.append([i,j])<nl><nl>"}
{"in":"w=50.0<nl>h=1.60<nl>BMI=w(h＊h)<nl><nl>print(BMI) #表示されます","out":"w=50.0<nl>h=1.60<nl>BMI=w\/(h*h)<nl><nl>print(BMI) #表示されます"}
{"in":"plt.hist(df['G3'],bins=20)<nl>plot.show()","out":"plt.hist(df['G3'],bins=20)<nl>plt.show()"}
{"in":"a,b,c,d=map(int,input,split())<nl>print(a)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_a<nl><nl>a, b, c, d = map(int, input(), split())<nl>print(a,b,c,d)<nl>print('Takahashi')"}
{"in":"plt.figure(figsize=15,15)<nl>plt.scatter(df['部屋数'], df['住宅価格'], alpha=0.5)<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()","out":"plt.figure(figsize=(15,15))<nl>plt.scatter(df['部屋数'], df['住宅価格'], alpha=0.5)<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()"}
{"in":"df3.drop('身長_y', axis=1, inplace=Ture)<nl>","out":"df3.drop('身長_y', axis=1, inplace=True)<nl>"}
{"in":"X = data_train.drop(['Survived', 'PassengerId'], axis=1)<nl>y = data_train['Survived']<nl> <nl>#学習データとテストデータの分割　8:2<nl>ss = ShuffleSplit(n_splits=10,<nl><tab><tab><tab><tab><tab><tab><tab><tab> train_size=0.8,<nl><tab><tab><tab><tab><tab><tab><tab><tab> test_size=0.2,<nl><tab><tab><tab><tab><tab><tab><tab><tab> random_state=0 )<nl>train_index ,test_index = next(ss.split(X, y))<nl> <nl>X_train, X_test = X.ix[train_index,:], X.ix[test_index,:]<nl>y_train, y_test = y[train_index], y[test_index]","out":"X = data_train.drop(['Survived', 'PassengerId'], axis=1)<nl>y = data_train['Survived']<nl> <nl>#学習データとテストデータの分割<tab>8:2<nl>ss = ShuffleSplit(n_splits=10,<nl><tab><tab><tab><tab><tab><tab><tab><tab> train_size=0.8,<nl><tab><tab><tab><tab><tab><tab><tab><tab> test_size=0.2,<nl><tab><tab><tab><tab><tab><tab><tab><tab> random_state=0 )<nl>train_index ,test_index = next(ss.split(X, y))<nl> <nl>X_train, X_test = X[train_index,:], X[test_index,:]<nl>y_train, y_test = y[train_index], y[test_index]"}
{"in":"# データをtrainとtestに分解 <nl>#（ 'Survived'が存在するのがtrain, しないのがtest ）<nl>train_set = dataset_dummies[dataset_dummies['Survived'].notnull()]<nl>test_set = dataset_dummies[dataset_dummies['Survived'].isnull()]<nl>del test_set[\"Survived\"]<nl><nl># trainデータを変数と正解に分離<nl>X = train_set.as_matrix()[:, 1:] # Pclass以降の変数<nl>y = train_set.as_matrix()[:, 0] # 正解データ<nl><nl># 予測モデルの作成<nl>pipe = Pipeline([('classify', RandomForestClassifier(random_state = 10, max_features = 'sqrt'))])<nl><nl>param_test = {'classify__n_estimators':list(range(20, 30, 1)), <nl><tab><tab><tab><tab><tab><tab><tab>'classify__max_depth':list(range(3, 10, 1))}<nl>gsearch = GridSearchCV(estimator = pipe, param_grid = param_test, scoring='accuracy', cv=10)<nl>gsearch.fit(X, y)<nl>print(gsearch.best_params_, gsearch.best_score_)<nl><nl># testデータの予測<nl>predictions = gsearch.predict(test_set)<nl><nl># Kaggle提出用csvファイルの作成<nl>submission = pd.DataFrame({\"PassengerId\": PassengerId, \"Survived\": predictions.astype(np.int32)})<nl>submission.to_csv(\"submission6.csv\", index=False)","out":"# データをtrainとtestに分解 <nl>#( 'Survived'が存在するのがtrain, しないのがtest )<nl>train_set = dataset_dummies[dataset_dummies['Survived'].notnull()]<nl>test_set = dataset_dummies[dataset_dummies['Survived'].isnull()]<nl>del test_set[\"Survived\"]<nl><nl># trainデータを変数と正解に分離<nl>X = train_set.as_matrix()[:, 1:] # Pclass以降の変数<nl>y = train_set.as_matrix()[:, 0] # 正解データ<nl><nl># 予測モデルの作成<nl>pipe = Pipeline([('classify', RandomForestClassifier(random_state = 10, max_features = 'sqrt'))])<nl><nl>param_test = {'classify__n_estimators':list(range(20, 30, 1)), <nl><tab><tab><tab><tab><tab><tab><tab>'classify__max_depth':list(range(3, 10, 1))}<nl>gsearch = GridSearchCV(estimator = pipe, param_grid = param_test, scoring='accuracy', cv=10)<nl>gsearch.fit(X, y)<nl>print(gsearch.best_params_, gsearch.best_score_)<nl><nl># testデータの予測<nl>predictions = gsearch.predict(test_set)<nl><nl># Kaggle提出用csvファイルの作成<nl>submission = pd.DataFrame({\"PassengerId\": PassengerId, \"Survived\": predictions.astype(np.int32)})<nl>submission.to_csv(\"submission6.csv\", index=False)"}
{"in":"w = 37.6<nl>import math<nl>h = math.sqrt(w\/22):<nl>print(\"体重\":,w, \"身長\",h)","out":"w = 37.6<nl>import math<nl>h = math.sqrt(w\/22)<nl>print(\"体重\",w, \"身長\",h)"}
{"in":"あ","out":"#あ"}
{"in":"d=200847<nl>while d >=10:#二桁のときは繰り返す<nl>　D=list(map(int,str(d)))<nl>　#print(D)<nl>　d=sum(D)<nl>#print(d)<nl>if d==11 or d==22 or d==33 or d==44<nl>break #条件を満たしたらループを抜ける<nl><nl>print('ソウルナンバー')(d)","out":"d=200847<nl>while d >=10:#二桁のときは繰り返す<nl><tab>D=list(map(int,str(d)))<nl><tab>#print(D)<nl><tab>d=sum(D)<nl>#print(d)<nl>if d==11 or d==22 or d==33 or d==44<nl>break #条件を満たしたらループを抜ける<nl><nl>print('ソウルナンバー')(d)"}
{"in":"d=20001127<nl>while d>=10:<nl><tab>D=list(map(int,str(d)))<nl><tab>d=sum(D)<nl><tab>if d==11 or d==22 or d==33 or d=44:<nl><tab><tab>break<nl>print(d)","out":"d=20001127<nl>while d>=10:<nl><tab>D=list(map(int,str(d)))<nl><tab>d=sum(D)<nl><tab>if d==11 or d==22 or d==33 or d==44:<nl><tab><tab>break<nl>print(d)"}
{"in":"plt.figure(figsize=(8,8))<nl>plt.scatter(df['部屋数'],df['住宅価格'],alpha=0.5,cplor=purple)<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()","out":"plt.figure(figsize=(8,8))<nl>plt.scatter(df['部屋数'],df['住宅価格'],alpha=0.5,color=\"purple\")<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()"}
{"in":"print(\"Hello　World\"","out":"print(\"Hello<tab>World\")"}
{"in":"a a- np.dot([1,2,3])","out":"a - np.dot([1,2,3])"}
{"in":"plt.boxplot(df[crim])<nl>plt.show()","out":"plt.boxplot(df[\"crim\"])<nl>plt.show()"}
{"in":"df.colums","out":"df.columns"}
{"in":"df[df['平均気温'].sort_values()]","out":"df['平均気温'].sort_values()"}
{"in":"from fractions import Fraction<nl><nl>class Ratio(object):<nl><tab><tab>bunshi:int<nl><tab><tab>bunbo:int<nl><tab><tab>def __init__(self,bunshi,bunbo):<nl><tab><tab><tab><tab>self.bunshi = bunshi<nl><tab><tab><tab><tab>self.bunbo = bunbo<nl><nl><tab><tab>def __str__(self): # printの時はこちら<nl><tab><tab><tab><tab>bunsu = Fraction(self.bunshi self.bunbo)<nl><tab><tab><tab><tab>return f'{bunsu}'<nl><nl><tab><tab>def __str__(self): <nl><tab><tab><tab><tab>return f'{self.name} {str(self.year)}年{str(self.month)}月{str(self.day)}日'","out":"from fractions import Fraction<nl><nl>class Ratio(object):<nl><tab><tab>bunshi:int<nl><tab><tab>bunbo:int<nl><tab><tab>def __init__(self,bunshi,bunbo):<nl><tab><tab><tab><tab>self.bunshi = bunshi<nl><tab><tab><tab><tab>self.bunbo = bunbo<nl><nl><tab><tab>def __str__(self): # printの時はこちら<nl><tab><tab><tab><tab>bunsu = Fraction(self.bunshi, self.bunbo)<nl><tab><tab><tab><tab>return f'{bunsu}'<nl><nl><tab><tab>def __str__(self): <nl><tab><tab><tab><tab>return f'{self.name} {str(self.year)}年{str(self.month)}月{str(self.day)}日'"}
{"in":"d = 20060720<nl>while d >= 10: #二桁の時は繰り返す<nl>D = List(map(int,str(d)))<nl>print(D)<nl>d = sum(D)<nl>print(d)<nl>if d == 11 or d == 22 or d == 33 or d== 44:<nl><tab>break #条件を満たしたらループを抜ける<nl><tab> <nl>print(\"ソールナンバー：，ⅾ\")","out":"d = 20060720<nl>while d >= 10: #二桁の時は繰り返す<nl>D = List(map(int,str(d)))<nl>print(D)<nl>d = sum(D)<nl>print(d)<nl>if d == 11 or d == 22 or d == 33 or d== 44:<nl><tab>break #条件を満たしたらループを抜ける<nl><tab> <nl>print(\"ソールナンバー:,ⅾ\")"}
{"in":"intex.__len__()","out":"index.__len__()"}
{"in":"array([19.94203311])","out":"#array([19.94203311])"}
{"in":"pearsonr(df['部屋数'],df['住宅価格'])<nl>print('相関係数:',rho)<nl>print('p値:',p)","out":"rho, p = pearsonr(df['部屋数'],df['住宅価格'])<nl>print('相関係数:',rho)<nl>print('p値:',p)"}
{"in":"w=45.2<nl>h=1.62<nl>BMI＝w\/(h * h)<nl>print(BMI)","out":"w=45.2<nl>h=1.62<nl>BMI=w\/(h * h)<nl>print(BMI)"}
{"in":"class CharRange():<nl><tab>def __init__(self.start,end):<nl><tab><tab>self.start = start<nl><tab><tab>self.end = end<nl><tab><nl><tab>def __iter__(self):<nl><tab><tab>return self<nl><tab><nl><tab>def __next__(self):<nl><tab><tab>if self.start <= self.end:<nl><tab><tab><tab>s = self.start<nl><tab><tab><tab>self.start chr(ord(self.start)+1)<nl><tab><tab><tab>return s<nl><nl><tab><tab>raise StopIteration()","out":"class CharRange():<nl><tab>def __init__(self, start,end):<nl><tab><tab>self.start = start<nl><tab><tab>self.end = end<nl><tab><nl><tab>def __iter__(self):<nl><tab><tab>return self<nl><tab><nl><tab>def __next__(self):<nl><tab><tab>if self.start <= self.end:<nl><tab><tab><tab>s = self.start<nl><tab><tab><tab>self.start chr(ord(self.start)+1)<nl><tab><tab><tab>return s<nl><nl><tab><tab>raise StopIteration()"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>X=int(input())<nl>X=a*100<nl>if a*100<=X:<nl><tab>print('Yes')<nl>else a*100>X:<nl><tab>print('No')","out":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>X=int(input())<nl>X=a*100<nl>if a*100<=X:<nl><tab>print('Yes')<nl>elif a*100>X:<nl><tab>print('No')"}
{"in":"sns.set(context=df['西暦','降水量'])<nl>import seaborn as sns<nl>plt.title('グラフの名称')<nl>plt.show()<nl>plt.show()","out":"sns.set(context=df[['西暦','降水量']])<nl>import seaborn as sns<nl>plt.title('グラフの名称')<nl>plt.show()<nl>plt.show()"}
{"in":"plt.hist(df['スギ花粉飛散量']","out":"plt.hist(df['スギ花粉飛散量'])"}
{"in":"w=44.0<nl>h=1.60<nl>BMI=w\/h＊＊２<nl>print(BMI)","out":"w=44.0<nl>h=1.60<nl>BMI=w\/h**2<nl>print(BMI)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc137\/tasks\/abc137_a<nl><nl>a, b = map(int, input().split())<nl>c=a+b<nl>d=a-b<nl>e=a*b<nl>print(max(c,d,e)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc137\/tasks\/abc137_a<nl><nl>a, b = map(int, input().split())<nl>c=a+b<nl>d=a-b<nl>e=a*b<nl>print(max(c,d,e))"}
{"in":"X=[]<nl>Y=[]<nl>for i in range(1,100);<nl><tab><tab>x = i \/100<nl><tab><tab>X.append(i)<nl><tab><tab>Y.append(calc_pi(i))<nl>plt.plot(X,Y)<nl>plt.xlabel('x')<nl>plt.ylabel('y')<nl>plt.show()","out":"X=[]<nl>Y=[]<nl>for i in range(1,100):<nl><tab><tab>x = i \/100<nl><tab><tab>X.append(i)<nl><tab><tab>Y.append(calc_pi(i))<nl>plt.plot(X,Y)<nl>plt.xlabel('x')<nl>plt.ylabel('y')<nl>plt.show()"}
{"in":"heights = [130,140,150,160,170,180,190,200]<nl>BMI=18<nl>newdata18=[]<nl>for h in weights:<nl><tab> w= BMI*(h**2) <nl><tab> newdata18.appdend(w)<nl>print(heights)<nl>print(newdata18)","out":"heights = [130,140,150,160,170,180,190,200]<nl>BMI=18<nl>newdata18=[]<nl>for h in weights:<nl><tab> w= BMI*(h**2) <nl><tab> newdata18.append(w)<nl>print(heights)<nl>print(newdata18)"}
{"in":"class Jessy:<nl><nl><tab><tab>#ランタイム情報取得・変換<nl><tab><tab># def get_runtime_maps(self):<nl><tab><tab>#<tab><tab> self.runtime_maps = whos()<nl><tab><tab>#<tab><tab> for key, value in self.runtime_maps.items():<nl><tab><tab>#<tab><tab><tab> try:<nl><tab><tab>#<tab><tab><tab><tab> replacements = {'str':'_文字列_','int':'_整数_','function':'_関数_',<nl><tab><tab>#<tab><tab><tab><tab><tab><tab><tab> 'DataFrame':'_データフレーム_','module':'_モジュール_','ndarray':'_配列_','list':'_リスト_'}<nl><tab><tab>#<tab><tab><tab><tab> value = replacements[value]<nl><tab><tab>#<tab><tab><tab><tab> self.runtime_maps[key] = value<nl><tab><tab>#<tab><tab><tab> except:<nl><tab><tab>#<tab><tab><tab><tab> pass<nl><tab><tab>#<tab><tab> #print(self.runtime_maps)<nl><tab><tab>#<tab><tab> return self.runtime_maps<nl><nl><nl><tab><tab>#3.入力→モデルの入力<nl><tab><tab>def before(self, text):<nl><tab><tab><tab><tab>self.dic = {}#前：後<nl><tab><tab><tab><tab>text_list = tokenize(text, maps=)<nl><tab><tab><tab><tab>#print(text_list)<nl><tab><tab><tab><tab> <nl><tab><tab><tab><tab>for word in text_list:<nl><tab><tab><tab><tab><tab>runtime_maps_keys = self.runtime_maps.keys()<nl><tab><tab><tab><tab><tab>if word in runtime_maps_keys:<nl><tab><tab><tab><tab><tab><tab>try:<nl><tab><tab><tab><tab><tab><tab><tab>new_word = self.runtime_maps[word]<nl><tab><tab><tab><tab><tab><tab><tab>text = text.replace(word, new_word)<nl><tab><tab><tab><tab><tab><tab><tab>self.dic[word] = new_word<nl><tab><tab><tab><tab><tab><tab>except:<nl><tab><tab><tab><tab><tab><tab><tab>new_word = self.runtime_maps[word][word]<nl><tab><tab><tab><tab><tab><tab><tab>text = text.replace(word, new_word)<nl><tab><tab><tab><tab><tab><tab><tab>self.dic[word]=new_word<nl><tab><tab><tab><tab><nl><tab><tab><tab><tab>#print(text)<nl><tab><tab><tab><tab>return text<nl><nl><nl><tab><tab>#4.モデルの出力→ユーザへの出力<nl><tab><tab>def after(self, text):<nl><tab><tab><tab><tab><tab>self.dic<nl><tab><tab><tab><tab><tab>for dic_key,dic_value in self.dic.items():<nl><tab><tab><tab><tab><tab><tab>text=text.replace(dic_value,dic_key)<nl><tab><tab><tab><tab><tab>#print(text)<nl><tab><tab><tab><tab><tab>return text","out":"class Jessy:<nl><nl><tab><tab>#ランタイム情報取得・変換<nl><tab><tab># def get_runtime_maps(self):<nl><tab><tab>#<tab><tab> self.runtime_maps = whos()<nl><tab><tab>#<tab><tab> for key, value in self.runtime_maps.items():<nl><tab><tab>#<tab><tab><tab> try:<nl><tab><tab>#<tab><tab><tab><tab> replacements = {'str':'_文字列_','int':'_整数_','function':'_関数_',<nl><tab><tab>#<tab><tab><tab><tab><tab><tab><tab> 'DataFrame':'_データフレーム_','module':'_モジュール_','ndarray':'_配列_','list':'_リスト_'}<nl><tab><tab>#<tab><tab><tab><tab> value = replacements[value]<nl><tab><tab>#<tab><tab><tab><tab> self.runtime_maps[key] = value<nl><tab><tab>#<tab><tab><tab> except:<nl><tab><tab>#<tab><tab><tab><tab> pass<nl><tab><tab>#<tab><tab> #print(self.runtime_maps)<nl><tab><tab>#<tab><tab> return self.runtime_maps<nl><nl><nl><tab><tab>#3.入力→モデルの入力<nl><tab><tab>def before(self, text):<nl><tab><tab><tab><tab>self.dic = {}#前:後<nl><tab><tab><tab><tab>text_list = tokenize(text, maps=)<nl><tab><tab><tab><tab>#print(text_list)<nl><tab><tab><tab><tab> <nl><tab><tab><tab><tab>for word in text_list:<nl><tab><tab><tab><tab><tab>runtime_maps_keys = self.runtime_maps.keys()<nl><tab><tab><tab><tab><tab>if word in runtime_maps_keys:<nl><tab><tab><tab><tab><tab><tab>try:<nl><tab><tab><tab><tab><tab><tab><tab>new_word = self.runtime_maps[word]<nl><tab><tab><tab><tab><tab><tab><tab>text = text.replace(word, new_word)<nl><tab><tab><tab><tab><tab><tab><tab>self.dic[word] = new_word<nl><tab><tab><tab><tab><tab><tab>except:<nl><tab><tab><tab><tab><tab><tab><tab>new_word = self.runtime_maps[word][word]<nl><tab><tab><tab><tab><tab><tab><tab>text = text.replace(word, new_word)<nl><tab><tab><tab><tab><tab><tab><tab>self.dic[word]=new_word<nl><tab><tab><tab><tab><nl><tab><tab><tab><tab>#print(text)<nl><tab><tab><tab><tab>return text<nl><nl><nl><tab><tab>#4.モデルの出力→ユーザへの出力<nl><tab><tab>def after(self, text):<nl><tab><tab><tab><tab><tab>self.dic<nl><tab><tab><tab><tab><tab>for dic_key,dic_value in self.dic.items():<nl><tab><tab><tab><tab><tab><tab>text=text.replace(dic_value,dic_key)<nl><tab><tab><tab><tab><tab>#print(text)<nl><tab><tab><tab><tab><tab>return text"}
{"in":"t = int(input())<nl>ans1 = t**2 + 2*t +3<nl>print(abs1)<nl>ans2 = 3 + t<nl>ans3 = (ans2)**2 + 2*(ans2) + 3<nl>ans4 = (ans3)**2 + 2*(ans3) + 3<nl>ans5 = (ans4+ans4)**2 + 2*(ans4+ans4) + 3<nl>print(ans5)","out":"t = int(input())<nl>ans1 = t**2 + 2*t +3<nl>print(ans1)<nl>ans2 = 3 + t<nl>ans3 = (ans2)**2 + 2*(ans2) + 3<nl>ans4 = (ans3)**2 + 2*(ans3) + 3<nl>ans5 = (ans4+ans4)**2 + 2*(ans4+ans4) + 3<nl>print(ans5)"}
{"in":"こぎーくん","out":"#こぎーくん"}
{"in":"limit(x**X,x,0)","out":"limit(x**x,x,0)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl>A, B = map(int, input().split())<nl>C = (A−B)\/3 + B","out":"#kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl>A, B = map(int, input().split())<nl>C = (A-B)\/3 + B"}
{"in":"X = df[['交通']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(6,6))<nl>plt.scatter(y,y_predf, color='red',alpha=0.3)<nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0,50)<nl>r2=r2_score(y,y_pred)<nl>print('決定係数(R2):', r2)","out":"X = df[['交通']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(6,6))<nl>plt.scatter(y,y_pred, color='red',alpha=0.3)<nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0,50)<nl>r2=r2_score(y,y_pred)<nl>print('決定係数(R2):', r2)"}
{"in":"f['name_num']=df['remarks'].map({<nl><tab><tab>'メンチカツ':1,<nl><tab><tab>'タンドリーチキン':0,<nl><tab><tab>'手作りロースカツ':1,<nl><tab><tab>'鶏の唐揚げおろしソース':3,<nl><tab><tab>'回鍋肉':2,<nl><tab><tab>'マーボ豆腐':2,<nl><tab><tab>'肉じゃが':3,<nl><tab><tab>'酢豚':2,<nl><tab><tab>'キーマカレー':0,<nl><tab><tab>'チンジャオロース':2,<nl><tab><tab>'チキンカレー':0,<nl><tab><tab>'鶏の味噌漬け焼き':3,<nl><tab><tab>'手作りひれかつ':1,<nl><tab><tab>'ポークカレー':0,<nl><tab><tab>'鶏のカッシュナッツ炒め':2,<nl><tab><tab>'ロース甘味噌焼き':3,<nl><tab><tab>'ハンバーグカレーソース':0, <nl><tab><tab>'青椒肉絲':2,<nl><tab><tab>'手作りチキンカツ':1,<nl><tab><tab>'鶏チリソース':2, <nl><tab><tab>'ボローニャ風カツ':1,<nl><tab><tab>'マーボ茄子':2,<nl><tab><tab>'ハンバーグデミソース':1,<nl><tab><tab>'手作りヒレカツ':1,<nl><tab><tab>'カレイ唐揚げ野菜餡かけ':3,<nl><tab><tab>'たっぷりベーコンフライ':1,<nl><tab><tab>'エビフライ':1,<nl><tab><tab>'豚すき焼き':3,<nl><tab><tab>'牛肉ニンニクの芽炒め':4,<nl><tab><tab>'白身魚フライ':1,<nl><tab><tab>'豚冷シャブ野菜添え':3,<nl><tab><tab>'鶏のから揚げねぎ塩炒めソース':1,<nl><tab><tab>'アジ唐揚げ南蛮ソース':3,<nl><tab><tab>'プルコギ':2,<nl><tab><tab>'チキンのコーンクリーム焼き':1,<nl><tab><tab>'かじきの甘辛煮':3,<nl><tab><tab>'鶏のトマトシチュー':1,<nl><tab><tab>'豚の冷しゃぶ':3,<nl><tab><tab>'和風ハンバーグ':3,<nl><tab><tab>'手作りトンカツ':1,<nl><tab><tab>'白身魚ムニエル':1,<nl><tab><tab>'牛すき焼き風':3,<nl><tab><tab>'カレイ唐揚げ夏野菜あん':3,<nl><tab><tab>'ポークソテー韓国ソース':2,<nl><tab><tab>'鶏の塩から揚げ':3,<nl><tab><tab>'牛丼':3,<nl><tab><tab>'八宝菜':2,<nl><tab><tab>'炊き込みご飯':3,<nl><tab><tab>'キスと野菜の天ぷら':3,<nl><tab><tab>'チャプチェ':2,<nl><tab><tab>'豚肉の生姜焼き':3,<nl><tab><tab>'ジャンボチキンカツ':1,<nl><tab><tab>'豚肉の胡麻シャブ':3,<nl><tab><tab>'ビーフシチュー':1,<nl><tab><tab>'名古屋味噌カツ':3,<nl><tab><tab>'親子煮':3,<nl><tab><tab>'チキンステーキ・きのこソース':1,<nl><tab><tab>'鶏肉の山賊焼き':3,<nl><tab><tab>'ぶりレモンペッパー焼き':1,<nl><tab><tab>'チーズメンチカツ':1,<nl><tab><tab>'チキンフリカッセ':1,<nl><tab><tab>'カレイ唐揚げ 甘酢あん':3,<nl><tab><tab>'厚切イカフライ':3,<nl><tab><tab>'筑前煮':3,<nl><tab><tab>'白身魚のマスタード焼き':1,<nl><tab><tab>'牛カルビ焼き肉':2,<nl><tab><tab>'ランチビュッフェ':4,<nl><tab><tab>'豚肉と玉子の炒め':1,<nl><tab><tab>'チキンの辛味噌焼き':3,<nl><tab><tab>'カレイの唐揚げ':3,<nl><tab><tab>'ひやしたぬきうどん・炊き込みご飯':3,<nl><tab><tab>'白身魚の南部焼き':3,<nl><tab><tab>'豚肉のマスタード焼き':1,<nl><tab><tab>'バーベキューチキン':1,<nl><tab><tab>'鶏のから揚げスイートチリソース':1,<nl><tab><tab>'ハンバーグケッチャップソース':1,<nl><tab><tab>'ハンバーグ（デミきのこバター）':1,<nl><tab><tab>'鶏肉のカレー唐揚':0,<nl><tab><tab>'豚キムチ炒め':2,<nl><tab><tab>'チキン香草焼きマスタードソース':1,<nl><tab><tab>'サーモンフライ・タルタル':1,<nl><tab><tab>'厚切ハムカツ':1,<nl><tab><tab>'洋食屋さんのメンチカツ':1,<nl><tab><tab>'牛スキヤキ':3,<nl><tab><tab>'豚ロースのピザ風チーズ焼き':1,<nl><tab><tab>'チキン南蛮':3,<nl><tab><tab>'ロコモコ丼':1,<nl><tab><tab>'ゴーヤチャンプルー':3,<nl><tab><tab>'厚切りイカフライ':1,<nl><tab><tab>'いか天ぷら':3,<nl><tab><tab>'ホタテクリ―ムシチュー':1,<nl><tab><tab>'さわら焼味噌掛け':3,<nl><tab><tab>'メダイ照り焼':3,<nl><tab><tab>'鶏の唐揚げ':3,<nl><tab><tab>'チーズ入りメンチカツ':1,<nl><tab><tab>'海老フライタルタル':1,<nl><tab><tab>'鶏のレモンペッパー焼orカレー':0,<nl><tab><tab>'手作りひれかつとカレー':0,<nl><tab><tab>'サバ焼味噌掛け':3,<nl><tab><tab>'ジューシーメンチカツ':1,<nl><tab><tab>'さんま辛味焼':3,<nl><tab><tab>'鶏の照り焼きマスタード':1,<nl><tab><tab>'豚肉の生姜焼':3,<nl><tab><tab>'カレー入りソーセージカツ':0,<nl><tab><tab>'手ごね風ハンバーグ':3,<nl><tab><tab>'さっくりメンチカツ':1,<nl><tab><tab>'鶏の唐揚げ甘酢あん':3,<nl><tab><tab>'ポーク味噌焼き':3,<nl><tab><tab>'カキフライタルタル':1,<nl><tab><tab>'五目御飯':3,<nl><tab><tab>'やわらかロースのサムジョン':4,<nl><tab><tab>'クリームチーズ入りメンチ':1,<nl><tab><tab>'厚揚げ豚生姜炒め':3,<nl><tab><tab>'タルタルinソーセージカツ':1,<nl><tab><tab>'ハンバーグ':1,<nl><tab><tab>'豚のスタミナ炒め':3,<nl><tab><tab>'鶏の唐揚':3,<nl><tab><tab>'ビッグメンチカツ':1,<nl><tab><tab>'若鶏ピリ辛焼':1,<nl><tab><tab>'白身魚唐揚げ野菜あん':3,<nl><tab><tab>'鶏のピリ辛焼き':1,<nl><tab><tab>'ますのマスタードソース':1,<nl><tab><tab>'牛肉すき焼き風':3,<nl><tab><tab>'海老フライとホタテ串カツ':1,<nl><tab><tab>'牛肉コロッケ':1,<nl><tab><tab>'サーモンのムニエル2色ソース':1,<nl><tab><tab>'チーズハンバーグ':1,<nl><tab><tab>'豚肉と茄子のピリ辛炒め':2,<nl><tab><tab>'白身魚唐揚げ野菜餡かけ':3,<nl><tab><tab>'きのこソースハンバーグ':1,<nl><tab><tab>'鶏の天ぷら':3,<nl><tab><tab>'豚味噌メンチカツ':3,<nl><tab><tab>'中華丼':2,<nl><tab><tab>'鶏の照り焼きマヨ':3,<nl><tab><tab>'牛肉筍煮':3,<nl><tab><tab>'牛丼風煮':3,<nl><tab><tab>'ポーク生姜焼き':3,<nl><tab><tab>'ビーフトマト煮':1,<nl><tab><tab>'肉団子のシチュー':1,<nl><tab><tab>'青梗菜牛肉炒め':2,<nl><tab><tab>'和風ソースハンバーグ':3,<nl><tab><tab>'肉団子クリームシチュー':1,<nl><tab><tab>'鶏の親子煮':3,<nl><tab><tab>'越冬キャベツのメンチカツ':1,<nl><tab><tab>'チーズ入りハンバーグ':1,<nl><tab><tab>'カレイ野菜あんかけ':2,<nl><tab><tab>'ビーフカレー':0,<nl><tab><tab>'海老クリーミ―クノーデル':1,<nl><tab><tab>'チキンクリームシチュー':1,<nl><tab><tab>'白身魚唐揚げ野菜あんかけ':2,<nl><tab><tab>'ポークハヤシ':1,<nl><tab><tab>'酢豚orカレー':0,<nl><tab><tab>'ハンバーグ和風きのこソース':1,<nl><tab><tab>'鶏肉とカシューナッツ炒め':4<nl>})","out":"df['name_num']=df['remarks'].map({<nl><tab><tab>'メンチカツ':1,<nl><tab><tab>'タンドリーチキン':0,<nl><tab><tab>'手作りロースカツ':1,<nl><tab><tab>'鶏の唐揚げおろしソース':3,<nl><tab><tab>'回鍋肉':2,<nl><tab><tab>'マーボ豆腐':2,<nl><tab><tab>'肉じゃが':3,<nl><tab><tab>'酢豚':2,<nl><tab><tab>'キーマカレー':0,<nl><tab><tab>'チンジャオロース':2,<nl><tab><tab>'チキンカレー':0,<nl><tab><tab>'鶏の味噌漬け焼き':3,<nl><tab><tab>'手作りひれかつ':1,<nl><tab><tab>'ポークカレー':0,<nl><tab><tab>'鶏のカッシュナッツ炒め':2,<nl><tab><tab>'ロース甘味噌焼き':3,<nl><tab><tab>'ハンバーグカレーソース':0, <nl><tab><tab>'青椒肉絲':2,<nl><tab><tab>'手作りチキンカツ':1,<nl><tab><tab>'鶏チリソース':2, <nl><tab><tab>'ボローニャ風カツ':1,<nl><tab><tab>'マーボ茄子':2,<nl><tab><tab>'ハンバーグデミソース':1,<nl><tab><tab>'手作りヒレカツ':1,<nl><tab><tab>'カレイ唐揚げ野菜餡かけ':3,<nl><tab><tab>'たっぷりベーコンフライ':1,<nl><tab><tab>'エビフライ':1,<nl><tab><tab>'豚すき焼き':3,<nl><tab><tab>'牛肉ニンニクの芽炒め':4,<nl><tab><tab>'白身魚フライ':1,<nl><tab><tab>'豚冷シャブ野菜添え':3,<nl><tab><tab>'鶏のから揚げねぎ塩炒めソース':1,<nl><tab><tab>'アジ唐揚げ南蛮ソース':3,<nl><tab><tab>'プルコギ':2,<nl><tab><tab>'チキンのコーンクリーム焼き':1,<nl><tab><tab>'かじきの甘辛煮':3,<nl><tab><tab>'鶏のトマトシチュー':1,<nl><tab><tab>'豚の冷しゃぶ':3,<nl><tab><tab>'和風ハンバーグ':3,<nl><tab><tab>'手作りトンカツ':1,<nl><tab><tab>'白身魚ムニエル':1,<nl><tab><tab>'牛すき焼き風':3,<nl><tab><tab>'カレイ唐揚げ夏野菜あん':3,<nl><tab><tab>'ポークソテー韓国ソース':2,<nl><tab><tab>'鶏の塩から揚げ':3,<nl><tab><tab>'牛丼':3,<nl><tab><tab>'八宝菜':2,<nl><tab><tab>'炊き込みご飯':3,<nl><tab><tab>'キスと野菜の天ぷら':3,<nl><tab><tab>'チャプチェ':2,<nl><tab><tab>'豚肉の生姜焼き':3,<nl><tab><tab>'ジャンボチキンカツ':1,<nl><tab><tab>'豚肉の胡麻シャブ':3,<nl><tab><tab>'ビーフシチュー':1,<nl><tab><tab>'名古屋味噌カツ':3,<nl><tab><tab>'親子煮':3,<nl><tab><tab>'チキンステーキ・きのこソース':1,<nl><tab><tab>'鶏肉の山賊焼き':3,<nl><tab><tab>'ぶりレモンペッパー焼き':1,<nl><tab><tab>'チーズメンチカツ':1,<nl><tab><tab>'チキンフリカッセ':1,<nl><tab><tab>'カレイ唐揚げ 甘酢あん':3,<nl><tab><tab>'厚切イカフライ':3,<nl><tab><tab>'筑前煮':3,<nl><tab><tab>'白身魚のマスタード焼き':1,<nl><tab><tab>'牛カルビ焼き肉':2,<nl><tab><tab>'ランチビュッフェ':4,<nl><tab><tab>'豚肉と玉子の炒め':1,<nl><tab><tab>'チキンの辛味噌焼き':3,<nl><tab><tab>'カレイの唐揚げ':3,<nl><tab><tab>'ひやしたぬきうどん・炊き込みご飯':3,<nl><tab><tab>'白身魚の南部焼き':3,<nl><tab><tab>'豚肉のマスタード焼き':1,<nl><tab><tab>'バーベキューチキン':1,<nl><tab><tab>'鶏のから揚げスイートチリソース':1,<nl><tab><tab>'ハンバーグケッチャップソース':1,<nl><tab><tab>'ハンバーグ(デミきのこバター)':1,<nl><tab><tab>'鶏肉のカレー唐揚':0,<nl><tab><tab>'豚キムチ炒め':2,<nl><tab><tab>'チキン香草焼きマスタードソース':1,<nl><tab><tab>'サーモンフライ・タルタル':1,<nl><tab><tab>'厚切ハムカツ':1,<nl><tab><tab>'洋食屋さんのメンチカツ':1,<nl><tab><tab>'牛スキヤキ':3,<nl><tab><tab>'豚ロースのピザ風チーズ焼き':1,<nl><tab><tab>'チキン南蛮':3,<nl><tab><tab>'ロコモコ丼':1,<nl><tab><tab>'ゴーヤチャンプルー':3,<nl><tab><tab>'厚切りイカフライ':1,<nl><tab><tab>'いか天ぷら':3,<nl><tab><tab>'ホタテクリ―ムシチュー':1,<nl><tab><tab>'さわら焼味噌掛け':3,<nl><tab><tab>'メダイ照り焼':3,<nl><tab><tab>'鶏の唐揚げ':3,<nl><tab><tab>'チーズ入りメンチカツ':1,<nl><tab><tab>'海老フライタルタル':1,<nl><tab><tab>'鶏のレモンペッパー焼orカレー':0,<nl><tab><tab>'手作りひれかつとカレー':0,<nl><tab><tab>'サバ焼味噌掛け':3,<nl><tab><tab>'ジューシーメンチカツ':1,<nl><tab><tab>'さんま辛味焼':3,<nl><tab><tab>'鶏の照り焼きマスタード':1,<nl><tab><tab>'豚肉の生姜焼':3,<nl><tab><tab>'カレー入りソーセージカツ':0,<nl><tab><tab>'手ごね風ハンバーグ':3,<nl><tab><tab>'さっくりメンチカツ':1,<nl><tab><tab>'鶏の唐揚げ甘酢あん':3,<nl><tab><tab>'ポーク味噌焼き':3,<nl><tab><tab>'カキフライタルタル':1,<nl><tab><tab>'五目御飯':3,<nl><tab><tab>'やわらかロースのサムジョン':4,<nl><tab><tab>'クリームチーズ入りメンチ':1,<nl><tab><tab>'厚揚げ豚生姜炒め':3,<nl><tab><tab>'タルタルinソーセージカツ':1,<nl><tab><tab>'ハンバーグ':1,<nl><tab><tab>'豚のスタミナ炒め':3,<nl><tab><tab>'鶏の唐揚':3,<nl><tab><tab>'ビッグメンチカツ':1,<nl><tab><tab>'若鶏ピリ辛焼':1,<nl><tab><tab>'白身魚唐揚げ野菜あん':3,<nl><tab><tab>'鶏のピリ辛焼き':1,<nl><tab><tab>'ますのマスタードソース':1,<nl><tab><tab>'牛肉すき焼き風':3,<nl><tab><tab>'海老フライとホタテ串カツ':1,<nl><tab><tab>'牛肉コロッケ':1,<nl><tab><tab>'サーモンのムニエル2色ソース':1,<nl><tab><tab>'チーズハンバーグ':1,<nl><tab><tab>'豚肉と茄子のピリ辛炒め':2,<nl><tab><tab>'白身魚唐揚げ野菜餡かけ':3,<nl><tab><tab>'きのこソースハンバーグ':1,<nl><tab><tab>'鶏の天ぷら':3,<nl><tab><tab>'豚味噌メンチカツ':3,<nl><tab><tab>'中華丼':2,<nl><tab><tab>'鶏の照り焼きマヨ':3,<nl><tab><tab>'牛肉筍煮':3,<nl><tab><tab>'牛丼風煮':3,<nl><tab><tab>'ポーク生姜焼き':3,<nl><tab><tab>'ビーフトマト煮':1,<nl><tab><tab>'肉団子のシチュー':1,<nl><tab><tab>'青梗菜牛肉炒め':2,<nl><tab><tab>'和風ソースハンバーグ':3,<nl><tab><tab>'肉団子クリームシチュー':1,<nl><tab><tab>'鶏の親子煮':3,<nl><tab><tab>'越冬キャベツのメンチカツ':1,<nl><tab><tab>'チーズ入りハンバーグ':1,<nl><tab><tab>'カレイ野菜あんかけ':2,<nl><tab><tab>'ビーフカレー':0,<nl><tab><tab>'海老クリーミ―クノーデル':1,<nl><tab><tab>'チキンクリームシチュー':1,<nl><tab><tab>'白身魚唐揚げ野菜あんかけ':2,<nl><tab><tab>'ポークハヤシ':1,<nl><tab><tab>'酢豚orカレー':0,<nl><tab><tab>'ハンバーグ和風きのこソース':1,<nl><tab><tab>'鶏肉とカシューナッツ炒め':4<nl>})"}
{"in":"h=160\/100<nl>for weights in [40, 45, 50, 55, 60, 65, 70] :<nl><tab><tab>BMI = weights \/ h ** 2<nl><tab><tab>if BMI < 18.5 :<nl><tab><tab><tab><tab>print(f'BMIは{BMI:.1f}です。低体重です。')<nl><tab><tab>elif BMI 18.5 < BMI <25 :<nl><tab><tab><tab><tab>print(f\"BMIは{BMI:.1f}です。標準体重です。\")<nl><tab><tab>elif BMI BMI >= 25 :<nl><tab><tab><tab><tab>print(f\"BMIは{BMI:.1f}です。肥満です。\")","out":"h=160\/100<nl>for weights in [40, 45, 50, 55, 60, 65, 70] :<nl><tab><tab>BMI = weights \/ h ** 2<nl><tab><tab>if BMI < 18.5 :<nl><tab><tab><tab><tab>print(f'BMIは{BMI:.1f}です。低体重です。')<nl><tab><tab>elif 18.5 < BMI <25 :<nl><tab><tab><tab><tab>print(f\"BMIは{BMI:.1f}です。標準体重です。\")<nl><tab><tab>elif BMI >= 25 :<nl><tab><tab><tab><tab>print(f\"BMIは{BMI:.1f}です。肥満です。\")"}
{"in":"pollen=df.read_csv('pollen.csv')<nl>df.head()","out":"df = pd.read_csv('pollen.csv')<nl>df.head()"}
{"in":"train.csv['Survived'].groupby(train.csv['Ticket'].map(lambda x: str(x)[0])).agg(['mean','count'])","out":"train['Survived'].groupby(train.csv['Ticket'].map(lambda x: str(x)[0])).agg(['mean','count'])"}
{"in":"import math<nl><nl>for w in range(40, 100. 5):<nl><tab><tab>h = math.sqrt( w \/ 22.0)<nl><tab><tab>print('体重:', w, '身長:', h)","out":"import math<nl><nl>for w in range(40, 100, 5):<nl><tab><tab>h = math.sqrt( w \/ 22.0)<nl><tab><tab>print('体重:', w, '身長:', h)"}
{"in":"df_soccer = read_csv(\"Jリーグ選手身長体重.csv\")<nl>df_soccer","out":"df_soccer = pd.read_csv(\"Jリーグ選手身長体重.csv\")<nl>df_soccer"}
{"in":"d = 20060720<nl>　while d => 10: #2桁の時は繰り返す<nl>D = List(map(int,str(d)))<nl>print(D)<nl>d = sum(D)<nl>print(d)<nl>if d == 11 or d == 22 or d == 33 or d== 44:<nl><tab>break #条件を満たしたらループを抜ける<nl><tab> <nl>print(\"ソールナンバー：，ⅾ\")","out":"d = 20060720<nl><tab>while d => 10: #2桁の時は繰り返す<nl>D = List(map(int,str(d)))<nl>print(D)<nl>d = sum(D)<nl>print(d)<nl>if d == 11 or d == 22 or d == 33 or d== 44:<nl><tab>break #条件を満たしたらループを抜ける<nl><tab> <nl>print(\"ソールナンバー:,ⅾ\")"}
{"in":"X = df[['通勤時間']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression(x)<nl>plt.figure(figsize=(6,6))<nl>plt.xlabel('実装')<nl>plt.ylabel('予想')<nl>plt.ylin(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R２)：', r2)<nl>model.fit(X, y)","out":"X = df[['通勤時間']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression(x)<nl>plt.figure(figsize=(6,6))<nl>plt.xlabel('実装')<nl>plt.ylabel('予想')<nl>plt.ylin(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)<nl>model.fit(X, y)"}
{"in":"name = str(input('enter your name >> '))<nl>float(input('enter your weight by cm >> ')) = height<nl>float(input('enter your height by kg >> ')) = weight","out":"name = str(input('enter your name >> '))<nl>height = float(input('enter your weight by cm >> ')) <nl>weight = float(input('enter your height by kg >> '))"}
{"in":"def g(x):<nl><tab><tab>if x　==x : return g(x)<nl><tab><tab>else : return 1 + d(x\/\/10)","out":"def g(x):<nl><tab><tab>if x<tab>==x : return g(x)<nl><tab><tab>else : return 1 + d(x\/\/10)"}
{"in":"df=df.read_csv('pollen.csv')<nl>df.head()","out":"df=pd.read_csv('pollen.csv')<nl>df.head()"}
{"in":"class Counter(object):<nl><tab> counter: int<nl><tab> def __init__(self):<nl><tab><tab><tab> self.counter=0<nl><tab> def count(self): #動詞＋目的語<nl><tab><tab><tab> self.counter +=1<nl><tab> def reset(self):<nl><tab><tab> self.counter=0<nl><tab> def show(self):<nl><tab><tab><tab> print(self.counter)<nl><tab> def __repr__(self):<nl><tab><tab><tab> return f'counter: [self.counter']","out":"class Counter(object):<nl><tab> counter: int<nl><tab> def __init__(self):<nl><tab><tab><tab> self.counter=0<nl><tab> def count(self): #動詞+目的語<nl><tab><tab><tab> self.counter +=1<nl><tab> def reset(self):<nl><tab><tab> self.counter=0<nl><tab> def show(self):<nl><tab><tab><tab> print(self.counter)<nl><tab> def __repr__(self):<nl><tab><tab><tab> return f'counter: {self.counter}'"}
{"in":"<nl>N, X = map(int,input().split())<nl>S = input()<nl>o=0<nl>x=1<nl><nl>for i in N:<nl><tab>if S[0]==o:<nl><tab><tab>X=+1<nl><tab>else:<nl><tab><tab>X=-1<nl><tab>N=+1<nl>print(X)","out":"<nl>N, X = map(int,input().split())<nl>S = input()<nl>o=0<nl>x=1<nl><nl>for i in range(N):<nl><tab>if S[0]==o:<nl><tab><tab>X=+1<nl><tab>else:<nl><tab><tab>X=-1<nl><tab>N=+1<nl>print(X)"}
{"in":"w＝ 42<nl>h= 1.58<nl>BMI = w \/ (h * h)<nl><nl>print(BMI)","out":"w= 42<nl>h= 1.58<nl>BMI = w \/ (h * h)<nl><nl>print(BMI)"}
{"in":"h,w=map(int,input().split())<nl>b=[]<nl>for i in range(h):<nl><tab>a=list(map(int,input().split()))<nl><tab>b+=a<nl>b_min=min(b)<nl>b.sorted<nl>print(b_min)","out":"h,w=map(int,input().split())<nl>b=[]<nl>for i in range(h):<nl><tab>a=list(map(int,input().split()))<nl><tab>b+=a<nl>b_min=min(b)<nl>b=sorted(b)<nl>print(b_min)"}
{"in":"y_pred = model.predict(X_test","out":"y_pred = model.predict(X_test)"}
{"in":"if BMI>25.00:<nl>｝<tab>print('太りすぎ')<nl>else:<nl><tab>print('太りすぎでない')<nl>if BMI<18.50:<nl><tab>print('やせすぎです')","out":"if BMI>25.00:<nl><tab>print('太りすぎ')<nl>else:<nl><tab>print('太りすぎでない')<nl>if BMI<18.50:<nl><tab>print('やせすぎです')"}
{"in":"plt.figure(figsize=15, 15)<nl>plt.scatter(df['部屋数'], df['住宅価格'], alpha=0.5)<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()","out":"plt.figure(figsize=(15, 15))<nl>plt.scatter(df['部屋数'], df['住宅価格'], alpha=0.5)<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()"}
{"in":"M=8　#列数<nl>N=5　#行数<nl>lives=np.random.randint(0,2,M*N)<nl>lives=lives.reshape(M,N)","out":"M=8<tab>#列数<nl>N=5<tab>#行数<nl>lives=np.random.randint(0,2,M*N)<nl>lives=lives.reshape(M,N)"}
{"in":"for colum<tab>in df.columns[:-1]:<nl><tab>X = df[[column]]<nl><tab>y = df['住宅価格']<nl><nl><tab>model = LinearRegression()<nl><tab>model.fit(X, y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print('決定係数(R2):', r2)<nl><nl>","out":"for column<tab>in df.columns[:-1]:<nl><tab>X = df[[column]]<nl><tab>y = df['住宅価格']<nl><nl><tab>model = LinearRegression()<nl><tab>model.fit(X, y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print('決定係数(R2):', r2)<nl><nl>"}
{"in":"class Animal(object):<nl><tab>def face(self):<nl><tab><tab>return \"🐽\"<nl><tab>def sound(self):<nl><tab><tab>return \"ギャギャ\"<nl><tab>def leg(self):<nl><tab><tab>return 4<nl><nl>class Sheep(Animal):<nl><tab>def __repr__(self):<nl><tab><tab>return '🐑'<nl><tab>def sound(self): #Override<nl><tab><tab>return \"メェ～\"<nl><nl>class Dog(Animal):<nl><tab>def __repr__(self):<nl><tab><tab>return f'🐕 {self.name}'<nl><tab>def face(self):<nl><tab><tab>return \"🐶\"<nl><tab>def sound(self):<nl><tab><tab>return \"バウワウ\" #ISOスタンダード<nl><nl><nl>a= Sheep()<nl>a<nl>dog=Dog('ピキ')","out":"class Animal(object):<nl><tab>def face(self):<nl><tab><tab>return \"🐽\"<nl><tab>def sound(self):<nl><tab><tab>return \"ギャギャ\"<nl><tab>def leg(self):<nl><tab><tab>return 4<nl><nl>class Sheep(Animal):<nl><tab>def __repr__(self):<nl><tab><tab>return '🐑'<nl><tab>def sound(self): #Override<nl><tab><tab>return \"メェ~\"<nl><nl>class Dog(Animal):<nl><tab>def __repr__(self):<nl><tab><tab>return f'🐕 {self.name}'<nl><tab>def face(self):<nl><tab><tab>return \"🐶\"<nl><tab>def sound(self):<nl><tab><tab>return \"バウワウ\" #ISOスタンダード<nl><nl><nl>a= Sheep()<nl>a<nl>dog=Dog('ピキ')"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc231\/tasks\/abc231_a<nl><nl> A, B = map(int, input(), split())<nl><nl> print((D\/A)*100)<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc231\/tasks\/abc231_a<nl><nl>A, B = map(int, input().split())<nl><nl>print((D\/A)*100)<nl>"}
{"in":"𝚆=65.0<nl>h","out":"W=65.0<nl>h"}
{"in":"sns.set(font=\"IPAexGothic\")<tab># 文字化けしたら<nl>sns.countplot(x='G3',hue='性別', data=df, color=\"#ffadad\",\"#87CEFA\")<nl>plt.title('性別ごとの成績分布')<nl>plt.xlabel('G3')<nl>plt.ylabel('Count')<nl>plt.show()","out":"sns.set(font=\"IPAexGothic\")<tab># 文字化けしたら<nl>sns.countplot(x='G3',hue='性別', data=df, color=\"#ffadad\")<nl>plt.title('性別ごとの成績分布')<nl>plt.xlabel('G3')<nl>plt.ylabel('Count')<nl>plt.show()"}
{"in":"<nl>s=input()<nl>A='er'<nl>if s.endswith(A):<nl><tab>print(er)<nl>else:<nl><tab>print(ist)","out":"<nl>s=input()<nl>A='er'<nl>if s.endswith(A):<nl><tab>print(\"er\")<nl>else:<nl><tab>print(\"ist\")"}
{"in":"for i,x in enumerate(InfiniteZero()):<nl><tab>print(i,x)<nl><tab>if i > 100;<nl><tab>break","out":"for i,x in enumerate(InfiniteZero()):<nl><tab>print(i,x)<nl><tab>if i > 100:<nl><tab><tab>break"}
{"in":"if BMI > 25.00 :<nl><tab><tab>print('太りすぎ')＃インデント<nl>else:<nl><tab> print('太りすぎではない')","out":"if BMI > 25.00 :<nl><tab><tab>print('太りすぎ')#インデント<nl>else:<nl><tab> print('太りすぎではない')"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc274\/tasks\/abc274_b<nl><nl>h,w = map(int, input().split())<nl>c = [list(map(int, input().split())) for _ in range(n)] <nl>s=[]<nl><nl>for i in range(w):<nl><tab>for j in range(h):<nl><tab><tab>print(c[i][j])","out":"#kogi https:\/\/atcoder.jp\/contests\/abc274\/tasks\/abc274_b<nl><nl>h,w = map(int, input().split())<nl>c = [list(map(int, input().split())) for<tab>in range(n)] <nl>s=[]<nl><nl>for i in range(w):<nl><tab>for j in range(h):<nl><tab><tab>print(c[i][j])"}
{"in":"plt.hist(df['G3',bins=20])<nl>plt.show()","out":"plt.hist(df['G3'],bins=20)<nl>plt.show()"}
{"in":"<nl>S = input()<nl>N = input()<nl><nl>a=[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z]<nl>i = len(S)<nl><nl>for i in range():<nl><tab><tab>S.replace('S[i]','a[i+N\/26]')<nl><nl>print(S)<nl><nl>","out":"<nl>S = input()<nl>N = input()<nl><nl>a=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"<nl>i = len(S)<nl><nl>for i in range():<nl><tab><tab>S.replace('S[i]','a[i+N\/26]')<nl><nl>print(S)<nl><nl>"}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc277\/tasks\/abc277_a<nl>N,X=map(int,input().split())<nl>P=list(map(int,input().split())<nl>print(P)<nl><nl>print(P.index(X))","out":"# kogi https:\/\/atcoder.jp\/contests\/abc277\/tasks\/abc277_a<nl>N,X=map(int,input().split())<nl>P=list(map(int,input().split()))<nl>print(P)<nl><nl>print(P.index(X))"}
{"in":"if BMI > 25.00 :<nl><tab>print('太り過ぎ')<nl><tab>else :<nl><tab><tab>print('太り過ぎでない')","out":"if BMI > 25.00 :<nl><tab>print('太り過ぎ')<nl>else :<nl><tab>print('太り過ぎでない')"}
{"in":"a = ferelibenterhominesidquodvoluntcredunt<nl>print(len(a))","out":"a = \"ferelibenterhominesidquodvoluntcredunt\"<nl>print(len(a))"}
{"in":"for column in df.columns[:-1]:<nl><tab>print(column)<nl><tab>X = df[column,'低所得率']<tab># ひとつ選ぶ<nl><tab>y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fit(X, y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print('決定係数(R2):', r2)","out":"for column in df.columns[:-1]:<nl><tab>print(column)<nl><tab>X = df[[column,'低所得率']]<tab># ひとつ選ぶ<nl><tab>y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fit(X, y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print('決定係数(R2):', r2)"}
{"in":"def show(lives):<nl><tab><tab>N, M = lives.shape<nl><tab><tab>for x in range(M):<nl><tab><tab><tab>print('🎃',end='')<nl>shoe(lives)","out":"def show(lives):<nl><tab><tab>N, M = lives.shape<nl><tab><tab>for x in range(M):<nl><tab><tab><tab>print('🎃',end='')<nl>show(lives)"}
{"in":"N=int(input())<nl>S=list(map(int,input().split()))<nl>M=max(S)<nl><nl>A=[]<nl>for a in range(1,1001):<nl><tab>for b in range(a,1001):<nl><tab><tab>x=4*a*b+3(a+b)<nl><tab><tab>A.append(x)<nl><nl>print(A)<nl><nl>","out":"N=int(input())<nl>S=list(map(int,input().split()))<nl>M=max(S)<nl><nl>A=[]<nl>for a in range(1,1001):<nl><tab>for b in range(a,1001):<nl><tab><tab>x=4*a*b+3*(a+b)<nl><tab><tab>A.append(x)<nl><nl>print(A)<nl><nl>"}
{"in":"w=61.0<nl>h=1.79<nl>BMI=w\/(h**)<nl><nl>print(BMI) #表示されます　＃朔間零のBMIだよ　","out":"w=61.0<nl>h=1.79<nl>BMI=w\/(h**)<nl><nl>print(BMI) #表示されます<tab>#朔間零のBMIだよ<tab>"}
{"in":"pearsonr(df['部屋数'],df['住宅価格'])<nl>print('相関係数':,rho)<nl>print('p値':,p)","out":"r,p = pearsonr(df['部屋数'],df['住宅価格'])<nl>print('相関係数:',r)<nl>print('p値:',p)"}
{"in":"A,B=map(int,input().split)<nl>c=1<nl>d=0<nl>while c<B:<nl><tab>c+=A-1<nl><tab>d+=1<nl>print(d)<nl>","out":"A,B=map(int,input().split())<nl>c=1<nl>d=0<nl>while c<B:<nl><tab>c+=A-1<nl><tab>d+=1<nl>print(d)<nl>"}
{"in":"ｗ　＝４６．６<nl>ｈ　＝１．６１<nl>BMI　＝ｗ／（ｈ＊＊２）","out":"w<tab>=46.6<nl>h<tab>=1.61<nl>BMI<tab>=w\/(h**2)"}
{"in":"平均値＝df['通勤'].mean()","out":"平均値=df['通勤'].mean()"}
{"in":"x=0<nl>flag=1<nl>for a in range(1,100002):<nl><tab>if :<nl><tab><tab>x+=1\/a<nl><tab>else:<nl><tab><tab>x+=-1\/a<nl>print(4*(1-x))","out":"x=0<nl>flag=1<nl>for a in range(1,100002):<nl><tab>if :<nl>x+=1\/a<nl><tab>else:<nl><tab><tab>x+=-1\/a<nl>print(4*(1-x))"}
{"in":"for x in data:<nl>x=5<nl>if x % 2==0:<nl><tab>print(\"偶数\",x)<nl>else:<nl><tab>print(\"奇数\",x)","out":"for x in data:<nl><tab>x=5<nl><tab>if x % 2==0:<nl><tab><tab>print(\"偶数\",x)<nl><tab>else:<nl><tab><tab>print(\"奇数\",x)"}
{"in":"for colum in dfb.columns[:-1]:<nl><tab>X = df[[column]]<nl><tab>y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fit(X, y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print(f'[column]決定係数(R2):', r2)","out":"for colum in df.columns[:-1]:<nl><tab>X = df[[column]]<nl><tab>y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fit(X, y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print(f'[column]決定係数(R2):', r2)"}
{"in":"plt.plot(log.loss.curve)<nl>plt.xlabel('Epoch数') <nl>plt.ylabel('損失') <nl>plt.show()","out":"plt.plot(log.loss_curve)<nl>plt.xlabel('Epoch数') <nl>plt.ylabel('損失') <nl>plt.show()"}
