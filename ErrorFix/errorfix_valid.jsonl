{"in":"w＝45.2<nl>h＝1.62<nl>BMI＝w\/(h * h)<nl>print(BMI)","out":"w=45.2<nl>h=1.62<nl>BMI=w\/(h * h)<nl>print(BMI)"}
{"in":"def corr(x, y):<nl><tab><tab>x = np.array(x)<nl><tab><tab>y = np.array(y)<nl><tab><tab>x_diff = x - np.mean(x)<nl><tab><tab>y_diff = y - np.mean(y)<nl><tab><tab>return np.dot(x_diff, y_diff) \/ (np.sqrt(sum(x_diff ** 2)) * np.sqrt(sum(y_diff ** 2)))<nl><nl>for column in df.columns[:-1]:<nl><tab>print(column)<nl><tab>X = df[[colomn]]<nl><tab>Y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fix(X,y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 =r2_score(y,y_pred)<nl><tab>print(f'{column}決定係数(R2):',r2)","out":"def corr(x, y):<nl><tab><tab>x = np.array(x)<nl><tab><tab>y = np.array(y)<nl><tab><tab>x_diff = x - np.mean(x)<nl><tab><tab>y_diff = y - np.mean(y)<nl><tab><tab>return np.dot(x_diff, y_diff) \/ (np.sqrt(sum(x_diff ** 2)) * np.sqrt(sum(y_diff ** 2)))<nl><nl>for column in df.columns[:-1]:<nl><tab>print(column)<nl><tab>X = df[[column]]<nl><tab>Y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fix(X,y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 =r2_score(y,y_pred)<nl><tab>print(f'{column}決定係数(R2):',r2)"}
{"in":"A=[1,5,2,7]<nl>B=sort(A)<nl>print(B)","out":"A=[1,5,2,7]<nl>B=sorted(A)<nl>print(B)"}
{"in":"a =1<nl>for num in range(10):<nl><tab><tab>a += -1\/(4*(num+1)-1) + 1\/(4*(num+1+1)<nl>print(4*a)","out":"a =1<nl>for num in range(10):<nl><tab><tab>a += -1\/(4*(num+1)-1) + 1\/(4*(num+1+1))<nl>print(4*a)"}
{"in":"S=str(input())<nl>print(S[0],S[1])<nl>k=[]<nl>k.append=S[1]<nl>#S[0],S[1],S[2]=S[1],S[2],S[0]<nl>print(S)","out":"S=str(input())<nl>print(S[0],S[1])<nl>k=[]<nl>k.append(S[1])<nl>#S[0],S[1],S[2]=S[1],S[2],S[0]<nl>print(S)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_a<nl><nl>a,b,c,d = map(int,input().split())<nl>z=(a+b)*(c-d)<nl>print(z)<nl>print(Takahashi)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_a<nl><nl>a,b,c,d = map(int,input().split())<nl>z=(a+b)*(c-d)<nl>print(z)<nl>print(\"Takahashi\")"}
{"in":"N = float().input()<nl>print(N+1\/2)","out":"N = float(input())<nl>print(N+1\/2)"}
{"in":"<nl>x,y = map(int,input()\/split())<nl>if x == y:<nl><tab><tab>print(x)<nl>else:<nl><tab><tab>if x+y == 3:<nl><tab><tab><tab><tab>print(0)<nl><tab><tab>elif x+y == 2:<nl><tab><tab><tab><tab>print(1)<nl><tab><tab>else:<nl><tab><tab><tab><tab>print(2)","out":"A,B=map(int,input().split())<nl>1<=B<A<=10**5<nl>x=B\/A<nl>print(x)"}
{"in":"for bird in CharRange('A','Z'):<nl><tab>print(bird.end=' ')","out":"for bird in CharRange('A','Z'):<nl><tab>print(bird,end=' ')"}
{"in":"w = 37.6<nl>import math<nl>h = math.sqrt(w\/22)<nl>print(\"体重\":,w, \"身長\",h)","out":"w = 37.6<nl>import math<nl>h = math.sqrt(w\/22)<nl>print(\"体重\",w, \"身長\",h)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl>a,b = map(int, input().split())<nl>c,d = map(int, input(),split()))<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl>a,b = map(int, input().split())<nl>c,d = map(int, input(),split())<nl>"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B,(map(int,input().splist())<nl><nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl> else:<nl><tab>print(A)<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B = map(int,input().split())<nl><nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl>else:<nl><tab>print(A)<nl>"}
{"in":"acd(6215,4746)","out":"gcd(6215,4746)"}
{"in":"lives[3,3]=0<nl>showe(lives)","out":"lives[3,3]=0<nl>show(lives)"}
{"in":"d = 20060602<nl>while > = 10:<nl><tab><tab>D = list(map(int, str(d)))<nl><tab><tab>print(D) #　結果を表示<nl><nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)　#　結果を表示","out":"d = 20060602<nl>while >= 10:<nl><tab><tab>D = list(map(int, str(d)))<nl><tab><tab>print(D) #<tab>結果を表示<nl><nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<tab>#<tab>結果を表示"}
{"in":"print(\"HelloWorld\"","out":"print(\"HelloWorld\")"}
{"in":"N = int(input())<nl>A = list(map(int, input().split()))<nl>A.sort(reverse=True)<nl>S = 0<nl>for i in range(N-1):<nl><tab><tab>d = (N-1-i)*A[i] - sum(A[i+1:])1<nl><tab><tab>S += d<nl>print(S)","out":"N = int(input())<nl>A = list(map(int, input().split()))<nl>A.sort(reverse=True)<nl>S = 0<nl>for i in range(N-1):<nl><tab><tab>d = (N-1-i)*A[i] - sum(A[i+1:])<nl><tab><tab>S += d<nl>print(S)"}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc270\/tasks\/abc270_a<nl><nl>A, B = map(int, input().split())<nl>if A = 1 or 2 or 4 and B = 1or 2 or 4:<nl><tab>print(A+B)<nl>","out":"# kogi https:\/\/atcoder.jp\/contests\/abc270\/tasks\/abc270_a<nl><nl>A, B = map(int, input().split())<nl>if A in (1, 2, 4) and B in (1, 2, 4):<nl><tab>print(A+B)<nl>"}
{"in":"N,X=map(int,input().split())<nl>list=[]<nl>list=map(int,input().split())<nl>for x in N:<nl><tab>if x==X:<nl><tab><tab>list.remove(x)<nl>print(list)","out":"N,X=map(int,input().split())<nl>list=[]<nl>list=map(int,input().split())<nl>for x in range(N):<nl><tab>if x==X:<nl><tab><tab>list.remove(x)<nl>print(list)"}
{"in":"def gcd(a,b):<nl> if b==0:<nl><tab>return a<nl>else :<nl><tab>return gcd(b,a%b)<nl><tab>acd(6215,4746)","out":"def gcd(a,b):<nl><tab>if b==0:<nl><tab><tab>return a<nl><tab>else :<nl><tab><tab>return gcd(b,a%b)<nl>gcd(6215,4746)"}
{"in":"train['position'].value_counts().plot.bar()<nl><matplotlib.axes._subplots.AxesSubplot at 0x7f54f46a15f8>","out":"train['position'].value_counts().plot.bar()<nl># <matplotlib.axes._subplots.AxesSubplot at 0x7f54f46a15f8>"}
{"in":"X = df[['GENDER_num', 'AGE', 'SMOKING', 'YELLOW_FINGERS', 'ANXIETY','PEER_PRESSURE',<nl><tab><tab><tab><tab>,'CHRONIC DISEASE', 'FATIGUE', 'ALLERGY', 'WHEEZING', 'ALCOHOL CONSUMING',<nl><tab><tab><tab><tab>'COUGHING', 'SHORTNESS OF BREATH', 'SWALLOWING DIFFICULTY', 'CHEST PAIN']] <nl>y = df['LUNG_CANCER_num']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(4,4))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 30)<nl>r2= r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)","out":"X = df[['GENDER_num', 'AGE', 'SMOKING', 'YELLOW_FINGERS', 'ANXIETY','PEER_PRESSURE',<nl><tab><tab><tab><tab>'CHRONIC DISEASE', 'FATIGUE', 'ALLERGY', 'WHEEZING', 'ALCOHOL CONSUMING',<nl><tab><tab><tab><tab>'COUGHING', 'SHORTNESS OF BREATH', 'SWALLOWING DIFFICULTY', 'CHEST PAIN']] <nl>y = df['LUNG_CANCER_num']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(4,4))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 30)<nl>r2= r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)"}
{"in":"def g(n):<nl><tab>a=list(n)<nl><tab>ans=a.reverse()<nl><tab>return *ans","out":"def g(n):<nl><tab>a=list(n)<nl><tab>ans=a.reverse()<nl><tab>return ans"}
{"in":"for bird in CharRange(\"🐣\",\"🐥\"):<nl><tab>print(bird,end=)","out":"for bird in CharRange(\"🐣\",\"🐥\"):<nl><tab>print(bird,end=' ')"}
{"in":"d=1997112#朔間零<nl>while d>=10: #2桁のときは繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d==11or d==22 or d==33 or d==44:<nl><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><tab><tab><nl><nl><nl>print('ソウルナンバー:',d)<nl>if d=3:<nl><tab>print('多才でパワフルな人気者')","out":"d=1997112#朔間零<nl>while d>=10: #2桁のときは繰り返す<nl><tab><tab>D=list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d=sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d==11or d==22 or d==33 or d==44:<nl><tab><tab><tab>break #条件を満たしたらループを抜ける<nl><tab><tab><nl><nl><nl>print('ソウルナンバー:',d)<nl>if d==3:<nl><tab>print('多才でパワフルな人気者')"}
{"in":"def main():<nl><tab>A=list(map(int,input().split()))<nl>A.sort()<nl>if A[3]-A[2]==A[2]-A[1]:<nl><tab>print(\"Yes\")<nl>else:<nl><tab>print(\"No\")<nl><nl>if<tab>__name__ == '__main__':<nl><tab>main()","out":"def main():<nl><tab>A=list(map(int,input().split()))<nl>A.sort()<nl>if A[3]-A[2]==A[2]-A[1]:<nl><tab>print(\"Yes\")<nl>else:<nl><tab>print(\"No\")<nl><nl>if<tab>_name__ == '__main__':<nl><tab>main()"}
{"in":"plt.scatter(df['築年']), df['住宅価格']<nl>plt.xlabel('築年')<nl>plt.ylabel('住宅価格')<nl>plt.show()","out":"plt.scatter(df['築年'], df['住宅価格'])<nl>plt.xlabel('築年')<nl>plt.ylabel('住宅価格')<nl>plt.show()"}
{"in":"df['犯罪率',\"住宅価格\"]","out":"df[['犯罪率',\"住宅価格\"]]"}
{"in":"w=22*h**2<nl>print(w)<nl>print（f'w:{(w:2f}')","out":"w=22*h**2<nl>print(w)<nl>print(f'w:{(w:2f}')"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_b<nl>s = [list(input().split()) for _ in range(n)]<nl>print(s)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_b<nl>s = [list(input().split()) for<tab>in range(n)]<nl>print(s)"}
{"in":"D = int(imput())<nl>print(D\/100)","out":"D = int(input())<nl>print(D\/100)"}
{"in":"def summ(n):<nl><tab><tab>if n ==1 : return 1<nl><tab><tab>else : return i + = summ(n)","out":"def summ(n):<nl><tab><tab>if n ==1 : return 1<nl><tab><tab>else : return 1 +<tab>summ(n)"}
{"in":"order_by = ['なし', 'サービス', '教師', '医療', 'その他']<nl>sns.boxplot(x=df['父職業'], y=[G3], order=order_by)<nl>plt.title('父親の仕事が子供の成績に与える影響')<nl>plt.xlabel('父親の仕事')<nl>plt.ylabel('成績')<nl>plt.show()","out":"order_by = ['なし', 'サービス', '教師', '医療', 'その他']<nl>sns.boxplot(x=df['父職業'], y=df[\"G3\"], order=order_by)<nl>plt.title('父親の仕事が子供の成績に与える影響')<nl>plt.xlabel('父親の仕事')<nl>plt.ylabel('成績')<nl>plt.show()"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl>A, B = map(int, input().split())<nl>C = (A - B)\/3 + B<nl>if 50 <= B and B <= A and A <= 300:<nl><tab>print C<nl>else:<nl><tab>print(\"制約範囲外です\")<tab><nl><nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl>A, B = map(int, input().split())<nl>C = (A - B)\/3 + B<nl>if 50 <= B and B <= A and A <= 300:<nl><tab>print(C)<nl>else:<nl><tab>print(\"制約範囲外です\")<tab><nl><nl>"}
{"in":"heights = [145, 150, 155, 160, 165, 170, 175, 180, 185]<nl>w = 50.0<nl>newdata = []<nl>for h in heights:<nl><tab><tab>BMI = w \/ ((h\/100)**2)<nl><tab><tab>newdata.append(BMI)<nl><tab><tab>print(h, BMI)<nl><nl>print(newdata[])","out":"heights = [145, 150, 155, 160, 165, 170, 175, 180, 185]<nl>w = 50.0<nl>newdata = []<nl>for h in heights:<nl><tab><tab>BMI = w \/ ((h\/100)**2)<nl><tab><tab>newdata.append(BMI)<nl><tab><tab>print(h, BMI)<nl><nl>print(newdata)"}
{"in":"plt.hist(df'工場')<nl>plt.show()","out":"plt.hist(df['工場'])<nl>plt.show()"}
{"in":"a,b,c= map(int, input().split())<nl>N=list(a,b,c)<nl>print(N)","out":"a,b,c= map(int, input().split())<nl>N=[a,b,c]<nl>print(N)"}
{"in":"コーギー","out":"#コーギー"}
{"in":"animals = [Chicken(), Sheep(), Dog('Hachi')]","out":"animals = [Chiken(), Sheep(), Dog('Hachi')]"}
{"in":"class CharRange():<nl><tab>def __init__(self, start, end):<nl><tab><tab>self.start = start<nl><tab><tab>self.end = end<nl><nl><tab>def __iter__(self):<nl><tab><tab>return self<nl><nl><tab>def __next__(self):<nl><tab><tab>if self.start <= self.end:<nl><tab><tab><tab>s = self.startself.start int(old(self.start)+1)<nl><tab><tab><tab>return s<nl><tab><tab>raise StopIteration()","out":"class CharRange():<nl><tab>def __init__(self, start, end):<nl><tab><tab>self.start = start<nl><tab><tab>self.end = end<nl><nl><tab>def __iter__(self):<nl><tab><tab>return self<nl><nl><tab>def __next__(self):<nl><tab><tab>if self.start <= self.end:<nl><tab><tab><tab>s = self.start<nl><tab><tab><tab>self.start = int(old(self.start)+1)<nl><tab><tab><tab>return s<nl><tab><tab>raise StopIteration()"}
{"in":"df.['性別'],describe()","out":"df['性別'].describe()"}
{"in":"w=int(input(\"体重は？(kg)\"))<nl>h**2=w\/22","out":"w=int(input(\"体重は?(kg)\"))<nl>h=(w\/22)**1\/2"}
{"in":"X = df[df['soldout']]<nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()","out":"X = df[['soldout']]<nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()"}
{"in":"S = list(input())<nl>a = S.reserve()<nl>b = *a<nl>print(b)","out":"S = list(input())<nl>a = reversed(S)<nl>b = *a<nl>print(b)"}
{"in":"print('相関係数:'(df['築年'],df['住宅価格']))","out":"print('相関係数:', (df['築年'],df['住宅価格']))"}
{"in":"https:\/\/atcoder.jp\/contests\/abc083\/tasks\/abc083_b<nl>n, a, b = map(int, input().split())<nl>c=0<nl>for i in range(1, n+1):<nl><tab>if a <= S(i) <= b:<nl><tab><tab>c+=i<nl>print(c)","out":"# https:\/\/atcoder.jp\/contests\/abc083\/tasks\/abc083_b<nl>n, a, b = map(int, input().split())<nl>c=0<nl>for i in range(1, n+1):<nl><tab>if a <= S(i) <= b:<nl><tab><tab>c+=i<nl>print(c)"}
{"in":"<nl>N, X = map(int,input().split())<nl>S = input()<nl>o=0<nl>x=1<nl><nl>for i in N:<nl><tab>if S[i-1]==o:<nl><tab><tab>X=+1<nl><tab>else:<nl><tab><tab>X=-1<nl><tab>N=+1<nl>print(X)","out":"<nl>N, X = map(int,input().split())<nl>S = input()<nl>o=0<nl>x=1<nl><nl>for i in range(N):<nl><tab>if S[i-1]==o:<nl><tab><tab>X=+1<nl><tab>else:<nl><tab><tab>X=-1<nl><tab>N=+1<nl>print(X)"}
{"in":"pd.DataFrame(bags.toarray(),columns=model.get_feature_names(),index=df['コメント'])<nl>","out":"pd.DataFrame(bags.toarray(),columns=model.get_feature_names(),index=df['コメント忘れ'])<nl>"}
{"in":"def sum(n):<nl><tab>if n==1:<nl><tab><tab>return 1<nl><tab>else:<nl><tab><tab>return n += n","out":"def sum(n):<nl><tab>if n==1:<nl><tab><tab>return 1<nl><tab>else:<nl><tab><tab>return n + 1"}
{"in":"plt.boxplot(df['築年']])<nl>plt.show()","out":"plt.boxplot(df['築年'])<nl>plt.show()"}
{"in":"N = int(input())<nl>S = [input() for i in range(N)]<nl># print(S)<nl><nl>import statistics<nl>sstatistics.mode(S)","out":"N = int(input())<nl>S = [input() for i in range(N)]<nl># print(S)<nl><nl>import statistics<nl>statistics.mode(S)"}
{"in":"print(\"Hallo　World\"","out":"print(\"Hallo<tab>World\")"}
{"in":"ｗ ＝４６.６<nl>ｈ ＝１．６１<nl>BMI ＝ W ／ H ＊＊ ２<nl>print(BMI)","out":"w =46.6<nl>h =1.61<nl>BMI = w \/ h ** 2<nl>print(BMI)"}
{"in":"x=2<nl>if x>0:<nl><tab>print(\"正\")<nl><tab>else:<nl><tab><tab>ifx==0:<nl><tab><tab><tab>print(\"ゼロ\")<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab>print(\"負\")","out":"x=2<nl>if x>0:<nl><tab>print(\"正\")<nl>else:<nl><tab>if x==0:<nl><tab><tab>print(\"ゼロ\")<nl><tab>else:<nl><tab><tab>print(\"負\")"}
{"in":"for colum in df.columns[:-1]:<nl><tab>X = df[[column]]<nl><tab>y = df['住宅価格']<nl><tab>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)","out":"for column in df.columns[:-1]:<nl><tab>X = df[[column]]<nl><tab>y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fit(X, y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print('決定係数(R2):', r2)"}
{"in":"df = pd.read_csv('pollen.csv')<nl>df.fead()","out":"df = pd.read_csv('pollen.csv')<nl>df.head()"}
{"in":"<nl>P = list(map(int, input().split()))<nl><nl>base = ord('@')<tab># TOTO: ベースのところを修正する<nl>s=\"\"<nl>for p in p:<nl><tab><tab>s += chr(base + p)<nl>print(s)","out":"<nl>P = list(map(int, input().split()))<nl><nl>base = ord('@')<tab># TOTO: ベースのところを修正する<nl>s=\"\"<nl>for p in P:<nl><tab><tab>s += chr(base + p)<nl>print(s)"}
{"in":"<nl><nl><nl>for column in df.columns[:-1]:<nl><tab>X = df[[colomn]]<nl><tab>Y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fix(X,y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 =r2_score(y,y_pred)<nl><tab>print(f'{column}決定係数(R2):',r2)","out":"<nl><nl><nl>for column in df.columns[:-1]:<nl><tab>X = df[[column]]<nl><tab>Y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fix(X,y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 =r2_score(y,y_pred)<nl><tab>print(f'{column}決定係数(R2):',r2)"}
{"in":"for colum in dfb.columns[:-1]:<nl><tab><tab>X = df[[column]]<nl><tab><tab>y = df['住宅価格']<nl><tab><tab>model = LinearRegression()<nl><tab><tab>model.fit(X, y)<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>r2 = r2_score(y, y_pred)<nl><tab><tab>print(f'[column]決定係数(R2):', r2)","out":"for colum in df.columns[:-1]:<nl><tab><tab>X = df[[column]]<nl><tab><tab>y = df['住宅価格']<nl><tab><tab>model = LinearRegression()<nl><tab><tab>model.fit(X, y)<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>r2 = r2_score(y, y_pred)<nl><tab><tab>print(f'[column]決定係数(R2):', r2)"}
{"in":"if BMI>25.0:<nl><tab><tab>print('太りすぎ')<nl>else:<nl><tab><tab>print('太り過ぎでない')<nl><tab><tab>print(お昼を食べに行きましょう)","out":"if BMI>25.0:<nl><tab><tab>print('太りすぎ')<nl>else:<nl><tab><tab>print('太り過ぎでない')<nl><tab><tab>print(\"お昼を食べに行きましょう\")"}
{"in":"x = BMI<nl>if x < 18.5:<nl><tab>print(\"低体重（やせ）\")<nl><tab>else:<nl><tab><tab>if 18.5 ≦ x < 25<nl><tab><tab><tab> print(\"普通体重\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"肥満\")","out":"x = BMI<nl>if x < 18.5:<nl><tab>print(\"低体重(やせ)\")<nl>elif 18.5 <= x < 25:<nl><tab>print(\"普通体重\")<nl>else:<nl><tab>print(\"肥満\")"}
{"in":"t = np.linspace(-np.pi, np.pi, 100)<nl>x = np.cos(4t)<nl>y = np.sin(2*t)<nl>plt.figure(figsize=(5,5))<nl>plt.ylim(-1.1, 1.1)<nl>plt.plot(x, y)<nl>plt.show()","out":"t = np.linspace(-np.pi, np.pi, 100)<nl>x = np.cos(4*t)<nl>y = np.sin(2*t)<nl>plt.figure(figsize=(5,5))<nl>plt.ylim(-1.1, 1.1)<nl>plt.plot(x, y)<nl>plt.show()"}
{"in":"int A<nl>A=input() <nl><nl>if A < 100:<nl><tab><tab>print('投入金額が不足しています')<nl><nl>elif A == 100:<nl><tab><tab>print ('0')<nl><nl>X = A-100<nl>print(X)","out":"A=int(input())<nl><nl>if A < 100:<nl><tab><tab>print('投入金額が不足しています')<nl><nl>elif A == 100:<nl><tab><tab>print ('0')<nl><nl>X = A-100<nl>print(X)"}
{"in":"#ABC269_A<nl>#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_a<nl>a, b, c, d =map(int, input(). split())<nl>print(( a + b ) * ( c - d ))<nl>print(Takahashi)","out":"#ABC269_A<nl>#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_a<nl>a, b, c, d =map(int, input(). split())<nl>print(( a + b ) * ( c - d ))<nl>print(\"Takahashi\")"}
{"in":"for col in df .colums:<nl><tab><tab>#print(col)<nl><tab><tab>r, p= pearsonr(df[col], df[\"住宅価格\"])<nl><tab><tab>print(f\"相関係数{col}-住宅価格: {r}\")","out":"for col in df .columns:<nl><tab><tab>#print(col)<nl><tab><tab>r, p= pearsonr(df[col], df[\"住宅価格\"])<nl><tab><tab>print(f\"相関係数{col}-住宅価格: {r}\")"}
{"in":"w=49.0<nl>h=1.61<nl>BMI=w\/h**2<nl>print(BMI) #結果が表示される<nl>if BMI > 18.5:<nl><tab>print(低体重)<nl>elif BMI >=18.5 and BMI < 25.0:<nl><tab>print('標準')<nl>else:<nl><tab>print('太り過ぎ')","out":"w=49.0<nl>h=1.61<nl>BMI=w\/h**2<nl>print(BMI) #結果が表示される<nl>if BMI > 18.5:<nl><tab>print(\"低体重\")<nl>elif BMI >=18.5 and BMI < 25.0:<nl><tab>print('標準')<nl>else:<nl><tab>print('太り過ぎ')"}
{"in":"for column in df.columns:<nl><tab>r=corr(df[column],df[\"住宅価格\"])<nl><tab>print(f'{column}-価格：p={r}')","out":"for column in df.columns:<nl><tab>r=corr(df[column],df[\"住宅価格\"])<nl><tab>print(f'{column}-価格:p={r}')"}
{"in":"def init(M, N):<nl><tab>lives = np.random.randint(0, 2, M*N)<nl><tab>return lives = lives.reshape(M, N)","out":"def init(M, N):<nl><tab>lives = np.random.randint(0, 2, M*N)<nl><tab>lives = lives.reshape(M, N)<nl><tab>return lives"}
{"in":"import matplotlib.pyplot as plt<nl>H =[]<nl>for w in range(40,100,5):<nl><tab><tab>h = math.sqrt(w \/ 22.0)<nl><tab><tab>H.append(h)<nl><nl>plt\/plot(range(40,100,5),H)<nl>plt.show()","out":"import matplotlib.pyplot as plt<nl>H =[]<nl>for w in range(40,100,5):<nl><tab><tab>h = math.sqrt(w \/ 22.0)<nl><tab><tab>H.append(h)<nl><nl>plt.plot(range(40,100,5),H)<nl>plt.show()"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl>a,b = map(int, input().split())<nl>c,d = map(int, input(),split())<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl>a,b=map(int,input().split())<nl>c,d=map(int,input().split())<nl><nl>ans=a*b-c*d<nl>print()"}
{"in":"newdate=[]<nl>h2=1.55<nl>for w in weights:<nl><tab>BMI2=w\/(h2**2)<nl><tab>newdate2,append(BMI2)<nl>print(newdate2)<nl>plt.plot(weights,newdate,label=\"175cm\")<nl>plt.plot(weights,newdate2,label=\"155cm\")<nl>plt.xlabel(\"weights\")<nl>plt.ylabel(\"BMI\")<nl>plt.legend() #凡例を表示する<nl>plt.show()","out":"newdate=[]<nl>h2=1.55<nl>for w in weights:<nl><tab>BMI2=w\/(h2**2)<nl><tab>newdate.append(BMI2)<nl>print(newdate)<nl>plt.plot(weights,newdate,label=\"175cm\")<nl>plt.plot(weights,newdate2,label=\"155cm\")<nl>plt.xlabel(\"weights\")<nl>plt.ylabel(\"BMI\")<nl>plt.legend() #凡例を表示する<nl>plt.show()"}
{"in":"w = 56.00<nl>h = 1.75<nl>BMI = w \/ h ** 2<nl>print(BMI)<nl><nl>if BMI ＞ 25.00:<nl><tab><tab>print(\"太りすぎ\")<nl>else:<nl><tab><tab>print(\"良い感じ！\")","out":"w = 56.00<nl>h = 1.75<nl>BMI = w \/ h ** 2<nl>print(BMI)<nl><nl>if BMI > 25.00:<nl><tab><tab>print(\"太りすぎ\")<nl>else:<nl><tab><tab>print(\"良い感じ!\")"}
{"in":"df_y = pd.DataFrame(predicted_train_plot.tolist())","out":"df_y = pd.DataFrame(predicted_train_plot)"}
{"in":"plt.figure(figsize=13, 6)<nl>plt.scatter(df['部屋数'], df['住宅価格'], alpha=0.5)<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()","out":"plt.figure(figsize=(13, 6))<nl>plt.scatter(df['部屋数'], df['住宅価格'], alpha=0.5)<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()"}
{"in":"df = pd,read_csv(\"AirPassengers.csv\")","out":"df = pd.read_csv(\"AirPassengers.csv\")"}
{"in":"n,a,b = map(int, input().split())<nl>ans=0<nl>for item in n:<nl><tab>x = [int(i) for i in item]<nl><tab>if a <= sum(x) <= b:<nl><tab><tab>ans+=1<nl>print(ans)","out":"n,a,b = map(int, input().split())<nl>ans=0<nl>for item in range(n):<nl><tab>x = [int(i) for i in range(item)]<nl><tab>if a <= sum(x) <= b:<nl><tab><tab>ans+=1<nl>print(ans)"}
{"in":"print('a=', model.coef_, ', b=', model.intercept_)<nl><nl><nl>print((((model.coef_) * 24 )+ (float(model.intercept_)))","out":"print('a=', model.coef_, ', b=', model.intercept_)<nl><nl><nl>print(model.coef_ * 24 + float(model.intercept_))"}
{"in":"n=int(input())<nl>s=list()<nl>for i in range(n):<nl><tab>s,t=map(srt,input().split())<nl><tab>s=s+[s+t]<nl>print(s)","out":"n=int(input())<nl>s=list()<nl>for i in range(n):<nl><tab>s,t=map(sqrt,input().split())<nl><tab>s=s+[s+t]<nl>print(s)"}
{"in":"n=2.0<nl>DELTA =n\/100<nl>x=0.0<nl>x_min = n<nl>y_min = n<nl>for i in range(100):<nl><tab><tab>print(f'x=[x], f([x])=[f(x,n)]')<nl><tab><tab>y=abc(f(x,n)) #絶対値<nl><tab><tab>if y < y_min:<nl><tab><tab><tab><tab>y_min = y<nl><tab><tab><tab><tab>x_min = x<nl><tab><tab>x+=DELTA<nl>print(x_min)","out":"n=2.0<nl>DELTA =n\/100<nl>x=0.0<nl>x_min = n<nl>y_min = n<nl>for i in range(100):<nl><tab><tab>print(f'x=[x], f([x])=[f(x,n)]')<nl><tab><tab>y=abs(f(x,n)) #絶対値<nl><tab><tab>if y < y_min:<nl><tab><tab><tab><tab>y_min = y<nl><tab><tab><tab><tab>x_min = x<nl><tab><tab>x+=DELTA<nl>print(x_min)"}
{"in":"from sklearn.model_selection import train_test_split<nl>from sklearn.metrics import accuracy_score<nl>from sklearn.metrics import precision_score<nl>from sklearn.ensemble import RandomForestClassifier<nl>from sklearn.metrics import confusion_matrix<nl>from pandas.plotting import scatter_matrix<nl><nl>random_forest = RandomForestRegressor(max_depth =2, n_estimators =30)<nl>random_forest.fit(X_train, y_train)<nl><nl>y_pred = random_forest.predict(X_test)<nl><nl>trainaccurancy_random_forest = random_forest.score(X_train, y_train)<nl>print('TA:{}'.format(trainaccurancy_random_forest))<nl><nl>accuracy_random_forest = random_forest_score(y_test, y_pred)<nl>print('A:{}'.format(accurancy_random_forest))<nl>","out":"from sklearn.model_selection import train_test_split<nl>from sklearn.metrics import accuracy_score<nl>from sklearn.metrics import precision_score<nl>from sklearn.ensemble import RandomForestClassifier<nl>from sklearn.metrics import confusion_matrix<nl>from pandas.plotting import scatter_matrix<nl><nl>random_forest = RandomForestRegressor(max_depth =2, n_estimators =30)<nl>random_forest.fit(X_train, y_train)<nl><nl>y_pred = random_forest.predict(X_test)<nl><nl>trainaccurancy_random_forest = random_forest.score(X_train, y_train)<nl>print('TA:{}'.format(trainaccurancy_random_forest))<nl><nl>accuracy_random_forest = random_forest.score(y_test, y_pred)<nl>print('A:{}'.format(accurancy_random_forest))<nl>"}
{"in":"for column in df.columns[:-1]:<nl><tab>X = df[[coloumn]]<tab># 説明変数<nl><tab>y = df['住宅価格'] # 目的変数<nl><nl><tab>model = LinearRegression()<nl><tab>model.fit(X, y)<nl><nl><tab>y_pred = model.predict(X)<nl><nl><nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print(f'[colimn] 決定係数(R2):', r2)","out":"for column in df.columns[:-1]:<nl><tab>X = df[[column]]<tab># 説明変数<nl><tab>y = df['住宅価格'] # 目的変数<nl><nl><tab>model = LinearRegression()<nl><tab>model.fit(X, y)<nl><nl><tab>y_pred = model.predict(X)<nl><nl><nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print(f'[colimn] 決定係数(R2):', r2)"}
{"in":"order_by = ['なし', ,'GP高', 'MS高',]<nl>sns.boxplot(x=df['学校名'], y=df['最終成績'], order=order_by)<nl>plt.title('学校名が最終成績に与える影響')<nl>plt.xlabel('学校名')<nl>plt.ylabel('成績')<nl>plt.show()","out":"order_by = ['なし', 'GP高', 'MS高',]<nl>sns.boxplot(x=df['学校名'], y=df['最終成績'], order=order_by)<nl>plt.title('学校名が最終成績に与える影響')<nl>plt.xlabel('学校名')<nl>plt.ylabel('成績')<nl>plt.show()"}
{"in":"w=50.0<nl>h=1.60<nl>BMI=w(h:h)<nl><nl>print(BMI) #表示されます","out":"w=50.0<nl>h=1.60<nl>BMI=w\/(h*h)<nl><nl>print(BMI) #表示されます"}
{"in":"n=int(input())<nl>c=[input().split() for _ in range(n)]<nl>print(c)<nl>a=str(n+1)<nl>x=0<nl>for i in c:<nl><tab>if i[0]!=i[1]:<nl><tab><tab>i.appned(a)<nl><tab><tab>a=min(i)<nl><tab><tab>c.appned(i)<nl><tab><tab>x+=1<nl>print(x)","out":"n=int(input())<nl>c=[input().split() for _ in range(n)]<nl>print(c)<nl>a=str(n+1)<nl>x=0<nl>for i in c:<nl><tab>if i[0]!=i[1]:<nl><tab><tab>i.appned(a)<nl><tab><tab>a=min(i)<nl><tab><tab>c.append(i)<nl><tab><tab>x+=1<nl>print(x)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl><nl>a, b = map(int, input(), split())<nl>c, d = map(int, input(), split())<nl>","out":"a,b,c,d=map(int,input().split())<nl>print(a)"}
{"in":"class Animal(object):<nl><tab><tab>def face(self):<nl><tab><tab><tab><tab>return '?'<nl><tab><tab>def sound(self):<nl><tab><tab><tab><tab>return '?'<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab>return self.__class__.__name__ #クラス名<nl><tab><tab>def leg(self):<nl><tab><tab><tab><tab>raise Not NotImplemented() <nl><nl>class Bird(Animal):<nl><tab>def leg(self):<nl><tab><tab>return 2<nl><nl>class Chikin(Animal):<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab><tab>return '🐔'<nl><tab><tab>def sound(self): # Override<nl><tab><tab><tab><tab>return 'コケ～'<nl><nl>class Mammal(Animal):<nl><tab>def leg(self):<nl><tab><tab>return 2<nl><nl>class Sheep(Animal):<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab><tab>return '🐏'<nl><tab><tab>def sound(self): # Override<nl><tab><tab><tab><tab>return 'メエ～'<nl><nl>class Dog(Animal):<nl><tab><tab>name:str<nl><tab><tab>def __init__(self, name):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab><tab>return f'🐕 {self.name}'<nl><tab><tab>def face(self):<nl><tab><tab><tab><tab>return '🐺'<nl><tab><tab>def sound(self):<nl><tab><tab><tab><tab>return 'ワン' # ISOスタンダード","out":"class Animal(object):<nl><tab><tab>def face(self):<nl><tab><tab><tab><tab>return '?'<nl><tab><tab>def sound(self):<nl><tab><tab><tab><tab>return '?'<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab>return self.__class__.__name__ #クラス名<nl><tab><tab>def leg(self):<nl><tab><tab><tab><tab>raise NotImplemented() <nl><nl>class Bird(Animal):<nl><tab>def leg(self):<nl><tab><tab>return 2<nl><nl>class Chikin(Animal):<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab><tab>return '🐔'<nl><tab><tab>def sound(self): # Override<nl><tab><tab><tab><tab>return 'コケ~'<nl><nl>class Mammal(Animal):<nl><tab>def leg(self):<nl><tab><tab>return 2<nl><nl>class Sheep(Animal):<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab><tab>return '🐏'<nl><tab><tab>def sound(self): # Override<nl><tab><tab><tab><tab>return 'メエ~'<nl><nl>class Dog(Animal):<nl><tab><tab>name:str<nl><tab><tab>def __init__(self, name):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab><tab>return f'🐕 {self.name}'<nl><tab><tab>def face(self):<nl><tab><tab><tab><tab>return '🐺'<nl><tab><tab>def sound(self):<nl><tab><tab><tab><tab>return 'ワン' # ISOスタンダード"}
{"in":"w ＝ 47.4<nl>h =1.65<nl>BMI = w \/ (h * h)<nl><nl>print(BMI) #表示されます","out":"w = 47.4<nl>h =1.65<nl>BMI = w \/ (h * h)<nl><nl>print(BMI) #表示されます"}
{"in":"class<tab>PersonW(object):<nl><tab>name : str<nl><tab>height : float<nl><tab>weight : float<nl><nl><tab>def __init__(self,height,weight):<nl><tab><tab>self.height = height<nl><tab><tab>self.weight = weight<nl><nl><tab>def getHeight(self):<nl><tab><tab>return self.height<nl><tab>def getWeight(self):<nl><tab><tab>return self.weight:<nl><nl><tab>def bmi(self):<nl><tab><tab>return self.weight \/ (self.height * self.height) * 10000","out":"class<tab>PersonW(object):<nl><tab>name : str<nl><tab>height : float<nl><tab>weight : float<nl><nl><tab>def __init__(self,height,weight):<nl><tab><tab>self.height = height<nl><tab><tab>self.weight = weight<nl><nl><tab>def getHeight(self):<nl><tab><tab>return self.height<nl><tab>def getWeight(self):<nl><tab><tab>return self.weight<nl><nl><tab>def bmi(self):<nl><tab><tab>return self.weight \/ (self.height * self.height) * 10000"}
{"in":"w=int(input(\"体重は？\"))<nl>h=math.sqrt(w\/22)*100<nl>print(\"平均身長(cm)\",h)","out":"w=int(input(\"体重は?\"))<nl>h=math.sqrt(w\/22)*100<nl>print(\"平均身長(cm)\",h)"}
{"in":"w = 65.0<nl>h = 1.75<nl>BMI = w\/h**2<nl><nl><nl>print(\"BMI;\"BMI)<nl><nl>if BMI < 18.5:<nl><tab>print(\"低体重\")<nl>elif BMI>=18.5 and BMI<25.0:<nl><tab><tab>print(\"標準\")<nl>else:<nl><tab><tab><tab>print(\"太りすぎ\")","out":"w = 65.0<nl>h = 1.75<nl>BMI = w\/h**2<nl><nl><nl>print(\"BMI;\"BMI)<nl><nl>if BMI < 18.5:<nl><tab>print(\"低体重\")<nl>elif BMI>=18.5 and BMI<25.0:<nl><tab>print(\"標準\")<nl>else:<nl><tab>print(\"太りすぎ\")"}
{"in":"d = 20051029<nl><nl>while d >=10: #二桁のときは繰り返す<nl> D = list(map(int,str(d)))<nl> #print(D)<nl> d = sum(D)<nl> #print(d)<nl> if d ==11 or d ==22 d == 33 d == 44:<nl><tab><tab> break #条件を満たしたらループを抜ける<nl><nl>print('ソウルナンバー:', d)","out":"d = 20051029<nl><nl>while d >=10: #二桁のときは繰り返す<nl> D = list(map(int,str(d)))<nl> #print(D)<nl> d = sum(D)<nl> #print(d)<nl> if d == 11 or d == 22 or d == 33 or d == 44:<nl><tab><tab> break #条件を満たしたらループを抜ける<nl><nl>print('ソウルナンバー:', d)"}
{"in":"class Duck(object):<nl><tab><tab>def face(self):<nl><tab><tab><tab><tab>return \"🦆\"<nl><tab><tab>def sound(self):<nl><tab><tab><tab><tab>return \"くわくわくわ\"<nl><tab><tab>def _repr_html_(self):<nl><tab><tab><tab><tab>return f'<img width='200' src=\"https:\/\/emoji-img.s3.ap-northeast-1.amazonaws.com\/svg\/1f986.svg\">'","out":"class Duck(object):<nl><tab><tab>def face(self):<nl><tab><tab><tab><tab>return \"🦆\"<nl><tab><tab>def sound(self):<nl><tab><tab><tab><tab>return \"くわくわくわ\"<nl><tab><tab>def _repr_html_(self):<nl><tab><tab><tab><tab>return f'<img width=\\'200\\' src=\"https:\/\/emoji-img.s3.ap-northeast-1.amazonaws.com\/svg\/1f986.svg\">'"}
{"in":"x = np.linspace(-2*np.pi, 2*np.pi, 100)<nl>y = np.sin(x)<nl>plt.figure(figsize=(10, 3))<nl>plt.plot(x, y, label = 'sin(x)')<nl># plt.legend()は最後の行に書く<nl>plt.xticks([-2*np.pi, -np.pi, 0, np.pi, 2*np.pi], [\"-2π\", \"-π\", \"0\", \"π\", \"2π\"]) #目盛り<nl>plt.title('y=sin(x)')<nl>plt.xlabel('x')<nl>plt.ylabel('y')<nl>plt.plot(x, np.cos(x), label = 'cos(x)')<nl>plt.plot(x, np.sin(2*x), label = 'sin(2x)', color = purple)<nl>plt.legend()<nl>plt.show()","out":"x = np.linspace(-2*np.pi, 2*np.pi, 100)<nl>y = np.sin(x)<nl>plt.figure(figsize=(10, 3))<nl>plt.plot(x, y, label = 'sin(x)')<nl># plt.legend()は最後の行に書く<nl>plt.xticks([-2*np.pi, -np.pi, 0, np.pi, 2*np.pi], [\"-2π\", \"-π\", \"0\", \"π\", \"2π\"]) #目盛り<nl>plt.title('y=sin(x)')<nl>plt.xlabel('x')<nl>plt.ylabel('y')<nl>plt.plot(x, np.cos(x), label = 'cos(x)')<nl>plt.plot(x, np.sin(2*x), label = 'sin(2x)', color = \"purple\")<nl>plt.legend()<nl>plt.show()"}
{"in":"d=20070122<nl>while d>=10:#二桁の時は繰り返す<nl>D=list(map(int, str(d)))<nl>print(D)<nl>d=sum(D)<nl>print(d)<nl>if d==11 or d== 22 or d==33 or d==44:<nl><tab>break#条件を満たしたら抜け出す","out":"d=20070122<nl>while d>=10: #二桁の時は繰り返す<nl><tab>D=list(map(int, str(d)))<nl><tab>print(D)<nl><tab>d=sum(D)<nl><tab>print(d)<nl><tab>if d==11 or d== 22 or d==33 or d==44:<nl><tab><tab>break#条件を満たしたら抜け出す"}
{"in":"X=int(input())<nl><nl>ans='strong'<nl>if int(X)%1111==0:<nl><tab>ans='weak'<nl>for i in X:<nl><tab>if (i+1)-(i)!=-1 or 9:<nl><tab><tab>break<nl><tab>ans='weak'<nl>print(ans)","out":"X=int(input())<nl><nl>ans='strong'<nl>if int(X)%1111==0:<nl><tab>ans='weak'<nl>for i in range(X):<nl><tab>if (i+1)-(i)!=-1 or 9:<nl><tab><tab>break<nl><tab>ans='weak'<nl>print(ans)"}
{"in":"def hanoi(n,x.y.z): #n枚の円盤をxからyに移す。<nl><tab><tab>if len(x)>0:<nl><tab><tab><tab><tab>hanoi(n-1,x,z,y)<nl><tab><tab><tab><tab>d=x.pop()<nl><tab><tab><tab><tab>y.append(d)<nl><tab><tab><tab><tab>show()<nl><tab><tab><tab><tab>hanoi(n-1,z,y,x)","out":"def hanoi(n,x,y,z): #n枚の円盤をxからyに移す。<nl><tab><tab>if len(x)>0:<nl><tab><tab><tab><tab>hanoi(n-1,x,z,y)<nl><tab><tab><tab><tab>d=x.pop()<nl><tab><tab><tab><tab>y.append(d)<nl><tab><tab><tab><tab>show()<nl><tab><tab><tab><tab>hanoi(n-1,z,y,x)"}
{"in":"plt.figure(figsize=(13, 23))<nl>i=1<nl>for column in df.columns[:-1]:<nl><tab>for column2 in df.columns[:-1]:<nl><tab><tab>for column3 in df.columns[:-1]:<nl><tab><tab><tab>X = df[[column, column2,colums3]] #1つ選ぶ<nl><tab><tab><tab>y = df['住宅価格']<nl><nl><tab><tab>model = LinearRegression()<nl><tab><tab>model.fit(X, y)<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>r2= r2_score(y, y_pred)<nl><tab><tab>print(column,column2,colums3)<nl><tab><tab>print('決定係数(R2):', r2)","out":"plt.figure(figsize=(13, 23))<nl>i=1<nl>for column in df.columns[:-1]:<nl><tab>for column2 in df.columns[:-1]:<nl><tab><tab>for column3 in df.columns[:-1]:<nl><tab><tab><tab>X = df[[column, column2,column3]] #1つ選ぶ<nl><tab><tab><tab>y = df['住宅価格']<nl><nl><tab><tab>model = LinearRegression()<nl><tab><tab>model.fit(X, y)<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>r2= r2_score(y, y_pred)<nl><tab><tab>print(column,column2,colums3)<nl><tab><tab>print('決定係数(R2):', r2)"}
{"in":"%%time<nl>X = df[[ifor i in columns[-1]]]<nl>X = df[[column,column1,column2]] # 説明変数df[['部屋数', '築年']]<nl>y = df['住宅価格']<nl>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>if max<r2:<nl>max=r2<nl>print(f'{column},{column1},{column2}と住宅価格の決定係数(R2):', r2)","out":"%%time<nl>X = df[[i for i in columns[-1]]]<nl>X = df[[column,column1,column2]] # 説明変数df[['部屋数', '築年']]<nl>y = df['住宅価格']<nl>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)<nl>r2 = r2_score(y, y_pred)<nl>if max<r2:<nl><tab>max=r2<nl>print(f'{column},{column1},{column2}と住宅価格の決定係数(R2):', r2)"}
{"in":"h=int(input(\"身長は？(cm)\")<nl>h=h\/100<nl>w=22*h**<nl>print(\"平均体重\")","out":"h=int(input(\"身長は?(cm)\"))<nl>h=h\/100<nl>w=22*h**<nl>print(\"平均体重\")"}
{"in":"if BMI < 18.50:<nl> print(\"低体重\")<nl>else BMI >= 18.50:<nl>print(\"低体重でない\")","out":"if BMI < 18.50:<nl><tab>print(\"低体重\")<nl>else:<nl><tab>print(\"低体重でない\")"}
{"in":"<nl>N,K=map(int,input().split)<nl><nl>def g1(x):<nl><tab>l1=list(str(x))<nl><tab>big=sorted(l1,reverse=True)<nl><tab>return int(''.join(big))<nl><nl>def g2(x):<nl><tab>l2=list(str(x))<nl><tab>small=sorted(l2)<nl><tab>return int(''.join(small))<nl><nl>def f(x):<nl><tab>return g1(x)-g2(x)<nl><nl>a=n<nl>for i in ragne(K):<nl><tab>a=f(a)<nl>print(a)","out":"<nl>N,K=map(int,input().split())<nl><nl>def g1(x):<nl><tab>l1=list(str(x))<nl><tab>big=sorted(l1,reverse=True)<nl><tab>return int(''.join(big))<nl><nl>def g2(x):<nl><tab>l2=list(str(x))<nl><tab>small=sorted(l2)<nl><tab>return int(''.join(small))<nl><nl>def f(x):<nl><tab>return g1(x)-g2(x)<nl><nl>a=n<nl>for i in ragne(K):<nl><tab>a=f(a)<nl>print(a)"}
{"in":"##先生の<nl><nl>def calc(s:str)->float:<nl><tab>if '+' in s:<nl><tab><tab>a, b = return map(float, s.split('+'))<nl><tab><tab>return a+b<nl><tab>return float(s)]<nl><nl>print(calc(\"1+10\"))","out":"##先生の<nl><nl>def calc(s:str)->float:<nl><tab>if '+' in s:<nl><tab><tab>a, b = map(float, s.split('+'))<nl><tab><tab>return a+b<nl><tab>return float(s)<nl><nl>print(calc(\"1+10\"))"}
{"in":"w = int(input(\"体重は？(kg)\")) <nl>BMI = 22<nl>h = w \/ BMI<nl>import math<nl>\"平均身長\", math.sqrt(h) *100 \"cm\"","out":"w = int(input(\"体重は?(kg)\")) <nl>BMI = 22<nl>h = w \/ BMI<nl>import math<nl>print(\"平均身長\", math.sqrt(h) *100, \"cm\")"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc270\/tasks\/abc270_c<nl><nl>import sys<nl> #sys:Pythonのインタプリタや実行環境に関する情報を扱うためのライブラリ<nl>sys.setrecursionlimit(10 ** 6)<nl>#sys.setrecursionlimit()で再帰突入回数の上限を変更できます（デフォルトは通常1000）<nl> <nl>n,x,y = map(int, input().split())<nl>a = [[] for i in range(n+1)]<nl>#n+1個リストの中にリストを入れる<nl> <nl>for i in range(n-1):<nl><tab>u, v = map(int, input().split())<nl><tab>a[u].append(v)<nl><tab>a[v].append(u)<nl><tab>#中のリストのa[x]に数に入っている値が頂点xとつながっている頂点の番号<nl> <nl>paths = []<nl> <nl>def dfs(v, p):<nl><tab>if v == y:<nl><tab><tab>print('if',v,' ',p,' ',y)<nl><tab><tab>return True<nl><tab>else:<nl><tab><tab>print(v,' ',p,' ',y)<nl><tab>for nodes in a[v]:<nl><tab><tab>if nodes == p: continue<nl><tab><tab>if dfs(nodes, v, 0):<nl><tab><tab><tab>paths.append(nodes)<nl><tab><tab><tab>print('pa',paths)<nl><tab><tab><tab>return True<nl><tab>return False<nl> <nl>dfs(x, -1)<nl> <nl>paths.reverse()<nl>paths.insert(0,x)<nl> <nl>for val in paths:<nl><tab>print(val, sep=\"\", end=\" \")","out":"#kogi https:\/\/atcoder.jp\/contests\/abc270\/tasks\/abc270_c<nl><nl>import sys<nl> #sys:Pythonのインタプリタや実行環境に関する情報を扱うためのライブラリ<nl>sys.setrecursionlimit(10 ** 6)<nl>#sys.setrecursionlimit()で再帰突入回数の上限を変更できます(デフォルトは通常1000)<nl> <nl>n,x,y = map(int, input().split())<nl>a = [[] for i in range(n+1)]<nl>#n+1個リストの中にリストを入れる<nl> <nl>for i in range(n-1):<nl><tab>u, v = map(int, input().split())<nl><tab>a[u].append(v)<nl><tab>a[v].append(u)<nl><tab>#中のリストのa[x]に数に入っている値が頂点xとつながっている頂点の番号<nl> <nl>paths = []<nl> <nl>def dfs(v, p):<nl><tab>if v == y:<nl><tab><tab>print('if',v,' ',p,' ',y)<nl><tab><tab>return True<nl><tab>else:<nl><tab><tab>print(v,' ',p,' ',y)<nl><tab>for nodes in a[v]:<nl><tab><tab>if nodes == p: continue<nl><tab><tab>if dfs(nodes, v, 0):<nl><tab><tab><tab>paths.append(nodes)<nl><tab><tab><tab>print('pa',paths)<nl><tab><tab><tab>return True<nl><tab>return False<nl> <nl>dfs(x, -1)<nl> <nl>paths.reverse()<nl>paths.insert(0,x)<nl> <nl>for val in paths:<nl><tab>print(val, sep=\"\", end=\" \")"}
{"in":"df['住宅価格'].descrie)","out":"df['住宅価格'].describe()"}
{"in":"h = 0.25<nl>for i range(int(1.0\/h)):<nl><tab>print(i)","out":"h = 0.25<nl>for i in range(int(1.0\/h)):<nl><tab>print(i)"}
{"in":"for col in df.columns:<nl><tab>r=corr(df[col],df.['G3'])<nl><tab>print(f'{col}-G3: p={r}')","out":"for col in df.columns:<nl><tab>r=corr(df[col],df['G3'])<nl><tab>print(f'{col}-G3: p={r}')"}
{"in":"X=df[['通勤']]<nl>y=df['住宅価格']<nl><nl>model=Lineararegression()<nl>model.fit(X, y)<nl><nl>y_pred=model.predict(X)<nl>plt.figure(figsize=(6,6))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)","out":"X=df[['通勤']]<nl>y=df['住宅価格']<nl><nl>model=LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred=model.predict(X)<nl>plt.figure(figsize=(6,6))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)"}
{"in":"Sx,Sy,Gx,Gy=map(int, input().split())<nl>#Sy=-Sxa+b<nl>#Gy=Gxa+b<nl>#Sy-Gy=-(Sx+Gx)a<nl>#a=<nl>#b=Sx((Sy-Gy)\/-(Sx+Gx))<nl>x=(Sx((Sy-Gy)\/-(Sx+Gx))\/(Sy-Gy)\/(-Sx-Gx))<nl>print('{:.10f}'.format(x))<nl>","out":"Sx,Sy,Gx,Gy=map(int, input().split())<nl>#Sy=-Sxa+b<nl>#Gy=Gxa+b<nl>#Sy-Gy=-(Sx+Gx)a<nl>#a=<nl>#b=Sx((Sy-Gy)\/-(Sx+Gx))<nl>x=(Sx*((Sy-Gy)\/-(Sx+Gx))\/(Sy-Gy)\/(-Sx-Gx))<nl>print('{:.10f}'.format(x))<nl>"}
{"in":"n=str(input())<nl>n=replace(1,9)<nl>print(n)","out":"n=str(input())<nl>n=n.replace('1','9')<nl>print(n)"}
{"in":"plt.hist(df['性別'],df[G3])<nl>plt.show()","out":"plt.hist(df['性別'],df[\"G3\"])<nl>plt.show()"}
{"in":"stone_list=[garnet, amethyst, aquamarine, diamond, emerald, pearl, ruby, peridot,\tsapphire, tourmaline, topaz, turquoise]<nl><nl>class PersonID(object):<nl><tab>name: str<nl><tab>year: int<tab><nl><tab>month: int <nl><tab>date: int <nl><nl><tab>def __init__(self, name, year, month, date):<nl><tab><tab>self.name = name<nl><tab><tab>self.year = year<nl><tab><tab>self.month = month<nl><tab><tab>self.date = date<nl><tab><nl><tab>def age(self):<nl><tab><tab>self.age = 2022-self.year<nl><tab><tab>return str(self.age)<nl><tab><nl><tab>def stone(self):<nl><tab><tab>#stone_list=[garnet, amethyst, aquamarine, diamond, emerald, pearl, ruby, peridot,\tsapphire, tourmaline, topaz, turquoise]<nl><tab><tab>self.stone = stone_list(self.month-1)<nl><tab><tab>return str(self.stone)<nl><nl><tab>def diff(self, p2):<nl><tab><tab>self.diff = abs(self.age-p2.age)<nl><tab><tab>return str(self.diff)<nl><tab><nl><tab>def is_same_month(self, p2):<nl><tab><tab>if self.age == p2.age:<nl><tab><tab><tab>return (True)<nl><tab><tab>else:<nl><tab><tab><tab>return (False)<nl><tab><tab><tab>\t","out":"stone_list=[garnet, amethyst, aquamarine, diamond, emerald, pearl, ruby, peridot,\tsapphire, tourmaline, topaz, turquoise]<nl><nl>class PersonID(object):<nl><tab>name: str<nl><tab>year: int<tab><nl><tab>month: int <nl><tab>date: int <nl><nl><tab>def _init__(self, name, year, month, date):<nl><tab><tab>self.name = name<nl><tab><tab>self.year = year<nl><tab><tab>self.month = month<nl><tab><tab>self.date = date<nl><tab><nl><tab>def age(self):<nl><tab><tab>self.age = 2022-self.year<nl><tab><tab>return str(self.age)<nl><tab><nl><tab>def stone(self):<nl><tab><tab>#stone_list=[garnet, amethyst, aquamarine, diamond, emerald, pearl, ruby, peridot,\tsapphire, tourmaline, topaz, turquoise]<nl><tab><tab>self.stone = stone_list(self.month-1)<nl><tab><tab>return str(self.stone)<nl><nl><tab>def diff(self, p2):<nl><tab><tab>self.diff = abs(self.age-p2.age)<nl><tab><tab>return str(self.diff)<nl><tab><nl><tab>def is_same_month(self, p2):<nl><tab><tab>if self.age == p2.age:<nl><tab><tab><tab>return (True)<nl><tab><tab>else:<nl><tab><tab><tab>return (False)<nl><tab><tab><tab>\t"}
{"in":"X_test = test[[['Pclass','Sex', 'Age','Fare','Embarked']]<nl>X_test()","out":"X_test = test[['Pclass','Sex', 'Age','Fare','Embarked']]<nl>X_test()"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc178\/tasks\/abc178_a<nl>x = map(int, input())<nl>if x == 1:<nl><tab>print(\"0\")<nl>elif x == 0:<nl><tab>print(\"1\")<nl>else:","out":"#kogi https:\/\/atcoder.jp\/contests\/abc178\/tasks\/abc178_a<nl>x = map(int, input())<nl>if x == 1:<nl><tab>print(\"0\")<nl>elif x == 0:<nl><tab>print(\"1\")<nl>else:<nl><tab>pass"}
{"in":"for colum<tab>in df.columns[:-1]:<nl><tab>X = df[[columns]]<nl><tab>y = df['住宅価格']<nl><nl><tab>model = LinearRegression()<nl><tab>model.fit(X, y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print('決定係数(R2):', r2)<nl><nl>","out":"for column<tab>in df.columns[:-1]:<nl><tab>X = df[[column]]<nl><tab>y = df['住宅価格']<nl><nl><tab>model = LinearRegression()<nl><tab>model.fit(X, y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print('決定係数(R2):', r2)<nl><nl>"}
{"in":"if BMI < 18.50:<nl><tab>print('低体重')<nl>elif 18.50 <= BMI < 25.00:<nl><tab>print('標準')<nl>elif:<nl><tab>print('肥満')","out":"if BMI < 18.50:<nl><tab>print('低体重')<nl>elif 18.50 <= BMI < 25.00:<nl><tab>print('標準')<nl>else:<nl><tab>print('肥満')"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl>a,b=map(int,input(),split())<nl>c,d=map(int,input(),split())<nl><nl>ans=a*d-b*c<nl>print(ans)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl><nl>a, b = map(int, input().split())<nl>c, d = map(int, input().split())<nl>"}
{"in":"plt.boxplot(df('父親の職業')<nl>plt.grid(True)<nl>#plt.xlabel(['G1','G2','G3'])<nl>#plt.ylabel('成績')<nl>plt.show()","out":"plt.boxplot(df['父親の職業'])<nl>plt.grid(True)<nl>#plt.xlabel(['G1','G2','G3'])<nl>#plt.ylabel('成績')<nl>plt.show()"}
{"in":"t = np.linspace(-np.pi, np.pi, 100)<nl>x = np.cos(3t)<nl>y = np.sin(5*t)<nl>plt.figure(figsize=(5,5))<nl>plt.ylim(-1.1, 1.1)<nl>plt.plot(x, y)<nl>plt.show()","out":"t = np.linspace(-np.pi, np.pi, 100)<nl>x = np.cos(3*t)<nl>y = np.sin(5*t)<nl>plt.figure(figsize=(5,5))<nl>plt.ylim(-1.1, 1.1)<nl>plt.plot(x, y)<nl>plt.show()"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_a<nl><nl>a, b, c, d = map(int, input(),split())<nl>print((a+b)*(c-d))<nl>print('Takahashi')","out":"kogi #https:\/\/atcoder.jp\/contests\/abc269\/submit<nl><nl>a, b, c, d = map(int, input().split())<nl>x = (a + b) * (c - d)<nl>print(x)<nl>print('Takahashi')"}
{"in":"def gcd(a,b):<nl> if b==0:<nl><tab>return a<nl>else:<nl><tab>return gcd(b,a%b)<nl><tab>acd(6215,4746)","out":"def gcd(a,b):<nl><tab>if b==0:<nl><tab><tab>return a<nl><tab>else:<nl><tab><tab>return gcd(b,a%b)<nl> gcd(6215,4746)"}
{"in":"df = read_csv('pollen.csv', sep=',')<nl>df.head(5)","out":"df = pd.read_csv('pollen.csv', sep=',')<nl>df.head(5)"}
{"in":"A, B = map(int(),input().split())<nl>A = A + B<nl>if A >= 15 and B >= 8:<nl> print(1)<nl>elif A >= 10 and B >= 3:<nl> print(2)<nl>elif A >= 3:<nl> print(3)<nl>else:<nl> print(4)","out":"A, B = map(int,input().split())<nl>A = A + B<nl>if A >= 15 and B >= 8:<nl> print(1)<nl>elif A >= 10 and B >= 3:<nl> print(2)<nl>elif A >= 3:<nl> print(3)<nl>else:<nl> print(4)"}
{"in":"d = 20060524<nl>while d >=10:<nl> D = list(map(int, str(d)))<nl> print(D)<nl> d = sum(D)<nl> print(d)<nl>if d == 11 or d == 22 or d == 33 or d == 44:<nl><tab><tab>break","out":"d = 20060524<nl>while d >=10:<nl> D = list(map(int, str(d)))<nl> print(D)<nl> d = sum(D)<nl> print(d)<nl> if d == 11 or d == 22 or d == 33 or d == 44:<nl><tab><tab>break"}
{"in":"x=0<nl>if x > 0:<nl> 　 print(\"正\")<nl>else:<nl><tab><tab>if x ==0:<nl><tab><tab><tab><tab>print(\"ゼロ\")<nl><tab><tab>else:<nl><tab><tab><tab><tab>print(\"負\")","out":"x=0<nl>if x > 0:<nl><tab><tab>print(\"正\")<nl>else:<nl><tab><tab>if x ==0:<nl><tab><tab><tab><tab>print(\"ゼロ\")<nl><tab><tab>else:<nl><tab><tab><tab><tab>print(\"負\")"}
{"in":"class PersonD(object):<nl><tab><tab>def __init__(self, name, year, month, day):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab><tab><tab>self.year = year<nl><tab><tab><tab><tab>self.month = month<nl><tab><tab><tab><tab>self.day = day<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab><tab>return str([self.name, self.year, self.month, self.day])<nl><tab><tab>def age(self):<nl><tab><tab><tab><tab>return 2022 - self.year<nl><tab><tab>def stone(self):<nl><tab><tab><tab>return stones[self.month-1]<nl><tab><tab>def diff(self, p):<nl><tab><tab><tab>return abs(self.age() - p.age())<nl><nl>p = PersonD(\"かんな\", 1999, 2, 3)<nl>p2 = PersonD(\"く\", 1972,12,19)<nl>p.age()<nl>p.stone()<nl>p.diff(p2)","out":"class PersonD(object):<nl><tab><tab>def _init__(self, name, year, month, day):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab><tab><tab>self.year = year<nl><tab><tab><tab><tab>self.month = month<nl><tab><tab><tab><tab>self.day = day<nl><tab><tab>def _repr__(self):<nl><tab><tab><tab><tab>return str([self.name, self.year, self.month, self.day])<nl><tab><tab>def age(self):<nl><tab><tab><tab><tab>return 2022 - self.year<nl><tab><tab>def stone(self):<nl><tab><tab><tab>return stones[self.month-1]<nl><tab><tab>def diff(self, p):<nl><tab><tab><tab>return abs(self.age() - p.age())<nl><nl>p = PersonD(\"かんな\", 1999, 2, 3)<nl>p2 = PersonD(\"く\", 1972,12,19)<nl>p.age()<nl>p.stone()<nl>p.diff(p2)"}
{"in":"w = 44.0<nl>h = 1.60<nl>BMI = w \/ (h * h)<nl><nl>print('BMI', BMI)<nl><nl>if BMI < 18.5:<nl><tab><tab> print('低体重')<nl>elif<tab>BMI >=17.5 and BMI < 25.0<nl><tab><tab> print('標準')<nl>else:<nl><tab><tab>print('太り過ぎ')","out":"w = 44.0<nl>h = 1.60<nl>BMI = w \/ (h * h)<nl><nl>print('BMI', BMI)<nl><nl>if BMI < 18.5:<nl><tab><tab> print('低体重')<nl>elif<tab>BMI >=17.5 and BMI < 25.0:<nl><tab><tab> print('標準')<nl>else:<nl><tab><tab>print('太り過ぎ')"}
{"in":"import math<nl>class Ratio(object):<nl><tab><tab>a: int<nl><tab><tab>b: int<nl><tab><tab>def __init__(self, a, b=1):<nl><tab><tab><tab><tab>self.a = a \/\/ math.gcd(a,b)<nl><tab><tab><tab><tab>self.b = b \/\/ math.gcd(a,b)<nl><tab><tab>def __repr__(self): <nl><tab><tab><tab><tab>if self.b == 1:<nl><tab><tab><tab><tab><tab><tab>return str(self.a)<nl><tab><tab><tab><tab>return f'{self.a}\/{self.b}'<tab><nl><tab><tab>def add(self,x):<nl><tab><tab><tab><tab>a = self.a<nl><tab><tab><tab><tab>b = self.b<nl><tab><tab><tab><tab>c = x.a<nl><tab><tab><tab><tab>d = x.b<nl><tab><tab><tab><tab>return Ratio(a*b+b*c, b*d)<nl><tab><tab>def mul(self, x):<nl><tab><tab><tab><tab>a = self.a<nl><tab><tab><tab><tab>b = self.b<nl><tab><tab><tab><tab>c = x.a<nl><tab><tab><tab><tab>d = x.b<nl><tab><tab><tab><tab>return Ratio(a*c, b*d)<nl><tab><tab>def __float__(self):<nl><tab><tab><tab><tab>return self.a \/ self.b<nl><tab><tab>def __add__(self, x):<nl><tab><tab><tab><tab>return self.add(x)<nl><tab><tab>def __mul__(self, x):<nl><tab><tab><tab><tab>return self.mul(x)<nl><tab><tab>def __truediv__(self, x):<nl><tab><tab><tab><tab>a = self.a<nl><tab><tab><tab><tab>b = self.b<nl><tab><tab><tab><tab>c = x.a<nl><tab><tab><tab><tab>d = x.b<nl><tab><tab><tab><tab>return Ratio(a*d, b*c)<nl><nl><nl>Ration(1,2) \/ Ratio(1,3)","out":"import math<nl>class Ratio(object):<nl><tab><tab>a: int<nl><tab><tab>b: int<nl><tab><tab>def _init__(self, a, b=1):<nl><tab><tab><tab><tab>self.a = a \/\/ math.gcd(a,b)<nl><tab><tab><tab><tab>self.b = b \/\/ math.gcd(a,b)<nl><tab><tab>def _repr__(self): <nl><tab><tab><tab><tab>if self.b == 1:<nl><tab><tab><tab><tab><tab><tab>return str(self.a)<nl><tab><tab><tab><tab>return f'{self.a}\/{self.b}'<tab><nl><tab><tab>def add(self,x):<nl><tab><tab><tab><tab>a = self.a<nl><tab><tab><tab><tab>b = self.b<nl><tab><tab><tab><tab>c = x.a<nl><tab><tab><tab><tab>d = x.b<nl><tab><tab><tab><tab>return Ratio(a*b+b*c, b*d)<nl><tab><tab>def mul(self, x):<nl><tab><tab><tab><tab>a = self.a<nl><tab><tab><tab><tab>b = self.b<nl><tab><tab><tab><tab>c = x.a<nl><tab><tab><tab><tab>d = x.b<nl><tab><tab><tab><tab>return Ratio(a*c, b*d)<nl><tab><tab>def _float__(self):<nl><tab><tab><tab><tab>return self.a \/ self.b<nl><tab><tab>def _add__(self, x):<nl><tab><tab><tab><tab>return self.add(x)<nl><tab><tab>def _mul__(self, x):<nl><tab><tab><tab><tab>return self.mul(x)<nl><tab><tab>def _truediv__(self, x):<nl><tab><tab><tab><tab>a = self.a<nl><tab><tab><tab><tab>b = self.b<nl><tab><tab><tab><tab>c = x.a<nl><tab><tab><tab><tab>d = x.b<nl><tab><tab><tab><tab>return Ratio(a*d, b*c)<nl><nl><nl>Ratio(1,2) \/ Ratio(1,3)"}
{"in":"A,B=map(int,input(),split())<nl>1<=B<A<=10**5<nl>x=B\/A<nl>print(x)","out":"s,t=input().split()<nl>print(s+t)"}
{"in":"print(\"Hello World\"<tab> # わざと構文エラー","out":"print(\"Hello World\")<tab> # わざと構文エラー"}
{"in":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df(['kcal','tempreature']) <nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()<nl>","out":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df[['kcal','tempreature']] <nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()<nl>"}
{"in":"A = [<nl><tab><tab>list(map(int,input().split())),<nl><tab><tab>list(map(int,input().split())),<nl><tab><tab>list(map(int,input().split())),<nl>]<nl># print(A,A[1])[2] #右Aは1行2列目の要素をあらわしている<nl>b = []<nl>N = int(input())<nl><nl>for _ in range(N):<nl><tab>b.append(int(input()))<nl># print(b)<nl><nl>c = []<nl>d = []<nl>f = []<nl>l = []<nl>o = []<nl>for g in range(3):<nl><tab>h = A[g][0] #０～２行目０列目<nl><tab>c.append(h)<nl>for i in range(3):<nl><tab>j = A[i][1]<nl><tab>d.append(j)<nl>for k in range(3):<nl><tab>g = A[k][2]<nl><tab>f.append(g)<nl>for m in range(3):<nl><tab>n = A[m][m]<nl><tab>l.append(n)<nl>for p in range(3):<nl><tab>q = A[:p][p]<nl><tab>o.append(q)<nl><nl><nl>print(c,d,f,l,o)","out":"A = [<nl><tab><tab>list(map(int,input().split())),<nl><tab><tab>list(map(int,input().split())),<nl><tab><tab>list(map(int,input().split())),<nl>]<nl># print(A,A[1])[2] #右Aは1行2列目の要素をあらわしている<nl>b = []<nl>N = int(input())<nl><nl>for _ in range(N):<nl><tab>b.append(int(input()))<nl># print(b)<nl><nl>c = []<nl>d = []<nl>f = []<nl>l = []<nl>o = []<nl>for g in range(3):<nl><tab>h = A[g][0] #0~2行目0列目<nl><tab>c.append(h)<nl>for i in range(3):<nl><tab>j = A[i][1]<nl><tab>d.append(j)<nl>for k in range(3):<nl><tab>g = A[k][2]<nl><tab>f.append(g)<nl>for m in range(3):<nl><tab>n = A[m][m]<nl><tab>l.append(n)<nl>for p in range(3):<nl><tab>q = A[:p][p]<nl><tab>o.append(q)<nl><nl><nl>print(c,d,f,l,o)"}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl><nl>A,B,C=map(int,input()split()) #決まり文句<nl><nl>if A==B:<nl> print(C)<nl><nl>if A==C:<nl> print(B)<nl><nl> else ;<nl><tab>print(A)","out":"# kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl><nl>A,B,C=map(int,input().split()) #決まり文句<nl><nl>if A==B:<nl> print(C)<nl><nl>if A==C:<nl> print(B)<nl><nl>else :<nl><tab>print(A)"}
{"in":"#よくある学生の間違い<nl>print(Hello World)","out":"#よくある学生の間違い<nl>print(\"Hello World\")"}
{"in":"X = df[['低所得率','','交通']]<tab># ひとつ選ぶ<nl>y = df['住宅価格']<nl>model=LinearRegression()<nl>model.fit(X,y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(6,6))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)<nl><nl><nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)","out":"X = df[['低所得率','交通']]<tab># ひとつ選ぶ<nl>y = df['住宅価格']<nl>model=LinearRegression()<nl>model.fit(X,y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(6,6))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)<nl><nl><nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)"}
{"in":"<nl><nl><nl><nl>X =input()<nl><nl><nl>X1 = int(X[0])<nl>X2 = int(X[1])<nl>X3 = int(X[2])<nl>X4 = int(X[3])<nl><nl>n = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0,1,2]<nl><nl># for i in range(10) :<nl>#<tab> if X1== n[ i ]<tab>and<tab>X2== n[ i +1 ]<tab>and<tab>X3== n[ i + 2 ]<tab>and<tab>X4== n[ i + 3 ] :<nl>#<tab><tab> ans = \"Weak\"<nl>#<tab> else :<nl>#<tab><tab> ans = \"Strong\"<nl><nl># if X1 == X2 == X3 == X4 :<nl>#<tab> ans = \"Weak\"<nl><nl><nl>if X1 == X2 == X3 == X4 :<nl><tab>ans = \"Weak\"<nl>else :<nl><tab>for i in range(10) :<nl><tab><tab>if X1== n[ i ]<tab>and<tab>X2== n[ i +1 ]<tab>and<tab>X3== n[ i + 2 ]<tab>and<tab>X4== n[ i + 3 ] :<nl><tab><tab><tab>ans = \"Weak\"<nl><tab><tab><tab>else :<nl><tab><tab><tab><tab>ans = \"Strong\"<nl><nl><nl>print(ans)","out":"<nl><nl><nl><nl>X =input()<nl><nl><nl>X1 = int(X[0])<nl>X2 = int(X[1])<nl>X3 = int(X[2])<nl>X4 = int(X[3])<nl><nl>n = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0,1,2]<nl><nl># for i in range(10) :<nl>#<tab> if X1== n[ i ]<tab>and<tab>X2== n[ i +1 ]<tab>and<tab>X3== n[ i + 2 ]<tab>and<tab>X4== n[ i + 3 ] :<nl>#<tab><tab> ans = \"Weak\"<nl>#<tab> else :<nl>#<tab><tab> ans = \"Strong\"<nl><nl># if X1 == X2 == X3 == X4 :<nl>#<tab> ans = \"Weak\"<nl><nl><nl>if X1 == X2 == X3 == X4 :<nl><tab>ans = \"Weak\"<nl>else :<nl><tab>for i in range(10) :<nl><tab><tab>if X1== n[ i ]<tab>and<tab>X2== n[ i +1 ]<tab>and<tab>X3== n[ i + 2 ]<tab>and<tab>X4== n[ i + 3 ] :<nl><tab><tab><tab>ans = \"Weak\"<nl><tab><tab>else :<nl><tab><tab><tab>ans = \"Strong\"<nl><nl><nl>print(ans)"}
{"in":"＃大嫌いな７ (abc186_c)<nl>%%atcoder abc186_c<nl>N=int(input())<nl>ans=0<nl>for i in range(1,N+1):<nl><tab>s_decimal=str(i)<nl><tab>s_octal=format(i,'o')<nl><tab>if not(('7' in s_demical)or('7' in s_octal)):<nl><tab><tab>ans+= 1<nl>print(ans)","out":"#大嫌いな7 (abc186_c)<nl>%%atcoder abc186_c<nl>N=int(input())<nl>ans=0<nl>for i in range(1,N+1):<nl><tab>s_decimal=str(i)<nl><tab>s_octal=format(i,'o')<nl><tab>if not(('7' in s_demical)or('7' in s_octal)):<nl><tab><tab>ans+= 1<nl>print(ans)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split())<nl>C=[0]*N<nl>C[1]=abs(h[1]-h[0]):<nl><nl>C1[i]=C[i-2]+abs(h[i]-h[i-2])<nl>C2[i]=C[i-1]+abs(h[i]-h[i-1])<nl>C[i]=min(C1,C2)<nl>print(C[N-1])<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split()))<nl>C=[0]*N<nl>C[1]=abs(h[1]-h[0]):<nl><nl>C1[i]=C[i-2]+abs(h[i]-h[i-2])<nl>C2[i]=C[i-1]+abs(h[i]-h[i-1])<nl>C[i]=min(C1,C2)<nl>print(C[N-1])<nl>"}
{"in":"for col in df. columns:('住宅価格')<nl><tab><tab>r,p=pearsor(df[col],df['住宅価格'])<nl><tab><tab>print(f'相関係数[col]-住宅価格: {r}')","out":"for col in df. columns:<nl><tab><tab>r,p=pearsor(df[col],df['住宅価格'])<nl><tab><tab>print(f'相関係数[col]-住宅価格: {r}')"}
{"in":"df_plt.scatter(\"降水量\", \"スギ花粉飛散量\")","out":"plt.scatter(df[\"降水量\"], df[\"スギ花粉飛散量\"])"}
{"in":"https:\/\/kkuramitsu.github.io\/lec\/data\/boston.csv","out":"!wget https:\/\/kkuramitsu.github.io\/lec\/data\/boston.csv"}
{"in":"<nl>S,T = map(int, input().split())<nl>combs=[]<nl>for a in range(10):<nl><tab>for b in range(10):<nl><tab><tab>for c in range((10):<nl><tab><tab><tab>if a+a+c <= S and a*b*c <= T:<nl><tab><tab><tab><tab>combs.append((a,b,c))<nl><nl>print(len(combs))","out":"<nl>S,T = map(int, input().split())<nl>combs=[]<nl>for a in range(10):<nl><tab>for b in range(10):<nl><tab><tab>for c in range(10):<nl><tab><tab><tab>if a+a+c <= S and a*b*c <= T:<nl><tab><tab><tab><tab>combs.append((a,b,c))<nl><nl>print(len(combs))"}
{"in":"h = int(input(\"身長は？(cm)\"))<nl>BMI = 22<nl>w = (h \/ 100) * BMI <nl><nl>print(w)\"kg\"","out":"h = int(input(\"身長は?(cm)\"))<nl>BMI = 22<nl>w = (h \/ 100) * BMI <nl><nl>print(w,\"kg\")"}
{"in":"r,p = pearsonr(df['築年'],df['住宅価格'])<nl>print('相関係数':,r)<nl>print('p値':,p)","out":"r,p = pearsonr(df['築年'],df['住宅価格'])<nl>print('相関係数:',r)<nl>print('p値:',p)"}
{"in":"print(!head(pollen.csv))","out":"!head pollen.csv"}
{"in":"d=20090430<nl>while d >=10:#二桁の時は繰り返す<nl><tab>D=list(map(int,str(d)))<nl><tab>print(D)<nl><tab>d=sum(D)<nl><tab>print(d)<nl><tab>if d==11 or d==22 or d==33 ord==44<nl><tab><tab>break<nl>print(\"ソウルナンバー\",d)","out":"d=20090430<nl>while d >=10:#二桁の時は繰り返す<nl><tab>D=list(map(int,str(d)))<nl><tab>print(D)<nl><tab>d=sum(D)<nl><tab>print(d)<nl><tab>if d==11 or d==22 or d==33 or d==44:<nl><tab><tab>break<nl>print(\"ソウルナンバー\",d)"}
{"in":"r, p = pearsounr(df[\"部屋数\"], df[\"住宅価格\"])<nl>print(\"相関係数:\" , r)<nl>print(\"p値:\", p)","out":"r, p = pearsonr(df[\"部屋数\"], df[\"住宅価格\"])<nl>print(\"相関係数:\" , r)<nl>print(\"p値:\", p)"}
{"in":"from re import<nl>import matplotlib.pyplot as plt<nl>X=[]<nl>Y=[]<nl>for i in range(1,100):<nl><tab>X.append(i)<nl><tab>Y.append(calc_pi(i))<nl><nl>plt.plot(X,Y)<nl>plt.xlabel('N')<nl>plt.ylabel('pi')<nl>plt.show()","out":"import re<nl>import matplotlib.pyplot as plt<nl>X=[]<nl>Y=[]<nl>for i in range(1,100):<nl><tab>X.append(i)<nl><tab>Y.append(calc_pi(i))<nl><nl>plt.plot(X,Y)<nl>plt.xlabel('N')<nl>plt.ylabel('pi')<nl>plt.show()"}
{"in":"print(r(1,2)","out":"print(r(1,2))"}
{"in":"N=int(input())<nl>ng=0<nl>K=[]<nl>for i in range(N):<nl><tab>S=str(input())<nl><tab>s=list(S)<nl><tab>if s[0]=='H' or s[0]=='D' or s[0]=='C' or s[0]=='S':<nl><tab><tab>pass<nl><tab>else:<nl><tab><tab>ng+=1<nl><tab>if s[1]=='A' or s[1]=='2' or s[1]=='3' or s[1]=='4' or s[1]=='5':<nl><tab><tab>pass<nl><tab>elif s[1]=='6' or s[1]=='7' or s[1]=='8' or s[1]=='9' or s[1]=='T' or s[1]=='J' ors[1]=='Q' or s[1]=='K':<nl><tab><tab>pass <nl><tab>else:<nl><tab><tab>ng+=1 <nl><tab>K.append(S)<nl>if ng>=1:<nl><tab>print('No')<nl>else:<nl><tab>a=sorted(K)<nl><tab>if len(a)==len(K):<nl><tab><tab>print('Yes')<nl><tab>else:<nl><tab><tab>print('No')","out":"N=int(input())<nl>ng=0<nl>K=[]<nl>for i in range(N):<nl><tab>S=str(input())<nl><tab>s=list(S)<nl><tab>if s[0]=='H' or s[0]=='D' or s[0]=='C' or s[0]=='S':<nl><tab><tab>pass<nl><tab>else:<nl><tab><tab>ng+=1<nl><tab>if s[1]=='A' or s[1]=='2' or s[1]=='3' or s[1]=='4' or s[1]=='5':<nl><tab><tab>pass<nl><tab>elif s[1]=='6' or s[1]=='7' or s[1]=='8' or s[1]=='9' or s[1]=='T' or s[1]=='J' or s[1]=='Q' or s[1]=='K':<nl><tab><tab>pass <nl><tab>else:<nl><tab><tab>ng+=1 <nl><tab>K.append(S)<nl>if ng>=1:<nl><tab>print('No')<nl>else:<nl><tab>a=sorted(K)<nl><tab>if len(a)==len(K):<nl><tab><tab>print('Yes')<nl><tab>else:<nl><tab><tab>print('No')"}
{"in":"for x in date: <nl><tab>print(x)<nl><tab>print(x,x**2)<nl><tab>print(x,x**x)","out":"for x in data: <nl><tab>print(x)<nl><tab>print(x,x**2)<nl><tab>print(x,x**x)"}
{"in":"N=int(input())<nl>S=list(map(int,input().split()))<nl>M=max(S)<nl><nl>A=[]<nl>for a in range(1,1001):<nl><tab>for b in range(a,1001):<nl><tab><tab>x=4*a*b+3(a+b)<nl><tab><tab>A.append(x)<nl><nl>print(memo)<nl><nl>","out":"N=int(input())<nl>S=list(map(int,input().split()))<nl>M=max(S)<nl><nl>A=[]<nl>for a in range(1,1001):<nl><tab>for b in range(a,1001):<nl><tab><tab>x=4*a*b+3*(a+b)<nl><tab><tab>A.append(x)<nl><nl>print(memo)<nl><nl>"}
{"in":"for animal in animals:<nl><tab>print(animal.face(),aminal.sound())","out":"for animal in animals:<nl><tab>print(animal.face(),animal.sound())"}
{"in":"<nl>a, b = map(int(),input().split())<nl><nl><nl>if a>b:<nl><tab>print(str(b)*a)<nl>else:<nl><tab>print(str(a)*b)","out":"<nl>a, b = map(int,input().split())<nl><nl><nl>if a>b:<nl><tab>print(str(b)*a)<nl>else:<nl><tab>print(str(a)*b)"}
{"in":"df.read_csv('file.csv', encoding='pollen')<nl>df.head(5)","out":"df=pd.read_csv('file.csv', encoding='pollen')<nl>df.head(5)"}
{"in":"def calc(s:str)->float:<nl><tab>a,b = map(float, s.split('+'))<nl><tab><tab>return a+b","out":"def calc(s:str)->float:<nl><tab>a,b = map(float, s.split('+'))<nl><tab>return a+b"}
{"in":"def show(lives):<nl><tab>N,M=lives.shape<nl><tab>newlives=np.zeros(lives.sha@e)<nl><tab>for y in range(N):<nl><tab><tab>for x in range(M):<nl><tab><tab><tab><tab>c=count(lives,x,y)<nl><tab><tab><tab><tab>newlives[y,x]=lives[y,x]<nl><tab><tab><tab><tab>if lives[y,x]==1: <nl><tab><tab><tab><tab><tab><tab>if c<=1 or c>=4:<nl><tab><tab><tab><tab><tab><tab><tab><tab>newlives[y,x]=0<nl><tab><tab><tab><tab>elif c ==3:<nl><tab><tab><tab><tab><tab>newlives[y,x]=1<nl><tab>return lives.reshape(N,M)<nl><tab><nl><nl><tab><tab><tab><tab><tab><tab><tab> <nl>　","out":"def show(lives):<nl><tab>N,M=lives.shape<nl><tab>newlives=np.zeros(lives.sha@e)<nl><tab>for y in range(N):<nl><tab><tab>for x in range(M):<nl><tab><tab><tab><tab>c=count(lives,x,y)<nl><tab><tab><tab><tab>newlives[y,x]=lives[y,x]<nl><tab><tab><tab><tab>if lives[y,x]==1: <nl><tab><tab><tab><tab><tab><tab>if c<=1 or c>=4:<nl><tab><tab><tab><tab><tab><tab><tab><tab>newlives[y,x]=0<nl><tab><tab><tab><tab>elif c ==3:<nl><tab><tab><tab><tab><tab>newlives[y,x]=1<nl><tab>return lives.reshape(N,M)<nl><tab><nl><nl><tab><tab><tab><tab><tab><tab><tab> <nl><tab>"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc233\/tasks\/abc233_a<nl>X, Y = map(int, input().split())<nl>while True: n = (Y - X) \/ 10<nl>if X+(10*n) >= Y:<nl><tab>break<nl><tab>print(n)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc233\/tasks\/abc233_a<nl>X, Y = map(int, input().split())<nl>while True: <nl><tab>n = (Y - X) \/ 10<nl><tab>if X+(10*n) >= Y:<nl><tab><tab>break<nl>print(n)"}
{"in":"python -V<nl>","out":"! python -V<nl>"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl>a, b = (int, input().split())<nl>c, d = (int, input().split())<nl>print((a*d)-(c:b))<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl>a, b = (int, input().split())<nl>c, d = (int, input().split())<nl>print((a*d)-(c*b))<nl>"}
{"in":"#空のシーケンシャルデータを入れる箱に実際のデータを入れていく<nl>\"\"\"<nl>こんなイメージ？<nl>0,1,2,・・・9<tab><tab><tab><tab>+<tab>正解データt=10<nl><tab>1,2,・・・9,10<tab><tab> +<tab>正解データt=11<nl><tab><tab>2,・・・9,10,11<tab>+<tab>正解データt=12<nl>\"\"\"<nl>for i in range(n_sample):<nl><tab><tab>input_data[i] = df_scaled[i:i+time_stemp].reshape(-1, 1)<nl><tab><tab>correct_input_data[i] = df_scaled[i+time_stemp:i+time_stemp+1]<nl><nl>input_data = torch.tensor(input_data, dtype=torch.float) #Tensor化(入力)<nl>correct_data = torch.tensor(correct_input_data, dtype=torch.float) #Tensor化(正解)<nl>dataset = torch.utils.data.TensorDataset(input_data, correct_data) #データセット作成<nl>train_loader = DataLoader(dataset, batch_size=4, shuffle=True) #データローダー作成","out":"#空のシーケンシャルデータを入れる箱に実際のデータを入れていく<nl>\"\"\"<nl>こんなイメージ?<nl>0,1,2,・・・9<tab><tab><tab><tab>+<tab>正解データt=10<nl><tab>1,2,・・・9,10<tab><tab> +<tab>正解データt=11<nl><tab><tab>2,・・・9,10,11<tab>+<tab>正解データt=12<nl>\"\"\"<nl>for i in range(n_sample):<nl><tab><tab>input_data[i] = df_scaled[i:i+time_stemp].reshape(-1, 1)<nl><tab><tab>correct_input_data[i] = df_scaled[i+time_stemp:i+time_stemp+1]<nl><nl>input_data = torch.tensor(input_data, dtype=torch.float) #Tensor化(入力)<nl>correct_data = torch.tensor(correct_input_data, dtype=torch.float) #Tensor化(正解)<nl>dataset = torch.utils.data.TensorDataset(input_data, correct_data) #データセット作成<nl>train_loader = DataLoader(dataset, batch_size=4, shuffle=True) #データローダー作成"}
{"in":"class Jessy:<nl><nl><tab><tab>#3.入力→モデルの入力<nl><tab><tab>def before(self, text):<nl><tab><tab><tab><tab>self.dic = {}#前：後<nl><tab><tab><tab><tab>runtime_maps = get_runtime_maps()<nl><tab><tab><tab><tab>text_list = tokenize(text, maps=runtime_maps)<nl><tab><tab><tab><tab>print(text_list)<nl><tab><tab><tab><tab> <nl><tab><tab><tab><tab>for word in text_list:<nl><tab><tab><tab><tab><tab>runtime_maps_keys = runtime_maps.keys()<nl><tab><tab><tab><tab><tab>if word in runtime_maps_keys:<nl><tab><tab><tab><tab><tab><tab>try:<nl><tab><tab><tab><tab><tab><tab><tab>text = text.replace(word,+runtime_maps[word])<nl><tab><tab><tab><tab><tab><tab><tab>self.dic[word]=runtime_maps[word]<nl><tab><tab><tab><tab><tab><tab>except:<nl><tab><tab><tab><tab><tab><tab><tab>text = text.replace(word,runtime_maps[word][word])<nl><tab><tab><tab><tab><tab><tab><tab>self.dic[word]=runtime_maps[word][word]<nl><tab><tab><tab><tab><nl><tab><tab><tab><tab>print(text)<nl><tab><tab><tab><tab>return text<nl><nl><nl><tab><tab>#4.モデルの出力→ユーザへの出力<nl><tab><tab>def after(self, text):<nl><tab><tab><tab><tab><tab>self.dic<nl><tab><tab><tab><tab><tab>for dic_key,dic_value in self.dic.items():<nl><tab><tab><tab><tab><tab>text=text.replace(dic_value,dic_key)<nl><tab><tab><tab><tab><tab>print(text)<nl><tab><tab><tab><tab><tab>return text","out":"class Jessy:<nl><nl><tab><tab>#3.入力→モデルの入力<nl><tab><tab>def before(self, text):<nl><tab><tab><tab><tab>self.dic = {}#前:後<nl><tab><tab><tab><tab>runtime_maps = get_runtime_maps()<nl><tab><tab><tab><tab>text_list = tokenize(text, maps=runtime_maps)<nl><tab><tab><tab><tab>print(text_list)<nl><tab><tab><tab><tab> <nl><tab><tab><tab><tab>for word in text_list:<nl><tab><tab><tab><tab><tab>runtime_maps_keys = runtime_maps.keys()<nl><tab><tab><tab><tab><tab>if word in runtime_maps_keys:<nl><tab><tab><tab><tab><tab><tab>try:<nl><tab><tab><tab><tab><tab><tab><tab>text = text.replace(word,+runtime_maps[word])<nl><tab><tab><tab><tab><tab><tab><tab>self.dic[word]=runtime_maps[word]<nl><tab><tab><tab><tab><tab><tab>except:<nl><tab><tab><tab><tab><tab><tab><tab>text = text.replace(word,runtime_maps[word][word])<nl><tab><tab><tab><tab><tab><tab><tab>self.dic[word]=runtime_maps[word][word]<nl><tab><tab><tab><tab><nl><tab><tab><tab><tab>print(text)<nl><tab><tab><tab><tab>return text<nl><nl><nl><tab><tab>#4.モデルの出力→ユーザへの出力<nl><tab><tab>def after(self, text):<nl><tab><tab><tab><tab><tab>self.dic<nl><tab><tab><tab><tab><tab>for dic_key,dic_value in self.dic.items():<nl><tab><tab><tab><tab><tab>text=text.replace(dic_value,dic_key)<nl><tab><tab><tab><tab><tab>print(text)<nl><tab><tab><tab><tab><tab>return text"}
{"in":"X_train =train[['Age', 'Gender', <nl><tab><tab><tab><tab><tab><tab><tab>'T_Bil', <nl><tab><tab><tab><tab><tab><tab><tab>'D_Bil',<nl><tab><tab><tab><tab><tab><tab><tab>'ALP',<nl><tab><tab><tab><tab><tab><tab><tab>#'ALT_GPT',<nl><tab><tab><tab><tab><tab><tab><tab>'AST_GOT',<nl><tab><tab><tab><tab><tab><tab><tab>#'TP',<nl><tab><tab><tab><tab><tab><tab><tab>#'Alb',<nl><tab><tab><tab><tab><tab><tab><tab>#'AG_ratio']]<nl>y_train=train['disease']","out":"X_train =train[['Age', 'Gender', <nl><tab><tab><tab><tab><tab><tab><tab>'T_Bil', <nl><tab><tab><tab><tab><tab><tab><tab>'D_Bil',<nl><tab><tab><tab><tab><tab><tab><tab>'ALP',<nl><tab><tab><tab><tab><tab><tab><tab>#'ALT_GPT',<nl><tab><tab><tab><tab><tab><tab><tab>'AST_GOT']]<nl><tab><tab><tab><tab><tab><tab><tab>#'TP',<nl><tab><tab><tab><tab><tab><tab><tab>#'Alb',<nl><tab><tab><tab><tab><tab><tab><tab>#'AG_ratio']]<nl>y_train=train['disease']"}
{"in":"w＝４４,０<nl>h＝１,６０<nl>BMI＝w \/h**2<nl>print(BMI)","out":"w=44.0<nl>h=1.60<nl>BMI=w \/h**2<nl>print(BMI)"}
{"in":"ｗ ＝４６．６<nl>ｈ ＝１．６１<nl>BMI ＝ ｗ ／ ｈ ＊＊ ２<nl>print(BMI)","out":"w =46.6<nl>h =1.61<nl>BMI = w \/ h ** 2<nl>print(BMI)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split()))<nl>C = [0]*N<nl><nl>C[0]=0<nl>C[1]=abs(h[1]-h[0])<nl><nl>for i in range(2,N)<nl>C1=C[i-2]+abs(h[i]-h[i-2])<nl>C2=C{i-1}+abs(h[i]-h[i-1])<nl>C[i]=min(C1,C2)<nl>print(C[N-1])","out":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split()))<nl>C = [0]*N<nl><nl>C[0]=0<nl>C[1]=abs(h[1]-h[0])<nl><nl>for i in range(2,N):<nl><tab>C1=C[i-2]+abs(h[i]-h[i-2])<nl><tab>C2=C{i-1}+abs(h[i]-h[i-1])<nl><tab>C[i]=min(C1,C2)<nl>print(C[N-1])"}
{"in":"df = pollen.csv<nl>df.read_csv('file.csv', sep=',')<nl>df.head(5)","out":"df = pd.read_csv(\"pollen.csv\")<nl>df.head(5)"}
{"in":"w = 50<nl>h = 1.6<nl>BMI = w \/ (h**2)<nl>if BMI <18.5:<nl><tab><tab>print(\"低体重(やせ)\")<nl>else:<nl><tab><tab>if BMI<tab>>=25.0<nl><tab><tab><tab><tab>print(\"肥満\")<nl><tab><tab>else:<nl><tab><tab><tab><tab>print(\"\"普通体重)","out":"w = 50<nl>h = 1.6<nl>BMI = w \/ (h**2)<nl>if BMI <18.5:<nl><tab><tab>print(\"低体重(やせ)\")<nl>else:<nl><tab><tab>if BMI<tab>>=25.0:<nl><tab><tab><tab><tab>print(\"肥満\")<nl><tab><tab>else:<nl><tab><tab><tab><tab>print(\"\"普通体重)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B,C = map(int,input().split())<nl><nl>if A==B:<nl><tab>print(C)<nl>elif: A==C<nl><tab><tab>print(B)<nl>else:print(A)<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B,C = map(int,input().split())<nl><nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl>else:print(A)<nl>"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_b<nl>a=list()<nl>aa=list()<nl>cc=list()<nl>for i in range(10):<nl><tab>a=a+[input()]<nl>for j in range(10):<nl><tab>if a[j]=\"#\" :<nl><tab><tab>aa=+[i+1]<nl><tab><tab>cc=+[j+1]<nl>print(min(aa),max(aa))<nl>print(min(cc),max(cc))<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_b<nl>a=list()<nl>aa=list()<nl>cc=list()<nl>for i in range(10):<nl><tab>a=a+[input()]<nl>for j in range(10):<nl><tab>if a[j]==\"#\" :<nl><tab><tab>aa=+[i+1]<nl><tab><tab>cc=+[j+1]<nl>print(min(aa),max(aa))<nl>print(min(cc),max(cc))<nl>"}
{"in":"A, B = map(int, input().split())<nl>print C =(((A-3)\/3) + B)","out":"A, B = map(int, input().split())<nl>C =(((A-3)\/3) + B)<nl>print(C)"}
{"in":"<nl>N=int(input())<nl><nl>for i in range (1,10**9):<nl><tab>A=int(1\/2(2*1+(i-1)*1))<nl><tab>if A>=N:<nl><tab><tab><tab>print(i)","out":"<nl>N=int(input())<nl><nl>for i in range (1,10**9):<nl><tab>A=int(1\/2*(2*1+(i-1)*1))<nl><tab>if A>=N:<nl><tab><tab><tab>print(i)"}
{"in":"if BMI > 25.00 :<nl><tab><tab>print(’ふとりすぎ)<nl><tab><tab><nl>else:<nl><tab>　print('太りすぎでない')","out":"if BMI > 25.00:<nl><tab><tab>print('ふとりすぎ')<nl><tab><tab><nl>else:<nl><tab><tab>print('太りすぎでない')"}
{"in":"<nl>N=int(input())<nl><nl>for i in range (1,10**9):<nl><tab>A=1\/2(2*1+(i-1)*1)<nl><tab>if A>=N:<nl><tab><tab><tab>print(i)","out":"<nl>N=int(input())<nl><nl>for i in range (1,10**9):<nl><tab>A=1\/2*(2*1+(i-1)*1)<nl><tab>if A>=N:<nl><tab><tab><tab>print(i)"}
{"in":"w=45.2<nl>h＝1.62<nl>BMI＝w\/(h * h)<nl>print(BMI)","out":"w=45.2<nl>h=1.62<nl>BMI=w\/(h * h)<nl>print(BMI)"}
{"in":"ｗ＝４６．６<nl>ｈ＝１．６１<nl>BMI＝ｗ／ｈ＊＊２","out":"w=46.6<nl>h=1.61<nl>BMI=w\/h**2"}
{"in":"h=int(input\"身長は？(cm)\")<nl>print(h)","out":"h=int(input(\"身長は?(cm)\"))<nl>print(h)"}
{"in":"for column in df.columns:<nl><tab><tab>print(col)","out":"for col in df.columns:<nl><tab><tab>print(col)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc271\/tasks\/abc271_b<nl><nl>x,y=map(int,input().split())<nl>a=[]<nl>b=[]<nl>for i in range(x):<nl><tab><tab>ai=list(map(int,input().split()))<nl><tab><tab>a.attend(ai)<nl>for i in range(y):<nl><tab><tab>xi,yi=map(int,input().split())<nl><tab><tab>print(a[xi][yi])","out":"#kogi https:\/\/atcoder.jp\/contests\/abc271\/tasks\/abc271_b<nl><nl>x,y=map(int,input().split())<nl>a=[]<nl>b=[]<nl>for i in range(x):<nl><tab><tab>ai=list(map(int,input().split()))<nl><tab><tab>a.append(ai)<nl>for i in range(y):<nl><tab><tab>xi,yi=map(int,input().split())<nl><tab><tab>print(a[xi][yi])"}
{"in":"for column in df.columns[:-1]:<nl><tab>X = df[[column]]<nl><tab>Y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fit(X,y)<nl><tab>y_pred = model.predict(X)<nl><tab>r =r_score(y,y_pred)<tab><nl><tab>for column in df.columns[:-1]:<nl><tab><tab>X = df[[r]]<nl><tab><tab>Y = df['住宅価格']<nl><tab><tab>model = LinearRegression()<nl><tab><tab>model.fit(X,y)<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>r2 =r2_score(y,y_pred)<nl><tab><tab>print(f'{column}決定係数(R2):',r2)","out":"for column in df.columns[:-1]:<nl><tab>X = df[[column]]<nl><tab>Y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fit(X,y)<nl><tab>y_pred = model.predict(X)<nl><tab>r =r2_score(y,y_pred)<tab><nl><tab>for column in df.columns[:-1]:<nl><tab><tab>X = df[[r]]<nl><tab><tab>Y = df['住宅価格']<nl><tab><tab>model = LinearRegression()<nl><tab><tab>model.fit(X,y)<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>r2 =r2_score(y,y_pred)<nl><tab><tab>print(f'{column}決定係数(R2):',r2)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split()<nl>D=A-B<nl><nl>print((D\/A) *100)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split())<nl>D=A-B<nl><nl>print((D\/A) *100)"}
{"in":"[animal.leg() for animal in animals]<nl><nl>sum[animal.leg() for animal in animals]<nl><tab>","out":"[animal.leg() for animal in animals]<nl><nl>sum(animal.leg() for animal in animals)<nl><tab>"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A,B=map(int, input(),split()) #決まり文句決まり文句<nl><nl>D=A-B<nl>print((D\/A)*100)　#割引率<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A,B=map(int, input(),split()) #決まり文句決まり文句<nl><nl>D=A-B<nl>print((D\/A)*100)<tab>#割引率<nl>"}
{"in":"a =1<nl>for num in range(10):<nl><tab><tab>a += -1\/(4*(num+1)-1) + 1\/(4*(num+1+1) <nl><nl>print(4*a)","out":"a =1<nl>for num in range(10):<nl><tab><tab>a += -1\/(4*(num+1)-1) + 1\/(4*(num+1+1))<nl><nl>print(4*a)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split()) # 入力処理 決まり文句<nl>D＝A-B<nl>print(D)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split()) # 入力処理 決まり文句<nl>D=A-B<nl>print(D)"}
{"in":"print(\"hello world\"","out":"print(\"hello world\")"}
{"in":"df.read(10)","out":"df.head(10)"}
{"in":"if BMI < 18.50 :<nl><tab>print(\"低体重\")<nl>else BMI >= 18.50 <nl><tab><tab>print(\"低体重でない\")","out":"if BMI < 18.50 :<nl><tab>print(\"低体重\")<nl>else: <nl><tab>print(\"低体重でない\")"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc178\/tasks\/abc178_a<nl>x=int(input())<nl>if x==1:<nl><tab>print(0)<nl><tab>else<nl><tab>print(1)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc178\/tasks\/abc178_a<nl>x=int(input())<nl>if x==1:<nl><tab>print(0)<nl>else:<nl><tab>print(1)"}
{"in":"#BMI ＝ 体重kg ÷ (身長m)^2<nl>#適正体重 ＝ (身長m)^2 ×22<nl><nl>class PersonW(object):<nl><tab><tab> name:str<nl><tab><tab> height:int<nl><tab><tab> weight:int<nl><tab><tab> bmi:int<nl><tab><tab> def __init__(self):<tab> #c#だとconstructer<nl><tab><tab><tab> self.name = name<nl><tab><tab><tab> self.height = int(input('身長:'))<tab>#selfはthis<nl><tab><tab><tab> self.weight = int(input('体重:'))<nl><tab><tab> def bmi(self):<nl><tab><tab><tab> self.bmi = self.weight\/((self.height\/100)**2)<nl><tab><tab><tab> print(self.name,'のBMIは',self.bmi,'です')<nl><tab><tab> def iwb(self):<nl><tab><tab><tab> self.weight = 22*((self.height\/100)**2)<nl><tab><tab><tab> print(self.name,'の適正体重は',self.weight,'Kgです')<nl><tab><tab> def diff(self):<nl><tab><tab><tab> self.","out":"#BMI = 体重kg ÷ (身長m)^2<nl>#適正体重 = (身長m)^2 ×22<nl><nl>class PersonW(object):<nl><tab><tab> name:str<nl><tab><tab> height:int<nl><tab><tab> weight:int<nl><tab><tab> bmi:int<nl><tab><tab> def __init__(self):<tab> #c#だとconstructer<nl><tab><tab><tab> self.name = name<nl><tab><tab><tab> self.height = int(input('身長:'))<tab>#selfはthis<nl><tab><tab><tab> self.weight = int(input('体重:'))<nl><tab><tab> def bmi(self):<nl><tab><tab><tab> self.bmi = self.weight\/((self.height\/100)**2)<nl><tab><tab><tab> print(self.name,'のBMIは',self.bmi,'です')<nl><tab><tab> def iwb(self):<nl><tab><tab><tab> self.weight = 22*((self.height\/100)**2)<nl><tab><tab><tab> print(self.name,'の適正体重は',self.weight,'Kgです')<nl><tab><tab> def diff(self):<nl><tab><tab><tab> self."}
{"in":"#異なる文字列<nl><nl>S=inout()<nl><nl>print(sort(S))","out":"#異なる文字列<nl><nl>S=input()<nl><nl>print(sort(S))"}
{"in":"w=22*h**2<nl>print(w)<nl>print（f'w:{w:.2f}')","out":"w=22*h**2<nl>print(w)<nl>print(f'w:{w:.2f}')"}
{"in":"class infiniteZero(object):<nl><tab>def __next__(self):<nl><tab><tab>return 0<nl><nl>A = InfiniteZero()<nl>next(A)","out":"class infiniteZero(object):<nl><tab>def _next__(self):<nl><tab><tab>return 0<nl><nl>A = InfiniteZero()<nl>next(A)"}
{"in":"for colmun1 in df.columns[:-1]:<nl><tab>for column2 in df.columns[:-1]:<nl><tab><tab>X=df[[column1],[column2]]<nl><tab><tab>y=df['住宅価格']<nl><tab><tab>model=LinearRegression()<nl><tab><tab>model.fit(X,y)<nl><tab><tab>y_pred=model.predict(X)<nl><tab><tab>r2=r2_score(y,y_pred)<nl><tab><tab>print(f'{column}決定係数(R2):',r2)","out":"for column1 in df.columns[:-1]:<nl><tab>for column2 in df.columns[:-1]:<nl><tab><tab>X=df[[column1,column2]]<nl><tab><tab>y=df['住宅価格']<nl><tab><tab>model=LinearRegression()<nl><tab><tab>model.fit(X,y)<nl><tab><tab>y_pred=model.predict(X)<nl><tab><tab>r2=r2_score(y,y_pred)<nl><tab><tab>print(f'{column}決定係数(R2):',r2)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split()<nl>print(((A-B)\/A) *100)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split())<nl>print(((A-B)\/A) *100)"}
{"in":"S = [input().split() for l in range(4)]<nl>S_s = sorted(S)<nl>pirnt(S_s)","out":"S = [input().split() for l in range(4)]<nl>S_s = sorted(S)<nl>print(S_s)"}
{"in":"Sx,Sy,Gx,Gy=map(int, input().split())<nl>#Sy=-Sxa+b<nl>#Gy=Gxa+b<nl>#Sy-Gy=-(Sx+Gx)a<nl>#a=<nl>#b=Sx((Sy-Gy)\/-(Sx+Gx))<nl>x=(((-Sx(Sy-Gy))\/(Sx+Gx))\/((Sy-Gy)\/(-Sx-Gx)))<nl>print('{:.10f}'.format(x))<nl>","out":"Sx,Sy,Gx,Gy=map(int, input().split())<nl>#Sy=-Sxa+b<nl>#Gy=Gxa+b<nl>#Sy-Gy=-(Sx+Gx)a<nl>#a=<nl>#b=Sx((Sy-Gy)\/-(Sx+Gx))<nl>x=(((-Sx*(Sy-Gy))\/(Sx+Gx))\/((Sy-Gy)\/(-Sx-Gx)))<nl>print('{:.10f}'.format(x))<nl>"}
{"in":"w = 65.0<nl>h = 1.75<nl>BMI = w \/ h ** 2<nl><nl>print('BMI', BMI)<nl><nl>if BMI < 18.5:<nl><tab><tab>print('低体重')<nl>elif BMI >=18.5 and BMI < 25.0:<nl><tab><tab>print('標準')<nl>else:<nl><tab><tab>print('太り過ぎ'","out":"w = 65.0<nl>h = 1.75<nl>BMI = w \/ h ** 2<nl><nl>print('BMI', BMI)<nl><nl>if BMI < 18.5:<nl><tab><tab>print('低体重')<nl>elif BMI >=18.5 and BMI < 25.0:<nl><tab><tab>print('標準')<nl>else:<nl><tab><tab>print('太り過ぎ')"}
{"in":"df=pd.read_csv('\/content\/sample_data\/california_housing_test.csv'","out":"df=pd.read_csv('\/content\/sample_data\/california_housing_test.csv')"}
{"in":"A,B,C=map(int,input().split())<nl><nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl>else<nl>print(A)","out":"A,B,C=map(int,input().split())<nl><nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl>else:<nl><tab>print(A)"}
{"in":"d=200847<nl>while d >10:　#二桁のときは繰り返す<nl>D=list(map(int,str(d)))<nl>print(D)<nl>d=sum(D)<nl>print(d)<nl>if d==11 or d==22 or d==33 or d==44<nl>break #条件を満たしたらループを抜ける<nl><nl>print('ソウルナンバー')","out":"d=200847<nl>while d >10:<tab>#二桁のときは繰り返す<nl>D=list(map(int,str(d)))<nl>print(D)<nl>d=sum(D)<nl>print(d)<nl>if d==11 or d==22 or d==33 or d==44<nl>break #条件を満たしたらループを抜ける<nl><nl>print('ソウルナンバー')"}
{"in":"if BMI<17.5:<nl><tab>print(\"低体重\")<nl>elif BMI>=17.5 and BMI<25.0:<nl><tab>print(\"標準\")<nl>elif:<nl><tab>print(\"太りすぎ\")","out":"if BMI<17.5:<nl><tab>print(\"低体重\")<nl>elif BMI>=17.5 and BMI<25.0:<nl><tab>print(\"標準\")<nl>else:<nl><tab>print(\"太りすぎ\")"}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc277\/tasks\/abc277_a<nl>N,X=map(int,input().split())<nl>P=list(map(int,input().split())<nl><nl>print(P.index(X))","out":"# kogi https:\/\/atcoder.jp\/contests\/abc277\/tasks\/abc277_a<nl>N,X=map(int,input().split())<nl>P=list(map(int,input().split()))<nl><nl>print(P.index(X))"}
{"in":"W = 37.6<nl>h = 1.52<nl>BMI = w\/(h**h)<nl>print(BMI)","out":"w = 37.6<nl>h = 1.52<nl>BMI = w\/(h**h)<nl>print(BMI)"}
{"in":"X_train =train[['Age', 'Gender', <nl><tab><tab><tab><tab><tab><tab><tab>'T_Bil', <nl><tab><tab><tab><tab><tab><tab><tab>'D_Bil',<nl><tab><tab><tab><tab><tab><tab><tab>'ALP',<nl><tab><tab><tab><tab><tab><tab><tab>'ALT_GPT',<nl><tab><tab><tab><tab><tab><tab><tab>'AST_GOT,<nl><tab><tab><tab><tab><tab><tab><tab>'TP',<nl><tab><tab><tab><tab><tab><tab><tab>'Alb',<nl><tab><tab><tab><tab><tab><tab><tab>'AG\\ratio']]<nl>y_train=train['disease']","out":"X_train =train[['Age', 'Gender', <nl><tab><tab><tab><tab><tab><tab><tab>'T_Bil', <nl><tab><tab><tab><tab><tab><tab><tab>'D_Bil',<nl><tab><tab><tab><tab><tab><tab><tab>'ALP',<nl><tab><tab><tab><tab><tab><tab><tab>'ALT_GPT',<nl><tab><tab><tab><tab><tab><tab><tab>'AST_GOT',<nl><tab><tab><tab><tab><tab><tab><tab>'TP',<nl><tab><tab><tab><tab><tab><tab><tab>'Alb',<nl><tab><tab><tab><tab><tab><tab><tab>'AG\\ratio']]<nl>y_train=train['disease']"}
{"in":"h = int(input(\"身長は？(cm)\"))<nl>BMI = 22<nl>w = (h \/ 100) * BMI <nl><nl>print(\"標準体重は\"w\"kg\")","out":"h = int(input()) #身長は?(cm)<nl>BMI = 22<nl>w = (h \/ 100) * BMI <nl><nl>print(f'標準体重は{w}kg')"}
{"in":"df4 = df4['職業'] = Jリーガー<nl>df4","out":"df4['職業'] == \"Jリーガー\"<nl>df4"}
{"in":"コギーくん","out":"#コギーくん"}
{"in":"print(y","out":"print(y)"}
{"in":"import numpy as np<nl>import pandas as pd<nl>import matplotlib.pyplot as plt<nl>import seaborn as sns<nl><tab>try:<nl><tab><tab>import japanize_matplotlib<tab><nl>except ModuleNotFoundError:<nl><tab><tab>import os<nl><tab><tab>os.system('pip3 install japanize_matplotlib')<nl><tab><tab>import japanize_matplotlib <nl>sns.set(font=\"IPAexGothic\")","out":"import numpy as np<nl>import pandas as pd<nl>import matplotlib.pyplot as plt<nl>import seaborn as sns<nl>try:<nl><tab><tab>import japanize_matplotlib<tab><nl>except ModuleNotFoundError:<nl><tab><tab>import os<nl><tab><tab>os.system('pip3 install japanize_matplotlib')<nl><tab><tab>import japanize_matplotlib <nl>sns.set(font=\"IPAexGothic\")"}
{"in":"N=int(input())<nl>S=list(map(int,input().split()))<nl>M=max(S)<nl><nl>memo=[]<nl>for a in range(1,1001):<nl><tab>for b in range(a,1001):<nl><tab><tab>x=4*a*b+3(a+b)<nl><tab><tab>memo.append(x)<nl><nl>print(memo)<nl><nl>","out":"N=int(input())<nl>S=list(map(int,input().split()))<nl>M=max(S)<nl><nl>memo=[]<nl>for a in range(1,1001):<nl><tab>for b in range(a,1001):<nl><tab><tab>x=4*a*b+3*(a+b)<nl><tab><tab>memo.append(x)<nl><nl>print(memo)<nl><nl>"}
{"in":"if BMI >＝ 25.00 :<nl><tab><tab>print('太りすぎ')<nl>else :<nl><tab>print('太りすぎでない')","out":"if BMI >= 25.00 :<nl><tab>print('太りすぎ')<nl>else :<nl><tab>print('太りすぎでない')"}
{"in":"from sklearn.ensemble import RandomForestRegressor<nl><nl>#RandomForestのパラメータ設定<nl>randomforest = RandomForestRegressor(n_estimators=100,max_depth=4,random_state=2018)<nl><nl>#残差 = 実測値 - 予測値 を求める<nl>pred_sub = y_train - pred<nl><nl>#RandomForestの説明変数には全てのカラムを使う<nl>randomforest_X_train = train.drop(['y'],axis=1)<nl><nl>#randomforest_X_trainを説明変数、pred_sub（残差）を目的変数にし、モデル作成<nl>randomforest.fit(randomforest_X_train,pred_sub)","out":"from sklearn.ensemble import RandomForestRegressor<nl><nl>#RandomForestのパラメータ設定<nl>randomforest = RandomForestRegressor(n_estimators=100,max_depth=4,random_state=2018)<nl><nl>#残差 = 実測値 - 予測値 を求める<nl>pred_sub = y_train - pred<nl><nl>#RandomForestの説明変数には全てのカラムを使う<nl>randomforest_X_train = train.drop(['y'],axis=1)<nl><nl>#randomforest_X_trainを説明変数、pred_sub(残差)を目的変数にし、モデル作成<nl>randomforest.fit(randomforest_X_train,pred_sub)"}
{"in":"df='pollen.csv'<nl>df.read_csv('pollen.csv')<nl>df.head()","out":"df=pd.read_csv('pollen.csv')<nl>df.head()"}
{"in":"w = int(input(\"体重は？(kg)\")) <nl>BMI = 22<nl>h = w \/ BMI<nl>import math<nl>print(\"平均身長\", math.sqrt(h) *100 cm)","out":"w = int(input(\"体重は?(kg)\")) <nl>BMI = 22<nl>h = w \/ BMI<nl>import math<nl>print(\"平均身長\", math.sqrt(h) *100)"}
{"in":"A,B = map(int,input(),split())","out":"#kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl>A,B=list(map(int,input().split()))<nl>C=(A-B)\/3+B<nl>print(C)"}
{"in":"ｗ　＝４６．６<nl>ｈ　＝１．６１<nl>BMI　＝ｗ／ｈ＊＊２","out":"w<tab>=46.6<nl>h<tab>=1.61<nl>BMI<tab>=w\/h**2"}
{"in":"stones = [\"ガーネット アメジスト アクアマリン ダイヤモンド エメラルド 養殖真珠 ルビー ペリドット スピネル サファイア オパール トパーズ ターコイズ\"]<nl>class PersonD(object):<nl><tab><tab>def __init__(self, name, year, month, day):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab><tab><tab>self.year = year<nl><tab><tab><tab><tab>self.month = month<nl><tab><tab><tab><tab>self.day = day<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab><tab>return str([self.name, self.year, self.month, self.day])<nl><tab><tab>def age(self):<nl><tab><tab><tab><tab>return 2022 - self.year<nl><tab><tab>def stone(self):<nl><tab><tab><tab><tab>return stones[self.stones - 1]<nl><tab><tab>def diff(self, p):<nl><tab><tab><tab><tab>return abs(self.age() - p.age())<nl><tab><tab>def is_same_month(self, p):<nl><tab><tab><tab><tab>return self.month == p.month<nl><tab><tab><tab><tab><nl>p =<tab>PersonD(\"か\", 1999, 2, 3)<nl>p2 = personD(\"て\", 1999, 12, 19)<nl>p.age()<nl>p.stones()<nl>p.diff(p2)<nl>p.is_same_month()","out":"stones = [\"ガーネット アメジスト アクアマリン ダイヤモンド エメラルド 養殖真珠 ルビー ペリドット スピネル サファイア オパール トパーズ ターコイズ\"]<nl>class PersonD(object):<nl><tab><tab>def _init__(self, name, year, month, day):<nl><tab><tab><tab><tab>self.name = name<nl><tab><tab><tab><tab>self.year = year<nl><tab><tab><tab><tab>self.month = month<nl><tab><tab><tab><tab>self.day = day<nl><tab><tab>def _repr__(self):<nl><tab><tab><tab><tab>return str([self.name, self.year, self.month, self.day])<nl><tab><tab>def age(self):<nl><tab><tab><tab><tab>return 2022 - self.year<nl><tab><tab>def stone(self):<nl><tab><tab><tab><tab>return stones[self.stones - 1]<nl><tab><tab>def diff(self, p):<nl><tab><tab><tab><tab>return abs(self.age() - p.age())<nl><tab><tab>def is_same_month(self, p):<nl><tab><tab><tab><tab>return self.month == p.month<nl><tab><tab><tab><tab><nl>p =<tab>PersonD(\"か\", 1999, 2, 3)<nl>p2 = personD(\"て\", 1999, 12, 19)<nl>p.age()<nl>p.stones()<nl>p.diff(p2)<nl>p.is_same_month()"}
{"in":"df= read_csv('pollen.csv', sep=',')<nl>df.head()","out":"df= pd.read_csv('pollen.csv', sep=',')<nl>df.head()"}
{"in":"plt.plot(df='西暦',df='降水量')","out":"plt.plot(df['西暦'],df['降水量'])"}
{"in":"de.info()","out":"df.info()"}
{"in":"if BMI ＞ 25.0:<nl><tab><tab>print('太り過ぎ')<nl>else:<nl><tab><tab>print('標準')","out":"if BMI > 25.0:<nl><tab><tab>print('太り過ぎ')<nl>else:<nl><tab><tab>print('標準')"}
{"in":"model = sklearn.linear_model.LinearRegression()<nl>x_model=df['平均気温']<nl>y_model=df{'スギ花粉飛散量'}<nl>model.fit(x_model,y_model)","out":"model = sklearn.linear_model.LinearRegression()<nl>x_model=df['平均気温']<nl>y_model=df['スギ花粉飛散量']<nl>model.fit(x_model,y_model)"}
{"in":"def mysqrt(n):<nl><tab>return x = n**(1\/2)<nl><nl>for i in range(10):<nl><tab>print(x)","out":"def mysqrt(n):<nl><tab>return n**(1\/2)<nl><nl>for i in range(10):<nl><tab>print(i)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc278\/tasks\/abc278_a<nl>n, k = map(int, input().split())<nl>a = list(map(int, input().split()))<nl>x=[]<nl>x.append(a[k:])<nl>print(x)<nl>x+=[0]*(abs(n-k+1)))<nl><nl>print(x)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc278\/tasks\/abc278_a<nl>n, k = map(int, input().split())<nl>a = list(map(int, input().split()))<nl>x=[]<nl>x.append(a[k:])<nl>print(x)<nl>x+=[0]*(abs(n-k+1))<nl><nl>print(x)"}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc277\/tasks\/abc277_a<nl>N,X=map(int,input().split())<nl>P=list(map(int,input.split())<nl><nl>print(P.index(str(X)))","out":"# kogi https:\/\/atcoder.jp\/contests\/abc277\/tasks\/abc277_a<nl>N,X=map(int,input().split())<nl>P=list(map(int,input.split()))<nl><nl>print(P.index(str(X)))"}
{"in":"clf = tree.DecisionTreeRegressor(max_depth=20, random_state=1)<nl>clf.fit(X_train, y_train)<nl><nl>y_pred = clf.predict(X_test)<nl><nl>for i in range(382):<nl><tab><tab>if y_pred[i]>=0.5:<nl><tab><tab><tab><tab>y_pred[i]=1<nl><tab><tab>else:<nl><tab><tab><tab><tab>y_pred[i]=0<nl><tab><tab><tab><tab><nl>sub['disease'] = list(map(int, y_pred))<nl>sub['id'] = test['id']<nl>sub.to_csv('submission.csv', index=False)<nl><nl>features = X_train.columns<nl><nl>with open(\"tree.dot\", 'w') as f:<nl><tab><tab>tree.export_graphviz(<nl><tab><tab><tab><tab>clf,<nl><tab><tab><tab><tab>out_file=f,<nl><tab><tab><tab><tab>feature_names=features,<nl><tab><tab><tab><tab>filled=True,<nl><tab><tab><tab><tab>rounded=True,<tab><nl><tab><tab><tab><tab>special_characters=True,<nl><tab><tab><tab><tab>impurity=False,<nl><tab><tab><tab><tab>proportion=False,<nl><tab><tab><tab><tab>class_names=list(map(str, range(0, np.max(kmeans_result)+1)))<nl><tab><tab>)","out":"clf = DecisionTreeRegressor(max_depth=20, random_state=1)<nl>clf.fit(X_train, y_train)<nl><nl>y_pred = clf.predict(X_test)<nl><nl>for i in range(382):<nl><tab><tab>if y_pred[i]>=0.5:<nl><tab><tab><tab><tab>y_pred[i]=1<nl><tab><tab>else:<nl><tab><tab><tab><tab>y_pred[i]=0<nl><tab><tab><tab><tab><nl>sub['disease'] = list(map(int, y_pred))<nl>sub['id'] = test['id']<nl>sub.to_csv('submission.csv', index=False)<nl><nl>features = X_train.columns<nl><nl>with open(\"tree.dot\", 'w') as f:<nl><tab><tab>tree.export_graphviz(<nl><tab><tab><tab><tab>clf,<nl><tab><tab><tab><tab>out_file=f,<nl><tab><tab><tab><tab>feature_names=features,<nl><tab><tab><tab><tab>filled=True,<nl><tab><tab><tab><tab>rounded=True,<tab><nl><tab><tab><tab><tab>special_characters=True,<nl><tab><tab><tab><tab>impurity=False,<nl><tab><tab><tab><tab>proportion=False,<nl><tab><tab><tab><tab>class_names=list(map(str, range(0, np.max(kmeans_result)+1)))<nl><tab><tab>)"}
{"in":"#やってみよう<nl>x = 30<nl>y = math.sin(30)<nl>print(y","out":"#やってみよう<nl>x = 30<nl>y = math.sin(30)<nl>print(y)"}
{"in":"X = train[\"Age\",\"Gender\", \"T_Bil\",\t\"D_Bil\",\t\"ALP\",\t\"ALT_GPT\",\t\"AST_GOT\",\"TP\",\t\"Alb\",\t\"AG_ratio\"]<tab># target 以外<nl>y = train[\"target\"]","out":"X = train[[\"Age\",\"Gender\", \"T_Bil\",<tab><tab><tab><tab>\"D_Bil\",<tab><tab><tab><tab>\"ALP\",<tab><tab><tab><tab>\"ALT_GPT\",<tab><tab><tab><tab>\"AST_GOT\",\"TP\",<tab><tab><tab><tab>\"Alb\",<tab><tab><tab><tab>\"AG_ratio\"]] # target 以外<nl>y = train[\"target\"]"}
{"in":"for x in data:<nl>if x % 2==0:<nl><tab>print(\"偶数\",x)<nl>else:<nl><tab>print(\"奇数\",x)","out":"for x in data:<nl><tab>if x % 2==0:<nl><tab><tab>print(\"偶数\",x)<nl><tab>else:<nl><tab><tab>print(\"奇数\",x)"}
{"in":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl>df=sample(150)<nl>X = df[['week'],['weather'],['kcal']] <nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()<nl>","out":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl>df=df.sample(150)<nl>X = df[['week', 'weather', 'kcal']] <nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()<nl>"}
{"in":"from fractions import Fraction<nl><nl>class Ratio(object):<nl><tab><tab>def __init__(self, x, y):<nl><tab><tab><tab><tab>self.x = x<nl><tab><tab><tab><tab>self.y = y<nl><nl><tab><tab>def Fra(self.x, self.y):<nl><tab><tab><tab><tab>a = Fraction(self.x, self.y)<nl><tab><tab><tab><tab>self.x = a.numerator<nl><tab><tab><tab><tab>self.y = a.denominator<nl><tab><tab><nl>#<tab><tab>def add(self):<nl><tab><tab><tab><tab><nl><nl><tab><tab>def __repr__(self): <nl><tab><tab><tab><tab>return f'{self.x}\/{self.y}'","out":"from fractions import Fraction<nl><nl>class Ratio(object):<nl><tab><tab>def __init__(self, x, y):<nl><tab><tab><tab><tab>self.x = x<nl><tab><tab><tab><tab>self.y = y<nl><nl><tab><tab>def Fra(x, y):<nl><tab><tab><tab><tab>a = Fraction(self.x, self.y)<nl><tab><tab><tab><tab>self.x = a.numerator<nl><tab><tab><tab><tab>self.y = a.denominator<nl><tab><tab><nl>#<tab><tab>def add(self):<nl><tab><tab><tab><tab><nl><nl><tab><tab>def __repr__(self): <nl><tab><tab><tab><tab>return f'{self.x}\/{self.y}'"}
{"in":"for colum in df .columns[:-1]:<nl><tab><tab>X = df[[column]]<nl><tab><tab>y = df['住宅価格']<nl><tab><tab>model = LinearRegression()<nl><tab><tab>model.fit(X, y)<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>r2 = r2_score(y, y_pred)<nl><tab><tab>print(f'[column]決定係数(R2):', r2)","out":"for column in df .columns[:-1]:<nl><tab><tab>X = df[[column]]<nl><tab><tab>y = df['住宅価格']<nl><tab><tab>model = LinearRegression()<nl><tab><tab>model.fit(X, y)<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>r2 = r2_score(y, y_pred)<nl><tab><tab>print(f'[column]決定係数(R2):', r2)"}
