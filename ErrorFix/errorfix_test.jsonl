{"in":"heights=[145,150,155,160,165,170,175,180,185]<nl>for h in heights:<nl><tab>w=22*(h**2)<nl><tab>print(W)","out":"heights=[145,150,155,160,165,170,175,180,185]<nl>for h in heights:<nl><tab>w=22*(h**2)<nl><tab>print(w)"}
{"in":"<nl>A,B,C = map(int, input().split())<nl><nl>a = [A,B,C]<nl>b = a.sorted()<nl><nl>print(b)<nl>#if b[2]-b[1] == b[1]-b[0]:<nl><tab>#print('Yes')<nl><nl>#else:<nl> # print('No')","out":"<nl>A,B,C = map(int, input().split())<nl><nl>a = [A,B,C]<nl>b = sorted(a)<nl><nl>print(b)<nl>#if b[2]-b[1] == b[1]-b[0]:<nl><tab>#print('Yes')<nl><nl>#else:<nl> # print('No')"}
{"in":"df = read_csv('pollen.csv')<nl>df.head()","out":"df = pd.read_csv('pollen.csv')<nl>df.head()"}
{"in":"if df_uid_all1[[\"e → g\"]==962.636364]\t:<nl><tab>print(1)","out":"if df_uid_all1[df_uid_all1[\"e → g\"]==962.636364]<tab><tab><tab><tab>:<nl><tab>print(1)"}
{"in":"x=2<nl>if x>0:<nl><tab>print(\"正\")<nl>else :<nl> if ==0<nl><tab><tab>print(\"ゼロ\")<nl> else:<nl><tab><tab>print(\"負\")","out":"x=2<nl>if x>0:<nl><tab>print(\"正\")<nl>else :<nl><tab>if ==0:<nl><tab><tab>print(\"ゼロ\")<nl><tab>else:<nl><tab><tab>print(\"負\")"}
{"in":"N,M=map(int,input().split())<nl>K=[]<nl>for i in range(M):<nl><tab>AB=list(map(int,input().split()))<nl><tab>K.append(AB)<nl>for x in range(1,M+1):<nl><tab>a=[]<nl><tab>kai=0<nl><tab>for y in range(M):<nl><tab><tab>if x==K[y][0]:<nl><tab><tab><tab>kai+=1<nl><tab><tab><tab>a.append(K[y][1])<nl><tab><tab>elif x==K[y][1]:<nl><tab><tab><tab>kai+=1<nl><tab><tab><tab>a.appned(K[y][0])<nl><tab>a.sort()<nl><tab>print(a)<nl><tab>if len(a)==0:<nl><tab><tab>print(0)<nl><tab>else:<nl><tab><tab>for i in range(len(a)):<nl><tab><tab><tab>print(a[i],end=' ')<nl><tab>","out":"N,M=map(int,input().split())<nl>K=[]<nl>for i in range(M):<nl><tab>AB=list(map(int,input().split()))<nl><tab>K.append(AB)<nl>for x in range(1,M+1):<nl><tab>a=[]<nl><tab>kai=0<nl><tab>for y in range(M):<nl><tab><tab>if x==K[y][0]:<nl><tab><tab><tab>kai+=1<nl><tab><tab><tab>a.append(K[y][1])<nl><tab><tab>elif x==K[y][1]:<nl><tab><tab><tab>kai+=1<nl><tab><tab><tab>a.append(K[y][0])<nl><tab>a.sort()<nl><tab>print(a)<nl><tab>if len(a)==0:<nl><tab><tab>print(0)<nl><tab>else:<nl><tab><tab>for i in range(len(a)):<nl><tab><tab><tab>print(a[i],end=' ')<nl><tab>"}
{"in":"factor(x**3+y**3+z**3-3*x*y*z","out":"factor(x**3+y**3+z**3-3*x*y*z)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B,(map(int,input().splist())<nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl> else:<nl><tab>print(A)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B=map(int,input().split())<nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl>else:<nl><tab>print(A)"}
{"in":"#やってみよう<nl>x = 30<nl><nl>#y =　sin30° 作成<nl>math.sin(x)<nl><nl><nl>print(y)","out":"#やってみよう<nl>x = 30<nl><nl>#y =<tab>sin30° 作成<nl>math.sin(x)<nl><nl><nl>print(y)"}
{"in":"def norm(x):<nl>sum(x*x)**0.5","out":"def norm(x):<nl><tab>sum(x*x)**0.5"}
{"in":"n[]","out":"n = []"}
{"in":"#6-6<nl>A, B = map(str,input().split())<nl><nl>ans = 'easy'<nl><nl>A = A[::-1]<nl>B = B[::-1]<nl><nl><nl>for i in min(len(A),len(B)):<nl><tab>sum = int(A[i]) + int(B[i])<nl><tab>if sum >= 10:<nl><tab><tab>ans = 'hard'<nl><tab><tab>break<nl><nl>print(ans)","out":"#6-6<nl>A, B = map(str,input().split())<nl><nl>ans = 'easy'<nl><nl>A = A[::-1]<nl>B = B[::-1]<nl><nl><nl>for i in range(min(len(A),len(B))):<nl><tab>sum = int(A[i]) + int(B[i])<nl><tab>if sum >= 10:<nl><tab><tab>ans = 'hard'<nl><tab><tab>break<nl><nl>print(ans)"}
{"in":"def gcd(a,b):<nl>ifb==0:<nl><tab>return a<nl>else:<nl><tab>return gcd(b,a%b)","out":"def gcd(a,b):<nl><tab>if b==0:<nl><tab><tab>return a<nl><tab>else:<nl><tab><tab>return gcd(b,a%b)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc200\/tasks\/abc200_a<nl>N = int(input())<nl>iprint(mod(N \/ 100))<nl>print(N\/100)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc200\/tasks\/abc200_a<nl>N = int(input())<nl>print(N % 100)<nl>print(N\/100)"}
{"in":"df.StandardScaler().fit_transform(df)","out":"StandardScaler().fit_transform(df)"}
{"in":"df3=df3.drop(5,axis=0)<nl>df3","out":"df3=df3.drop(5,axis=1)<nl>df3"}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc277\/tasks\/abc277_a<nl>N,X=map(int,input().split())<nl>P=list(map(int,input.split())<nl><nl>print(P.index(X))","out":"# kogi https:\/\/atcoder.jp\/contests\/abc277\/tasks\/abc277_a<nl>N,X=map(int,input().split())<nl>P=list(map(int,input.split()))<nl><nl>print(P.index(X))"}
{"in":"ｗ=４４.0 <nl>h=1.56<nl>BMI=w\/(h*h)<nl>print(BMI)","out":"w=44.0 <nl>h=1.56<nl>BMI=w\/(h*h)<nl>print(BMI)"}
{"in":"N = input()<nl>A = list(input())<nl><nl>A.sorted()<nl><nl>l = list()<nl>for i in range(N):<nl><tab>l=+i","out":"N = input()<nl>A = list(input())<nl><nl>A = sorted(A)<nl><nl>l = list()<nl>for i in range(N):<nl><tab>l=+i"}
{"in":"df=read.csv('pollen.csv')<nl>df.gead()","out":"df=pd.read_csv('pollen.csv')<nl>df.head()"}
{"in":"A,B,C=map(int,input.split())<nl>if A<=B and B<=C:<nl><tab>print(B+C)<nl>elif B<=C and B<=A:<nl><tab>print(A+C)<nl>else:<nl><tab>print(A+B)","out":"A,B,C=map(int,input().split())<nl>if A<=B and B<=C:<nl><tab>print(B+C)<nl>elif B<=C and B<=A:<nl><tab>print(A+C)<nl>else:<nl><tab>print(A+B)"}
{"in":"import pytorch_lightning as pl<nl><nl>class Net(pl.LightningModule):<nl><nl><tab><tab>def __init__(self, input_size=12, hidden_size=5, output_size=1, batch_size=10):<nl><tab><tab><tab><tab>super(Net, self).__init__()<nl><tab><tab><tab><tab>self.fc1 = nn.Linear(input_size, hidden_size)<nl><tab><tab><tab><tab>self.fc2 = nn.Linear(hidden_size, output_size)<nl><tab><tab><tab><tab>self.batch_size = batch_size<nl><nl><tab><tab>def forward(self, x):<nl><tab><tab><tab><tab>x = self.fc1(x)<nl><tab><tab><tab><tab>x = F.relu(x)<nl><tab><tab><tab><tab>x = self.fc2(x)<nl><tab><tab><tab><tab>return x<nl><nl>#目的関数<nl>class Net(pl.LightningModule):<nl><nl><tab><tab>#　... 追加する<nl><nl><tab><tab>def lossfun(self, y, t):<nl><tab><tab><tab><tab>return F.mse_loss(y, t) # 平均ニ乗誤差<nl><nl>#最適化手法<nl>optimizer = torch.optim.SGD(model.parameters(), lr=0.1) #parameters : 重みつけてる？, lr : どのくらいずらすか<nl>optimizer","out":"import pytorch_lightning as pl<nl><nl>class Net(pl.LightningModule):<nl><nl><tab><tab>def _init__(self, input_size=12, hidden_size=5, output_size=1, batch_size=10):<nl><tab><tab><tab><tab>super(Net, self).__init__()<nl><tab><tab><tab><tab>self.fc1 = nn.Linear(input_size, hidden_size)<nl><tab><tab><tab><tab>self.fc2 = nn.Linear(hidden_size, output_size)<nl><tab><tab><tab><tab>self.batch_size = batch_size<nl><nl><tab><tab>def forward(self, x):<nl><tab><tab><tab><tab>x = self.fc1(x)<nl><tab><tab><tab><tab>x = F.relu(x)<nl><tab><tab><tab><tab>x = self.fc2(x)<nl><tab><tab><tab><tab>return x<nl><nl>#目的関数<nl>class Net(pl.LightningModule):<nl><nl><tab><tab>#<tab>... 追加する<nl><nl><tab><tab>def lossfun(self, y, t):<nl><tab><tab><tab><tab>return F.mse_loss(y, t) # 平均ニ乗誤差<nl><nl>#最適化手法<nl>optimizer = torch.optim.SGD(model.parameters(), lr=0.1) #parameters : 重みつけてる?, lr : どのくらいずらすか<nl>optimizer"}
{"in":"from numpy import linalg LA<nl>LA.norm(a)","out":"from numpy import linalg.LA<nl>LA.norm(a)"}
{"in":"[ ] df .head()","out":"df.head()"}
{"in":"for col　in df. columns:('住宅価格')<nl><tab><tab>r,p=pearsor(df[col],df['住宅価格'])<nl><tab><tab>print(f'相関係数[col]-住宅価格: {r}')","out":"for col<tab>in df. columns:('住宅価格')<nl><tab><tab>r,p=pearsor(df[col],df['住宅価格'])<nl><tab><tab>print(f'相関係数[col]-住宅価格: {r}')"}
{"in":"print(い)","out":"print(\"い\")"}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc274\/tasks\/abc274_a<nl><nl>A, B = map(int,input().split())<nl>S = B\/A<nl>print(round(S,3)","out":"# kogi https:\/\/atcoder.jp\/contests\/abc274\/tasks\/abc274_a<nl><nl>A, B = map(int,input().split())<nl>S = B\/A<nl>print(round(S,3))"}
{"in":"print(df[母学歴].value_counts())","out":"print(df[\"母学歴\"].value_counts())"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc231\/tasks\/abc231_a<nl><nl>d = int(input())<nl>print(d\/10","out":"#kogi https:\/\/atcoder.jp\/contests\/abc231\/tasks\/abc231_a<nl><nl>d = int(input())<nl>print(d\/10)"}
{"in":"de.columns","out":"df.columns"}
{"in":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df(['kcal','\tpayday']) <nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()<nl>","out":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df[['kcal','<tab><tab><tab><tab>payday']]<nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()<nl>"}
{"in":"df = pd,read_csv(\"file1.csv\")","out":"df = pd.read_csv(\"file1.csv\")"}
{"in":"piq = 0,0<nl>for k range(1,10,2):<nl><tab><tab>pi += ((-1)**(k+1) * (1\/k))<nl>print(pi*4)","out":"piq = 0,0<nl>for k in range(1,10,2):<nl><tab><tab>pi += ((-1)**(k+1) * (1\/k))<nl>print(pi*4)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_a<nl><nl>a, b, c, d = map(int, input(), split())<nl>print(a,b,c,d)<nl>print('Takahashi')","out":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_a<nl><nl>a, b, c, d = map(int, input().split())<nl>print(a,b,c,d)<nl>print('Takahashi')"}
{"in":"print(Hello!)","out":"print(\"Hello!\")"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split()))<nl>C=[0]*N<nl><nl>C[0]=0<nl>C[1]=abs(h[1]-h[0]):<nl>for i<tab>in range(2,N):<nl>C1=C[i-2]+abs(h[i]-h[i-2])<nl>C2=C[i-1]+abs(h[i]-h[i-1])<nl>C[i]=min(C1,C2)<nl>print(C[N-1])<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split()))<nl>C=[0]*N<nl><nl>C[0]=0<nl>C[1]=abs(h[1]-h[0])<nl>for i<tab>in range(2,N):<nl><tab>C1=C[i-2]+abs(h[i]-h[i-2])<nl><tab>C2=C[i-1]+abs(h[i]-h[i-1])<nl><tab>C[i]=min(C1,C2)<nl>print(C[N-1])<nl>"}
{"in":"M = 8<nl>N = 5<nl>lives = np.random.randint(0,2. M+N)<nl>lives = lives.reshape(M,N)","out":"M = 8<nl>N = 5<nl>lives = np.random.randint(0, 2, M+N)<nl>lives = lives.reshape(M,N)"}
{"in":"import matplotlib.pyplot as plt<nl>H =[]<nl>for w in range(40,100,5):<nl><tab><tab>h = math.sqrt(w\/22.0)<nl><tab><tab>H.append(h)<nl><nl>plt\/plot(range(40,100,5),H)<nl>plt.show()","out":"import matplotlib.pyplot as plt<nl>H =[]<nl>for w in range(40,100,5):<nl><tab><tab>h = math.sqrt(w\/22.0)<nl><tab><tab>H.append(h)<nl><nl>plt.plot(range(40,100,5),H)<nl>plt.show()"}
{"in":"df.drop('黒人', axis = 1, inplace = True","out":"df.drop('黒人', axis = 1, inplace = True)"}
{"in":"df.sort_values(by='平均気温'ascending=True).head(5)","out":"df.sort_values(by='平均気温', ascending=True).head(5)"}
{"in":"def print_sim(index):<nl><tab><tab>vec = bags.toarray()<nl><tab><tab>similarity = cosine_similarity(vec[index:index+1], vec)[0]<nl><tab><tab>top10 = np.argsort(similarity)[::-1][:10]<nl><tab><tab>for i in top10:<nl><tab><tab><tab><tab>print(similarity[i], df['コメント'][i])<nl>print_sim(1)","out":"def print_sim(index):<nl><tab><tab>vec = bags.toarray()<nl><tab><tab>similarity = cosine_similarity(vec[index:index+1], vec)[0]<nl><tab><tab>top10 = np.argsort(similarity)[::-1][:10]<nl><tab><tab>for i in top10:<nl><tab><tab><tab><tab>print(similarity[i], df['コメント忘れ'][i])<nl>print_sim(1)"}
{"in":"import matplotlib.pyplot as plt <nl>H=[] #リスト<nl>for w in range(40,100,5)<nl><tab><tab>h=math.sqrt(w\/22.0)<nl><tab><tab>H.append(h)<nl><nl>plt.plot(range(40,100,5),H) #グラフを書く<nl>plt.show()","out":"import matplotlib.pyplot as plt <nl>H=[] #リスト<nl>for w in range(40,100,5):<nl><tab><tab>h=math.sqrt(w\/22.0)<nl><tab><tab>H.append(h)<nl><nl>plt.plot(range(40,100,5),H) #グラフを書く<nl>plt.show()"}
{"in":"plt.figure(figsize=(8,8))<nl>plt.scatter(df['部屋数'],df['住宅価格'],alpha=0.5,color=('yellow')<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()","out":"plt.figure(figsize=(8,8))<nl>plt.scatter(df['部屋数'],df['住宅価格'],alpha=0.5,color='yellow')<nl>plt.xlabel('部屋数')<nl>plt.ylabel('住宅価格')<nl>plt.show()"}
{"in":"df = read_csv('file.csv', sep=',')<nl>df.head(5)","out":"df = pd.read_csv('file.csv', sep=',')<nl>df.head(5)"}
{"in":"import math<nl>for w in range(45, 100, 5):<nl><tab>h = math.sqrt(w \/ 22)<nl><tab>print(\"体重\"w , \"身長\"h)","out":"import math<nl>for w in range(45, 100, 5):<nl><tab>h = math.sqrt(w \/ 22)<nl><tab>print(\"体重\", w , \"身長\"h)"}
{"in":"train[\"Age\"] = train[\"Age\"].fillna(train[\"Age\"].median())<nl>train[\"Embarked\"] = train[\"Embarked\"].fillna(\"S\"))","out":"train[\"Age\"] = train[\"Age\"].fillna(train[\"Age\"].median())<nl>train[\"Embarked\"] = train[\"Embarked\"].fillna(\"S\")"}
{"in":"heights = [130,140,150,160,170,180,190,200]<nl>BMI=18<nl>newdata18=[]<nl>for w in weights:<nl><tab> w= BMI*(h**2) <nl><tab> newdata18.appdend(w)<nl>print(heights)<nl>print(newdata18)","out":"heights = [130,140,150,160,170,180,190,200]<nl>BMI=18<nl>newdata18=[]<nl>for w in weights:<nl><tab> w= BMI*(h**2) <nl><tab> newdata18.append(w)<nl>print(heights)<nl>print(newdata18)"}
{"in":"for i in range(1,10000,1000)<nl><tab><tab>print(f'N={i}' , calc_pi(i))","out":"for i in range(1,10000,1000):<nl><tab><tab>print(f'N={i}' , calc_pi(i))"}
{"in":"N=int(input())<nl>S=list(map(int, input().split()))<nl>for a in range(1,10):<nl><tab>for a in range(1,10):<nl><tab><tab>S=4*a*b+3*a+3*b<nl><tab><tab>print(f'(a,b)=({a},{b})',S)","out":"N=int(input())<nl>S=list(map(int, input().split()))<nl>for a in range(1,10):<nl><tab>for b in range(1,10):<nl><tab><tab>S=4*a*b+3*a+3*b<nl><tab><tab>print(f'(a,b)=({a},{b})',S)"}
{"in":"d = 2005514<nl>while d >=10:<nl>D = list(map(int,str(d)))<nl>print(D)<nl>d = sum(D)<nl>print(d)","out":"d = 2005514<nl>while d >=10:<nl><tab>D = list(map(int,str(d)))<nl><tab>print(D)<nl><tab>d = sum(D)<nl><tab>print(d)"}
{"in":"[animal.leg() for animal in animals:]<nl><tab>","out":"[animal.leg() for animal in animals]<nl><tab>"}
{"in":"df.drop(黒人 , axis=1, inplace = True)<nl>df. head(10)","out":"df.drop(\"黒人\" , axis=1, inplace = True)<nl>df. head(10)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split()))<nl>C = [0]*N<nl><nl>C[0]=0<nl>C[1]=abs(h[1]-h[0])<nl><nl>for i in range(2,N):<nl> C1=C[i-2]+abs(h[i]-h[i-2])<nl> C2=C{i-1}+abs(h[i]-h[i-1])<nl> C[i]=min(C1,C2)<nl>print(C[N-1])","out":"#kogi https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_a<nl>N = int(input())<nl>h = list(map(int, input().split()))<nl>C = [0]*N<nl><nl>C[0]=0<nl>C[1]=abs(h[1]-h[0])<nl><nl>for i in range(2,N):<nl> C1=C[i-2]+abs(h[i]-h[i-2])<nl> C2=C[i-1]+abs(h[i]-h[i-1])<nl> C[i]=min(C1,C2)<nl>print(C[N-1])"}
{"in":"animals = [Chikin(),Sheep(),Dog('Hachi')]","out":"animals = [Chiken(),Sheep(),Dog('Hachi')]"}
{"in":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df['soldout','kcal','payday','temperature']<tab># 価格以外を全て説明変数に<nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()","out":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df[['soldout','kcal','payday','temperature']]<tab># 価格以外を全て説明変数に<nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc149\/tasks\/abc149_a<nl><nl>A,B=int,input().split()<nl>D=A−B<nl>print(32**D)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc149\/tasks\/abc149_a<nl><nl>A,B=map(int,input().split())<nl>D=A−B<nl>print(32**D)"}
{"in":"if BMI < 18.50:<nl><tab>print(\"低体重\")<nl>else BMI >= 18.50:<nl><tab> print(\"低体重でない\")","out":"if BMI < 18.50:<nl><tab>print(\"低体重\")<nl>else:<nl><tab>print(\"低体重でない\")"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl>A,B = map(int, input().split())<nl><nl>ans = ((A-B)\/3+B)<nl>print(ans))","out":"#kogi https:\/\/atcoder.jp\/contests\/abc211\/tasks\/abc211_a<nl>A,B = map(int, input().split())<nl><nl>ans = ((A-B)\/3+B)<nl>print(ans)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc200\/tasks\/abc200_a<nl>N = int(input())<nl>#if 1 <= N <= 100:<nl>#<tab>print(1)<nl>#if 100 <= N <= 200:<nl>#<tab>print(2)<nl>inport math<nl>print(math.ceil())","out":"#kogi https:\/\/atcoder.jp\/contests\/abc200\/tasks\/abc200_a<nl>N = int(input())<nl>#if 1 <= N <= 100:<nl>#<tab>print(1)<nl>#if 100 <= N <= 200:<nl>#<tab>print(2)<nl>import math<nl>print(math.ceil())"}
{"in":"weight=[40,45,50,55,60,65,70]<nl>for x in weight:<nl><tab>print(w,BMI)=x\/1.6**2<nl><tab>","out":"weight=[40,45,50,55,60,65,70]<nl>for x in weight:<nl><tab>print(w,BMI)<nl><tab>"}
{"in":"N,M=map(int,input().split())<nl>K=[]<nl>for i in range(M):<nl><tab>AB=list(map(int,input().split()))<nl><tab>K.appned(AB)<nl>for x in range(1,M+1):<nl><tab>a=[]<nl><tab>for y in range(M):<nl><tab><tab>if x==K[y][0]:<nl><tab><tab><tab>a.append(K[y][1])<nl><tab>a.sort()<nl><tab>if len(a)==0:<nl><tab><tab>print(0)<nl><tab>else:<nl><tab><tab>for i in range(len(a)):<nl><tab><tab><tab>print(a[i],end='')","out":"N,M=map(int,input().split())<nl>K=[]<nl>for i in range(M):<nl><tab>AB=list(map(int,input().split()))<nl><tab>K.append(AB)<nl>for x in range(1,M+1):<nl><tab>a=[]<nl><tab>for y in range(M):<nl><tab><tab>if x==K[y][0]:<nl><tab><tab><tab>a.append(K[y][1])<nl><tab>a.sort()<nl><tab>if len(a)==0:<nl><tab><tab>print(0)<nl><tab>else:<nl><tab><tab>for i in range(len(a)):<nl><tab><tab><tab>print(a[i],end='')"}
{"in":"import numpy as np<nl>import pandas as pd<nl>import matplotlib.pyplot as plt<nl>import seaborn as sns<nl>from sklearn.tree import DecisionTreeRegressor<nl>from sklearn.ensemble import RandomForestClassifier<nl>from sklearn import preprocessing<nl>from sklearn.model_selection import ShuffleSplit<nl>from sklearn.ensemble import RandomForestClassifier <nl>from sklearn.metrics import confusion_matrix from sklearn.metrics import accuracy_score<nl> <nl>get_ipython().magic('matplotlib inline')","out":"import numpy as np<nl>import pandas as pd<nl>import matplotlib.pyplot as plt<nl>import seaborn as sns<nl>from sklearn.tree import DecisionTreeRegressor<nl>from sklearn.ensemble import RandomForestClassifier<nl>from sklearn import preprocessing<nl>from sklearn.model_selection import ShuffleSplit<nl>from sklearn.ensemble import RandomForestClassifier <nl>from sklearn.metrics import confusion_matrix <nl>from sklearn.metrics import accuracy_score<nl> <nl>get_ipython().magic('matplotlib inline')"}
{"in":"import math<nl>n=10000<nl>S=-1<nl>for i in<tab>range(n):<nl><tab>S+=-(-1)**(i)\/(2*i-1)<nl>print(S)<nl>print((pi.math)\/4)","out":"import math<nl>n=10000<nl>S=-1<nl>for i in<tab>range(n):<nl><tab>S+=-(-1)**(i)\/(2*i-1)<nl>print(S)<nl>print((math.pi)\/4)"}
{"in":"X = df[['築年']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize(6,6))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)","out":"X = df[['築年']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl>plt.figure(figsize=(6,6))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)"}
{"in":"w=22*h**2<nl>print（f'平均体重:{(平均体重:2f,w}')","out":"w=22*h**2<nl>print(f'平均体重:{(平均体重:2f,w}')"}
{"in":"def g(x):<nl><tab>str(g(x))<nl><tab>g(x)=[::-1]<nl><tab>return g(x)","out":"def g(x):<nl><tab>x = str(x)<nl><tab>x=x[::-1]<nl><tab>return x"}
{"in":"df.corr('降水量', 'スギ花粉飛散量'))","out":"df.corr('降水量', 'スギ花粉飛散量')"}
{"in":"if BMI >25.00 :<nl><tab>print('太り過ぎ')<nl><tab>else :<nl><tab><tab>print('太り過ぎではない')","out":"if BMI >25.00 :<nl><tab>print('太り過ぎ')<nl>else :<nl><tab>print('太り過ぎではない')"}
{"in":"d = 20060720<nl>　while d => 10: #二桁の時は繰り返す<nl>D = List(map(int,str(d)))<nl>print(D)<nl>d = sum(D)<nl>print(d)<nl>if d == 11 or d == 22 or d == 33 or d== 44:<nl><tab>break #条件を満たしたらループを抜ける<nl><tab> <nl>print(\"ソールナンバー：，ⅾ\")","out":"d = 20060720<nl><tab>while d => 10: #二桁の時は繰り返す<nl>D = List(map(int,str(d)))<nl>print(D)<nl>d = sum(D)<nl>print(d)<nl>if d == 11 or d == 22 or d == 33 or d== 44:<nl><tab>break #条件を満たしたらループを抜ける<nl><tab> <nl>print(\"ソールナンバー:,ⅾ\")"}
{"in":"d = 2008_01_13<nl>while d >=10: #二桁の時は繰り返す<nl>　　D = list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d = sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d == 11 or d == 22 or d == 33 or d == 44 :<nl><tab><tab><tab>break #条件を満たしたらループを抜ける","out":"d = 2008_01_13<nl>while d >=10: #二桁の時は繰り返す<nl><tab><tab>D = list(map(int,str(d)))<nl><tab><tab>print(D)<nl><tab><tab>d = sum(D)<nl><tab><tab>print(d)<nl><tab><tab>if d == 11 or d == 22 or d == 33 or d == 44 :<nl><tab><tab><tab>break #条件を満たしたらループを抜ける"}
{"in":"df = pollen.csv<nl>df.head()","out":"df = pd.read_csv(\"pollen.csv\")<nl>df.head()"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl>A, B = map(int, input(), split())<nl>D = A-B<nl>print(D\/A*100)<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl>a,b=map(int,input().split())<nl>c,d=map(int,input().split())<nl><nl>ans=a*b-c*d<nl>"}
{"in":"N,A,B=map(int,input().split())<nl><nl>##繰り返し？<nl>x==1<nl>def f(x):<nl><tab>return A<=sum(list(map(int, str(N))))<=B<nl><tab>x+=1<nl><tab>sum=sum+x<nl><nl>print(sum)","out":"N,A,B=map(int,input().split())<nl><nl>##繰り返し?<nl>x==1<nl>def f(x):<nl><tab>return A<=sum(list(map(int, str(N))))<=B<nl><tab>x+=1<nl><tab>sum=sum+x<nl><nl>print(sum)"}
{"in":"N=int(input())<nl>A,B,C=[],[],[]<nl><nl>for _ in range(N):<nl><tab>a,b=map(int, onput().split())<nl><tab>A.append(a)<nl><tab>B.append(b)<nl><tab>C.append(a+b)<nl><nl>for i,a in enumerate(A):<nl><tab>for j,b in enumerate(B):<nl><tab><tab>if i != j:<nl><tab><tab><tab>C.append(max(a, b))<nl><nl>print(min(C))","out":"N=int(input())<nl>A,B,C=[],[],[]<nl><nl>for<tab>in range(N):<nl><tab>a,b=map(int, input().split())<nl><tab>A.append(a)<nl><tab>B.append(b)<nl><tab>C.append(a+b)<nl><nl>for i,a in enumerate(A):<nl><tab>for j,b in enumerate(B):<nl><tab><tab>if i != j:<nl><tab><tab><tab>C.append(max(a, b))<nl><nl>print(min(C))"}
{"in":"df3 = df3.drop(5, axis=0)<nl>df3","out":"df3 = df3.drop(5, axis=1)<nl>df3"}
{"in":"w = 45.0<nl>h = 1.55<nl>BMI = w \/ h**2；<nl><tab><tab>print(\"BMI\")","out":"w = 45.0<nl>h = 1.55<nl>BMI = w \/ h**2<nl>print(\"BMI\")"}
{"in":"def func(k):<nl><tab>if k=0:<nl><tab><tab>print(1)<nl><tab>else:<nl><tab><tab>a = k*func(k-1)<nl><tab>return a<nl>N=int(input())<nl>func(N)","out":"def func(k):<nl><tab>if k==0:<nl><tab><tab>print(1)<nl><tab>else:<nl><tab><tab>a = k*func(k-1)<nl><tab>return a<nl>N=int(input())<nl>func(N)"}
{"in":"N = int(input())<nl>A = list(map(int,input().split()))<nl>X = int(input())<nl><nl>sumA = sum(A)<nl>base = X \/\/ sumA<nl>reminder = X % sumA<nl><nl>def count(A,reminder):<nl><tab><tab>for i.a in enumerate(A):<nl><tab><tab><tab><tab>reminder = reminder - A<nl><tab><tab><tab><tab>if reminder < 0:<nl><tab><tab><tab><tab><tab><tab>return i+1<nl><tab><tab>return len(A)<nl><nl>print(len(A)*base+count(A,reminder))","out":"N = int(input())<nl>A = list(map(int,input().split()))<nl>X = int(input())<nl><nl>sumA = sum(A)<nl>base = X \/\/ sumA<nl>reminder = X % sumA<nl><nl>def count(A,reminder):<nl><tab><tab>for i, a in enumerate(A):<nl><tab><tab><tab><tab>reminder = reminder - A<nl><tab><tab><tab><tab>if reminder < 0:<nl><tab><tab><tab><tab><tab><tab>return i+1<nl><tab><tab>return len(A)<nl><nl>print(len(A)*base+count(A,reminder))"}
{"in":"A,B=map(int,input().split)<nl>c=1<nl>d=0<nl>while c<B:<nl><tab><tab>c+=A-1<nl><tab><tab>d+=A<nl>print(d)<nl>","out":"A,B=map(int,input().split())<nl>c=1<nl>d=0<nl>while c<B:<nl><tab><tab>c+=A-1<nl><tab><tab>d+=A<nl>print(d)<nl>"}
{"in":"for colum in dfb.columns[:-1]:<nl><tab>X = df[[column]]<nl><tab>y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fit(X, y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print('決定係数(R2):', r2)","out":"for colum in df.columns[:-1]:<nl><tab>X = df[[column]]<nl><tab>y = df['住宅価格']<nl><tab>model = LinearRegression()<nl><tab>model.fit(X, y)<nl><tab>y_pred = model.predict(X)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print('決定係数(R2):', r2)"}
{"in":"rpartition<nl>pos = s.rfind('-')<nl>s[:pos], pos[pos+1:]<nl><nl>def calc(s:str)->float:<nl><tab><tab>if '-' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('-')<nl><tab><tab><tab><tab>return calc(a)-calc(b)<nl><tab><tab>if '+' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('+')<nl><tab><tab><tab><tab>return calc(a)+calc(b)<nl><tab><tab>if '\/' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('\/')<nl><tab><tab><tab><tab>return calc(a)\/calc(b)<nl><tab><tab>if '*' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('*')<nl><tab><tab><tab><tab>return calc(a)*calc(b)<nl><tab><tab>return float(s)","out":"# rpartition<nl>pos = s.rfind('-')<nl>s[:pos], pos[pos+1:]<nl><nl>def calc(s:str)->float:<nl><tab><tab>if '-' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('-')<nl><tab><tab><tab><tab>return calc(a)-calc(b)<nl><tab><tab>if '+' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('+')<nl><tab><tab><tab><tab>return calc(a)+calc(b)<nl><tab><tab>if '\/' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('\/')<nl><tab><tab><tab><tab>return calc(a)\/calc(b)<nl><tab><tab>if '*' in s:<nl><tab><tab><tab><tab>a, op, b = s.rpartition('*')<nl><tab><tab><tab><tab>return calc(a)*calc(b)<nl><tab><tab>return float(s)"}
{"in":"d = 2005514<nl>while d >=10:<nl><nl>print(D)<nl>d = sum(D)<nl>print(d)","out":"d = 2005514<nl>while d >=10:<nl><nl><tab>print(D)<nl><tab>d = sum(D)<nl><tab>print(d)"}
{"in":"df = pd.read_csv('student-mat.csv')<nl>df=sumple()","out":"df = pd.read_csv('student-mat.csv')<nl>df.sample()"}
{"in":"S = str(intput())<nl><nl>m = len(S)<nl>print(m)","out":"S = str(input())<nl><nl>m = len(S)<nl>print(m)"}
{"in":"class Duck(object):<nl><tab><tab>def face(self):<nl><tab><tab><tab><tab>return \"🦆\"<nl><tab><tab>def sound(self):<nl><tab><tab><tab><tab>return \"くわくわくわ\"<nl><tab><tab>def _repr_html_(self):<nl><tab><tab><tab><tab>return f'<img width= '200' src=\"https:\/\/emoji-img.s3.ap-northeast-1.amazonaws.com\/svg\/1f986.svg\">'","out":"class Duck(object):<nl><tab><tab>def face(self):<nl><tab><tab><tab><tab>return \"🦆\"<nl><tab><tab>def sound(self):<nl><tab><tab><tab><tab>return \"くわくわくわ\"<nl><tab><tab>def _repr_html_(self):<nl><tab><tab><tab><tab>return f'<img width= \\'200\\' src=\"https:\/\/emoji-img.s3.ap-northeast-1.amazonaws.com\/svg\/1f986.svg\">'"}
{"in":"from sklearn.model_selection import train_test_split<nl>from sklearn.metrics import accuracy_score<nl>from sklearn.metrics import precision_score<nl>from sklearn.ensemble import RandomForestClassifier<nl>from sklearn.metrics import confusion_matrix<nl>from pandas.plotting import scatter_matrix<nl><nl>random_forest = RandomForestRegressor(max_depth =2, n_estimators =30)<nl>random_forest.fit(X_train, y_train)<nl><nl>y_pred = random_forest.predict(X_test)<nl><nl>trainaccurancy_random_forest = random_forest.score(X_train, y_train)<nl>print('TA:{}'.format(trainaccurancy_random_forest))<nl><nl>accuracy_random_forest = accurancy_score(y_test, y_pred)<nl>print('A:{}'.format(accurancy_random_forest))<nl>","out":"from sklearn.model_selection import train_test_split<nl>from sklearn.metrics import accuracy_score<nl>from sklearn.metrics import precision_score<nl>from sklearn.ensemble import RandomForestClassifier<nl>from sklearn.metrics import confusion_matrix<nl>from pandas.plotting import scatter_matrix<nl><nl>random_forest = RandomForestRegressor(max_depth =2, n_estimators =30)<nl>random_forest.fit(X_train, y_train)<nl><nl>y_pred = random_forest.predict(X_test)<nl><nl>trainaccurancy_random_forest = random_forest.score(X_train, y_train)<nl>print('TA:{}'.format(trainaccurancy_random_forest))<nl><nl>accuracy_random_forest = accuracy_score(y_test, y_pred)<nl>print('A:{}'.format(accurancy_random_forest))<nl>"}
{"in":"for colmun in df.columns[:-1]:<nl><tab>X=df[[column]]<nl><tab>y=df['住宅価格']<nl><tab>model=LinearRegression()<nl><tab>model.fit(X,y)<nl><tab>y_pred=model.predict(X)<nl><tab>r2=r2_score(y,y_pred)<nl><tab>print(f'{colmn}決定係数(R2):',r2)","out":"for column in df.columns[:-1]:<nl><tab>X=df[[column]]<nl><tab>y=df['住宅価格']<nl><tab>model=LinearRegression()<nl><tab>model.fit(X,y)<nl><tab>y_pred=model.predict(X)<nl><tab>r2=r2_score(y,y_pred)<nl><tab>print(f'{colmn}決定係数(R2):',r2)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>X = int(input())<nl>if X>0:<nl><tab>X % 100 ==0:<nl><tab>print(\"Yes\")<nl><tab>else:<nl><tab><tab>print(\"No\")<nl>elif X=0:<nl><tab>print(\"No\")","out":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>X = int(input())<nl>if X>0 and X % 100 ==0:<nl><tab>print(\"Yes\")<nl>else:<nl><tab>print(\"No\")<nl>elif X=0:<nl><tab>print(\"No\")"}
{"in":"w=44.0<nl>h=1.60<nl>BMI =w\/h＊＊２<nl>print(BMI)","out":"w=44.0<nl>h=1.60<nl>BMI =w\/h**2<nl>print(BMI)"}
{"in":"math.sin(30）","out":"math.sin(math.radians(30))"}
{"in":"describe()","out":"df.describe()"}
{"in":"if BMI > 25.00 :<nl><tab><tab>print(’ふとりすぎ')<nl><tab><tab><nl>else:<nl><tab>　print('太りすぎでない')","out":"if BMI > 25.00 :<nl><tab><tab>print('ふとりすぎ')<nl><tab><tab><nl>else:<nl><tab><tab>print('太りすぎでない')"}
{"in":"# %%atcoder https:\/\/atcoder.jp\/contests\/abc192\/tasks\/abc192_c <nl><nl>def g1(x) :<nl><tab>str_x_list = list(str(x))<nl><tab>str_x_list.sort<nl><tab>ans = str_x_list.join<nl><tab>return(ans)<nl><nl><nl>N, K = map(int, input().split())<nl>print(g1(N))","out":"# %%atcoder https:\/\/atcoder.jp\/contests\/abc192\/tasks\/abc192_c <nl><nl>def g1(x) :<nl><tab>str_x_list = list(str(x))<nl><tab>str_x_list.sort<nl><tab>ans = ''.join(str_x_list)<nl><tab>return(ans)<nl><nl><nl>N, K = map(int, input().split())<nl>print(g1(N))"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc276\/tasks\/abc276_b<nl><nl>n, m = map(int, input().split())<nl>a, b = [map(int, input().split())) for _ in range(m)] <nl><nl>for i in range(1,n+1):<nl><tab>if a[i] or b[i] == i:<nl><tab><tab>s+=1<nl>print(s)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc276\/tasks\/abc276_b<nl><nl>n, m = map(int, input().split())<nl>a, b = [map(int, input().split()) for _ in range(m)] <nl><nl>for i in range(1,n+1):<nl><tab>if a[i] or b[i] == i:<nl><tab><tab>s+=1<nl>print(s)"}
{"in":"d=20090430<nl>while d >=10:#二桁の時は繰り返す<nl><tab>D=list(map(int,str(d)))<nl><tab>print(D)<nl><tab>d=sum(D)<nl><tab>print(d)<nl><tab>if d==11 or d==22 or d==33 ord==44:<nl><tab><tab>break<nl>print(\"ソウルナンバー\",d)","out":"d=20090430<nl>while d >=10:#二桁の時は繰り返す<nl><tab>D=list(map(int,str(d)))<nl><tab>print(D)<nl><tab>d=sum(D)<nl><tab>print(d)<nl><tab>if d==11 or d==22 or d==33 or d==44:<nl><tab><tab>break<nl>print(\"ソウルナンバー\",d)"}
{"in":"def f(x):<nl><tab><tab>return1\/(1+x**2)<nl>h=0.10<nl>x=0.0<nl>s = 0.0<nl>for i in range(int(1.0\/h)):<nl><tab><tab>x += h<nl><tab><tab>y = f(x)<nl><tab><tab>print(i, x, y)<nl><tab><tab>s += y * h<nl>print(s*4)","out":"def f(x):<nl><tab><tab>return 1\/(1+x**2)<nl>h=0.10<nl>x=0.0<nl>s = 0.0<nl>for i in range(int(1.0\/h)):<nl><tab><tab>x += h<nl><tab><tab>y = f(x)<nl><tab><tab>print(i, x, y)<nl><tab><tab>s += y * h<nl>print(s*4)"}
{"in":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df[df.columns[soldout,kcal,payday,temperature]]<nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()<nl>","out":"from sklearn.linear_model import LinearRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df[df.columns[\"soldout\",\"kcal\",\"payday\",\"temperature\"]]<nl>y = df['y']<nl><nl>model = LinearRegression()<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(X)<nl><nl>print('説明変数:', X.columns, '次元:', X.shape)<nl>print(\"MSE: \", mean_squared_error(y, y_pred))<nl>print('R2', r2_score(y, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()<nl>"}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc272\/tasks\/abc272_a<nl><nl>N = int(input())<nl>for i in N:<nl><tab>A = int(input())<nl><tab>a += A<nl><nl>print(a)","out":"# kogi https:\/\/atcoder.jp\/contests\/abc272\/tasks\/abc272_a<nl><nl>N = int(input())<nl>for i in range(N):<nl><tab>A = int(input())<nl><tab>a += A<nl><nl>print(a)"}
{"in":"df,head(10)","out":"df.head(10)"}
{"in":"class Ratio(object):<nl><tab>a: int<nl><tab>b:int<nl><tab>def __init__(self, a, b=1):<nl><tab><tab>self.a = a \/\/ math.gcd(a, b)<nl><tab><tab>self.b = b \/\/ math.gcd(a, b)<nl><tab><tab>def __repr__(self):<nl><tab><tab><tab>if self.b == 1:<nl><tab><tab><tab><tab>return str(self.a)<nl><tab><tab><tab>return f'[self.a]\/[self.b]'<nl><tab><tab>def add(self, x):<nl><tab><tab><tab>a = self.a<nl><tab><tab><tab>b = self.b<nl><tab><tab><tab>c = x.a<nl><tab><tab><tab>d = x.b<nl><tab><tab><tab>return Ratio(a*c, b*d)<nl>Ratio(1,2)*Ratio(1,3)","out":"class Ratio(object):<nl><tab>a: int<nl><tab>b:int<nl><tab>def _init__(self, a, b=1):<nl><tab><tab>self.a = a \/\/ math.gcd(a, b)<nl><tab><tab>self.b = b \/\/ math.gcd(a, b)<nl><tab><tab>def _repr__(self):<nl><tab><tab><tab>if self.b == 1:<nl><tab><tab><tab><tab>return str(self.a)<nl><tab><tab><tab>return f'[self.a]\/[self.b]'<nl><tab><tab>def add(self, x):<nl><tab><tab><tab>a = self.a<nl><tab><tab><tab>b = self.b<nl><tab><tab><tab>c = x.a<nl><tab><tab><tab>d = x.b<nl><tab><tab><tab>return Ratio(a*c, b*d)<nl>Ratio(1,2)*Ratio(1,3)"}
{"in":"for x in data:<nl>if x%2==0:<nl><tab>print('偶数',x)<nl>else:<nl><tab>print('奇数',x)","out":"for x in data:<nl><tab>if x%2==0:<nl><tab><tab>print('偶数',x)<nl><tab>else:<nl><tab><tab>print('奇数',x)"}
{"in":"x=2<nl>if x>0:<nl><tab>print(\"正\")<nl>else :<nl> if x==0<nl><tab><tab>print(\"ゼロ\")<nl> else:<nl><tab><tab>print(\"負\")","out":"x=2<nl>if x>0:<nl><tab>print(\"正\")<nl>else :<nl> if x==0:<nl><tab><tab>print(\"ゼロ\")<nl> else:<nl><tab><tab>print(\"負\")"}
{"in":"if BMI > 25.00 :<nl><tab>print('太り過ぎ')<nl><tab>else　:<nl><tab><tab>print('太り過ぎでない')","out":"if BMI > 25.00:<nl><tab>print('太り過ぎ')<nl>else:<nl><tab>print('太り過ぎでない')"}
{"in":"sns.kdeplot(df.groupby('学習時間').get_group(1)['G3'], shade = True, color = blue)<nl>sns.kdeplot(df.groupby('学習時間').get_group(2)['G3'], shade = True, color = red)<nl>sns.kdeplot(df.groupby('学習時間').get_group(3)['G3'], shade = True, color = green)<nl>sns.kdeplot(df.groupby('学習時間').get_group(4)['G3'], shade = True, color = orange)<nl>plt.xlabel('G3')<nl>plt.ylabel('% data distribution')<nl>plt.show()<nl>","out":"sns.kdeplot(df.groupby('学習時間').get_group(1)['G3'], shade = True, color = \"blue\")<nl>sns.kdeplot(df.groupby('学習時間').get_group(2)['G3'], shade = True, color = \"red\")<nl>sns.kdeplot(df.groupby('学習時間').get_group(3)['G3'], shade = True, color = \"green\")<nl>sns.kdeplot(df.groupby('学習時間').get_group(4)['G3'], shade = True, color = \"orange\")<nl>plt.xlabel('G3')<nl>plt.ylabel('% data distribution')<nl>plt.show()<nl>"}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl><nl>A,B,C=map(int,input().split()) #決まり文句<nl><nl>if A==B:<nl> print(C)<nl><nl>if A==C:<nl> print(B)<nl><nl> else ;<nl><tab>print(A)","out":"# kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl><nl>A,B,C=map(int,input().split()) #決まり文句<nl><nl>if A==B:<nl> print(C)<nl><nl>if A==C:<nl> print(B)<nl><nl>else:<nl><tab>print(A)"}
{"in":"#272-A<nl>N = int(input())<nl>A = list(map(int,input().split())<nl>x == 0<nl>for i in range(N):<nl><tab>n = n + A[i-1]<nl><nl>print(n)","out":"#272-A<nl>N = int(input())<nl>A = list(map(int,input().split()))<nl>x == 0<nl>for i in range(N):<nl><tab>n = n + A[i-1]<nl><nl>print(n)"}
{"in":"<nl>A,B=map(int,input().split())<nl><nl>ans<=A\/B<nl>print(ans)","out":"<nl>A,B=map(int,input().split())<nl><nl>ans=A\/B<nl>print(ans)"}
{"in":"df = pollen.csv<nl>df.head(pollen.csv)","out":"df = pd.read_csv(\"pollen.csv\")<nl>df.head()"}
{"in":"X=[]<nl>Y=[]<nl>for i in range(1,100);<nl><tab><tab>x = i \/100<nl><tab><tab>X.append(x)<nl><tab><tab>Y.append(f(x))<nl>plt.plot(X,Y)<nl>plt.xlabel('x')<nl>plt.ylabel('y')<nl>plt.show()","out":"X=[]<nl>Y=[]<nl>for i in range(1,100):<nl><tab><tab>x = i \/100<nl><tab><tab>X.append(x)<nl><tab><tab>Y.append(f(x))<nl>plt.plot(X,Y)<nl>plt.xlabel('x')<nl>plt.ylabel('y')<nl>plt.show()"}
{"in":"c = PersonWex() ","out":"c = PersonWex()"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc214\/tasks\/abc214_b<nl>S, T = map(int, input().split()) # 入力処理<nl><nl>C=0<nl>for a in range(101):<nl><tab>for b in range(101):<nl><tab><tab>for c in range(101):<nl><tab><tab><tab>a+b+c<=S and a*b*c<=T<nl><tab><tab><tab>C=C++:<nl><nl>print(C):<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc214\/tasks\/abc214_b<nl>S, T = map(int, input().split()) # 入力処理<nl><nl>C=0<nl>for a in range(101):<nl><tab>for b in range(101):<nl><tab><tab>for c in range(101):<nl><tab><tab><tab>if a+b+c<=S and a*b*c<=T:<nl><tab><tab><tab><tab>C+=1<nl><nl>print(C):<nl>"}
{"in":"def norm(x):<nl><tab>retrun sum(x*X)**0.5","out":"def norm(x):<nl><tab>return sum(x*X)**0.5"}
{"in":"d = 2005514<nl>while d >=10<nl>D = list(map(int,str(d)))<nl>print(D)<nl><nl>d = sum(D)<nl>print(d)","out":"d = 2005514<nl>while d >=10<nl><tab>D = list(map(int,str(d)))<nl><tab>print(D)<nl><nl><tab>d = sum(D)<nl>print(d)"}
{"in":"def calc(s:str) -> float:<nl><tab>return float(1+10)<nl><tab>print(calc(1+10)","out":"def calc(s:str) -> float:<nl><tab>return float(1+10)<nl><tab>print(calc(1+10))"}
{"in":"plt.plot(x=df[西暦], y=df[降水量])","out":"plt.plot(x=df[\"西暦\"], y=df[\"降水量\"])"}
{"in":"#よくある学生の間違い<nl>print(\"Hello World)","out":"#よくある学生の間違い<nl>print(\"Hello World\")"}
{"in":"for col in df. columns:('住宅価格')<nl><tab><tab>r, p = pearsonr(df[col], df['住宅価格'])<nl><tab><tab>print(f'相関係数 {col}-住宅価格: {r}')","out":"for col in df. columns:<nl><tab><tab>r, p = pearsonr(df[col], df['住宅価格'])<nl><tab><tab>print(f'相関係数 {col}-住宅価格: {r}')"}
{"in":"df.head('平均気温'=5)","out":"df['平均気温'].head(5)"}
{"in":"lives[4,7]<tab><tab>#０から数えて4行目、7列目","out":"lives[4,7]<tab><tab>#0から数えて4行目、7列目"}
{"in":"d=str(input())<nl>s=0<nl>D=list(d)<nl>for j in range(1000):<nl><tab>for i in range(len(D)):<nl><tab><tab>s+=int(D[i])<nl><tab>if s<=9:<nl><tab><tab>print(s)<nl><tab><tab>break<nl><tab>elif d==11 or d==22 or d==33 or d==44::<nl><tab><tab>print(s)<nl><tab><tab>break<nl><tab>else:<nl><tab><tab>d=str(s)<nl><tab><tab>s=0<nl><tab><tab>D=list(d)","out":"d=str(input())<nl>s=0<nl>D=list(d)<nl>for j in range(1000):<nl><tab>for i in range(len(D)):<nl><tab><tab>s+=int(D[i])<nl><tab>if s<=9:<nl><tab><tab>print(s)<nl><tab><tab>break<nl><tab>elif d==11 or d==22 or d==33 or d==44:<nl><tab><tab>print(s)<nl><tab><tab>break<nl><tab>else:<nl><tab><tab>d=str(s)<nl><tab><tab>s=0<nl><tab><tab>D=list(d)"}
{"in":"x=18.5<nl>if X > 25:<nl><tab>print(\"肥満\")<nl>else:<nl><tab>if 18.5 <= x < 25 :<nl><tab><tab>print(\"普通体重\")<nl><tab>else:<nl><tab><tab>print(\"低体重（やせ）\")","out":"x=18.5<nl>if x > 25:<nl><tab>print(\"肥満\")<nl>else:<nl><tab>if 18.5 <= x < 25 :<nl><tab><tab>print(\"普通体重\")<nl><tab>else:<nl><tab><tab>print(\"低体重(やせ)\")"}
{"in":"ｗ ＝４６．６<nl>ｈ ＝１．６１<nl>BMI ＝ ｗ ／ ｈ ＊＊ ２","out":"w =46.6<nl>h =1.61<nl>BMI = w \/ h ** 2"}
{"in":"df= 'pollen.csv'<nl>df.read_csv('pollen.csv', sep=',')","out":"df= pd.read_csv('pollen.csv', sep=',')"}
{"in":"animals=[Chikin(),Sheep(),Dog('Hachi')]","out":"animals=[Chiken(),Sheep(),Dog('Hachi')]"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl>a,b=map(int,input(),split())<nl>c,d=map(int,input(),split())<nl><nl>ans=a*b-c*d<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc184\/tasks\/abc184_a<nl><nl>a,b = map(int, input().split())<nl>c,d = map(int, input(),split())<nl>"}
{"in":"<nl>N = int(input())<nl>mount = {}<nl>for i in range(N) :<nl><tab>a, b = input().split()<nl><tab>mount[a] = int(b)<nl>sort(mount)<nl>print(mount)","out":"A,B = map(int,input().split())"}
{"in":"w = 65.0<nl>h = 1.75<nl>BMI = w \/ h ** 2<nl><nl>print('BMI', BMI)<nl><nl>if BMI < 18.5:<nl><tab><tab>print('低体重')<nl>elif BMI >=18.5 and BMI < 25.0:<nl><tab><tab>print('標準')<nl>else:<nl><tab><tab>print('太り過ぎ')<nl><nl><nl><iframe src=\"https:\/\/docs.google.com\/presentation\/d\/e\/2PACX-1vSGdLpGyEWrmtDJ3zdh02oE7PIwm1Cp_Jz4bWZd0q2mmC1Mck7219dVph070nqcow\/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"640\" height=\"389\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"><\/iframe>","out":"w = 65.0<nl>h = 1.75<nl>BMI = w \/ h ** 2<nl><nl>print('BMI', BMI)<nl><nl>if BMI < 18.5:<nl><tab><tab>print('低体重')<nl>elif BMI >=18.5 and BMI < 25.0:<nl><tab><tab>print('標準')<nl>else:<nl><tab><tab>print('太り過ぎ')<nl><nl><nl># <iframe src=\"https:\/\/docs.google.com\/presentation\/d\/e\/2PACX-1vSGdLpGyEWrmtDJ3zdh02oE7PIwm1Cp_Jz4bWZd0q2mmC1Mck7219dVph070nqcow\/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"640\" height=\"389\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"><\/iframe>"}
{"in":"x**X","out":"x**x"}
{"in":"plt.plot(weights, newdata)<nl>plt.show())","out":"plt.plot(weights, newdata)<nl>plt.show()"}
{"in":"X = df[['通勤時間']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression(x)<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(x)<nl>plt.figure(figsize=(6,6))<nl>plt.xlabel('実装')<nl>plt.ylabel('予想')<nl>plt.ylin(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R２)：', r2)<nl>","out":"X = df[['通勤時間']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression(x)<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(x)<nl>plt.figure(figsize=(6,6))<nl>plt.xlabel('実装')<nl>plt.ylabel('予想')<nl>plt.ylin(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)<nl>"}
{"in":"a=[[1,2,3],[4,5,6]]<nl>a[1][0]=0<nl>b=[([1] for i in range(2)) for j in range(3)] <nl>b=<nl>b[1][0]=2<nl>print(a,b)","out":"a=[[1,2,3],[4,5,6]]<nl>a[1][0]=0<nl>b=[([1] for i in range(2)) for j in range(3)] <nl>b[1][0]=2<nl>print(a,b)"}
{"in":"w = 45.0<nl>h = 1.55<nl>BMI = w \/ h**2 :<nl><tab><tab>print(\"BMI\")","out":"w = 45.0<nl>h = 1.55<nl>BMI = w \/ h**2<nl>print(\"BMI\")"}
{"in":"from scipy.stats import pearsonr<nl><nl>rho, ? = pearsonr(df['降水量'],df['スギ花粉飛散量'])<nl><nl>print(rho)","out":"from scipy.stats import pearsonr<nl><nl>rho, _ = pearsonr(df['降水量'],df['スギ花粉飛散量'])<nl><nl>print(rho)"}
{"in":"x=w\/h**2<nl>w=90<nl>h=1.6<nl>if x>18.5:<nl><tab>print(\"低体重\")<nl>else:<nl><tab>else:<nl><tab><tab>if x>=25:<nl><tab><tab><tab>print(\"肥満\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"普通体重\")<nl> ","out":"x=w\/h**2<nl>w=90<nl>h=1.6<nl>if x>18.5:<nl><tab>print(\"低体重\")<nl>else:<nl><tab>if x>=25:<nl><tab><tab>print(\"肥満\")<nl><tab>else:<nl><tab><tab>print(\"普通体重\")<nl> "}
{"in":"for col in df columns:<nl><tab>r,p= pearsonr(df[col],df['住宅価格'])<nl><tab>print(f'相関係数{col}-住宅価格: {r}')","out":"for col in df.columns:<nl><tab>r,p= pearsonr(df[col],df['住宅価格'])<nl><tab>print(f'相関係数{col}-住宅価格: {r}')"}
{"in":"w = 50<nl>h = 1.6<nl>BMI = w \/ (h**2)<nl>print(BMI)<nl>print(f'BMI: {BMI:.3f}'<tab>#小数点以下３桁","out":"w = 50<nl>h = 1.6<nl>BMI = w \/ (h**2)<nl>print(BMI)<nl>print(f'BMI: {BMI:.3f}')<tab>#小数点以下3桁"}
{"in":"import matplotlib.pyplot as plt<nl>H=[]<nl>for w in range(40, 100, 5):<nl><tab>h = math.sqrt( w \/ 22.0)<nl><tab>H.append( h )<nl><tab>plt.plot(range(40, 100, 5),H):<nl><tab>plt.show()","out":"import matplotlib.pyplot as plt<nl>H=[]<nl>for w in range(40, 100, 5):<nl><tab>h = math.sqrt( w \/ 22.0)<nl><tab>H.append( h )<nl><tab>plt.plot(range(40, 100, 5),H)<nl><tab>plt.show()"}
{"in":"from sklearn.cross_decomposition import PLSRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df[[ 'temperature', 'weather','week','kcal','remarks','soldout']]<tab># 価格以外を全て説明変数に<nl>y = df['y']<nl><nl>from sklearn.model_selection import train_test_split<nl>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)<nl>Pipeli<nl>model = PLSRegression(n_components=10)<nl>model.fit(X_train, y_train)<nl><nl>y_pred = model.predict(X_test)<nl><nl>print(\"MSE(テスト):\",mean_squared_error(y_test,y_pred))<nl>print('R2(テスト):',r2_score(y_test,y_pred))<nl>print('R2(訓練):',r2_score(y_train,model.predict(X_train)))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y_test, y_pred, c='red', alpha=0.3)<nl>plt.show()","out":"from sklearn.cross_decomposition import PLSRegression<nl>from sklearn.metrics import mean_squared_error, r2_score<nl><nl>X = df[[ 'temperature', 'weather','week','kcal','remarks','soldout']]<tab># 価格以外を全て説明変数に<nl>y = df['y']<nl><nl>from sklearn.model_selection import train_test_split<nl>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)<nl># Pipeli<nl>model = PLSRegression(n_components=10)<nl>model.fit(X_train, y_train)<nl><nl>y_pred = model.predict(X_test)<nl><nl>print(\"MSE(テスト):\",mean_squared_error(y_test,y_pred))<nl>print('R2(テスト):',r2_score(y_test,y_pred))<nl>print('R2(訓練):',r2_score(y_train,model.predict(X_train)))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y_test, y_pred, c='red', alpha=0.3)<nl>plt.show()"}
{"in":"# kogi https:\/\/atcoder.jp\/contests\/abc272\/tasks\/abc272_a<nl><nl>N = int(input())<nl>for i in N:<nl><tab>A = input()<nl><tab>a += A<nl><nl>print(a)","out":"# kogi https:\/\/atcoder.jp\/contests\/abc272\/tasks\/abc272_a<nl><nl>N = int(input())<nl>for i in range(N):<nl><tab>A = input()<nl><tab>a += A<nl><nl>print(a)"}
{"in":"d=20070308<nl>while d >=10:#二桁野ときは繰り返す<tab><tab><nl>　D=list(map(int,str(d)))<nl><tab>print(D)<nl><tab>d=sum(D)<nl><tab>print(d)<nl>if d==11 or d==22 or d==33 or d==44:<nl><tab>break#条件を満たしたらループを抜ける<nl><tab>print('ソールナンバー：',d)","out":"d=20070308<nl>while d >=10:#二桁野ときは繰り返す<tab><tab><nl><tab>D=list(map(int,str(d)))<nl><tab>print(D)<nl><tab>d=sum(D)<nl><tab>print(d)<nl>if d==11 or d==22 or d==33 or d==44:<nl><tab>break#条件を満たしたらループを抜ける<nl><tab>print('ソールナンバー:',d)"}
{"in":"def g1(x):<nl><tab>int(''.join(sorted(list(str(x)),reverse=True)))<nl>def g2(x):<nl><tab>int(''.join(sorted(list(str(x)))))<nl>def f(x):<nl><tab>return g1(x)-g2(x)<nl>N,K=map(str,input().split)<nl>a=N<nl>for _ in range(K):<nl><tab>a=f(a)<nl>print(a)","out":"def g1(x):<nl><tab>int(''.join(sorted(list(str(x)),reverse=True)))<nl>def g2(x):<nl><tab>int(''.join(sorted(list(str(x)))))<nl>def f(x):<nl><tab>return g1(x)-g2(x)<nl>N,K=map(str,input().split())<nl>a=N<nl>for _ in range(K):<nl><tab>a=f(a)<nl>print(a)"}
{"in":"x = 20<nl>if x > 0: #コロン<nl><tab>print(\"正の数\")# 字下げ（インデント）<nl>else:　#そうでなければ<nl><tab>print(\"正の数でない\")","out":"x = 20<nl>if x > 0: #コロン<nl><tab>print(\"正の数\")# 字下げ(インデント)<nl>else:<tab>#そうでなければ<nl><tab>print(\"正の数でない\")"}
{"in":"<nl>N,P = map(int,input().split())<nl>a = list(map(int, input().split()))<nl>b = 0<nl>for i in range(N):<nl><tab><tab>if int(a[i-1]) < P:<nl><tab><tab><tab><tab>b += 1<nl>ptint(b)","out":"<nl>N,P = map(int,input().split())<nl>a = list(map(int, input().split()))<nl>b = 0<nl>for i in range(N):<nl><tab><tab>if int(a[i-1]) < P:<nl><tab><tab><tab><tab>b += 1<nl>print(b)"}
{"in":"plt.boxplot([df['父親の職業'])<nl>plt.grid(True)<nl>#plt.xlabel(['G1','G2','G3'])<nl>#plt.ylabel('成績')<nl>plt.show()","out":"plt.boxplot(df['父親の職業'])<nl>plt.grid(True)<nl>#plt.xlabel(['G1','G2','G3'])<nl>#plt.ylabel('成績')<nl>plt.show()"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc271\/tasks\/abc271_a<nl><nl>N=int(input())<nl><nl>A=N\/16<nl>B=N\/\/16<nl>print(AB)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc271\/tasks\/abc271_a<nl><nl>N=int(input())<nl><nl>A=N\/16<nl>B=N\/\/16<nl>print(A*B)"}
{"in":"plt.hist(df[\"部屋数\"],bins=30<nl>plt. legend([str(df[\"部屋数\"].describe())])<nl>plt.show()","out":"plt.hist(df[\"部屋数\"],bins=30)<nl>plt.legend([str(df[\"部屋数\"].describe())])<nl>plt.show()"}
{"in":"heights = [145, 150, 155, 160, 165, 170, 175, 180, 185]<nl>for h in heights<nl><tab>BMI=22<nl><tab>w=BMI*h**2","out":"heights = [145, 150, 155, 160, 165, 170, 175, 180, 185]<nl>for h in heights:<nl><tab>BMI=22<nl><tab>w=BMI*h**2"}
{"in":"data[1,2,3,4,5,7] #データ列(リスト)<nl>print(data)","out":"data=[1,2,3,4,5,7] #データ列(リスト)<nl>print(data)"}
{"in":"x=int(input())<nl>array=list(map(int,input().split()))<nl>s=0<nl>for i in range(x):<nl><tab>for k in range(1000):<nl><tab><tab>if type((i-3k)\/(3+4*k))==int:<nl><tab><tab><tab>s+=1<nl>print(x-s)","out":"x=int(input())<nl>array=list(map(int,input().split()))<nl>s=0<nl>for i in range(x):<nl><tab>for k in range(1000):<nl><tab><tab>if type((i-3*k)\/(3+4*k))==int:<nl><tab><tab><tab>s+=1<nl>print(x-s)"}
{"in":"w = 65.0<nl>h = 1.75<nl>BMI = w\/h**2<nl><nl><nl>print(\"BMI;BMI\")<nl><nl>if BMI < 18.5:<nl><tab>print(\"低体重\")<nl><tab>elif BMI>=18.5 and BMI<25.0:<nl><tab><tab>print(\"標準\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"太りすぎ\")","out":"w = 65.0<nl>h = 1.75<nl>BMI = w\/h**2<nl><nl><nl>print(\"BMI;BMI\")<nl><nl>if BMI < 18.5:<nl><tab>print(\"低体重\")<nl>elif BMI>=18.5 and BMI<25.0:<nl><tab>print(\"標準\")<nl>else:<nl><tab>print(\"太りすぎ\")"}
{"in":"950<nl>1X=int(input())<nl>if 9>=X\/\/100>=1:<nl><tab>print('Yes')<nl>else:<nl><tab>print('No')","out":"X=int(input())<nl>if 9>=X\/\/100>=1:<nl><tab>print('Yes')<nl>else:<nl><tab>print('No')"}
{"in":"y_pred = model.predict(X)<nl><nl>print(\"MSE: \", mean_squared_error(_test, y_pred))<nl>print('R2', r2_score(y_test, y_pred))","out":"y_pred = model.predict(X)<nl><nl>print(\"MSE: \", mean_squared_error(y_test, y_pred))<nl>print('R2', r2_score(y_test, y_pred))"}
{"in":"ihead boston.csv","out":"!head boston.csv"}
{"in":"w=int(input(\"体重は？(kg)\"))<nl>h**2=22\/w","out":"w=int(input(\"体重は?(kg)\"))<nl>h**2=22\/w"}
{"in":"X = df[['平均気温==24']]<nl>y = df['スギ花粉飛散量']<nl>from sklearn.linear_model import LinearRegression<nl>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)","out":"X = df[df['平均気温']==24]]<nl>y = df['スギ花粉飛散量']<nl>from sklearn.linear_model import LinearRegression<nl>model = LinearRegression()<nl>model.fit(X, y)<nl>y_pred = model.predict(X)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B,(map(int,input().split())","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B=map(int,input().split())"}
{"in":"D=int(input()()<nl>print(D\/100)","out":"D=int(input())<nl>print(D\/100)"}
{"in":"w=22*(h\/10)**","out":"w=22*(h\/10)**2"}
{"in":"import collections as co<nl>n=int(input())<nl>c=[input().split() for _ in range(n)]<nl>c1=[]<nl>def tyu(a):<nl><tab>a.sort()<nl><tab>for j in a:<nl><tab><tab>if j in [k for k,v in co.Counter(a).items() if v==2]:<nl><tab><tab><tab>a.remove(j)<nl><tab><tab><tab>a.remove(j)<nl>for i in c:<nl><tab>if i[0]==i[1]:<nl><tab><tab>tyu(i)<nl><tab><tab>if i!=[]:<nl><tab><tab><tab>c1.append(i)<nl><tab><tab>#print(i)<nl><tab>else:<nl><tab><tab>c1.append(i)<nl>print(c1)<nl>#後半<nl>x=str(min(c1[0]))<nl>y=1<nl>c1.append([max(c1[0])])<nl>for b in c1[1::]:<nl><tab>i=b<nl><tab>i.append(x)<nl><tab>if str(n+1) in i: i.remove(str(n+1))<nl><tab>i.sort()<nl><tab>if i[0]==i[1] or i[0]==i[2] or i[1]==i[2]:<nl><tab><tab>tyu(i)<nl><tab><tab>3print(i)<nl><tab><tab>if i!=[]:<nl><tab><tab><tab>x=min(i)<nl><tab><tab><tab>#print(x)<nl><tab><tab>else:<nl><tab><tab><tab>x=str(n+1)<nl><tab>else:<nl><tab><tab>x=min(i)<nl><tab><tab>i.remove(x)<nl><tab><tab>c1+=[i]<nl><tab>y+=1<nl><tab>print(c1)<nl><tab>if c1[-1]==c1[-2]: break<nl>print(y)","out":"import collections as co<nl>n=int(input())<nl>c=[input().split() for _ in range(n)]<nl>c1=[]<nl>def tyu(a):<nl><tab>a.sort()<nl><tab>for j in a:<nl><tab><tab>if j in [k for k,v in co.Counter(a).items() if v==2]:<nl><tab><tab><tab>a.remove(j)<nl><tab><tab><tab>a.remove(j)<nl>for i in c:<nl><tab>if i[0]==i[1]:<nl><tab><tab>tyu(i)<nl><tab><tab>if i!=[]:<nl><tab><tab><tab>c1.append(i)<nl><tab><tab>#print(i)<nl><tab>else:<nl><tab><tab>c1.append(i)<nl>print(c1)<nl>#後半<nl>x=str(min(c1[0]))<nl>y=1<nl>c1.append([max(c1[0])])<nl>for b in c1[1::]:<nl><tab>i=b<nl><tab>i.append(x)<nl><tab>if str(n+1) in i: i.remove(str(n+1))<nl><tab>i.sort()<nl><tab>if i[0]==i[1] or i[0]==i[2] or i[1]==i[2]:<nl><tab><tab>tyu(i)<nl><tab><tab>print(i)<nl><tab><tab>if i!=[]:<nl><tab><tab><tab>x=min(i)<nl><tab><tab><tab>#print(x)<nl><tab><tab>else:<nl><tab><tab><tab>x=str(n+1)<nl><tab>else:<nl><tab><tab>x=min(i)<nl><tab><tab>i.remove(x)<nl><tab><tab>c1+=[i]<nl><tab>y+=1<nl><tab>print(c1)<nl><tab>if c1[-1]==c1[-2]: break<nl>print(y)"}
{"in":"w = float(input('体重は？(kg): '))<nl>h = float(input('身長は？(cm): '))<nl><nl># BMIの計算<nl>h = h \/ 100.0<nl>BMI = w \/ (h * h)<nl><nl>print(f'あなたのBMIは{bmi:.3f}です。')<nl><nl>if BMI < 18.5:<nl><tab><tab>print('あなたは低体重です。')<nl>elif BMI < 25.0:<nl><tab><tab>print('あなたの体重は標準値です。')<nl>else:<nl><tab><tab>print('あなたは肥満です。')","out":"w = float(input('体重は?(kg): '))<nl>h = float(input('身長は?(cm): '))<nl><nl># BMIの計算<nl>h = h \/ 100.0<nl>BMI = w \/ (h * h)<nl><nl>print(f'あなたのBMIは{bmi:.3f}です。')<nl><nl>if BMI < 18.5:<nl><tab><tab>print('あなたは低体重です。')<nl>elif BMI < 25.0:<nl><tab><tab>print('あなたの体重は標準値です。')<nl>else:<nl><tab><tab>print('あなたは肥満です。')"}
{"in":"plt.hist(df['G3']), bins=20<nl>plt.show()","out":"plt.hist(df['G3'], bins=20)<nl>plt.show()"}
{"in":"df３.drop('身長_y', axis=1, inplace=True)<nl>df3","out":"df3.drop('身長_y', axis=1, inplace=True)<nl>df3"}
{"in":"w=44,0<nl>h=1,60<nl>BMI=w \/h＊＊2<nl>print(BMI)","out":"w=44.0<nl>h=1.60<nl>BMI=w \/h**2<nl>print(BMI)"}
{"in":"n,x=map(int,input().split())<nl>s=str(input())<nl>batu=s.count('x')<nl>maru=s.count('o')<nl>add<nl>if (maru-batu)<0:<nl><tab>print(0)<nl>elif (maru-batu)<=0:<nl><tab>print(x+maru)","out":"n,x=map(int,input().split())<nl>s=str(input())<nl>batu=s.count('x')<nl>maru=s.count('o')<nl># add<nl>if (maru-batu)<0:<nl><tab>print(0)<nl>elif (maru-batu)<=0:<nl><tab>print(x+maru)"}
{"in":"train.isnull().sum()<nl>test.ishull().sum()","out":"train.isnull().sum()<nl>test.isnull().sum()"}
{"in":"for i range(10):<nl><tab>print(\".\"):<nl><tab>for j range(10):<nl><tab><tab>print(\".\")","out":"for i in range(10):<nl><tab>print(\".\"):<nl><tab>for j in range(10):<nl><tab><tab>print(\".\")"}
{"in":"X=df['部屋数','築年']<nl>Y=['住宅価格']<nl>print(X.shape)<nl>print(Y.shape)","out":"X=df[['部屋数','築年']]<nl>Y=['住宅価格']<nl>print(X.shape)<nl>print(Y.shape)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B,(map(int,input().split())<nl><nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl> else:<nl><tab>print(A)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_a<nl>A,B=map(int,input().split())<nl><nl>if A==B:<nl><tab>print(C)<nl>elif A==C:<nl><tab>print(B)<nl>else:<nl><tab>print(A)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc233\/tasks\/abc233_a<nl>X, Y = map(int, input().split())<nl>while n = (Y - X) \/ 10:<nl><tab>if X+(10*n) >= Y:<nl><tab><tab>break<nl><tab>print(n)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc233\/tasks\/abc233_a<nl>X, Y = map(int, input().split())<nl>while n == (Y - X) \/ 10:<nl><tab>if X+(10*n) >= Y:<nl><tab><tab>break<nl><tab>print(n)"}
{"in":"head()","out":"df.head()"}
{"in":"d = 2005514<nl>while d >=10:<nl><nl>print(D)<nl><nl>d = sum(D)<nl>print(d)","out":"d = 2005514<nl>while d >=10:<nl><nl><tab>print(D)<nl><nl><tab>d = sum(D)<nl>print(d)"}
{"in":"for column in df.columns:<nl><tab><tab>rho = corr(df[column1,column2], df['住宅価格'])<nl><tab><tab>print(f'{column1,column2}-価格: ρ={rho}')<nl>","out":"for column1 in df.columns:<nl><tab><tab>rho = corr(df[column1,column2], df['住宅価格'])<nl><tab><tab>print(f'{column1,column2}-価格: ρ={rho}')<nl>"}
{"in":"h1=1.75<nl>weights = [40, 50, 60, 70]<nl>newdata1=[]<nl>for w in weights:<nl><tab><tab>BMI = w \/ (h**2)<nl><tab><tab>newdata.append(BMI1)<nl>print(weights)<nl>print(newdata)","out":"h1=1.75<nl>weights = [40, 50, 60, 70]<nl>newdata1=[]<nl>for w in weights:<nl><tab><tab>BMI = w \/ (h**2)<nl><tab><tab>newdata.append(BMI)<nl>print(weights)<nl>print(newdata)"}
{"in":"df.drop('　黒人', axis=1, inplace=True)<nl>df.head()","out":"df.drop('黒人', axis=1, inplace=True)<nl>df.head()"}
{"in":"S = list(input())<nl>S.reverse()<nl>print(S)<nl>S = _S<nl>S.replace(9,6)","out":"S = list(input())<nl>S.reverse()<nl>print(S)<nl>S = S<nl>S.replace(9,6)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc271\/tasks\/abc271_b<nl>n,q=map(int,input().split())<nl>a=list()<nl>for i in range(n):<nl><tab>a=a+list(map(int,input().split()))<nl>for j in range(q):<nl><tab>b=list(map(int,input().split()))<nl><tab>print(ab)<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc271\/tasks\/abc271_b<nl>n,q=map(int,input().split())<nl>a=list()<nl>for i in range(n):<nl><tab>a=a+list(map(int,input().split()))<nl>for j in range(q):<nl><tab>b=list(map(int,input().split()))<nl><tab>print(a*b)<nl>"}
{"in":"pd.read_csv('pollen.csv')<nl>df.head(5)","out":"df=pd.read_csv('pollen.csv')<nl>df.head(5)"}
{"in":"<nl>A,B,C = map(int, input().split())<nl><nl>list = [A,B,C]<nl>b = list.sorted()<nl><nl>print(b)<nl>#if b[2]-b[1] == b[1]-b[0]:<nl><tab>#print('Yes')<nl><nl>#else:<nl> # print('No')","out":"<nl>A,B,C = map(int, input().split())<nl><nl>list = [A,B,C]<nl>b = sorted(list)<nl><nl>print(b)<nl>#if b[2]-b[1] == b[1]-b[0]:<nl><tab>#print('Yes')<nl><nl>#else:<nl> # print('No')"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc271\/tasks\/abc271_b<nl>n,q=map(int,input().split())<nl>a=list()<nl>for i in range(n):<nl><tab>a=a+list(map(int,input().split()))<nl>for j in range(q):<nl><tab>b=list(map(int,input().split())<nl><tab>print(a[b])<nl>","out":"#kogi https:\/\/atcoder.jp\/contests\/abc271\/tasks\/abc271_b<nl>n,q=map(int,input().split())<nl>a=list()<nl>for i in range(n):<nl><tab>a=a+list(map(int,input().split()))<nl>for j in range(q):<nl><tab>b=list(map(int,input().split()))<nl><tab>print(a[b])<nl>"}
{"in":"model = FecisionTreeRegressor()<nl>model.fit(X_train, y_train)<nl><nl>y_pred = model.predict(X_test)<nl>print(\"MSE: \", mean_squared_error(y_test, y_pred))<nl>print('R2', r2_score(y_test, y_pred))<nl><nl>print('R2(訓練):', r2_score(y_train, model.predict(X_train)))<nl>print('R2(テスト):', r2_score(y_test, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()","out":"model = DecisionTreeRegressor()<nl>model.fit(X_train, y_train)<nl><nl>y_pred = model.predict(X_test)<nl>print(\"MSE: \", mean_squared_error(y_test, y_pred))<nl>print('R2', r2_score(y_test, y_pred))<nl><nl>print('R2(訓練):', r2_score(y_train, model.predict(X_train)))<nl>print('R2(テスト):', r2_score(y_test, y_pred))<nl><nl>plt.figure(figsize=(7, 7))<nl>plt.scatter(y, y_pred, c='red', alpha=0.3)<nl>plt.show()"}
{"in":"for column in df.columns[:-1]:<nl><tab>for column1 in df.columns[:-1]:<nl><tab><tab>if column==column1:<nl><tab><tab><tab>continue<nl><tab><tab>X = df[column,column1] # 説明変数df[['部屋数', '築年']]<nl><tab><tab>y = df['住宅価格']<nl><tab><tab>model = LinearRegression()<nl><tab><tab>model.fit(X, y)<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>r2 = r2_score(y, y_pred)<nl><tab><tab>print(f'{column},{column1}と住宅価格の決定係数(R2):', r2)","out":"for column in df.columns[:-1]:<nl><tab>for column1 in df.columns[:-1]:<nl><tab><tab>if column==column1:<nl><tab><tab><tab>continue<nl><tab><tab>X = df[[column,column1]] # 説明変数df[['部屋数', '築年']]<nl><tab><tab>y = df['住宅価格']<nl><tab><tab>model = LinearRegression()<nl><tab><tab>model.fit(X, y)<nl><tab><tab>y_pred = model.predict(X)<nl><tab><tab>r2 = r2_score(y, y_pred)<nl><tab><tab>print(f'{column},{column1}と住宅価格の決定係数(R2):', r2)"}
{"in":"#やってみよう<nl>x = 30<nl><nl>#y =　sin30°作成<nl>math.sin(30)<nl><nl><nl>print(y)","out":"#やってみよう<nl>x = 30<nl><nl>#y =<tab>sin30°作成<nl>math.sin(30)<nl><nl><nl>print(y)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split()) # 決まり文句<nl><nl>D = A-B<nl>print((D\/A**100)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split()) # 決まり文句<nl><nl>D = A-B<nl>print(D\/A**100)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_a<nl><nl>a, b, c, d = map(int, input(),split())<nl>print((a+b)*(c-d)<nl>print('Takahashi')","out":"#kogi https:\/\/atcoder.jp\/contests\/abc269\/tasks\/abc269_a<nl><nl>a, b, c, d = map(int, input(),split())<nl>print((a+b)*(c-d))<nl>print('Takahashi')"}
{"in":"def calc_add:<nl><tab>a=s.split(sep='+')<nl><tab>sum=0<nl><tab>for i in a:<nl><tab><tab>sum+=calc(i)<nl><tab>return sum<nl><nl>print(calc_add(\"1+10\"))","out":"def calc_add(s):<nl><tab>a=s.split(sep='+')<nl><tab>sum=0<nl><tab>for i in a:<nl><tab><tab>sum+=calc(i)<nl><tab>return sum<nl><nl>print(calc_add(\"1+10\"))"}
{"in":"<nl>S,T=map(int,input().split())<nl>for a in range(10):<nl><tab>for b in range(10):<nl><tab><tab>for c in range(10):<nl><tab><tab><tab>if a+b+c <= S and a*b*c <= T:<nl><tab><tab><tab><tab> combs.append((a,b,c))<nl>#print(combs)<nl>print(len(combs))","out":"<nl>S,T=map(int,input().split())<nl>combs = []<nl>for a in range(10):<nl><tab>for b in range(10):<nl><tab><tab>for c in range(10):<nl><tab><tab><tab>if a+b+c <= S and a*b*c <= T:<nl><tab><tab><tab><tab> combs.append((a,b,c))<nl>#print(combs)<nl>print(len(combs))"}
{"in":"X = df[['部屋数','低所得率']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression(x)<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(x)<nl>plt.figure(figsize=(6,6))<nl>plt.xlabel('実装')<nl>plt.ylabel('予想')<nl>plt.ylim(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R２)：', r2)<nl>","out":"X = df[['部屋数','低所得率']]<nl>y = df['住宅価格']<nl><nl>model = LinearRegression(x)<nl>model.fit(X, y)<nl><nl>y_pred = model.predict(x)<nl>plt.figure(figsize=(6,6))<nl>plt.xlabel('実装')<nl>plt.ylabel('予想')<nl>plt.ylim(0, 50)<nl>r2 = r2_score(y, y_pred)<nl>print('決定係数(R2):', r2)<nl>"}
{"in":"<nl>a,b=input(),split()<nl>x=0<nl><nl>for i in range(min(len(a),len(b))):<nl><nl><tab>if int(a[-i-1]+b[-i-1])>=10:<nl><tab><tab>print('Hard')<nl><tab><tab>x=1<nl><tab><tab>break<nl>if x==0:<nl><tab>print('Easy')","out":"a,b=input().split()<nl>"}
{"in":"class PersonW(object):<nl><tab>name:str<nl><tab>height:int<nl><tab>weight:float<nl><tab>def __init__(self, name, height, weight):<nl><tab><tab>self.name = name<nl><tab><tab>self.height = height<nl><tab><tab>self.weight = weight<nl><tab>def bmi(self):<nl><tab><tab>return self.weight\/(self.height)**2<nl><tab>def iwb(self):<nl><tab><tab>if self.bmi() == 22:<nl><tab><tab><tab>return self.weight()<nl><tab>def diff(self):<nl><tab><tab>","out":"class PersonW(object):<nl><tab>name:str<nl><tab>height:int<nl><tab>weight:float<nl><tab>def __init__(self, name, height, weight):<nl><tab><tab>self.name = name<nl><tab><tab>self.height = height<nl><tab><tab>self.weight = weight<nl><tab>def bmi(self):<nl><tab><tab>return self.weight\/(self.height)**2<nl><tab>def iwb(self):<nl><tab><tab>if self.bmi() == 22:<nl><tab><tab><tab>return self.weight()<nl><tab>def diff(self):<nl><tab><tab><tab>pass"}
{"in":"class Person(object):<nl><tab>def __init__(self, name, year, month, day):<nl><tab><tab>self.name = name<nl><tab><tab>self.year = year<nl><tab><tab>self.month = month<nl><tab><tab>self.day = day<nl><tab>def __repr__(self):<nl><tab><tab>return str ([self.name, self.year, self.month, self.day])<nl><tab>def age(self):<nl><tab><tab>return 2022 - self.year<nl><nl><tab>p = PersonD(\"かんな\", 1999, 2, 3)<nl><tab>p.age()","out":"class Person(object):<nl><tab>def _init__(self, name, year, month, day):<nl><tab><tab>self.name = name<nl><tab><tab>self.year = year<nl><tab><tab>self.month = month<nl><tab><tab>self.day = day<nl><tab>def _repr__(self):<nl><tab><tab>return str ([self.name, self.year, self.month, self.day])<nl><tab>def age(self):<nl><tab><tab>return 2022 - self.year<nl><nl><tab>p = PersonD(\"かんな\", 1999, 2, 3)<nl><tab>p.age()"}
{"in":"for column in len(df.columns):<nl><tab>print(column)","out":"for column in df.columns:<nl><tab>print(column)"}
{"in":"for columun in df.columns[:-1]:<nl><tab>X=df[[column]]<nl><tab>y=df['住宅価格']<nl><tab>model=LinearRegression()<nl><tab>model.fit(X,y)<nl><tab>y_pred=model.predict(X)<nl><tab>r2=r2_score(y,y_pred)<nl><tab>print(f'{column}決定係数(R2):',r2)","out":"for column in df.columns[:-1]:<nl><tab>X=df[[column]]<nl><tab>y=df['住宅価格']<nl><tab>model=LinearRegression()<nl><tab>model.fit(X,y)<nl><tab>y_pred=model.predict(X)<nl><tab>r2=r2_score(y,y_pred)<nl><tab>print(f'{column}決定係数(R2):',r2)"}
{"in":"x,y=map(int,input().split())<nl>if x == 0:<nl><tab><tab>if y == 0:<nl><tab><tab><tab><tab>print(0)<nl><tab><tab>elif y == 1:<nl><tab><tab><tab><tab>print(2)<nl><tab><tab>elif y == 2:<nl><tab><tab><tab><tab>print(1)<nl>elif x == 1:<nl><tab><tab>if y == 0:<nl><tab><tab><tab><tab>print(2)<nl><tab><tab>elif y == 1:<nl><tab><tab><tab><tab>print(1)<nl><tab><tab>elif y == 2:","out":"x,y=map(int,input().split())<nl>if x == 0:<nl><tab><tab>if y == 0:<nl><tab><tab><tab><tab>print(0)<nl><tab><tab>elif y == 1:<nl><tab><tab><tab><tab>print(2)<nl><tab><tab>elif y == 2:<nl><tab><tab><tab><tab>print(1)<nl>elif x == 1:<nl><tab><tab>if y == 0:<nl><tab><tab><tab><tab>print(2)<nl><tab><tab>elif y == 1:<nl><tab><tab><tab><tab>print(1)<nl><tab><tab>elif y == 2:<nl><tab><tab><tab><tab>pass"}
{"in":"if BMI > 25.00 :<nl><tab><tab>print('太り過ぎ')<nl><tab><tab>　print('気をつけましょう')<nl>else :<nl><tab><tab>print('太り過ぎでない')<nl><tab><tab>print('お昼を食べにいきましょう')","out":"if BMI > 25.00 :<nl><tab><tab>print('太り過ぎ')<nl><tab><tab>print('気をつけましょう')<nl>else:<nl><tab><tab>print('太り過ぎでない')<nl><tab><tab>print('お昼を食べにいきましょう')"}
{"in":"class PersonD(object):<nl><tab>def __init__(self,name,year,month,day):<nl><tab><tab>self.name=name<nl><tab><tab>self.year=year<nl><tab><tab>self.month=month<nl><tab><tab>self.day=day<nl><tab>def __repr__(self):<nl><tab><tab>return str([self.name,self.year,self.month,self.day])<nl><tab>def age(self):<nl><tab><tab>return 2022-self.year<nl><tab>def stone(self):<nl><tab><tab>return stones[self.month-1]<nl><tab>def diff(self,p):<nl><tab><tab>return abs(self.age()-p.age())<nl><tab>def is_same_month(self.p):<nl><tab><tab>return self.month==p.month","out":"class PersonD(object):<nl><tab>def __init__(self,name,year,month,day):<nl><tab><tab>self.name=name<nl><tab><tab>self.year=year<nl><tab><tab>self.month=month<nl><tab><tab>self.day=day<nl><tab>def __repr__(self):<nl><tab><tab>return str([self.name,self.year,self.month,self.day])<nl><tab>def age(self):<nl><tab><tab>return 2022-self.year<nl><tab>def stone(self):<nl><tab><tab>return stones[self.month-1]<nl><tab>def diff(self,p):<nl><tab><tab>return abs(self.age()-p.age())<nl><tab>def is_same_month(self, p):<nl><tab><tab>return self.month==p.month"}
{"in":"d = 19690405<nl>D = list(map(int str(d)))<nl>print(D)<nl>d = sum(D)<nl>print(d)","out":"d = 19690405<nl>D = list(map(int, str(d)))<nl>print(D)<nl>d = sum(D)<nl>print(d)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc233\/tasks\/abc233_a<nl>X, Y = map(int, input().split())<nl>while n = (Y - X) \/ 10:<nl>if X+(10*n) >= Y:<nl><tab><tab>break<nl><tab>print(n)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc233\/tasks\/abc233_a<nl>X, Y = map(int, input().split())<nl>while n == (Y - X) \/ 10:<nl>if X+(10*n) >= Y:<nl><tab><tab>break<nl><tab>print(n)"}
{"in":"data[1,2,3,4,5,6,7] #データ列(リスト)<nl>print(data)","out":"data=[1,2,3,4,5,6,7] #データ列(リスト)<nl>print(data)"}
{"in":"sns.set(font=\"IPAexGothic\")<tab># 文字化けしたら<nl>sns.countplot(x='G3',hue='性別', data=df) color=\"#ffadad\"<nl>plt.title('性別ごとの成績分布')<nl>plt.xlabel('G3')<nl>plt.ylabel('Count')<nl>plt.show()","out":"sns.set(font=\"IPAexGothic\")<tab># 文字化けしたら<nl>sns.countplot(x='G3',hue='性別', data=df, color=\"#ffadad\")<nl>plt.title('性別ごとの成績分布')<nl>plt.xlabel('G3')<nl>plt.ylabel('Count')<nl>plt.show()"}
{"in":"plt.figure(figuresize(6,6))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)<nl>","out":"plt.figure(figsize=(6,6))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)<nl>"}
{"in":"for column in df.columns:<nl><tab><tab>plt.hist(df[column],bins=30)<nl><tab><tab>plt.xlabel(column)<nl><tab><tab>plt.ylabel('件数'<nl><tab><tab>plt.legnend([str(df[column].describe())]))<nl><tab><tab>plt.show","out":"for column in df.columns:<nl><tab><tab>plt.hist(df[column],bins=30)<nl><tab><tab>plt.xlabel(column)<nl><tab><tab>plt.ylabel('件数')<nl><tab><tab>plt.legnend([str(df[column].describe())])<nl><tab><tab>plt.show"}
{"in":"X=[]<nl>Y=[]<nl>for i in range(0,100):<nl><tab>x= i\/100<nl><tab>X.append(x)<nl><tab>Y.sppend(f(x))<nl>plt.plot(X,Y)<nl>plt.xlabel('x')<nl>plt.ylabel('y')<nl>plt.show()","out":"X=[]<nl>Y=[]<nl>for i in range(0,100):<nl><tab>x= i\/100<nl><tab>X.append(x)<nl><tab>Y.append(f(x))<nl>plt.plot(X,Y)<nl>plt.xlabel('x')<nl>plt.ylabel('y')<nl>plt.show()"}
{"in":"<nl>!wget https:\/\/kkuramitsu.github.io\/lec\/data\/bento.csv<nl>df = read_csv('bento_train.csv')<nl>df.head()","out":"<nl>!wget https:\/\/kkuramitsu.github.io\/lec\/data\/bento.csv<nl>df = pd.read_csv('bento_train.csv')<nl>df.head()"}
{"in":"import matplotlib.pyplot as plt<nl>H=[]:<nl>for w in range(40, 100, 5):<nl><tab>h = math.sqrt( w \/ 22.0)<nl><tab>H.append( h )<nl><tab>plt.plot(range(40, 100, 5),H )<nl><tab>plt.show()","out":"import matplotlib.pyplot as plt<nl>H=[]<nl>for w in range(40, 100, 5):<nl><tab>h = math.sqrt( w \/ 22.0)<nl><tab>H.append( h )<nl><tab>plt.plot(range(40, 100, 5),H )<nl><tab>plt.show()"}
{"in":"df3.drop(5, axis=0, inplace=True)<tab>#index=5を消す<nl>df3.drop('身長_y', axis=1, inplace=True)<tab># '身長_y'を消す<nl>df3.rename(columns={'身長_x': '身長'}, inplace=True)<nl>df.reindex(columns=['名前', '出身', '年齢', '身長', '体重'])<nl>df3.head()","out":"df3.drop(5, axis=1, inplace=True)<tab>#index=5を消す<nl>df3.drop('身長_y', axis=1, inplace=True)<tab># '身長_y'を消す<nl>df3.rename(columns={'身長_x': '身長'}, inplace=True)<nl>df.reindex(columns=['名前', '出身', '年齢', '身長', '体重'])<nl>df3.head()"}
{"in":"for i in range(10):<nl><tab>print(\".\"):<nl><tab>for j in range(10):<nl><tab><tab>print(\".\"):","out":"for i in range(10):<nl><tab>print(\".\")<nl><tab>for j in range(10):<nl><tab><tab>print(\".\")"}
{"in":"ptint('0')","out":"print('0')"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>X=int(input())<nl>if X%100==0:<nl><tab>print('Yes')<nl>else;<nl>print('No')","out":"#kogi https:\/\/atcoder.jp\/contests\/abc223\/tasks\/abc223_a<nl>X=int(input())<nl>if X%100==0:<nl><tab>print('Yes')<nl>else:<nl><tab>print('No')"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split()<nl><nl>print(((A-B)\/A) *100)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc193\/tasks\/abc193_a<nl><nl>A, B = map(int, input().split())<nl><nl>print(((A-B)\/A) *100)"}
{"in":"import math<nl>print(mysqrt(2.0)<nl>print(math.sqrt(2))","out":"import math<nl>print(mysqrt(2.0))<nl>print(math.sqrt(2))"}
{"in":"for bird in CharRange('A','Z'):<nl><tab>print(bird.end='')","out":"for bird in CharRange('A','Z'):<nl><tab>print(bird,end='')"}
{"in":"t = np.linspace(-np.pi, np.pi, 100)<nl>x = np.2*cos(t)<nl>y = np.sin(2*t)<nl>plt.figure(figsize=(5,5))<nl>plt.ylim(-1.1, 1.1)<nl>plt.plot(x, y)<nl>plt.show()","out":"t = np.linspace(-np.pi, np.pi, 100)<nl>x = 2*np.cos(t)<nl>y = np.sin(2*t)<nl>plt.figure(figsize=(5,5))<nl>plt.ylim(-1.1, 1.1)<nl>plt.plot(x, y)<nl>plt.show()"}
{"in":"w = 37.6<nl>import math<nl>h = math.sqrt(w\/22)<nl>print(\"体重:\",w, \"身長:\",h)<nl><nl>for w in range(40,100,5):<nl><tab>h = math.sqrt(w \/ 22)<nl><tab><tab>print(w, h)","out":"w = 37.6<nl>import math<nl>h = math.sqrt(w\/22)<nl>print(\"体重:\",w, \"身長:\",h)<nl><nl>for w in range(40,100,5):<nl><tab>h = math.sqrt(w \/ 22)<nl><tab>print(w, h)"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc149\/tasks\/abc149_a<nl>x=int(input())<nl>if x==1:<nl><tab>print(0)<nl><tab>else:<nl><tab><tab>print(1)<nl>s=0","out":"#kogi https:\/\/atcoder.jp\/contests\/abc149\/tasks\/abc149_a<nl>x=int(input())<nl>if x==1:<nl><tab>print(0)<nl>else:<nl><tab>print(1)<nl>s=0"}
{"in":"def show():<nl><tab>print('X', X)<nl><tab>print('Y', Y)<nl><tab>print(''Z, Z)","out":"def show():<nl><tab>print('X', X)<nl><tab>print('Y', Y)<nl><tab>print(''Z\", Z)"}
{"in":"plt.plot(weights,newdata#計算したデータ列にあるものを使う,label='175cm')<nl>plt.xlabel('weight')<nl>plt.ylabel('BMI')<nl>plt.legend() #凡例を表示する<nl>plt.show()","out":"plt.plot(weights,newdata,label='175cm') #計算したデータ列にあるものを使う<nl>plt.xlabel('weight')<nl>plt.ylabel('BMI')<nl>plt.legend() #凡例を表示する<nl>plt.show()"}
{"in":"plt.figure(figsize(7,7))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)","out":"plt.figure(figsize=(7,7))<nl>plt.scatter(y, y_pred, color = 'red', alpha=0.3) <nl>plt.xlabel('実測')<nl>plt.ylabel('予測')<nl>plt.ylim(0, 50)"}
{"in":"w = 75.0<nl>h = 1.75<nl>BMI = w　\/ ( h * h )<nl><nl>print(BMI) #表示されます","out":"w = 75.0<nl>h = 1.75<nl>BMI = w<tab>\/ ( h * h )<nl><nl>print(BMI) #表示されます"}
{"in":"for column in d.columns[:-1]:<nl><tab>X=df[[column]]<nl><tab>y=df['住宅価格']<nl><tab>model=LinearRegression()<nl><tab>model.fit(X, y)<nl><tab>y_pred=model.predict(X)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print('決定係数(R2):', r2)","out":"for column in df.columns[:-1]:<nl><tab>X=df[[column]]<nl><tab>y=df['住宅価格']<nl><tab>model=LinearRegression()<nl><tab>model.fit(X, y)<nl><tab>y_pred=model.predict(X)<nl><tab>r2 = r2_score(y, y_pred)<nl><tab>print('決定係数(R2):', r2)"}
{"in":"d=int(input())<nl>while d>9:<nl><tab>D=list(map(int,str(d)))<nl><tab>d= sum(D)<nl><tab>print(d)<nl><tab>return d","out":"d=int(input())<nl>while d>9:<nl><tab>D=list(map(int,str(d)))<nl><tab>d= sum(D)<nl><tab>print(d)<nl>print(d)"}
{"in":"def calc(s: str)->float:<nl><tab>a, b = map(float, s.split('+')<nl><nl>return a+b<nl><tab><tab>","out":"def calc(s: str)->float:<nl><tab>a, b = map(float, s.split('+'))<nl><nl>return a+b<nl><tab><tab>"}
{"in":"plt.hist(df['住宅価格']),bins=30<nl>plt.xlabel('住宅価格')<nl>plt.ylabel('件数')<nl>plt.show()","out":"plt.hist(df['住宅価格'],bins=30)<nl>plt.xlabel('住宅価格')<nl>plt.ylabel('件数')<nl>plt.show()"}
{"in":"#kogi https:\/\/atcoder.jp\/contests\/abc220\/tasks\/abc220_a<nl>A,B,C=map(int,input().split())<nl>a=A\/\/C<nl>b=B\/\/C+1<nl>ok=0<nl>for i in range(a,b+1):<nl><tab>k=C*i<nl><tab>if A<=k<=B:<nl><tab><tab>print(k)<nl><tab><tab>ok+=1<nl><tab><tab>break<nl>if 0k==0:<nl><tab>print(-1)","out":"#kogi https:\/\/atcoder.jp\/contests\/abc220\/tasks\/abc220_a<nl>A,B,C=map(int,input().split())<nl>a=A\/\/C<nl>b=B\/\/C+1<nl>ok=0<nl>for i in range(a,b+1):<nl><tab>k=C*i<nl><tab>if A<=k<=B:<nl><tab><tab>print(k)<nl><tab><tab>ok+=1<nl><tab><tab>break<nl>if ok==0:<nl><tab>print(-1)"}
{"in":"N,M=map(int,input().split())<nl>l=list[map(int,input().split()) for _ in range(M)]<nl>print(l)","out":"N,M=map(int,input().split())<nl>l=list(map(int,input().split()) for _ in range(M))<nl>print(l)"}
{"in":"X_train = train[\"Age\", \"Sex\", \"Fare\"]]<nl>y_train = train[\"Survived\"]<nl>X_test = test[[\"Age\", \"Sex\", \"Fare\"]]","out":"X_train = train[[\"Age\", \"Sex\", \"Fare\"]]<nl>y_train = train[\"Survived\"]<nl>X_test = test[[\"Age\", \"Sex\", \"Fare\"]]"}
{"in":"<nl>h,w,x,y=map(int,input().split())<nl>s=[]<nl>for _ in range(h):<nl><tab>si=input()<nl><tab>si=list(si)<nl><tab>s.append(si)<nl><nl><nl>x=x-1<nl>y=y-1<nl>cnt=0<nl><nl>i=x<nl>while 0<=i<h:<nl><tab>if s[i][y]=='.':<nl><tab><tab>cnt+=1<nl><tab><tab>i=i-1<nl><tab>else:<nl><tab><tab>break<nl><nl>i=x<nl>while 0<=i<h:<nl><tab>if s[i][y]=='.':<nl><tab><tab>cnt += 1<nl><tab><tab>i=i+1<nl><tab>else:<nl><tab><tab>break<nl><nl>i=y<nl>while 0<=i<w:<nl><tab>if s[x][i]=='.':<nl><tab><tab>cnt+=1<nl><tab><tab>i=i+1<nl><tab>else:<nl><tab><tab>break<nl><nl><nl><nl>i=Y<nl>while 0<=i<w:<nl><tab>if s[x][i]=='.':<nl><tab><tab>cnt+=1<nl><tab><tab>i=i-1<nl><tab>else:<nl><tab><tab>break<nl><nl>print(cnt-3)<nl><nl><tab><tab><tab><tab><tab>","out":"<nl>h,w,x,y=map(int,input().split())<nl>s=[]<nl>for<tab>in range(h):<nl><tab>si=input()<nl><tab>si=list(si)<nl><tab>s.append(si)<nl><nl><nl>x=x-1<nl>y=y-1<nl>cnt=0<nl><nl>i=x<nl>while 0<=i<h:<nl><tab>if s[i][y]=='.':<nl><tab><tab>cnt+=1<nl><tab><tab>i=i-1<nl><tab>else:<nl><tab><tab>break<nl><nl>i=x<nl>while 0<=i<h:<nl><tab>if s[i][y]=='.':<nl><tab><tab>cnt += 1<nl><tab><tab>i=i+1<nl><tab>else:<nl><tab><tab>break<nl><nl>i=y<nl>while 0<=i<w:<nl><tab>if s[x][i]=='.':<nl><tab><tab>cnt+=1<nl><tab><tab>i=i+1<nl><tab>else:<nl><tab><tab>break<nl><nl><nl><nl>i=Y<nl>while 0<=i<w:<nl><tab>if s[x][i]=='.':<nl><tab><tab>cnt+=1<nl><tab><tab>i=i-1<nl><tab>else:<nl><tab><tab>break<nl><nl>print(cnt-3)<nl><nl><tab><tab><tab><tab><tab>"}
{"in":"w=44,0<nl>h=1,60<nl>BMI =w\/h＊＊２<nl>print(BMI)","out":"w=44.0<nl>h=1.60<nl>BMI =w\/h**2<nl>print(BMI)"}
{"in":"A=[list(map(int, input().split())) for _ in range(3)]<nl><nl>b=[]<nl>N=int(input())<nl><nl>for _ in range(N):<nl><tab><tab>b.append(int(input()))<nl><tab><tab># print(b)<nl><tab><tab>#ビンゴを判定する<nl><tab><tab>for i in range(3):<nl><tab><tab><tab>for j in range(3):<nl><tab><tab><tab><tab>if a[i][j]==b:<nl><tab><tab><tab><tab><tab>a[i][j]=0","out":"A=[list(map(int, input().split())) for<tab>in range(3)]<nl><nl>b=[]<nl>N=int(input())<nl><nl>for<tab>in range(N):<nl><tab><tab>b.append(int(input()))<nl><tab><tab># print(b)<nl><tab><tab>#ビンゴを判定する<nl><tab><tab>for i in range(3):<nl><tab><tab><tab>for j in range(3):<nl><tab><tab><tab><tab>if a[i][j]==b:<nl><tab><tab><tab><tab><tab>a[i][j]=0"}
{"in":"S = list(input())<nl>T = list(input())<nl>ans = 'No'<nl>if S == T:<nl><tab>ans = 'Yes'<nl>for i in range(lens(S)-1):<nl><tab>S[i],S[i+1] = S[i+1],S[i]<nl><tab>if S == T:<nl><tab><tab>ans = 'Yes'<nl><tab>S[i],S[i+1] = S[i+1],S[i]<nl>print(ans)","out":"S = list(input())<nl>T = list(input())<nl>ans = 'No'<nl>if S == T:<nl><tab>ans = 'Yes'<nl>for i in range(len(S)-1):<nl><tab>S[i],S[i+1] = S[i+1],S[i]<nl><tab>if S == T:<nl><tab><tab>ans = 'Yes'<nl><tab>S[i],S[i+1] = S[i+1],S[i]<nl>print(ans)"}
{"in":"for brid in CharRange('A','Z'):<nl><tab>print(brid.end='')","out":"for brid in CharRange('A','Z'):<nl><tab>print(brid,end='')"}
{"in":"データフレームをcsvファイルに保存<nl>df.to_csv('arashi.csv', index=False, encoding='utf_8_sig')<nl>","out":"#データフレームをcsvファイルに保存<nl>df.to_csv('arashi.csv', index=False, encoding='utf_8_sig')<nl>"}
{"in":"# drop（列の削除）<nl>df_train.drop([\"Name\", \"Ticket\", \"Cabin\"], axis=1, inplace=True)<nl><nl># ダミー変数化<nl>df_train = pd.get_dummies(df_train)","out":"# drop(列の削除)<nl>df_train.drop([\"Name\", \"Ticket\", \"Cabin\"], axis=1, inplace=True)<nl><nl># ダミー変数化<nl>df_train = pd.get_dummies(df_train)"}
{"in":"prnt(\"Hello World\")","out":"print(\"Hello World\")"}
{"in":"<nl>df.head(pollen.csv)","out":"<nl>df.head()"}
{"in":"w = 50<nl>h = 1.6<nl>BMI = w \/ (h**2)<nl>if BMI < 18.5:<nl><tab>print(\"低体重（やせ）\")<nl>else:<nl><tab><tab>if BMI 25 < BMI<nl><tab><tab><tab> print(\"肥満\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"普通体重\")","out":"w = 50<nl>h = 1.6<nl>BMI = w \/ (h**2)<nl>if BMI < 18.5:<nl><tab>print(\"低体重(やせ)\")<nl>else:<nl><tab><tab>if 25 < BMI<nl><tab><tab><tab> print(\"肥満\")<nl><tab><tab>else:<nl><tab><tab><tab>print(\"普通体重\")"}
{"in":"def show(lives):<nl><tab><tab>N, M = lives.shape<nl><tab><tab>for x in range(M):<nl><tab><tab><tab>for i in range(N):<nl><tab><tab><tab><tab>print(M*N,'🎃',end=')<nl><tab><tab><tab><tab># print('🎃',end='')<nl>show(lives)","out":"def show(lives):<nl><tab><tab>N, M = lives.shape<nl><tab><tab>for x in range(M):<nl><tab><tab><tab>for i in range(N):<nl><tab><tab><tab><tab>print(M*N,'🎃',end='')<nl><tab><tab><tab><tab># print('🎃',end='')<nl>show(lives)"}
{"in":"df3.drop(5, axis=0)<nl>","out":"df3.drop(5, axis=1)<nl>"}
{"in":"plt.hist(df['住宅価格']),bins=15<nl>plt.xlabel('住宅価格')<nl>plt.ylabel('件数')<nl>plt.show()","out":"plt.hist(df['住宅価格'], bins=15)<nl>plt.xlabel('住宅価格')<nl>plt.ylabel('件数')<nl>plt.show()"}
{"in":"for colum in df.columns[:-1]:<nl><tab><tab>X=df[[column]]<nl><tab><tab>y=df['住宅価格']<nl><tab><tab>model=LinearRegression()<nl><tab><tab>model.fit(X,y)<nl><tab><tab>y_pred=model.predict(X)<nl><tab><tab>r2=r2_score(y,y_pred)<nl><tab><tab>print(f'{column}決定係数(R2):',r2)","out":"for column in df.columns[:-1]:<nl><tab><tab>X=df[[column]]<nl><tab><tab>y=df['住宅価格']<nl><tab><tab>model=LinearRegression()<nl><tab><tab>model.fit(X,y)<nl><tab><tab>y_pred=model.predict(X)<nl><tab><tab>r2=r2_score(y,y_pred)<nl><tab><tab>print(f'{column}決定係数(R2):',r2)"}
{"in":"plt.plot(西暦, 降水量)<nl>df.describe()","out":"plt.plot(df[\"西暦\"], df[\"降水量\"])<nl>df.describe()"}
{"in":"df.['進学理由']","out":"df['進学理由']"}
